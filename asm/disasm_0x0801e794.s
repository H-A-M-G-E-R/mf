    .include "asm/macros.inc"

    .syntax unified

	thumb_func_start MotoSpawningFromX
MotoSpawningFromX: @ 0x0801E794
	push {lr}
	ldr r3, _0801E7BC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0801E7C8
	ldr r2, _0801E7C0 @ =gWrittenToMosaic_H
	ldr r1, _0801E7C4 @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _0801E7DC
	.align 2, 0
_0801E7BC: .4byte gCurrentSprite
_0801E7C0: .4byte gWrittenToMosaic_H
_0801E7C4: .4byte 0x083BDED6
_0801E7C8:
	ldrh r0, [r3]
	ldr r1, _0801E7E0 @ =0x00007FFF
	ands r1, r0
	adds r2, r3, #0
	adds r2, #0x24
	movs r0, #8
	strb r0, [r2]
	ldr r0, _0801E7E4 @ =0x0000FFDF
	ands r1, r0
	strh r1, [r3]
_0801E7DC:
	pop {r0}
	bx r0
	.align 2, 0
_0801E7E0: .4byte 0x00007FFF
_0801E7E4: .4byte 0x0000FFDF

	thumb_func_start MotoInit
MotoInit: @ 0x0801E7E8
	push {r4, r5, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r0, _0801E85C @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x27
	movs r3, #0
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	movs r4, #0x10
	strb r4, [r0]
	ldr r2, _0801E860 @ =sPrimarySpriteStats
	mov r5, ip
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r5, #0x14]
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r1, #3
	movs r0, #2
	strb r0, [r1]
	ldr r1, _0801E864 @ =0x082EF89C
	str r1, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r3, [r5, #0x16]
	mov r1, ip
	adds r1, #0x34
	ldrb r1, [r1]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0801E880
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0801E868
	strh r0, [r5]
	b _0801E90A
	.align 2, 0
_0801E85C: .4byte gCurrentSprite
_0801E860: .4byte sPrimarySpriteStats
_0801E864: .4byte 0x082EF89C
_0801E868:
	ldr r0, _0801E87C @ =0x0000FFA0
	mov r1, ip
	strh r0, [r1, #0xa]
	strh r4, [r1, #0xc]
	adds r0, #0x20
	strh r0, [r1, #0xe]
	movs r0, #0x40
	strh r0, [r1, #0x10]
	b _0801E890
	.align 2, 0
_0801E87C: .4byte 0x0000FFA0
_0801E880:
	ldr r0, _0801E8A8 @ =0x0000FFB0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	adds r0, #0x34
	strh r0, [r2, #0xe]
	movs r0, #0x1c
	strh r0, [r2, #0x10]
_0801E890:
	ldr r4, _0801E8AC @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0801E8B0
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0801E90A
	.align 2, 0
_0801E8A8: .4byte 0x0000FFB0
_0801E8AC: .4byte gCurrentSprite
_0801E8B0:
	movs r0, #8
	strb r0, [r1]
	bl SpriteChooseRandomXFlip
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0801E8E0
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x2c
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	b _0801E8F6
_0801E8E0:
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x2c
	str r0, [sp, #4]
	str r5, [sp, #8]
_0801E8F6:
	movs r0, #0xb
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _0801E90A
	ldr r1, _0801E914 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_0801E90A:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0801E914: .4byte gCurrentSprite

	thumb_func_start MotoFallingInit
MotoFallingInit: @ 0x0801E918
	ldr r3, _0801E934 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	ldr r0, _0801E938 @ =0x082EF944
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_0801E934: .4byte gCurrentSprite
_0801E938: .4byte 0x082EF944

	thumb_func_start MotoIdleInit
MotoIdleInit: @ 0x0801E93C
	ldr r1, _0801E950 @ =gCurrentSprite
	ldr r0, _0801E954 @ =0x082EF89C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bx lr
	.align 2, 0
_0801E950: .4byte gCurrentSprite
_0801E954: .4byte 0x082EF89C

	thumb_func_start MotoIdle
MotoIdle: @ 0x0801E958
	push {lr}
	bl unk_1129c
	ldr r0, _0801E970 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0801E978
	ldr r0, _0801E974 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _0801E9A2
	.align 2, 0
_0801E970: .4byte gPreviousVerticalCollisionCheck
_0801E974: .4byte gCurrentSprite
_0801E978:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801E9A4
	movs r2, #0xa0
	lsls r2, r2, #1
	movs r0, #0xa0
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #0xc
	bne _0801E99C
	ldr r0, _0801E998 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
	b _0801E9A2
	.align 2, 0
_0801E998: .4byte gCurrentSprite
_0801E99C:
	ldr r0, _0801E9A8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
_0801E9A2:
	strb r1, [r0]
_0801E9A4:
	pop {r0}
	bx r0
	.align 2, 0
_0801E9A8: .4byte gCurrentSprite

	thumb_func_start MotoHittingWallInit
MotoHittingWallInit: @ 0x0801E9AC
	ldr r1, _0801E9C0 @ =gCurrentSprite
	ldr r0, _0801E9C4 @ =0x082EF89C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0xa
	strb r0, [r1]
	bx lr
	.align 2, 0
_0801E9C0: .4byte gCurrentSprite
_0801E9C4: .4byte 0x082EF89C

	thumb_func_start MotoHittingWall
MotoHittingWall: @ 0x0801E9C8
	push {lr}
	bl unk_1129c
	ldr r0, _0801E9E0 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0801E9E8
	ldr r0, _0801E9E4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _0801E9F6
	.align 2, 0
_0801E9E0: .4byte gPreviousVerticalCollisionCheck
_0801E9E4: .4byte gCurrentSprite
_0801E9E8:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801E9F8
	ldr r0, _0801E9FC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
_0801E9F6:
	strb r1, [r0]
_0801E9F8:
	pop {r0}
	bx r0
	.align 2, 0
_0801E9FC: .4byte gCurrentSprite

	thumb_func_start MotoWalkingInit
MotoWalkingInit: @ 0x0801EA00
	ldr r1, _0801EA18 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0801EA1C @ =0x082EF8C4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0801EA18: .4byte gCurrentSprite
_0801EA1C: .4byte 0x082EF8C4

	thumb_func_start MotoWalking
MotoWalking: @ 0x0801EA20
	push {r4, r5, r6, lr}
	movs r6, #0
	bl unk_1129c
	ldr r5, _0801EA58 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r5]
	cmp r1, #0
	bne _0801EA90
	ldr r4, _0801EA5C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801EA60
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl CheckVerticalCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	beq _0801EA70
	cmp r0, #4
	beq _0801EA82
	cmp r0, #2
	bne _0801EAFC
	b _0801EA82
	.align 2, 0
_0801EA58: .4byte gPreviousVerticalCollisionCheck
_0801EA5C: .4byte gCurrentSprite
_0801EA60:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl CheckVerticalCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0801EA7A
_0801EA70:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _0801ED00
_0801EA7A:
	cmp r0, #5
	beq _0801EA82
	cmp r0, #3
	bne _0801EAFC
_0801EA82:
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	bl CheckVerticalCollisionAtPosition
	strh r0, [r4, #2]
	b _0801EAFC
_0801EA90:
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0801EAFC
	ldr r4, _0801EAC0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801EAC8
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0801EAC4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0801EAEC
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x40
	b _0801EAE2
	.align 2, 0
_0801EAC0: .4byte gCurrentSprite
_0801EAC4: .4byte gPreviousCollisionCheck
_0801EAC8:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0801EAF8 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0801EAEC
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x40
_0801EAE2:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0801EAFC
_0801EAEC:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #9
	strb r0, [r1]
	b _0801ED00
	.align 2, 0
_0801EAF8: .4byte gPreviousCollisionCheck
_0801EAFC:
	ldr r2, _0801EB2C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x2c
	bne _0801EB74
	adds r3, r2, #0
	adds r3, #0x30
	ldrb r4, [r3]
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	lsrs r5, r0, #0x1a
	cmp r1, #0x2c
	bhi _0801EB1C
	adds r0, r4, #1
	strb r0, [r3]
_0801EB1C:
	ldrb r0, [r3]
	cmp r0, #1
	bne _0801EB34
	ldr r0, _0801EB30 @ =0x00000155
	bl CheckPlayNotAlreadyPlayingSound
	b _0801EBDE
	.align 2, 0
_0801EB2C: .4byte gCurrentSprite
_0801EB30: .4byte 0x00000155
_0801EB34:
	cmp r0, #0x11
	bne _0801EB42
	movs r0, #0xab
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0801EBDE
_0801EB42:
	cmp r0, #0x21
	bne _0801EB50
	adds r0, r2, #0
	adds r0, #0x2e
	movs r1, #0
	strb r1, [r0]
	b _0801EB66
_0801EB50:
	cmp r0, #0x21
	bls _0801EBDE
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne _0801EBDE
_0801EB66:
	ldr r0, _0801EB70 @ =0x00000157
	bl CheckPlayNotAlreadyPlayingSound
	b _0801EBDE
	.align 2, 0
_0801EB70: .4byte 0x00000157
_0801EB74:
	cmp r0, #0x2e
	bne _0801EBDC
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0801EBAC
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801EB9C
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x29
	bl ParticleSet
	b _0801EBA6
_0801EB9C:
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x2a
	bl ParticleSet
_0801EBA6:
	ldr r0, _0801EBCC @ =0x00000159
	bl CheckPlayNotAlreadyPlayingSound
_0801EBAC:
	ldr r1, _0801EBD0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r3, r1, #0
	adds r3, #0x30
	ldrb r2, [r3]
	lsls r0, r2, #0x18
	lsrs r5, r0, #0x1a
	cmp r0, #0
	beq _0801EBD4
	subs r0, r2, #1
	strb r0, [r3]
	b _0801EBDE
	.align 2, 0
_0801EBCC: .4byte 0x00000159
_0801EBD0: .4byte gCurrentSprite
_0801EBD4:
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	b _0801EBDE
_0801EBDC:
	movs r5, #2
_0801EBDE:
	adds r0, r5, #0
	bl unk_1169c
	ldr r4, _0801EC14 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #2
	bne _0801EC9C
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0801EC0A
	movs r2, #0xa0
	lsls r2, r2, #1
	movs r0, #0xa0
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	adds r6, r0, #0
_0801EC0A:
	cmp r6, #3
	bne _0801EC18
	movs r0, #0x29
	b _0801EC76
	.align 2, 0
_0801EC14: .4byte gCurrentSprite
_0801EC18:
	cmp r6, #0xc
	bne _0801EC20
	movs r0, #3
	b _0801EC76
_0801EC20:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0801EC64
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801EC4C
	ldr r1, _0801EC44 @ =gSamusData
	ldrh r0, [r4, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0801EC48
	movs r0, #3
	b _0801EC76
	.align 2, 0
_0801EC44: .4byte gSamusData
_0801EC48:
	movs r0, #0x29
	b _0801EC76
_0801EC4C:
	ldr r1, _0801EC5C @ =gSamusData
	ldrh r0, [r4, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _0801EC60
	movs r0, #3
	b _0801EC76
	.align 2, 0
_0801EC5C: .4byte gSamusData
_0801EC60:
	movs r0, #0x29
	b _0801EC76
_0801EC64:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801EC78
	ldr r0, _0801EC90 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xc
	bls _0801EC78
	movs r0, #7
_0801EC76:
	strb r0, [r5]
_0801EC78:
	ldr r2, _0801EC94 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0801ED00
	ldr r0, _0801EC98 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	b _0801ED00
	.align 2, 0
_0801EC90: .4byte gSpriteRandomNumber
_0801EC94: .4byte gCurrentSprite
_0801EC98: .4byte 0x0000FBFF
_0801EC9C:
	cmp r0, #0x2c
	bne _0801ED00
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801ECC8
	ldr r1, _0801ECC4 @ =gSamusData
	ldrh r0, [r4, #4]
	ldrh r2, [r1, #0x16]
	cmp r0, r2
	bls _0801ECE2
	ldrh r1, [r1, #0x16]
	subs r0, r0, r1
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	ble _0801ECE2
	b _0801ECE6
	.align 2, 0
_0801ECC4: .4byte gSamusData
_0801ECC8:
	ldr r1, _0801ED08 @ =gSamusData
	ldrh r0, [r4, #4]
	ldrh r2, [r1, #0x16]
	cmp r0, r2
	bhs _0801ECE2
	ldrh r0, [r1, #0x16]
	ldrh r1, [r4, #4]
	subs r0, r0, r1
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	ble _0801ECE2
	movs r6, #1
_0801ECE2:
	cmp r6, #0
	beq _0801ED00
_0801ECE6:
	ldr r0, _0801ED0C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x2e
	strb r1, [r2]
	ldr r1, _0801ED10 @ =0x082EF92C
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	movs r1, #0
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	strb r1, [r0]
_0801ED00:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0801ED08: .4byte gSamusData
_0801ED0C: .4byte gCurrentSprite
_0801ED10: .4byte 0x082EF92C

	thumb_func_start MotoChargingInit
MotoChargingInit: @ 0x0801ED14
	ldr r1, _0801ED2C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x2a
	strb r0, [r2]
	ldr r0, _0801ED30 @ =0x082EF95C
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0801ED2C: .4byte gCurrentSprite
_0801ED30: .4byte 0x082EF95C

	thumb_func_start MotoCharging
MotoCharging: @ 0x0801ED34
	push {lr}
	ldr r0, _0801ED5C @ =gCurrentSprite
	ldrh r1, [r0, #0x16]
	adds r2, r0, #0
	cmp r1, #2
	bne _0801ED74
	ldrb r0, [r2, #0x1c]
	cmp r0, #2
	bne _0801ED74
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801ED60
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x29
	bl ParticleSet
	b _0801ED6A
	.align 2, 0
_0801ED5C: .4byte gCurrentSprite
_0801ED60:
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x2a
	bl ParticleSet
_0801ED6A:
	movs r0, #0xac
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0801EDAA
_0801ED74:
	adds r3, r2, #0
	ldrh r0, [r3, #0x16]
	cmp r0, #7
	bne _0801EDAA
	ldrb r0, [r3, #0x1c]
	cmp r0, #2
	bne _0801EDAA
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801ED98
	ldrh r0, [r3, #2]
	ldrh r1, [r3, #4]
	movs r2, #0x29
	bl ParticleSet
	b _0801EDA2
_0801ED98:
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x2a
	bl ParticleSet
_0801EDA2:
	movs r0, #0xac
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0801EDAA:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801EDCC
	ldr r0, _0801EDD0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x2c
	strb r1, [r2]
	ldr r1, _0801EDD4 @ =0x082EF9CC
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	movs r1, #0
	strh r3, [r0, #0x16]
	adds r0, #0x30
	strb r1, [r0]
_0801EDCC:
	pop {r0}
	bx r0
	.align 2, 0
_0801EDD0: .4byte gCurrentSprite
_0801EDD4: .4byte 0x082EF9CC

	thumb_func_start MotoTurningInit
MotoTurningInit: @ 0x0801EDD8
	ldr r1, _0801EDF0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _0801EDF4 @ =0x082EF8FC
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0801EDF0: .4byte gCurrentSprite
_0801EDF4: .4byte 0x082EF8FC

	thumb_func_start MotoTurning
MotoTurning: @ 0x0801EDF8
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801EE1E
	ldr r2, _0801EE24 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0801EE28 @ =0x082EF914
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0801EE1E:
	pop {r0}
	bx r0
	.align 2, 0
_0801EE24: .4byte gCurrentSprite
_0801EE28: .4byte 0x082EF914

	thumb_func_start MotoTurningEnd
MotoTurningEnd: @ 0x0801EE2C
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801EE3E
	ldr r0, _0801EE44 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0801EE3E:
	pop {r0}
	bx r0
	.align 2, 0
_0801EE44: .4byte gCurrentSprite

	thumb_func_start MotoFrontInit
MotoFrontInit: @ 0x0801EE48
	push {r4, r5, lr}
	ldr r0, _0801EEC8 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0801EECC @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0801EE74
	mov r5, ip
	ldrh r1, [r5]
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r5]
_0801EE74:
	mov r0, ip
	adds r0, #0x25
	movs r2, #0
	movs r3, #2
	strb r3, [r0]
	adds r0, #2
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	mov r4, ip
	adds r4, #0x29
	movs r0, #0x10
	strb r0, [r4]
	movs r4, #0
	ldr r0, _0801EED0 @ =0x0000FFB0
	mov r5, ip
	strh r0, [r5, #0xa]
	strh r2, [r5, #0xc]
	adds r0, #0x30
	strh r0, [r5, #0xe]
	strh r1, [r5, #0x10]
	ldr r1, _0801EED4 @ =sSecondarySpriteStats
	ldrb r0, [r5, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	mov r0, ip
	adds r0, #0x24
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldr r0, _0801EED8 @ =0x082EFA04
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r2, [r5, #0x16]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0801EEC8: .4byte gCurrentSprite
_0801EECC: .4byte gSpriteData
_0801EED0: .4byte 0x0000FFB0
_0801EED4: .4byte sSecondarySpriteStats
_0801EED8: .4byte 0x082EFA04

	thumb_func_start MotoFrontIdle
MotoFrontIdle: @ 0x0801EEDC
	push {r4, r5, r6, r7, lr}
	ldr r3, _0801EF0C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r4, [r0]
	ldr r2, _0801EF10 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r0, r6, #0
	ands r0, r1
	adds r5, r3, #0
	adds r7, r2, #0
	cmp r0, #0
	beq _0801EF14
	ldrh r1, [r5]
	adds r0, r6, #0
	orrs r0, r1
	b _0801EF1A
	.align 2, 0
_0801EF0C: .4byte gCurrentSprite
_0801EF10: .4byte gSpriteData
_0801EF14:
	ldrh r1, [r5]
	ldr r0, _0801EF60 @ =0x0000DFFF
	ands r0, r1
_0801EF1A:
	strh r0, [r5]
	ldrh r6, [r5, #0x14]
	lsls r3, r4, #3
	cmp r6, #0
	bne _0801EF64
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r0, r0, r7
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x56
	bhi _0801EF64
	movs r0, #0x57
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	strb r0, [r1]
	movs r3, #0
	mov r0, ip
	strh r6, [r0, #0x14]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x10
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r3, [r0]
	subs r0, #0x12
	strb r3, [r0]
	strh r6, [r5]
	b _0801EFC6
	.align 2, 0
_0801EF60: .4byte 0x0000DFFF
_0801EF64:
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r2, r0, r7
	ldrh r0, [r2, #2]
	strh r0, [r5, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0801EF7E
	ldrh r0, [r2, #4]
	adds r0, #0x2c
	b _0801EF82
_0801EF7E:
	ldrh r0, [r2, #4]
	subs r0, #0x2c
_0801EF82:
	strh r0, [r5, #4]
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x58
	bgt _0801EF9A
	cmp r0, #0x57
	blt _0801EF9A
	movs r0, #0
	b _0801EFC4
_0801EF9A:
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0801EFBE
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r0, r1
	b _0801EFC4
_0801EFBE:
	ldrh r1, [r5]
	ldr r0, _0801EFCC @ =0x00007FFF
	ands r0, r1
_0801EFC4:
	strh r0, [r5]
_0801EFC6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0801EFCC: .4byte 0x00007FFF

	thumb_func_start Moto
Moto: @ 0x0801EFD0
	push {r4, r5, r6, lr}
	ldr r4, _0801F008 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2c
	ldrb r1, [r5]
	movs r6, #0x7f
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #4
	bne _0801EFEC
	movs r0, #0xaa
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0801EFEC:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0801F00C
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0xb
	bl UpdateSecondarySpritesFreezeTimer
	b _0801F230
	.align 2, 0
_0801F008: .4byte gCurrentSprite
_0801F00C:
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0801F02A
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0801F02A
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
_0801F02A:
	ldr r1, _0801F044 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0x5b
	bls _0801F03A
	b _0801F230
_0801F03A:
	lsls r0, r0, #2
	ldr r1, _0801F048 @ =_0801F04C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0801F044: .4byte gCurrentSprite
_0801F048: .4byte _0801F04C
_0801F04C: @ jump table
	.4byte _0801F1BC @ case 0
	.4byte _0801F1D6 @ case 1
	.4byte _0801F1DA @ case 2
	.4byte _0801F1EA @ case 3
	.4byte _0801F1EE @ case 4
	.4byte _0801F1F4 @ case 5
	.4byte _0801F230 @ case 6
	.4byte _0801F1C2 @ case 7
	.4byte _0801F1C6 @ case 8
	.4byte _0801F1CC @ case 9
	.4byte _0801F1D0 @ case 10
	.4byte _0801F230 @ case 11
	.4byte _0801F230 @ case 12
	.4byte _0801F230 @ case 13
	.4byte _0801F230 @ case 14
	.4byte _0801F230 @ case 15
	.4byte _0801F230 @ case 16
	.4byte _0801F230 @ case 17
	.4byte _0801F230 @ case 18
	.4byte _0801F230 @ case 19
	.4byte _0801F230 @ case 20
	.4byte _0801F1FA @ case 21
	.4byte _0801F1FE @ case 22
	.4byte _0801F230 @ case 23
	.4byte _0801F230 @ case 24
	.4byte _0801F230 @ case 25
	.4byte _0801F230 @ case 26
	.4byte _0801F230 @ case 27
	.4byte _0801F230 @ case 28
	.4byte _0801F230 @ case 29
	.4byte _0801F230 @ case 30
	.4byte _0801F230 @ case 31
	.4byte _0801F230 @ case 32
	.4byte _0801F230 @ case 33
	.4byte _0801F230 @ case 34
	.4byte _0801F230 @ case 35
	.4byte _0801F230 @ case 36
	.4byte _0801F230 @ case 37
	.4byte _0801F230 @ case 38
	.4byte _0801F230 @ case 39
	.4byte _0801F230 @ case 40
	.4byte _0801F1E0 @ case 41
	.4byte _0801F1E4 @ case 42
	.4byte _0801F230 @ case 43
	.4byte _0801F1DA @ case 44
	.4byte _0801F230 @ case 45
	.4byte _0801F1DA @ case 46
	.4byte _0801F230 @ case 47
	.4byte _0801F230 @ case 48
	.4byte _0801F230 @ case 49
	.4byte _0801F230 @ case 50
	.4byte _0801F230 @ case 51
	.4byte _0801F230 @ case 52
	.4byte _0801F230 @ case 53
	.4byte _0801F230 @ case 54
	.4byte _0801F230 @ case 55
	.4byte _0801F230 @ case 56
	.4byte _0801F230 @ case 57
	.4byte _0801F230 @ case 58
	.4byte _0801F230 @ case 59
	.4byte _0801F230 @ case 60
	.4byte _0801F230 @ case 61
	.4byte _0801F230 @ case 62
	.4byte _0801F230 @ case 63
	.4byte _0801F230 @ case 64
	.4byte _0801F230 @ case 65
	.4byte _0801F230 @ case 66
	.4byte _0801F230 @ case 67
	.4byte _0801F230 @ case 68
	.4byte _0801F230 @ case 69
	.4byte _0801F230 @ case 70
	.4byte _0801F230 @ case 71
	.4byte _0801F230 @ case 72
	.4byte _0801F230 @ case 73
	.4byte _0801F230 @ case 74
	.4byte _0801F230 @ case 75
	.4byte _0801F230 @ case 76
	.4byte _0801F230 @ case 77
	.4byte _0801F230 @ case 78
	.4byte _0801F230 @ case 79
	.4byte _0801F230 @ case 80
	.4byte _0801F230 @ case 81
	.4byte _0801F230 @ case 82
	.4byte _0801F230 @ case 83
	.4byte _0801F230 @ case 84
	.4byte _0801F230 @ case 85
	.4byte _0801F230 @ case 86
	.4byte _0801F204 @ case 87
	.4byte _0801F214 @ case 88
	.4byte _0801F21A @ case 89
	.4byte _0801F21E @ case 90
	.4byte _0801F224 @ case 91
_0801F1BC:
	bl MotoInit
	b _0801F230
_0801F1C2:
	bl MotoIdleInit
_0801F1C6:
	bl MotoIdle
	b _0801F230
_0801F1CC:
	bl MotoHittingWallInit
_0801F1D0:
	bl MotoHittingWall
	b _0801F230
_0801F1D6:
	bl MotoWalkingInit
_0801F1DA:
	bl MotoWalking
	b _0801F230
_0801F1E0:
	bl MotoChargingInit
_0801F1E4:
	bl MotoCharging
	b _0801F230
_0801F1EA:
	bl MotoTurningInit
_0801F1EE:
	bl MotoTurning
	b _0801F230
_0801F1F4:
	bl MotoTurningEnd
	b _0801F230
_0801F1FA:
	bl MotoFallingInit
_0801F1FE:
	bl CurrentSpriteFalling
	b _0801F230
_0801F204:
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0xb
	bl UnfreezeSecondarySprites
	bl SpriteDyingInit
_0801F214:
	bl SpriteDying
	b _0801F230
_0801F21A:
	bl MotoInit
_0801F21E:
	bl MotoSpawningFromX
	b _0801F230
_0801F224:
	bl XParasiteInit
	ldr r1, _0801F238 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x30
	strh r0, [r1, #2]
_0801F230:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0801F238: .4byte gCurrentSprite

	thumb_func_start MotoFront
MotoFront: @ 0x0801F23C
	push {r4, r5, r6, r7, lr}
	ldr r7, _0801F2A0 @ =gSpriteData
	ldr r3, _0801F2A4 @ =gCurrentSprite
	movs r0, #0x23
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r5, r0, #0
	adds r5, #0x2c
	ldrb r4, [r5]
	movs r0, #0x7f
	adds r6, r3, #0
	adds r6, #0x2c
	ldrb r2, [r6]
	adds r1, r0, #0
	ands r1, r4
	ands r0, r2
	cmp r1, r0
	bhs _0801F28C
	movs r0, #0x80
	ands r0, r4
	strb r0, [r5]
	mov r1, ip
	ldrb r0, [r1]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r7
	adds r1, #0x2c
	ldrb r0, [r6]
	adds r0, #1
	movs r2, #0x7f
	ands r0, r2
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
_0801F28C:
	adds r0, r3, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0801F2A8
	bl SpriteUpdateFreezeTimer
	bl UpdatePrimarySpriteFreezeTimer
	b _0801F2BA
	.align 2, 0
_0801F2A0: .4byte gSpriteData
_0801F2A4: .4byte gCurrentSprite
_0801F2A8:
	adds r0, r3, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0801F2B6
	bl MotoFrontInit
_0801F2B6:
	bl MotoFrontIdle
_0801F2BA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start SavePadInit
SavePadInit: @ 0x0801F2C0
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r4, _0801F314 @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
	subs r2, #0xb
	movs r0, #0x18
	strb r0, [r2]
	movs r6, #0
	strh r1, [r4, #0xc]
	strb r6, [r4, #0x1c]
	strh r3, [r4, #0x16]
	bl EventCheckWith_SaveDisabled
	adds r5, r0, #0
	cmp r5, #0
	beq _0801F320
	ldr r0, _0801F318 @ =0x0000FFC8
	strh r0, [r4, #0xa]
	subs r0, #8
	strh r0, [r4, #0xe]
	movs r0, #0x40
	strh r0, [r4, #0x10]
	ldr r0, _0801F31C @ =0x082F158C
	str r0, [r4, #0x18]
	b _0801F360
	.align 2, 0
_0801F314: .4byte gCurrentSprite
_0801F318: .4byte 0x0000FFC8
_0801F31C: .4byte 0x082F158C
_0801F320:
	ldr r0, _0801F358 @ =0x0000FFE0
	strh r0, [r4, #0xa]
	subs r0, #0x2c
	strh r0, [r4, #0xe]
	movs r0, #0x4c
	strh r0, [r4, #0x10]
	ldr r0, _0801F35C @ =0x082F14C4
	str r0, [r4, #0x18]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x5a
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0xa
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _0801F360
	strh r5, [r4]
	b _0801F378
	.align 2, 0
_0801F358: .4byte 0x0000FFE0
_0801F35C: .4byte 0x082F14C4
_0801F360:
	ldr r3, _0801F380 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x33
	strb r2, [r0]
	subs r1, #3
	movs r0, #1
	strb r0, [r1]
_0801F378:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0801F380: .4byte gCurrentSprite

	thumb_func_start SavePad_Empty
SavePad_Empty: @ 0x0801F384
	bx lr
	.align 2, 0

	thumb_func_start SavePlatformInit
SavePlatformInit: @ 0x0801F388
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r3, _0801F474 @ =gCurrentSprite
	movs r0, #0x23
	adds r0, r0, r3
	mov r8, r0
	ldrb r7, [r0]
	ldrh r0, [r3]
	ldr r4, _0801F478 @ =0x0000FFFB
	ands r4, r0
	movs r5, #0
	movs r6, #0
	strh r4, [r3]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #8
	mov ip, r1
	mov r1, ip
	strb r1, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0801F47C @ =0x0000FFE8
	strh r0, [r3, #0xa]
	movs r0, #0x20
	strh r0, [r3, #0xc]
	ldr r0, _0801F480 @ =0x0000FFC0
	strh r0, [r3, #0xe]
	movs r0, #0x40
	strh r0, [r3, #0x10]
	ldr r0, _0801F484 @ =0x082F148C
	str r0, [r3, #0x18]
	strb r5, [r3, #0x1c]
	strh r6, [r3, #0x16]
	subs r2, #0x10
	movs r0, #2
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x31
	strb r5, [r0]
	adds r0, #2
	strb r5, [r0]
	ldrh r0, [r3, #2]
	strh r0, [r3, #6]
	subs r1, #7
	movs r0, #5
	strb r0, [r1]
	subs r1, #1
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0801F488 @ =gIsLoadingFile
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0801F466
	ldr r0, _0801F48C @ =0x0000EFFF
	ands r0, r4
	strh r0, [r3]
	adds r1, #0xd
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r5, [r0]
	mov r0, ip
	strb r0, [r2]
	ldr r1, _0801F490 @ =gSpriteData
	lsls r0, r7, #3
	subs r0, r0, r7
	lsls r0, r0, #3
	adds r4, r0, r1
	adds r2, r4, #0
	adds r2, #0x31
	strb r5, [r2]
	adds r1, #0x18
	adds r0, r0, r1
	ldr r1, _0801F494 @ =0x082F14E4
	str r1, [r0]
	strb r5, [r4, #0x1c]
	strh r6, [r4, #0x16]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	ldrb r2, [r3, #0x1f]
	mov r1, r8
	ldrb r3, [r1]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x30
	movs r1, #1
	bl SpriteSpawnSecondary
_0801F466:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0801F474: .4byte gCurrentSprite
_0801F478: .4byte 0x0000FFFB
_0801F47C: .4byte 0x0000FFE8
_0801F480: .4byte 0x0000FFC0
_0801F484: .4byte 0x082F148C
_0801F488: .4byte gIsLoadingFile
_0801F48C: .4byte 0x0000EFFF
_0801F490: .4byte gSpriteData
_0801F494: .4byte 0x082F14E4

	thumb_func_start SavePlatformFloating
SavePlatformFloating: @ 0x0801F498
	push {r4, r5, r6, lr}
	ldr r5, _0801F504 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r5
	mov ip, r0
	ldrb r2, [r0]
	ldr r3, _0801F508 @ =0x082EFA14
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0801F50C @ =0x00007FFF
	cmp r1, r0
	bne _0801F4BA
	ldrh r4, [r3]
	movs r2, #0
_0801F4BA:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	mov r0, ip
	strb r2, [r0]
	ldrh r0, [r5, #2]
	adds r0, r0, r4
	strh r0, [r5, #2]
	cmp r2, #1
	bne _0801F4D6
	movs r0, #0x86
	lsls r0, r0, #1
	bl SoundPlay
_0801F4D6:
	ldrh r2, [r5]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r2
	cmp r0, #0
	beq _0801F4FC
	ldr r0, _0801F510 @ =gSamusData
	ldrh r1, [r0, #0x18]
	adds r1, r1, r4
	strh r1, [r0, #0x18]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r2
	cmp r0, #0
	beq _0801F4FC
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_0801F4FC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0801F504: .4byte gCurrentSprite
_0801F508: .4byte 0x082EFA14
_0801F50C: .4byte 0x00007FFF
_0801F510: .4byte gSamusData

	thumb_func_start SavePlatformSinking
SavePlatformSinking: @ 0x0801F514
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r5, _0801F5CC @ =gCurrentSprite
	movs r0, #0x23
	adds r0, r0, r5
	mov sl, r0
	ldrb r3, [r0]
	ldrh r2, [r5]
	movs r1, #0xa0
	lsls r1, r1, #5
	adds r0, r1, #0
	ands r0, r2
	cmp r0, r1
	bne _0801F610
	ldrh r1, [r5, #2]
	ldr r0, _0801F5D0 @ =gSpriteData
	mov sb, r0
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	mov r8, r0
	mov r6, r8
	add r6, sb
	ldrh r0, [r6, #2]
	subs r0, #0x20
	cmp r1, r0
	bne _0801F5E4
	bl SamusCheckMorphed
	adds r7, r0, #0
	cmp r7, #0
	bne _0801F618
	ldr r2, _0801F5D4 @ =gSamusData
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _0801F566
	strb r7, [r2, #5]
_0801F566:
	ldrh r0, [r5, #4]
	movs r4, #0
	strh r0, [r2, #0x16]
	ldr r1, _0801F5D8 @ =0x0828FD04
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x20
	bl _call_via_r1
	ldrh r1, [r5]
	ldr r0, _0801F5DC @ =0x0000EFFF
	ands r0, r1
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x33
	strb r4, [r0]
	subs r0, #0xe
	strb r4, [r0]
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #7
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x31
	strb r4, [r0]
	mov r0, sb
	adds r0, #0x18
	add r0, r8
	ldr r1, _0801F5E0 @ =0x082F14E4
	str r1, [r0]
	strb r4, [r6, #0x1c]
	strh r7, [r6, #0x16]
	ldrb r2, [r5, #0x1f]
	mov r0, sl
	ldrb r3, [r0]
	ldrh r0, [r6, #2]
	str r0, [sp]
	ldrh r0, [r6, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x30
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0801F618
	.align 2, 0
_0801F5CC: .4byte gCurrentSprite
_0801F5D0: .4byte gSpriteData
_0801F5D4: .4byte gSamusData
_0801F5D8: .4byte 0x0828FD04
_0801F5DC: .4byte 0x0000EFFF
_0801F5E0: .4byte 0x082F14E4
_0801F5E4:
	adds r0, r1, #1
	strh r0, [r5, #2]
	ldr r1, _0801F604 @ =gSamusData
	ldrh r0, [r1, #0x18]
	adds r0, #1
	strh r0, [r1, #0x18]
	ldr r0, _0801F608 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0801F618
	ldr r0, _0801F60C @ =0x0000010B
	bl SoundPlay
	b _0801F618
	.align 2, 0
_0801F604: .4byte gSamusData
_0801F608: .4byte gFrameCounter8Bit
_0801F60C: .4byte 0x0000010B
_0801F610:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
_0801F618:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start SavePlatformSpawnSavePrompt
SavePlatformSpawnSavePrompt: @ 0x0801F628
	push {r4, r5, lr}
	ldr r4, _0801F654 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r2, r0, #0
	cmp r2, #0
	beq _0801F658
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0801F6D8
	movs r0, #0xc
	bl TrySpawnMessageBanner
	adds r1, r4, #0
	adds r1, #0x2f
	strb r0, [r1]
	b _0801F6D8
	.align 2, 0
_0801F654: .4byte gCurrentSprite
_0801F658:
	ldr r5, _0801F6B0 @ =gSpriteData
	adds r3, r4, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r5
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x1a
	bne _0801F6D8
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xa
	strb r0, [r1]
	mov r0, ip
	strb r2, [r0]
	ldrb r1, [r3]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r5
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bne _0801F6C0
	strb r0, [r3]
	ldr r1, _0801F6B4 @ =0x0828FD04
	ldr r0, _0801F6B8 @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x35
	bl _call_via_r1
	ldr r0, _0801F6BC @ =0x0000010D
	bl SoundPlay
	b _0801F6D8
	.align 2, 0
_0801F6B0: .4byte gSpriteData
_0801F6B4: .4byte 0x0828FD04
_0801F6B8: .4byte gSamusData
_0801F6BC: .4byte 0x0000010D
_0801F6C0:
	strb r2, [r3]
	ldr r1, _0801F6E0 @ =0x0828FD04
	ldr r4, _0801F6E4 @ =gSamusData
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x39
	bl _call_via_r1
	movs r0, #5
	strh r0, [r4, #0x10]
_0801F6D8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0801F6E0: .4byte 0x0828FD04
_0801F6E4: .4byte gSamusData

	thumb_func_start SavePlatformIdleAfterPrompt
SavePlatformIdleAfterPrompt: @ 0x0801F6E8
	push {r4, r5, lr}
	ldr r1, _0801F714 @ =gCurrentSprite
	adds r4, r1, #0
	adds r4, #0x2f
	ldrb r2, [r4]
	cmp r2, #0
	beq _0801F720
	ldr r0, _0801F718 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x39
	bne _0801F76A
	movs r0, #0xd
	bl TrySpawnMessageBanner
	ldr r0, _0801F71C @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r1, r2, #0
	strh r1, [r0]
	movs r0, #0
	strb r0, [r4]
	b _0801F76A
	.align 2, 0
_0801F714: .4byte gCurrentSprite
_0801F718: .4byte gSamusData
_0801F71C: .4byte gPreventMovementTimer
_0801F720:
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldrh r0, [r1]
	movs r4, #0xa0
	lsls r4, r4, #5
	ands r4, r0
	cmp r4, #0
	beq _0801F73A
	adds r0, r1, #0
	adds r0, #0x2e
	strb r2, [r0]
	b _0801F76A
_0801F73A:
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x78
	bls _0801F76A
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	ldr r3, _0801F770 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r1, r3, #0
	adds r1, #0x18
	adds r1, r0, r1
	ldr r2, _0801F774 @ =0x082F14C4
	str r2, [r1]
	adds r0, r0, r3
	strb r4, [r0, #0x1c]
	strh r4, [r0, #0x16]
_0801F76A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0801F770: .4byte gSpriteData
_0801F774: .4byte 0x082F14C4

	thumb_func_start SavePlatformRising
SavePlatformRising: @ 0x0801F778
	push {r4, lr}
	ldr r3, _0801F794 @ =gCurrentSprite
	ldrh r4, [r3]
	movs r1, #0xa0
	lsls r1, r1, #5
	adds r0, r1, #0
	ands r0, r4
	cmp r0, r1
	bne _0801F798
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	b _0801F7FC
	.align 2, 0
_0801F794: .4byte gCurrentSprite
_0801F798:
	ldrh r0, [r3, #2]
	adds r2, r0, #0
	ldrh r1, [r3, #6]
	cmp r2, r1
	bne _0801F7B4
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	b _0801F7FC
_0801F7B4:
	cmp r2, r1
	bls _0801F7D4
	subs r0, #1
	strh r0, [r3, #2]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r4
	cmp r0, #0
	beq _0801F7EA
	ldr r1, _0801F7D0 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #1
	b _0801F7E8
	.align 2, 0
_0801F7D0: .4byte gSamusData
_0801F7D4:
	adds r0, #1
	strh r0, [r3, #2]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r4
	cmp r0, #0
	beq _0801F7EA
	ldr r1, _0801F804 @ =gSamusData
	ldrh r0, [r1, #0x18]
	adds r0, #1
_0801F7E8:
	strh r0, [r1, #0x18]
_0801F7EA:
	ldr r0, _0801F808 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0801F7FC
	ldr r0, _0801F80C @ =0x0000010B
	bl SoundPlay
_0801F7FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0801F804: .4byte gSamusData
_0801F808: .4byte gFrameCounter8Bit
_0801F80C: .4byte 0x0000010B

	thumb_func_start SavePlatformRisingAfterPrompt
SavePlatformRisingAfterPrompt: @ 0x0801F810
	push {lr}
	ldr r3, _0801F830 @ =gCurrentSprite
	ldrh r0, [r3, #2]
	ldrh r1, [r3, #6]
	cmp r0, r1
	bne _0801F834
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	b _0801F85E
	.align 2, 0
_0801F830: .4byte gCurrentSprite
_0801F834:
	subs r0, #1
	strh r0, [r3, #2]
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r1
	cmp r0, #0
	beq _0801F84C
	ldr r1, _0801F864 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #1
	strh r0, [r1, #0x18]
_0801F84C:
	ldr r0, _0801F868 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0801F85E
	ldr r0, _0801F86C @ =0x0000010B
	bl SoundPlay
_0801F85E:
	pop {r0}
	bx r0
	.align 2, 0
_0801F864: .4byte gSamusData
_0801F868: .4byte gFrameCounter8Bit
_0801F86C: .4byte 0x0000010B

	thumb_func_start SavePadHologramInit
SavePadHologramInit: @ 0x0801F870
	push {r4, lr}
	ldr r0, _0801F8D0 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0801F8D4 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	ldr r1, _0801F8D8 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	beq _0801F8E0
	ldr r0, _0801F8DC @ =0x082F1574
	str r0, [r2, #0x18]
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x18
	b _0801F8EA
	.align 2, 0
_0801F8D0: .4byte gCurrentSprite
_0801F8D4: .4byte 0x0000FFFB
_0801F8D8: .4byte 0x0000FFFC
_0801F8DC: .4byte 0x082F1574
_0801F8E0:
	ldr r0, _0801F8F4 @ =0x082F1514
	mov r1, ip
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #2
_0801F8EA:
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0801F8F4: .4byte 0x082F1514

	thumb_func_start SavePadHologramOpening
SavePadHologramOpening: @ 0x0801F8F8
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801F914
	ldr r1, _0801F918 @ =gCurrentSprite
	ldr r0, _0801F91C @ =0x082F1574
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_0801F914:
	pop {r0}
	bx r0
	.align 2, 0
_0801F918: .4byte gCurrentSprite
_0801F91C: .4byte 0x082F1574

	thumb_func_start SavePadHologramFlashing
SavePadHologramFlashing: @ 0x0801F920
	push {lr}
	ldr r0, _0801F948 @ =gPreventMovementTimer
	ldrh r2, [r0]
	cmp r2, #0
	bne _0801F942
	ldr r0, _0801F94C @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x39
	bne _0801F942
	ldr r0, _0801F950 @ =gCurrentSprite
	ldr r1, _0801F954 @ =0x082F1544
	str r1, [r0, #0x18]
	strb r2, [r0, #0x1c]
	strh r2, [r0, #0x16]
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
_0801F942:
	pop {r0}
	bx r0
	.align 2, 0
_0801F948: .4byte gPreventMovementTimer
_0801F94C: .4byte gSamusData
_0801F950: .4byte gCurrentSprite
_0801F954: .4byte 0x082F1544

	thumb_func_start SavePadHologramClosing
SavePadHologramClosing: @ 0x0801F958
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0801F968
	ldr r1, _0801F96C @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_0801F968:
	pop {r0}
	bx r0
	.align 2, 0
_0801F96C: .4byte gCurrentSprite

	thumb_func_start SavePad
SavePad: @ 0x0801F970
	push {lr}
	ldr r0, _0801F984 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0801F988
	cmp r0, #2
	beq _0801F98C
	b _0801F990
	.align 2, 0
_0801F984: .4byte gCurrentSprite
_0801F988:
	bl SavePadInit
_0801F98C:
	bl SavePad_Empty
_0801F990:
	pop {r0}
	bx r0

	thumb_func_start SavePlatform
SavePlatform: @ 0x0801F994
	push {r4, lr}
	ldr r4, _0801F9D0 @ =gCurrentSprite
	ldrh r3, [r4, #4]
	adds r1, r3, #0
	subs r1, #0x20
	ldr r0, _0801F9D4 @ =gSamusData
	ldrh r2, [r0, #0x16]
	cmp r1, r2
	bge _0801F9BA
	adds r0, r3, #0
	adds r0, #0x20
	cmp r0, r2
	ble _0801F9BA
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
_0801F9BA:
	ldr r0, _0801F9D0 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _0801FA78
	lsls r0, r0, #2
	ldr r1, _0801F9D8 @ =_0801F9DC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0801F9D0: .4byte gCurrentSprite
_0801F9D4: .4byte gSamusData
_0801F9D8: .4byte _0801F9DC
_0801F9DC: @ jump table
	.4byte _0801FA50 @ case 0
	.4byte _0801FA78 @ case 1
	.4byte _0801FA56 @ case 2
	.4byte _0801FA78 @ case 3
	.4byte _0801FA78 @ case 4
	.4byte _0801FA78 @ case 5
	.4byte _0801FA78 @ case 6
	.4byte _0801FA68 @ case 7
	.4byte _0801FA6E @ case 8
	.4byte _0801FA78 @ case 9
	.4byte _0801FA78 @ case 10
	.4byte _0801FA78 @ case 11
	.4byte _0801FA78 @ case 12
	.4byte _0801FA78 @ case 13
	.4byte _0801FA78 @ case 14
	.4byte _0801FA78 @ case 15
	.4byte _0801FA78 @ case 16
	.4byte _0801FA78 @ case 17
	.4byte _0801FA78 @ case 18
	.4byte _0801FA78 @ case 19
	.4byte _0801FA78 @ case 20
	.4byte _0801FA78 @ case 21
	.4byte _0801FA78 @ case 22
	.4byte _0801FA78 @ case 23
	.4byte _0801FA5C @ case 24
	.4byte _0801FA78 @ case 25
	.4byte _0801FA62 @ case 26
	.4byte _0801FA78 @ case 27
	.4byte _0801FA74 @ case 28
_0801FA50:
	bl SavePlatformInit
	b _0801FA78
_0801FA56:
	bl SavePlatformFloating
	b _0801FA78
_0801FA5C:
	bl SavePlatformSinking
	b _0801FA78
_0801FA62:
	bl SavePlatformRising
	b _0801FA78
_0801FA68:
	bl SavePlatformSpawnSavePrompt
	b _0801FA78
_0801FA6E:
	bl SavePlatformIdleAfterPrompt
	b _0801FA78
_0801FA74:
	bl SavePlatformRisingAfterPrompt
_0801FA78:
	ldr r2, _0801FA88 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _0801FA8C @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0801FA88: .4byte gCurrentSprite
_0801FA8C: .4byte 0x0000FBFF

	thumb_func_start SavePadHologram
SavePadHologram: @ 0x0801FA90
	push {lr}
	ldr r0, _0801FAB0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0801FAC4
	cmp r0, #2
	bgt _0801FAB4
	cmp r0, #0
	beq _0801FABE
	b _0801FAD4
	.align 2, 0
_0801FAB0: .4byte gCurrentSprite
_0801FAB4:
	cmp r0, #0x18
	beq _0801FACA
	cmp r0, #0x1a
	beq _0801FAD0
	b _0801FAD4
_0801FABE:
	bl SavePadHologramInit
	b _0801FAD4
_0801FAC4:
	bl SavePadHologramOpening
	b _0801FAD4
_0801FACA:
	bl SavePadHologramFlashing
	b _0801FAD4
_0801FAD0:
	bl SavePadHologramClosing
_0801FAD4:
	pop {r0}
	bx r0

	thumb_func_start GunshipCheckSpawnBeam
GunshipCheckSpawnBeam: @ 0x0801FAD8
	push {lr}
	sub sp, #0xc
	ldr r1, _0801FAF8 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	subs r0, #6
	mov ip, r1
	cmp r0, #0xf
	bls _0801FAEE
	b _0801FC10
_0801FAEE:
	lsls r0, r0, #2
	ldr r1, _0801FAFC @ =_0801FB00
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0801FAF8: .4byte gCurrentSprite
_0801FAFC: .4byte _0801FB00
_0801FB00: @ jump table
	.4byte _0801FB40 @ case 0
	.4byte _0801FC10 @ case 1
	.4byte _0801FC10 @ case 2
	.4byte _0801FB68 @ case 3
	.4byte _0801FC10 @ case 4
	.4byte _0801FC10 @ case 5
	.4byte _0801FB8A @ case 6
	.4byte _0801FC10 @ case 7
	.4byte _0801FC10 @ case 8
	.4byte _0801FBAC @ case 9
	.4byte _0801FC10 @ case 10
	.4byte _0801FC10 @ case 11
	.4byte _0801FBCE @ case 12
	.4byte _0801FC10 @ case 13
	.4byte _0801FC10 @ case 14
	.4byte _0801FBF0 @ case 15
_0801FB40:
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0xcc
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0xd
	movs r1, #0
	bl SpriteSpawnSecondary
	movs r0, #0xfd
	bl SoundPlay
	b _0801FC10
_0801FB68:
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0xb0
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0xd
	movs r1, #1
	bl SpriteSpawnSecondary
	b _0801FC10
_0801FB8A:
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x98
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0xd
	movs r1, #3
	bl SpriteSpawnSecondary
	b _0801FC10
_0801FBAC:
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x80
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0xd
	movs r1, #5
	bl SpriteSpawnSecondary
	b _0801FC10
_0801FBCE:
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x68
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0xd
	movs r1, #7
	bl SpriteSpawnSecondary
	b _0801FC10
_0801FBF0:
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x50
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0xd
	movs r1, #9
	bl SpriteSpawnSecondary
_0801FC10:
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipInit
GunshipInit: @ 0x0801FC18
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r4, _0801FCB4 @ =gCurrentSprite
	ldrh r0, [r4, #4]
	subs r0, #0x20
	movs r5, #0
	movs r3, #0
	strh r0, [r4, #4]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x68
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	strb r5, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	ldr r1, _0801FCB8 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _0801FCBC @ =0x082F46F0
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r0, _0801FCC0 @ =gIsLoadingFile
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0801FCD4
	ldr r0, _0801FCC4 @ =gUnk_03000be3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0801FCD4
	ldr r0, _0801FCC8 @ =gDebugFlag
	ldrb r0, [r0]
	cmp r0, #0
	bne _0801FCD4
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0801FCCC @ =0x0828FD04
	ldr r0, _0801FCD0 @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x20
	bl _call_via_r1
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	b _0801FCF4
	.align 2, 0
_0801FCB4: .4byte gCurrentSprite
_0801FCB8: .4byte 0x0000FFFC
_0801FCBC: .4byte 0x082F46F0
_0801FCC0: .4byte gIsLoadingFile
_0801FCC4: .4byte gUnk_03000be3
_0801FCC8: .4byte gDebugFlag
_0801FCCC: .4byte 0x0828FD04
_0801FCD0: .4byte gSamusData
_0801FCD4:
	ldr r0, _0801FCE4 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x3d
	bne _0801FCEC
	ldr r0, _0801FCE8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1a
	b _0801FCF2
	.align 2, 0
_0801FCE4: .4byte gSamusData
_0801FCE8: .4byte gCurrentSprite
_0801FCEC:
	ldr r0, _0801FD1C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
_0801FCF2:
	strb r1, [r0]
_0801FCF4:
	ldr r1, _0801FD1C @ =gCurrentSprite
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #6
	movs r1, #0
	bl SpriteSpawnSecondary
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0801FD1C: .4byte gCurrentSprite

	thumb_func_start GunshipNavigation
GunshipNavigation: @ 0x0801FD20
	push {lr}
	ldr r2, _0801FD50 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	movs r3, #0
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0x17
	bhi _0801FD58
	cmp r0, #0
	bne _0801FD44
	ldr r0, _0801FD54 @ =gDisableDrawingSamusAndScrollingFlag
	strb r3, [r0]
_0801FD44:
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	bl GunshipCheckSpawnBeam
	b _0801FD66
	.align 2, 0
_0801FD50: .4byte gCurrentSprite
_0801FD54: .4byte gDisableDrawingSamusAndScrollingFlag
_0801FD58:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x45
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
_0801FD66:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipIdle
GunshipIdle: @ 0x0801FD6C
	push {r4, r5, lr}
	bl SpriteUtilCheckStopSpritesPose
	cmp r0, #0
	bne _0801FDF0
	ldr r4, _0801FD98 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _0801FDEA
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0x23
	bhi _0801FD9C
	adds r0, #1
	strb r0, [r1]
	b _0801FDE4
	.align 2, 0
_0801FD98: .4byte gCurrentSprite
_0801FD9C:
	bl SamusCheckMorphed
	adds r1, r0, #0
	cmp r1, #0
	bne _0801FDE4
	ldr r5, _0801FDDC @ =gSamusData
	ldrb r0, [r5, #5]
	cmp r0, #0
	beq _0801FDB0
	strb r1, [r5, #5]
_0801FDB0:
	ldr r1, _0801FDE0 @ =0x0828FD04
	ldrb r0, [r5]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x20
	bl _call_via_r1
	ldrh r0, [r4, #2]
	subs r0, #4
	strh r0, [r5, #0x18]
	ldrh r0, [r4, #4]
	strh r0, [r5, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	b _0801FDF0
	.align 2, 0
_0801FDDC: .4byte gSamusData
_0801FDE0: .4byte 0x0828FD04
_0801FDE4:
	bl GunshipCheckSpawnBeam
	b _0801FDF0
_0801FDEA:
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
_0801FDF0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipLockingSamus
GunshipLockingSamus: @ 0x0801FDF8
	push {lr}
	ldr r2, _0801FE28 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r1, r0
	strh r1, [r2]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0801FE24
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x38
	strb r1, [r0]
	movs r0, #0x3b
	strb r0, [r3]
_0801FE24:
	pop {r0}
	bx r0
	.align 2, 0
_0801FE28: .4byte gCurrentSprite

	thumb_func_start GunshipPullingSamusUp
GunshipPullingSamusUp: @ 0x0801FE2C
	push {lr}
	ldr r2, _0801FE64 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	movs r3, #0
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0801FE68
	subs r1, #0xa
	movs r0, #0x39
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	b _0801FE70
	.align 2, 0
_0801FE64: .4byte gCurrentSprite
_0801FE68:
	ldr r1, _0801FE74 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #4
	strh r0, [r1, #0x18]
_0801FE70:
	pop {r0}
	bx r0
	.align 2, 0
_0801FE74: .4byte gSamusData

	thumb_func_start GunshipRefill
GunshipRefill: @ 0x0801FE78
	push {r4, lr}
	ldr r4, _0801FEBC @ =gCurrentSprite
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r4]
	bl RefillEnergy
	cmp r0, #0
	bne _0801FEB4
	bl RefillMissiles
	cmp r0, #0
	bne _0801FEB4
	bl RefillPowerBombs
	cmp r0, #0
	bne _0801FEB4
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	movs r0, #0xc
	bl TrySpawnMessageBanner
	adds r1, r4, #0
	adds r1, #0x2e
	strb r0, [r1]
_0801FEB4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0801FEBC: .4byte gCurrentSprite

	thumb_func_start GunshipSavePrompt
GunshipSavePrompt: @ 0x0801FEC0
	push {lr}
	ldr r3, _0801FEFC @ =gCurrentSprite
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	ldr r2, _0801FF00 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r1, r0, r2
	ldrh r0, [r1]
	cmp r0, #0
	bne _0801FF1A
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bne _0801FF04
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
	b _0801FF1A
	.align 2, 0
_0801FEFC: .4byte gCurrentSprite
_0801FF00: .4byte gSpriteData
_0801FF04:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0801FF20 @ =gPauseScreenFlag
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0801FF24 @ =gSubGameMode1
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_0801FF1A:
	pop {r0}
	bx r0
	.align 2, 0
_0801FF20: .4byte gPauseScreenFlag
_0801FF24: .4byte gSubGameMode1

	thumb_func_start GunshipSpawnSavedPrompt
GunshipSpawnSavedPrompt: @ 0x0801FF28
	push {r4, lr}
	ldr r4, _0801FF50 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	movs r0, #0xd
	bl TrySpawnMessageBanner
	adds r4, #0x2e
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0801FF50: .4byte gCurrentSprite

	thumb_func_start GunshipSavedPrompt
GunshipSavedPrompt: @ 0x0801FF54
	push {lr}
	ldr r3, _0801FF94 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	ldr r2, _0801FF98 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	cmp r0, #0
	bne _0801FF90
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0801FF9C @ =gPauseScreenFlag
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0801FFA0 @ =gSubGameMode1
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_0801FF90:
	pop {r0}
	bx r0
	.align 2, 0
_0801FF94: .4byte gCurrentSprite
_0801FF98: .4byte gSpriteData
_0801FF9C: .4byte gPauseScreenFlag
_0801FFA0: .4byte gSubGameMode1

	thumb_func_start GunshipReleasingSamus
GunshipReleasingSamus: @ 0x0801FFA4
	push {r4, lr}
	ldr r2, _0801FFE8 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r1, r0
	strh r1, [r2]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0801FFF4
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	movs r0, #0x1e
	strb r0, [r3]
	ldr r1, _0801FFEC @ =0x0828FD04
	ldr r4, _0801FFF0 @ =gSamusData
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x39
	bl _call_via_r1
	movs r0, #5
	strh r0, [r4, #0x10]
	b _0801FFFC
	.align 2, 0
_0801FFE8: .4byte gCurrentSprite
_0801FFEC: .4byte 0x0828FD04
_0801FFF0: .4byte gSamusData
_0801FFF4:
	ldr r1, _08020004 @ =gSamusData
	ldrh r0, [r1, #0x18]
	adds r0, #4
	strh r0, [r1, #0x18]
_0801FFFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08020004: .4byte gSamusData

	thumb_func_start GunshipSamusReleased
GunshipSamusReleased: @ 0x08020008
	push {lr}
	ldr r0, _08020024 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x39
	bne _0802002C
	ldr r2, _08020028 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
	b _08020066
	.align 2, 0
_08020024: .4byte gSamusData
_08020028: .4byte gCurrentSprite
_0802002C:
	ldr r2, _08020044 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08020048
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	b _08020066
	.align 2, 0
_08020044: .4byte gCurrentSprite
_08020048:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _08020066
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #0xb
	strb r3, [r0]
_08020066:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipLoadingSave
GunshipLoadingSave: @ 0x0802006C
	push {lr}
	ldr r2, _08020088 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0802008C
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	b _080200AA
	.align 2, 0
_08020088: .4byte gCurrentSprite
_0802008C:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _080200AA
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #0xb
	strb r3, [r0]
_080200AA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipBeamInit
GunshipBeamInit: @ 0x080200B0
	push {r4, lr}
	ldr r0, _08020114 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08020118 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r0, #2
	movs r1, #4
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r2, #0xb
	movs r0, #0x10
	strb r0, [r2]
	ldr r0, _0802011C @ =0x0000FFFC
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _08020120 @ =0x082F4700
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	subs r1, #2
	movs r0, #5
	strb r0, [r1]
	adds r1, #0xc
	movs r0, #9
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08020114: .4byte gCurrentSprite
_08020118: .4byte 0x0000FFFB
_0802011C: .4byte 0x0000FFFC
_08020120: .4byte 0x082F4700

	thumb_func_start GunshipBeamMovingDown
GunshipBeamMovingDown: @ 0x08020124
	push {r4, r5, r6, r7, lr}
	ldr r2, _08020164 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldr r1, _08020168 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r4, r0, r1
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	adds r7, r1, #0
	cmp r0, #2
	bne _08020170
	ldrh r1, [r4, #4]
	adds r0, r1, #0
	subs r0, #0x20
	ldr r6, _0802016C @ =gSamusData
	ldrh r3, [r6, #0x16]
	cmp r0, r3
	bge _08020174
	adds r0, #0x40
	cmp r0, r3
	ble _08020174
	ldrh r0, [r4, #2]
	subs r0, #1
	ldrh r6, [r6, #0x18]
	cmp r0, r6
	beq _0802017A
	b _08020174
	.align 2, 0
_08020164: .4byte gCurrentSprite
_08020168: .4byte gSpriteData
_0802016C: .4byte gSamusData
_08020170:
	cmp r0, #0x46
	bne _0802017A
_08020174:
	movs r0, #0
	strh r0, [r2]
	b _080201C6
_0802017A:
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	beq _0802018C
	subs r0, #1
	strb r0, [r2, #0x1e]
	ldrh r0, [r2, #2]
	adds r0, #4
	strh r0, [r2, #2]
	b _080201C6
_0802018C:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080201A4
	ldrh r0, [r2, #2]
	adds r0, #4
	strh r0, [r2, #2]
	b _080201AE
_080201A4:
	ldrh r0, [r2, #2]
	subs r0, #0x20
	strh r0, [r2, #2]
	movs r0, #9
	strb r0, [r3]
_080201AE:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x37
	bne _080201C6
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_080201C6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start GunshipBeamMovingUp
GunshipBeamMovingUp: @ 0x080201CC
	push {r4, lr}
	ldr r1, _080201F4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r4, [r0]
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r3, r1, #0
	cmp r0, #8
	bls _080201F8
	movs r0, #0
	strb r0, [r2]
	ldrh r0, [r3, #2]
	adds r0, #0x20
	b _080201FC
	.align 2, 0
_080201F4: .4byte gCurrentSprite
_080201F8:
	ldrh r0, [r3, #2]
	subs r0, #4
_080201FC:
	strh r0, [r3, #2]
	ldr r0, _0802021C @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x39
	bne _08020214
	movs r0, #0
	strh r0, [r3]
_08020214:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802021C: .4byte gSpriteData

	thumb_func_start GunshipUpdatePalette
GunshipUpdatePalette: @ 0x08020220
	push {lr}
	ldr r2, _08020254 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	lsls r0, r0, #5
	ldr r1, _08020258 @ =0x082F474E
	adds r0, r0, r1
	ldr r1, _0802025C @ =0x040000D4
	str r0, [r1]
	ldr r0, _08020260 @ =0x05000336
	str r0, [r1, #4]
	ldr r0, _08020264 @ =0x80000005
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	adds r2, #0x2f
	ldrb r0, [r2]
	cmp r0, #0
	beq _0802026E
	ldrb r0, [r3]
	adds r1, r0, #0
	cmp r1, #0
	beq _08020268
	subs r0, #1
	b _0802027E
	.align 2, 0
_08020254: .4byte gCurrentSprite
_08020258: .4byte 0x082F474E
_0802025C: .4byte 0x040000D4
_08020260: .4byte 0x05000336
_08020264: .4byte 0x80000005
_08020268:
	strb r1, [r2]
	movs r0, #1
	b _0802027E
_0802026E:
	ldrb r0, [r3]
	cmp r0, #5
	bls _0802027C
	movs r0, #1
	strb r0, [r2]
	movs r0, #5
	b _0802027E
_0802027C:
	adds r0, #1
_0802027E:
	strb r0, [r3]
	pop {r0}
	bx r0

	thumb_func_start Gunship
Gunship: @ 0x08020284
	push {r4, r5, lr}
	ldr r0, _080202C0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	ldrh r3, [r0, #4]
	adds r1, r3, #0
	subs r1, #0x20
	ldr r5, _080202C4 @ =gSamusData
	ldrh r2, [r5, #0x16]
	adds r4, r0, #0
	cmp r1, r2
	bge _080202C8
	adds r0, r3, #0
	adds r0, #0x20
	cmp r0, r2
	ble _080202C8
	ldrh r0, [r4, #2]
	subs r0, #1
	ldrh r5, [r5, #0x18]
	cmp r0, r5
	bne _080202C8
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	b _080202CE
	.align 2, 0
_080202C0: .4byte gCurrentSprite
_080202C4: .4byte gSamusData
_080202C8:
	ldrh r1, [r4]
	ldr r0, _080202E8 @ =0x0000FBFF
	ands r0, r1
_080202CE:
	strh r0, [r4]
	ldr r0, _080202EC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bls _080202DC
	b _08020456
_080202DC:
	lsls r0, r0, #2
	ldr r1, _080202F0 @ =_080202F4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080202E8: .4byte 0x0000FBFF
_080202EC: .4byte gCurrentSprite
_080202F0: .4byte _080202F4
_080202F4: @ jump table
	.4byte _08020410 @ case 0
	.4byte _08020456 @ case 1
	.4byte _08020416 @ case 2
	.4byte _08020456 @ case 3
	.4byte _08020456 @ case 4
	.4byte _08020456 @ case 5
	.4byte _08020456 @ case 6
	.4byte _08020456 @ case 7
	.4byte _08020456 @ case 8
	.4byte _08020456 @ case 9
	.4byte _08020456 @ case 10
	.4byte _08020456 @ case 11
	.4byte _08020456 @ case 12
	.4byte _08020456 @ case 13
	.4byte _08020456 @ case 14
	.4byte _08020456 @ case 15
	.4byte _08020456 @ case 16
	.4byte _08020456 @ case 17
	.4byte _08020456 @ case 18
	.4byte _08020456 @ case 19
	.4byte _08020456 @ case 20
	.4byte _08020456 @ case 21
	.4byte _08020456 @ case 22
	.4byte _08020456 @ case 23
	.4byte _08020440 @ case 24
	.4byte _08020456 @ case 25
	.4byte _08020452 @ case 26
	.4byte _08020456 @ case 27
	.4byte _08020456 @ case 28
	.4byte _08020456 @ case 29
	.4byte _08020456 @ case 30
	.4byte _08020456 @ case 31
	.4byte _08020456 @ case 32
	.4byte _08020456 @ case 33
	.4byte _08020456 @ case 34
	.4byte _08020456 @ case 35
	.4byte _08020456 @ case 36
	.4byte _08020456 @ case 37
	.4byte _08020456 @ case 38
	.4byte _08020456 @ case 39
	.4byte _08020456 @ case 40
	.4byte _08020456 @ case 41
	.4byte _08020456 @ case 42
	.4byte _08020456 @ case 43
	.4byte _08020456 @ case 44
	.4byte _08020456 @ case 45
	.4byte _08020456 @ case 46
	.4byte _08020456 @ case 47
	.4byte _08020456 @ case 48
	.4byte _08020456 @ case 49
	.4byte _08020456 @ case 50
	.4byte _08020456 @ case 51
	.4byte _08020456 @ case 52
	.4byte _08020456 @ case 53
	.4byte _08020456 @ case 54
	.4byte _0802041C @ case 55
	.4byte _08020422 @ case 56
	.4byte _08020428 @ case 57
	.4byte _0802042E @ case 58
	.4byte _08020434 @ case 59
	.4byte _0802043A @ case 60
	.4byte _08020456 @ case 61
	.4byte _08020456 @ case 62
	.4byte _08020456 @ case 63
	.4byte _08020456 @ case 64
	.4byte _08020456 @ case 65
	.4byte _08020456 @ case 66
	.4byte _08020456 @ case 67
	.4byte _08020456 @ case 68
	.4byte _08020446 @ case 69
	.4byte _0802044C @ case 70
_08020410:
	bl GunshipInit
	b _08020456
_08020416:
	bl GunshipIdle
	b _08020456
_0802041C:
	bl GunshipLockingSamus
	b _08020456
_08020422:
	bl GunshipPullingSamusUp
	b _08020456
_08020428:
	bl GunshipRefill
	b _08020456
_0802042E:
	bl GunshipSavePrompt
	b _08020456
_08020434:
	bl GunshipSpawnSavedPrompt
	b _08020456
_0802043A:
	bl GunshipSavedPrompt
	b _08020456
_08020440:
	bl GunshipNavigation
	b _08020456
_08020446:
	bl GunshipReleasingSamus
	b _08020456
_0802044C:
	bl GunshipSamusReleased
	b _08020456
_08020452:
	bl GunshipLoadingSave
_08020456:
	ldr r2, _0802046C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08020470
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #4
	b _08020476
	.align 2, 0
_0802046C: .4byte gCurrentSprite
_08020470:
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #0xc
_08020476:
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipBeam
GunshipBeam: @ 0x08020480
	push {lr}
	ldr r0, _080204A0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080204AE
	cmp r0, #2
	bgt _080204A4
	cmp r0, #0
	beq _080204AA
	b _080204B8
	.align 2, 0
_080204A0: .4byte gCurrentSprite
_080204A4:
	cmp r0, #0x18
	beq _080204B4
	b _080204B8
_080204AA:
	bl GunshipBeamInit
_080204AE:
	bl GunshipBeamMovingDown
	b _080204B8
_080204B4:
	bl GunshipBeamMovingUp
_080204B8:
	ldr r1, _080204D0 @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	bne _080204CC
	ldrh r0, [r1]
	cmp r0, #0
	bne _080204CC
	movs r0, #0xfd
	bl StopSound
_080204CC:
	pop {r0}
	bx r0
	.align 2, 0
_080204D0: .4byte gCurrentSprite

	thumb_func_start GunshipBody
GunshipBody: @ 0x080204D4
	push {r4, r5, lr}
	ldr r0, _08020568 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	mov r5, ip
	adds r5, #0x24
	ldrb r4, [r5]
	cmp r4, #0
	bne _0802054C
	mov r2, ip
	ldrh r1, [r2]
	ldr r0, _0802056C @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	strh r0, [r2]
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r1, #5
	movs r0, #0x68
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x60
	strb r0, [r1]
	ldr r1, _08020570 @ =0x0000FFFC
	mov r0, ip
	strh r1, [r0, #0xa]
	movs r0, #4
	mov r2, ip
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08020574 @ =0x082F4728
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x2e
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	movs r0, #2
	strb r0, [r5]
_0802054C:
	mov r0, ip
	adds r0, #0x30
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	movs r0, #7
	ands r1, r0
	cmp r1, #0
	bne _08020562
	bl GunshipUpdatePalette
_08020562:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08020568: .4byte gCurrentSprite
_0802056C: .4byte 0x0000FFFB
_08020570: .4byte 0x0000FFFC
_08020574: .4byte 0x082F4728

	thumb_func_start YamebaTurningIntoX
YamebaTurningIntoX: @ 0x08020578
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r5, _080205A0 @ =gCurrentSprite
	ldrh r1, [r5]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0802058E
	ldr r0, _080205A4 @ =0x0000FF7F
	ands r0, r1
	strh r0, [r5]
_0802058E:
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	beq _080205A8
	cmp r0, #3
	beq _080205CE
	b _08020614
	.align 2, 0
_080205A0: .4byte gCurrentSprite
_080205A4: .4byte 0x0000FF7F
_080205A8:
	ldrb r1, [r5, #0x1d]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r5, #2]
	adds r0, #0x40
	str r0, [sp, #4]
	ldrh r0, [r5, #4]
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	b _08020614
_080205CE:
	ldrb r1, [r5, #0x1d]
	adds r7, r5, #0
	adds r7, #0x23
	ldrb r3, [r7]
	adds r6, r5, #0
	adds r6, #0x2a
	ldrb r0, [r6]
	str r0, [sp]
	ldrh r0, [r5, #2]
	adds r0, #0x40
	str r0, [sp, #4]
	ldrh r0, [r5, #4]
	adds r0, #0x40
	str r0, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r1, [r5, #0x1d]
	ldrb r3, [r7]
	ldrb r0, [r6]
	str r0, [sp]
	ldrh r0, [r5, #2]
	adds r0, #0x40
	str r0, [sp, #4]
	ldrh r0, [r5, #4]
	subs r0, #0x40
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
_08020614:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start YamebaInit
YamebaInit: @ 0x0802061C
	push {lr}
	ldr r0, _08020644 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	ldrb r1, [r2]
	adds r3, r0, #0
	cmp r1, #0
	bne _0802065E
	adds r0, #0x2a
	ldrb r0, [r0]
	subs r0, #0x20
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x2f
	bhi _08020648
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	b _0802064E
	.align 2, 0
_08020644: .4byte gCurrentSprite
_08020648:
	adds r0, r3, #0
	adds r0, #0x2d
	strb r1, [r0]
_0802064E:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	b _08020670
_0802065E:
	adds r1, r3, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	strh r0, [r3, #6]
_08020670:
	adds r0, r3, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _080206A0
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	ldr r0, _0802069C @ =0x082F5B18
	b _080206B0
	.align 2, 0
_0802069C: .4byte 0x082F5B18
_080206A0:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	adds r1, #3
	movs r0, #0xb
	strb r0, [r1]
	ldr r0, _080206E0 @ =0x082F5B60
_080206B0:
	str r0, [r3, #0x18]
	ldr r2, _080206E4 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x2b
	movs r1, #0
	strb r2, [r0]
	adds r0, #2
	ldrb r0, [r0]
	cmp r0, #1
	beq _08020706
	cmp r0, #1
	bgt _080206E8
	cmp r0, #0
	beq _080206EE
	b _08020780
	.align 2, 0
_080206E0: .4byte 0x082F5B60
_080206E4: .4byte sPrimarySpriteStats
_080206E8:
	cmp r0, #2
	beq _08020740
	b _08020780
_080206EE:
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
	ldrh r0, [r3]
	movs r1, #0x80
	orrs r0, r1
	strh r0, [r3]
	movs r0, #0xa0
	b _0802071C
_08020706:
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
	ldrh r0, [r3]
	movs r1, #0x80
	orrs r0, r1
	strh r0, [r3]
	movs r0, #0x80
_0802071C:
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802073C @ =0x0000FFE8
	strh r1, [r3, #0xa]
	movs r0, #0x18
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	b _080207C0
	.align 2, 0
_0802073C: .4byte 0x0000FFE8
_08020740:
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
	ldrh r0, [r3]
	movs r1, #0x80
	orrs r0, r1
	strh r0, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802077C @ =0x0000FFE0
	strh r1, [r3, #0xa]
	movs r0, #0x20
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldrh r1, [r3, #0x14]
	lsls r0, r1, #1
	b _080207BC
	.align 2, 0
_0802077C: .4byte 0x0000FFE0
_08020780:
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r2]
	ldrh r1, [r3]
	movs r2, #0x81
	lsls r2, r2, #7
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	ldr r0, _080207E8 @ =0x000001FF
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _080207EC @ =0x0000FFE0
	strh r1, [r3, #0xa]
	movs r0, #0x88
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldrh r1, [r3, #0x14]
	lsls r0, r1, #3
_080207BC:
	adds r0, r0, r1
	strh r0, [r3, #0x14]
_080207C0:
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	ldrh r1, [r3]
	ldr r0, _080207F0 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080207E4
	adds r1, r3, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
_080207E4:
	pop {r0}
	bx r0
	.align 2, 0
_080207E8: .4byte 0x000001FF
_080207EC: .4byte 0x0000FFE0
_080207F0: .4byte 0x0000FFFB

	thumb_func_start YamebaIdleInit
YamebaIdleInit: @ 0x080207F4
	push {lr}
	ldr r2, _0802081C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #0
	bne _08020824
	ldr r0, _08020820 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x30
	strb r0, [r1]
	adds r1, #1
	b _08020830
	.align 2, 0
_0802081C: .4byte gCurrentSprite
_08020820: .4byte gSpriteRandomNumber
_08020824:
	ldr r0, _08020838 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
_08020830:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08020838: .4byte gIoRegisters

	thumb_func_start YamebaIdle
YamebaIdle: @ 0x0802083C
	push {r4, r5, r6, r7, lr}
	ldr r4, _08020898 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _080208A8
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r3, _0802089C @ =0x082F4818
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _080208A0 @ =0x00007FFF
	cmp r0, r6
	bne _08020866
	ldrh r2, [r3]
	movs r1, #0
_08020866:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	strh r0, [r4, #2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r3, _080208A4 @ =0x082F489A
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _0802088A
	ldrh r2, [r3]
	movs r1, #0
_0802088A:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	b _080208BE
	.align 2, 0
_08020898: .4byte gCurrentSprite
_0802089C: .4byte 0x082F4818
_080208A0: .4byte 0x00007FFF
_080208A4: .4byte 0x082F489A
_080208A8:
	movs r1, #0xa0
	lsls r1, r1, #2
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _080208BE
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_080208BE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start YamebaChasingSamusInit
YamebaChasingSamusInit: @ 0x080208C4
	push {r4, lr}
	ldr r4, _08020904 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	movs r2, #1
	strb r2, [r0]
	subs r0, #2
	strb r1, [r0]
	adds r0, #3
	strb r2, [r0]
	strh r1, [r4, #8]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	bl MakeSpriteFaceSamusDirection
	ldrh r2, [r4, #2]
	ldr r1, _08020908 @ =gSamusData
	movs r3, #0x26
	ldrsh r0, [r1, r3]
	ldrh r1, [r1, #0x18]
	adds r0, r0, r1
	cmp r2, r0
	ble _08020910
	ldrh r1, [r4]
	ldr r0, _0802090C @ =0x0000FBFF
	ands r0, r1
	b _0802091A
	.align 2, 0
_08020904: .4byte gCurrentSprite
_08020908: .4byte gSamusData
_0802090C: .4byte 0x0000FBFF
_08020910:
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
_0802091A:
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YamebaChasingSamus
YamebaChasingSamus: @ 0x08020924
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080209C4 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	mov r8, r0
	ldrh r2, [r1, #4]
	mov sb, r2
	movs r5, #0x10
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov ip, r1
	cmp r4, #0x17
	bhi _08020A12
	ldr r3, _080209C8 @ =gSpriteData
	mov sl, r3
_08020950:
	lsls r2, r4, #3
	subs r0, r2, r4
	lsls r0, r0, #3
	mov r1, sl
	adds r3, r0, r1
	ldrh r1, [r3]
	movs r0, #1
	ands r0, r1
	adds r6, r2, #0
	cmp r0, #0
	beq _08020A08
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08020A08
	ldrb r0, [r3, #0x1d]
	cmp r0, #0x1b
	bne _08020A08
	adds r0, r3, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08020A08
	ldrh r7, [r3, #2]
	ldrh r2, [r3, #4]
	mov r0, r8
	adds r1, r0, r5
	subs r0, r7, r5
	cmp r1, r0
	ble _08020A08
	mov r0, r8
	subs r1, r0, r5
	adds r0, r7, r5
	cmp r1, r0
	bge _08020A08
	mov r0, sb
	adds r1, r0, r5
	subs r0, r2, r5
	cmp r1, r0
	ble _08020A08
	mov r0, sb
	subs r1, r0, r5
	adds r0, r2, r5
	cmp r1, r0
	bge _08020A08
	adds r0, r3, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	bne _08020A12
	cmp r8, r7
	bls _080209CC
	subs r0, r7, #4
	b _080209CE
	.align 2, 0
_080209C4: .4byte gCurrentSprite
_080209C8: .4byte gSpriteData
_080209CC:
	adds r0, r7, #4
_080209CE:
	strh r0, [r3, #2]
	cmp sb, r2
	bls _080209E0
	subs r1, r6, r4
	lsls r1, r1, #3
	add r1, sl
	ldrh r0, [r1, #4]
	subs r0, #4
	b _080209EA
_080209E0:
	subs r1, r6, r4
	lsls r1, r1, #3
	add r1, sl
	ldrh r0, [r1, #4]
	adds r0, #4
_080209EA:
	strh r0, [r1, #4]
	subs r2, r6, r4
	lsls r2, r2, #3
	add r2, sl
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	eors r1, r0
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	eors r1, r0
	strh r1, [r2]
	b _08020A12
_08020A08:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x17
	bls _08020950
_08020A12:
	mov r0, ip
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08020A38
	mov r0, ip
	adds r0, #0x2f
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	b _08020C14
_08020A38:
	mov r0, ip
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bne _08020A5C
	ldr r0, _08020A58 @ =gSamusData
	ldrh r1, [r0, #0x18]
	subs r1, #0x88
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	ldrh r0, [r0, #0x16]
	subs r0, #0x40
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	b _08020A68
	.align 2, 0
_08020A58: .4byte gSamusData
_08020A5C:
	ldr r1, _08020AAC @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldrh r2, [r1, #0x16]
_08020A68:
	movs r6, #0x1e
	mov r3, ip
	ldrh r1, [r3]
	movs r4, #0x80
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _08020AE4
	adds r3, #0x2f
	ldrb r0, [r3]
	cmp r0, #0
	bne _08020AB0
	mov r0, ip
	ldrh r1, [r0, #4]
	subs r0, r2, #4
	cmp r1, r0
	bgt _08020AF8
	mov r1, ip
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0x1d
	bhi _08020A9A
	adds r0, #1
	strb r0, [r1]
_08020A9A:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	mov r1, ip
	ldrh r1, [r1, #4]
	adds r0, r0, r1
	mov r2, ip
	strh r0, [r2, #4]
	b _08020B5C
	.align 2, 0
_08020AAC: .4byte gSamusData
_08020AB0:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08020ACA
	lsrs r0, r0, #0x1a
	mov r3, ip
	ldrh r3, [r3, #4]
	adds r0, r0, r3
	mov r1, ip
	strh r0, [r1, #4]
	b _08020B5C
_08020ACA:
	mov r3, ip
	ldrh r1, [r3]
	ldr r0, _08020AE0 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r3]
	mov r1, ip
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
	b _08020B4C
	.align 2, 0
_08020AE0: .4byte 0x0000FDFF
_08020AE4:
	mov r3, ip
	adds r3, #0x2f
	ldrb r0, [r3]
	cmp r0, #0
	bne _08020B1E
	mov r0, ip
	ldrh r1, [r0, #4]
	adds r0, r2, #4
	cmp r1, r0
	bge _08020B02
_08020AF8:
	mov r0, ip
	adds r0, #0x30
	ldrb r0, [r0]
	strb r0, [r3]
	b _08020B5C
_08020B02:
	mov r1, ip
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0x1d
	bhi _08020B10
	adds r0, #1
	strb r0, [r1]
_08020B10:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	mov r2, ip
	ldrh r0, [r2, #4]
	subs r0, r0, r1
	strh r0, [r2, #4]
	b _08020B5C
_08020B1E:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08020B38
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
	mov r3, ip
	ldrh r0, [r3, #4]
	subs r0, r0, r1
	strh r0, [r3, #4]
	b _08020B5C
_08020B38:
	mov r0, ip
	ldrh r1, [r0]
	adds r0, r4, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
	mov r3, ip
_08020B4C:
	ldrh r0, [r3, #8]
	adds r0, #1
	strh r0, [r3, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #3
	bls _08020B5C
	strh r2, [r3, #8]
_08020B5C:
	mov r2, ip
	ldrh r4, [r2]
	movs r5, #0x80
	lsls r5, r5, #3
	adds r0, r5, #0
	ands r0, r4
	cmp r0, #0
	beq _08020BBC
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _08020B98
	ldrh r1, [r2, #2]
	subs r0, r7, #4
	cmp r1, r0
	bgt _08020BCE
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r6
	bhs _08020B8C
	adds r0, #1
	strb r0, [r1]
_08020B8C:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r1, [r2, #2]
	adds r0, r0, r1
	strh r0, [r2, #2]
	b _08020C14
_08020B98:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _08020BAC
	lsrs r0, r0, #0x1a
	ldrh r3, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	b _08020C14
_08020BAC:
	ldr r0, _08020BB8 @ =0x0000FBFF
	ands r0, r4
	strh r0, [r2]
	adds r1, r2, #0
	b _08020C0E
	.align 2, 0
_08020BB8: .4byte 0x0000FBFF
_08020BBC:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _08020BEC
	ldrh r1, [r2, #2]
	adds r0, r7, #4
	cmp r1, r0
	bge _08020BD8
_08020BCE:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r3]
	b _08020C14
_08020BD8:
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r6
	bhs _08020BE6
	adds r0, #1
	strb r0, [r1]
_08020BE6:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _08020BFA
_08020BEC:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _08020C02
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_08020BFA:
	ldrh r0, [r2, #2]
	subs r0, r0, r1
	strh r0, [r2, #2]
	b _08020C14
_08020C02:
	mov r0, ip
	ldrh r1, [r0]
	adds r0, r5, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
_08020C0E:
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
_08020C14:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Yemeba
Yemeba: @ 0x08020C24
	push {r4, lr}
	ldr r4, _08020C4C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08020C3C
	ldr r0, _08020C50 @ =0x0000015F
	bl CheckPlayNotAlreadyPlayingSound
_08020C3C:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08020C54
	bl SpriteUpdateFreezeTimer
	b _08020E2C
	.align 2, 0
_08020C4C: .4byte gCurrentSprite
_08020C50: .4byte 0x0000015F
_08020C54:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08020C60
	b _08020E18
_08020C60:
	lsls r0, r0, #2
	ldr r1, _08020C6C @ =_08020C70
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08020C6C: .4byte _08020C70
_08020C70: @ jump table
	.4byte _08020DE0 @ case 0
	.4byte _08020DE6 @ case 1
	.4byte _08020DEC @ case 2
	.4byte _08020E18 @ case 3
	.4byte _08020E18 @ case 4
	.4byte _08020E18 @ case 5
	.4byte _08020E18 @ case 6
	.4byte _08020E18 @ case 7
	.4byte _08020E18 @ case 8
	.4byte _08020E18 @ case 9
	.4byte _08020E18 @ case 10
	.4byte _08020E18 @ case 11
	.4byte _08020E18 @ case 12
	.4byte _08020E18 @ case 13
	.4byte _08020E18 @ case 14
	.4byte _08020E18 @ case 15
	.4byte _08020E18 @ case 16
	.4byte _08020E18 @ case 17
	.4byte _08020E18 @ case 18
	.4byte _08020E18 @ case 19
	.4byte _08020E18 @ case 20
	.4byte _08020E18 @ case 21
	.4byte _08020E18 @ case 22
	.4byte _08020DF2 @ case 23
	.4byte _08020DF6 @ case 24
	.4byte _08020E18 @ case 25
	.4byte _08020E18 @ case 26
	.4byte _08020E18 @ case 27
	.4byte _08020E18 @ case 28
	.4byte _08020E18 @ case 29
	.4byte _08020E18 @ case 30
	.4byte _08020E18 @ case 31
	.4byte _08020E18 @ case 32
	.4byte _08020E18 @ case 33
	.4byte _08020E18 @ case 34
	.4byte _08020E18 @ case 35
	.4byte _08020E18 @ case 36
	.4byte _08020E18 @ case 37
	.4byte _08020E18 @ case 38
	.4byte _08020E18 @ case 39
	.4byte _08020E18 @ case 40
	.4byte _08020E18 @ case 41
	.4byte _08020E18 @ case 42
	.4byte _08020E18 @ case 43
	.4byte _08020E18 @ case 44
	.4byte _08020E18 @ case 45
	.4byte _08020E18 @ case 46
	.4byte _08020E18 @ case 47
	.4byte _08020E18 @ case 48
	.4byte _08020E18 @ case 49
	.4byte _08020E18 @ case 50
	.4byte _08020E18 @ case 51
	.4byte _08020E18 @ case 52
	.4byte _08020E18 @ case 53
	.4byte _08020E18 @ case 54
	.4byte _08020E18 @ case 55
	.4byte _08020E18 @ case 56
	.4byte _08020E18 @ case 57
	.4byte _08020E18 @ case 58
	.4byte _08020E18 @ case 59
	.4byte _08020E18 @ case 60
	.4byte _08020E18 @ case 61
	.4byte _08020E18 @ case 62
	.4byte _08020E18 @ case 63
	.4byte _08020E18 @ case 64
	.4byte _08020E18 @ case 65
	.4byte _08020E18 @ case 66
	.4byte _08020E18 @ case 67
	.4byte _08020E18 @ case 68
	.4byte _08020E18 @ case 69
	.4byte _08020E18 @ case 70
	.4byte _08020E18 @ case 71
	.4byte _08020E18 @ case 72
	.4byte _08020E18 @ case 73
	.4byte _08020E18 @ case 74
	.4byte _08020E18 @ case 75
	.4byte _08020E18 @ case 76
	.4byte _08020E18 @ case 77
	.4byte _08020E18 @ case 78
	.4byte _08020E18 @ case 79
	.4byte _08020E18 @ case 80
	.4byte _08020E18 @ case 81
	.4byte _08020E18 @ case 82
	.4byte _08020E18 @ case 83
	.4byte _08020E18 @ case 84
	.4byte _08020E18 @ case 85
	.4byte _08020E18 @ case 86
	.4byte _08020DFC @ case 87
	.4byte _08020E00 @ case 88
	.4byte _08020E06 @ case 89
	.4byte _08020E0A @ case 90
	.4byte _08020E10 @ case 91
_08020DE0:
	bl YamebaInit
	b _08020E18
_08020DE6:
	bl YamebaIdleInit
	b _08020E18
_08020DEC:
	bl YamebaIdle
	b _08020E18
_08020DF2:
	bl YamebaChasingSamusInit
_08020DF6:
	bl YamebaChasingSamus
	b _08020E18
_08020DFC:
	bl SpriteDyingInit
_08020E00:
	bl SpriteDying
	b _08020E18
_08020E06:
	bl YamebaInit
_08020E0A:
	bl SpriteSpawningFromX
	b _08020E18
_08020E10:
	bl YamebaTurningIntoX
	bl XParasiteInit
_08020E18:
	ldr r2, _08020E34 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08020E2C
	ldr r0, _08020E38 @ =0x0000F7FF
	ands r0, r1
	strh r0, [r2]
_08020E2C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08020E34: .4byte gCurrentSprite
_08020E38: .4byte 0x0000F7FF

	thumb_func_start SecurityPadUpdatePalette
SecurityPadUpdatePalette: @ 0x08020E3C
	push {r4, r5, r6, lr}
	ldr r1, _08020E7C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r2, [r0]
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r6, r1, #0
	cmp r0, #3
	bhi _08020EEA
	lsls r0, r0, #0x1e
	lsrs r2, r0, #0x18
	movs r5, #1
	adds r3, r6, #0
	adds r3, #0x31
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x30
	beq _08020EB4
	cmp r0, #0x30
	bgt _08020E86
	cmp r0, #0x10
	beq _08020E9A
	cmp r0, #0x10
	bgt _08020E80
	cmp r0, #0
	beq _08020EC2
	b _08020ED0
	.align 2, 0
_08020E7C: .4byte gCurrentSprite
_08020E80:
	cmp r0, #0x20
	beq _08020EA8
	b _08020ED0
_08020E86:
	cmp r0, #0x50
	beq _08020E9A
	cmp r0, #0x50
	bgt _08020E94
	cmp r0, #0x40
	beq _08020EA8
	b _08020ED0
_08020E94:
	cmp r0, #0x60
	beq _08020EC0
	b _08020ED0
_08020E9A:
	lsls r1, r2, #1
	ldr r0, _08020EA4 @ =0x082F78FC
	adds r4, r1, r0
	b _08020ED2
	.align 2, 0
_08020EA4: .4byte 0x082F78FC
_08020EA8:
	lsls r1, r2, #1
	ldr r0, _08020EB0 @ =0x082F791C
	adds r4, r1, r0
	b _08020ED2
	.align 2, 0
_08020EB0: .4byte 0x082F791C
_08020EB4:
	lsls r1, r2, #1
	ldr r0, _08020EBC @ =0x082F793C
	adds r4, r1, r0
	b _08020ED2
	.align 2, 0
_08020EBC: .4byte 0x082F793C
_08020EC0:
	strb r5, [r3]
_08020EC2:
	lsls r1, r2, #1
	ldr r0, _08020ECC @ =0x082F78DC
	adds r4, r1, r0
	b _08020ED2
	.align 2, 0
_08020ECC: .4byte 0x082F78DC
_08020ED0:
	movs r5, #0
_08020ED2:
	cmp r5, #0
	beq _08020EEA
	ldr r1, _08020EF0 @ =0x040000D4
	str r4, [r1]
	ldrb r0, [r6, #0x1f]
	lsls r0, r0, #5
	ldr r2, _08020EF4 @ =0x05000310
	adds r0, r0, r2
	str r0, [r1, #4]
	ldr r0, _08020EF8 @ =0x80000008
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08020EEA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08020EF0: .4byte 0x040000D4
_08020EF4: .4byte 0x05000310
_08020EF8: .4byte 0x80000008

	thumb_func_start SecurityPadInit
SecurityPadInit: @ 0x08020EFC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r4, _08020F5C @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r2, #0
	ldr r1, _08020F60 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r1, r4, #0
	adds r1, #0x21
	movs r0, #1
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x31
	strb r2, [r0]
	ldr r0, _08020F64 @ =gCurrentArea
	ldrb r0, [r0]
	cmp r0, #3
	beq _08020F76
	cmp r0, #3
	bgt _08020F68
	cmp r0, #2
	beq _08020F72
	b _08020F82
	.align 2, 0
_08020F5C: .4byte gCurrentSprite
_08020F60: .4byte 0x0000FFFC
_08020F64: .4byte gCurrentArea
_08020F68:
	cmp r0, #4
	beq _08020F7E
	cmp r0, #5
	beq _08020F7A
	b _08020F82
_08020F72:
	movs r6, #1
	b _08020F84
_08020F76:
	movs r6, #2
	b _08020F84
_08020F7A:
	movs r6, #3
	b _08020F84
_08020F7E:
	movs r6, #4
	b _08020F84
_08020F82:
	movs r6, #5
_08020F84:
	ldr r5, _08020FE0 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x30
	movs r7, #0
	strb r6, [r0]
	movs r0, #0
	bl CheckOrUnlockSecurityLevel
	cmp r0, #0
	bne _08021020
	ldr r0, _08020FE4 @ =0x082F789C
	str r0, [r5, #0x18]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r6, #1
	ands r6, r0
	cmp r6, #0
	beq _08020FE8
	ldrb r2, [r5, #0x1f]
	adds r4, r5, #0
	adds r4, #0x23
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x25
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	str r7, [sp, #8]
	b _08021016
	.align 2, 0
_08020FE0: .4byte gCurrentSprite
_08020FE4: .4byte 0x082F789C
_08020FE8:
	ldrb r2, [r5, #0x1f]
	adds r7, r5, #0
	adds r7, #0x23
	ldrb r3, [r7]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	movs r4, #0x40
	str r4, [sp, #8]
	movs r0, #0x25
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	str r4, [sp, #8]
_08021016:
	movs r0, #0x12
	movs r1, #1
	bl SpriteSpawnSecondary
	b _080210B2
_08021020:
	ldr r0, _08021078 @ =0x082F788C
	str r0, [r5, #0x18]
	adds r0, r5, #0
	adds r0, #0x2e
	movs r2, #1
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	adds r6, r2, #0
	ands r6, r0
	cmp r6, #0
	beq _0802107C
	ldrb r2, [r5, #0x1f]
	adds r4, r5, #0
	adds r4, #0x23
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x25
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x12
	movs r1, #0
	bl SpriteSpawnSecondary
	b _080210B2
	.align 2, 0
_08021078: .4byte 0x082F788C
_0802107C:
	ldrb r2, [r5, #0x1f]
	adds r7, r5, #0
	adds r7, #0x23
	ldrb r3, [r7]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	movs r4, #0x40
	str r4, [sp, #8]
	movs r0, #0x25
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x12
	movs r1, #0
	bl SpriteSpawnSecondary
_080210B2:
	ldr r0, _080210C0 @ =gCurrentSprite
	adds r0, #0x2f
	strb r6, [r0]
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080210C0: .4byte gCurrentSprite

	thumb_func_start SecurityPadIdleActiveInit
SecurityPadIdleActiveInit: @ 0x080210C4
	ldr r0, _080210E0 @ =gCurrentSprite
	ldr r1, _080210E4 @ =0x082F788C
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r2, r0, #0
	adds r2, #0x2e
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bx lr
	.align 2, 0
_080210E0: .4byte gCurrentSprite
_080210E4: .4byte 0x082F788C

	thumb_func_start SecurityPadIdleActive
SecurityPadIdleActive: @ 0x080210E8
	push {lr}
	bl NavPadDetectSamus
	cmp r0, #0
	beq _08021128
	ldr r3, _0802111C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08021130
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08021120 @ =0x082F783C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _08021124 @ =0x00000101
	bl SoundPlay
	b _08021130
	.align 2, 0
_0802111C: .4byte gCurrentSprite
_08021120: .4byte 0x082F783C
_08021124: .4byte 0x00000101
_08021128:
	ldr r0, _08021134 @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
_08021130:
	pop {r0}
	bx r0
	.align 2, 0
_08021134: .4byte gCurrentSprite

	thumb_func_start SecurityPadCheckPressingSwitchAnimEnded
SecurityPadCheckPressingSwitchAnimEnded: @ 0x08021138
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08021156
	ldr r1, _0802115C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _08021160 @ =0x082F789C
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
_08021156:
	pop {r0}
	bx r0
	.align 2, 0
_0802115C: .4byte gCurrentSprite
_08021160: .4byte 0x082F789C

	thumb_func_start SecurityPadGrabSamus
SecurityPadGrabSamus: @ 0x08021164
	push {r4, lr}
	movs r4, #0
	bl NavPadDetectSamus
	adds r3, r0, #0
	cmp r3, #0
	beq _08021208
	bl SamusCheckMorphed
	cmp r0, #0
	bne _08021222
	ldr r0, _080211AC @ =gSamusData
	ldrb r1, [r0, #2]
	adds r2, r0, #0
	cmp r1, #0
	bne _08021222
	ldr r1, _080211B0 @ =gCurrentSprite
	ldrh r0, [r1, #4]
	strh r0, [r2, #0x16]
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _08021194
	movs r0, #0
	strb r0, [r2, #5]
_08021194:
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080211B4
	ldrh r1, [r2, #0x12]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080211C0
	b _080211C4
	.align 2, 0
_080211AC: .4byte gSamusData
_080211B0: .4byte gCurrentSprite
_080211B4:
	ldrh r1, [r2, #0x12]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080211C0
	movs r4, #1
_080211C0:
	cmp r4, #0
	beq _080211DC
_080211C4:
	ldr r0, _080211D8 @ =0x0828FD04
	ldrb r1, [r2]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r1, [r1]
	movs r0, #0x22
	bl _call_via_r1
	b _080211EC
	.align 2, 0
_080211D8: .4byte 0x0828FD04
_080211DC:
	ldr r0, _08021200 @ =0x0828FD04
	ldrb r1, [r2]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r1, [r1]
	movs r0, #0x21
	bl _call_via_r1
_080211EC:
	ldr r1, _08021204 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x38
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	b _08021222
	.align 2, 0
_08021200: .4byte 0x0828FD04
_08021204: .4byte gCurrentSprite
_08021208:
	ldr r1, _08021228 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _0802122C @ =0x082F7864
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_08021222:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08021228: .4byte gCurrentSprite
_0802122C: .4byte 0x082F7864

	thumb_func_start SecurityPadDepressingSwitch
SecurityPadDepressingSwitch: @ 0x08021230
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802123E
	bl SecurityPadIdleActiveInit
_0802123E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SecurityPadIdleBeforeUnlocking
SecurityPadIdleBeforeUnlocking: @ 0x08021244
	push {lr}
	ldr r1, _08021268 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08021264
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #0x3a
	strb r1, [r0]
	movs r0, #0xb4
	strb r0, [r2]
_08021264:
	pop {r0}
	bx r0
	.align 2, 0
_08021268: .4byte gCurrentSprite

	thumb_func_start SecurityPadUnlocking
SecurityPadUnlocking: @ 0x0802126C
	push {lr}
	ldr r1, _08021290 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802128C
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #0x3c
	strb r1, [r0]
	movs r0, #0x14
	strb r0, [r2]
_0802128C:
	pop {r0}
	bx r0
	.align 2, 0
_08021290: .4byte gCurrentSprite

	thumb_func_start SecurityPadFinishedUnlocking
SecurityPadFinishedUnlocking: @ 0x08021294
	push {r4, lr}
	ldr r4, _080212D8 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080212D2
	movs r0, #0
	bl TrySpawnMessageBanner
	ldr r1, _080212DC @ =0x0828FD04
	ldr r0, _080212E0 @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0
	bl _call_via_r1
	ldr r1, _080212E4 @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_080212D2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080212D8: .4byte gCurrentSprite
_080212DC: .4byte 0x0828FD04
_080212E0: .4byte gSamusData
_080212E4: .4byte gPreventMovementTimer

	thumb_func_start SecurityPadMonitorInit
SecurityPadMonitorInit: @ 0x080212E8
	push {r4, r5, lr}
	ldr r0, _0802134C @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r4, #0
	orrs r0, r1
	strb r0, [r2]
	mov r5, ip
	ldrh r1, [r5]
	ldr r0, _08021350 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r5]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _08021354 @ =0x0000FFFC
	strh r1, [r5, #0xa]
	movs r3, #4
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	mov r0, ip
	adds r0, #0x22
	strb r3, [r0]
	ldr r0, _08021358 @ =0x082F7754
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r4, [r5, #0x16]
	ldrb r0, [r5, #0x1e]
	cmp r0, #0
	beq _0802135C
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1e
	b _08021362
	.align 2, 0
_0802134C: .4byte gCurrentSprite
_08021350: .4byte 0x0000FFFB
_08021354: .4byte 0x0000FFFC
_08021358: .4byte 0x082F7754
_0802135C:
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
_08021362:
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SecurityPadMonitorIdle
SecurityPadMonitorIdle: @ 0x0802136C
	push {lr}
	ldr r2, _080213A4 @ =gSpriteData
	ldr r3, _080213A8 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _080213A0
	ldr r0, _080213AC @ =0x082F7764
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, #0xf7
	bl SoundPlay
_080213A0:
	pop {r0}
	bx r0
	.align 2, 0
_080213A4: .4byte gSpriteData
_080213A8: .4byte gCurrentSprite
_080213AC: .4byte 0x082F7764

	thumb_func_start SecurityPadMonitorArmExtending
SecurityPadMonitorArmExtending: @ 0x080213B0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080213EC
	ldr r1, _080213F0 @ =gCurrentSprite
	ldr r0, _080213F4 @ =0x082F78AC
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	movs r0, #1
	bl CheckOrUnlockSecurityLevel
	ldr r1, _080213F8 @ =0x0828FD04
	ldr r0, _080213FC @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x34
	bl _call_via_r1
	movs r0, #0x87
	lsls r0, r0, #1
	bl SoundPlay
_080213EC:
	pop {r0}
	bx r0
	.align 2, 0
_080213F0: .4byte gCurrentSprite
_080213F4: .4byte 0x082F78AC
_080213F8: .4byte 0x0828FD04
_080213FC: .4byte gSamusData

	thumb_func_start SecurityPadMonitorUnlocking
SecurityPadMonitorUnlocking: @ 0x08021400
	push {lr}
	ldr r2, _08021438 @ =gSpriteData
	ldr r3, _0802143C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	bne _08021434
	ldr r0, _08021440 @ =0x082F780C
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, #0xf4
	bl SoundPlay
_08021434:
	pop {r0}
	bx r0
	.align 2, 0
_08021438: .4byte gSpriteData
_0802143C: .4byte gCurrentSprite
_08021440: .4byte 0x082F780C

	thumb_func_start SecurityPadMonitorArmRetracting
SecurityPadMonitorArmRetracting: @ 0x08021444
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08021460
	ldr r1, _08021464 @ =gCurrentSprite
	ldr r0, _08021468 @ =0x082F7754
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_08021460:
	pop {r0}
	bx r0
	.align 2, 0
_08021464: .4byte gCurrentSprite
_08021468: .4byte 0x082F7754

	thumb_func_start SecurityPadScreenInit
SecurityPadScreenInit: @ 0x0802146C
	push {r4, lr}
	ldr r0, _080214D4 @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	mov r4, ip
	ldrh r1, [r4]
	ldr r0, _080214D8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _080214DC @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	mov r1, ip
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _080214E4
	mov r0, ip
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
	ldr r0, _080214E0 @ =0x082F77E4
	str r0, [r4, #0x18]
	b _080214F2
	.align 2, 0
_080214D4: .4byte gCurrentSprite
_080214D8: .4byte 0x0000FFFB
_080214DC: .4byte 0x0000FFFC
_080214E0: .4byte 0x082F77E4
_080214E4:
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	ldr r0, _080214F8 @ =0x082F7794
	mov r1, ip
	str r0, [r1, #0x18]
_080214F2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080214F8: .4byte 0x082F7794

	thumb_func_start SecurityPadScreenIdle
SecurityPadScreenIdle: @ 0x080214FC
	push {lr}
	ldr r3, _0802153C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _08021540 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _08021536
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x8c
	bhi _08021536
	ldr r0, _08021544 @ =0x082F77BC
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_08021536:
	pop {r0}
	bx r0
	.align 2, 0
_0802153C: .4byte gCurrentSprite
_08021540: .4byte gSpriteData
_08021544: .4byte 0x082F77BC

	thumb_func_start SecurityPadScreenUnlocking
SecurityPadScreenUnlocking: @ 0x08021548
	push {lr}
	ldr r2, _0802157C @ =gSpriteData
	ldr r3, _08021580 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	bne _08021576
	ldr r0, _08021584 @ =0x082F77E4
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
_08021576:
	pop {r0}
	bx r0
	.align 2, 0
_0802157C: .4byte gSpriteData
_08021580: .4byte gCurrentSprite
_08021584: .4byte 0x082F77E4

	thumb_func_start SecurityPad
SecurityPad: @ 0x08021588
	push {lr}
	ldr r0, _080215A8 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _0802159E
	b _080216D8
_0802159E:
	lsls r0, r0, #2
	ldr r1, _080215AC @ =_080215B0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080215A8: .4byte gCurrentSprite
_080215AC: .4byte _080215B0
_080215B0: @ jump table
	.4byte _080216A4 @ case 0
	.4byte _080216AA @ case 1
	.4byte _080216B0 @ case 2
	.4byte _080216D8 @ case 3
	.4byte _080216D8 @ case 4
	.4byte _080216D8 @ case 5
	.4byte _080216D8 @ case 6
	.4byte _080216D8 @ case 7
	.4byte _080216D8 @ case 8
	.4byte _080216D8 @ case 9
	.4byte _080216D8 @ case 10
	.4byte _080216D8 @ case 11
	.4byte _080216D8 @ case 12
	.4byte _080216D8 @ case 13
	.4byte _080216D8 @ case 14
	.4byte _080216D8 @ case 15
	.4byte _080216D8 @ case 16
	.4byte _080216D8 @ case 17
	.4byte _080216D8 @ case 18
	.4byte _080216D8 @ case 19
	.4byte _080216D8 @ case 20
	.4byte _080216D8 @ case 21
	.4byte _080216D8 @ case 22
	.4byte _080216D8 @ case 23
	.4byte _080216B6 @ case 24
	.4byte _080216D8 @ case 25
	.4byte _080216BC @ case 26
	.4byte _080216D8 @ case 27
	.4byte _080216C2 @ case 28
	.4byte _080216D8 @ case 29
	.4byte _080216D8 @ case 30
	.4byte _080216D8 @ case 31
	.4byte _080216D8 @ case 32
	.4byte _080216D8 @ case 33
	.4byte _080216D8 @ case 34
	.4byte _080216D8 @ case 35
	.4byte _080216D8 @ case 36
	.4byte _080216D8 @ case 37
	.4byte _080216D8 @ case 38
	.4byte _080216D8 @ case 39
	.4byte _080216D8 @ case 40
	.4byte _080216D8 @ case 41
	.4byte _080216D8 @ case 42
	.4byte _080216D8 @ case 43
	.4byte _080216D8 @ case 44
	.4byte _080216D8 @ case 45
	.4byte _080216D8 @ case 46
	.4byte _080216D8 @ case 47
	.4byte _080216D8 @ case 48
	.4byte _080216D8 @ case 49
	.4byte _080216D8 @ case 50
	.4byte _080216D8 @ case 51
	.4byte _080216D8 @ case 52
	.4byte _080216D8 @ case 53
	.4byte _080216D8 @ case 54
	.4byte _080216D8 @ case 55
	.4byte _080216C8 @ case 56
	.4byte _080216D8 @ case 57
	.4byte _080216CE @ case 58
	.4byte _080216D8 @ case 59
	.4byte _080216D4 @ case 60
_080216A4:
	bl SecurityPadInit
	b _080216D8
_080216AA:
	bl SecurityPadIdleActiveInit
	b _080216D8
_080216B0:
	bl SecurityPadIdleActive
	b _080216D8
_080216B6:
	bl SecurityPadCheckPressingSwitchAnimEnded
	b _080216D8
_080216BC:
	bl SecurityPadGrabSamus
	b _080216D8
_080216C2:
	bl SecurityPadDepressingSwitch
	b _080216D8
_080216C8:
	bl SecurityPadIdleBeforeUnlocking
	b _080216D8
_080216CE:
	bl SecurityPadUnlocking
	b _080216D8
_080216D4:
	bl SecurityPadFinishedUnlocking
_080216D8:
	bl SecurityPadUpdatePalette
	pop {r0}
	bx r0

	thumb_func_start SecurityPadMonitor
SecurityPadMonitor: @ 0x080216E0
	push {lr}
	ldr r0, _08021700 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _08021798
	lsls r0, r0, #2
	ldr r1, _08021704 @ =_08021708
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08021700: .4byte gCurrentSprite
_08021704: .4byte _08021708
_08021708: @ jump table
	.4byte _0802177C @ case 0
	.4byte _08021798 @ case 1
	.4byte _08021782 @ case 2
	.4byte _08021798 @ case 3
	.4byte _08021798 @ case 4
	.4byte _08021798 @ case 5
	.4byte _08021798 @ case 6
	.4byte _08021798 @ case 7
	.4byte _08021798 @ case 8
	.4byte _08021798 @ case 9
	.4byte _08021798 @ case 10
	.4byte _08021798 @ case 11
	.4byte _08021798 @ case 12
	.4byte _08021798 @ case 13
	.4byte _08021798 @ case 14
	.4byte _08021798 @ case 15
	.4byte _08021798 @ case 16
	.4byte _08021798 @ case 17
	.4byte _08021798 @ case 18
	.4byte _08021798 @ case 19
	.4byte _08021798 @ case 20
	.4byte _08021798 @ case 21
	.4byte _08021798 @ case 22
	.4byte _08021798 @ case 23
	.4byte _08021788 @ case 24
	.4byte _08021798 @ case 25
	.4byte _0802178E @ case 26
	.4byte _08021798 @ case 27
	.4byte _08021794 @ case 28
_0802177C:
	bl SecurityPadMonitorInit
	b _08021798
_08021782:
	bl SecurityPadMonitorIdle
	b _08021798
_08021788:
	bl SecurityPadMonitorArmExtending
	b _08021798
_0802178E:
	bl SecurityPadMonitorUnlocking
	b _08021798
_08021794:
	bl SecurityPadMonitorArmRetracting
_08021798:
	pop {r0}
	bx r0

	thumb_func_start SecurityPadScreen
SecurityPadScreen: @ 0x0802179C
	push {lr}
	ldr r0, _080217BC @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080217CC
	cmp r0, #2
	bgt _080217C0
	cmp r0, #0
	beq _080217C6
	b _080217D6
	.align 2, 0
_080217BC: .4byte gCurrentSprite
_080217C0:
	cmp r0, #0x18
	beq _080217D2
	b _080217D6
_080217C6:
	bl SecurityPadScreenInit
	b _080217D6
_080217CC:
	bl SecurityPadScreenIdle
	b _080217D6
_080217D2:
	bl SecurityPadScreenUnlocking
_080217D6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start AreaBannerInit
AreaBannerInit: @ 0x080217DC
	push {r4, lr}
	ldr r0, _08021838 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x25
	movs r3, #0
	strb r3, [r0]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x80
	strb r0, [r1]
	movs r2, #0
	ldr r1, _0802183C @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #7
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	ldrb r0, [r4, #0x1e]
	cmp r0, #0xb
	bls _08021844
	ldr r0, _08021840 @ =0x082F875C
	str r0, [r4, #0x18]
	b _0802184A
	.align 2, 0
_08021838: .4byte gCurrentSprite
_0802183C: .4byte 0x0000FFFC
_08021840: .4byte 0x082F875C
_08021844:
	ldr r0, _08021850 @ =0x082F87FC
	mov r1, ip
	str r0, [r1, #0x18]
_0802184A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08021850: .4byte 0x082F87FC

	thumb_func_start AreaBannerMovingUp
AreaBannerMovingUp: @ 0x08021854
	push {r4, r5, r6, lr}
	ldr r5, _08021880 @ =gCurrentSprite
	adds r6, r5, #0
	adds r6, #0x2e
	ldrb r1, [r6]
	adds r4, r1, #0
	cmp r4, #0
	beq _08021888
	ldrb r0, [r5, #0x1c]
	subs r0, #1
	strb r0, [r5, #0x1c]
	subs r0, r1, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080218B8
	ldrh r1, [r5]
	ldr r0, _08021884 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r5]
	b _080218B8
	.align 2, 0
_08021880: .4byte gCurrentSprite
_08021884: .4byte 0x0000FFFB
_08021888:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080218B8
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	ldrb r0, [r5, #0x1e]
	cmp r0, #0xb
	bls _080218B0
	ldr r0, _080218AC @ =0x082F874C
	str r0, [r5, #0x18]
	movs r0, #0x3c
	b _080218B6
	.align 2, 0
_080218AC: .4byte 0x082F874C
_080218B0:
	ldr r0, _080218C0 @ =0x082F87EC
	str r0, [r5, #0x18]
	movs r0, #0x78
_080218B6:
	strb r0, [r6]
_080218B8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080218C0: .4byte 0x082F87EC

	thumb_func_start AreaBannerStatic
AreaBannerStatic: @ 0x080218C4
	push {lr}
	ldr r2, _080218F0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _080218FC
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
	ldrb r0, [r2, #0x1e]
	cmp r0, #0xb
	bls _080218F8
	ldr r0, _080218F4 @ =0x082F87A4
	b _080218FA
	.align 2, 0
_080218F0: .4byte gCurrentSprite
_080218F4: .4byte 0x082F87A4
_080218F8:
	ldr r0, _08021900 @ =0x082F883C
_080218FA:
	str r0, [r2, #0x18]
_080218FC:
	pop {r0}
	bx r0
	.align 2, 0
_08021900: .4byte 0x082F883C

	thumb_func_start AreaBannerMovingDown
AreaBannerMovingDown: @ 0x08021904
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08021914
	ldr r1, _08021918 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08021914:
	pop {r0}
	bx r0
	.align 2, 0
_08021918: .4byte gCurrentSprite

	thumb_func_start AreaBanner
AreaBanner: @ 0x0802191C
	push {lr}
	ldr r0, _0802193C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08021950
	cmp r0, #2
	bgt _08021940
	cmp r0, #0
	beq _0802194A
	b _08021960
	.align 2, 0
_0802193C: .4byte gCurrentSprite
_08021940:
	cmp r0, #0x18
	beq _08021956
	cmp r0, #0x1a
	beq _0802195C
	b _08021960
_0802194A:
	bl AreaBannerInit
	b _08021960
_08021950:
	bl AreaBannerMovingUp
	b _08021960
_08021956:
	bl AreaBannerStatic
	b _08021960
_0802195C:
	bl AreaBannerMovingDown
_08021960:
	ldr r0, _08021970 @ =gCurrentSprite
	ldrb r1, [r0, #0x1e]
	adds r2, r0, #0
	cmp r1, #0xb
	bls _08021974
	movs r0, #0x36
	b _08021976
	.align 2, 0
_08021970: .4byte gCurrentSprite
_08021974:
	movs r0, #0x98
_08021976:
	strh r0, [r2, #2]
	movs r0, #0x78
	strh r0, [r2, #4]
	pop {r0}
	bx r0

	thumb_func_start SkreeInit
SkreeInit: @ 0x08021980
	push {r4, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _080219AC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080219B0
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _080219B0
	strh r0, [r2]
	b _08021A20
	.align 2, 0
_080219AC: .4byte gCurrentSprite
_080219B0:
	ldr r3, _08021A0C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x25
	movs r4, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2d
	strb r4, [r0]
	subs r0, #6
	movs r2, #0x18
	strb r2, [r0]
	adds r1, #3
	movs r0, #4
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	ldr r0, _08021A10 @ =0x0000FFB0
	strh r0, [r3, #0xa]
	strh r4, [r3, #0xc]
	adds r0, #0x38
	strh r0, [r3, #0xe]
	strh r2, [r3, #0x10]
	ldr r2, _08021A14 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08021A1C
	ldr r0, _08021A18 @ =0x082F9220
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r4, [r3, #0x16]
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	b _08021A1E
	.align 2, 0
_08021A0C: .4byte gCurrentSprite
_08021A10: .4byte 0x0000FFB0
_08021A14: .4byte sPrimarySpriteStats
_08021A18: .4byte 0x082F9220
_08021A1C:
	ldrh r0, [r3, #2]
_08021A1E:
	strh r0, [r3, #6]
_08021A20:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SkreeIdleInit
SkreeIdleInit: @ 0x08021A28
	ldr r1, _08021A3C @ =gCurrentSprite
	ldr r0, _08021A40 @ =0x082F9248
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bx lr
	.align 2, 0
_08021A3C: .4byte gCurrentSprite
_08021A40: .4byte 0x082F9248

	thumb_func_start SkreeDetectSamus
SkreeDetectSamus: @ 0x08021A44
	push {lr}
	ldr r3, _08021A80 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _08021A7C
	ldr r2, _08021A84 @ =gSamusData
	ldrh r1, [r2, #0x18]
	ldrh r0, [r3, #2]
	adds r0, #0xc8
	cmp r1, r0
	ble _08021A7C
	ldrh r2, [r2, #0x16]
	ldrh r1, [r3, #4]
	adds r0, r1, #0
	subs r0, #0x96
	cmp r2, r0
	ble _08021A7C
	adds r0, r1, #0
	adds r0, #0x96
	cmp r2, r0
	bge _08021A7C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_08021A7C:
	pop {r0}
	bx r0
	.align 2, 0
_08021A80: .4byte gCurrentSprite
_08021A84: .4byte gSamusData

	thumb_func_start SkreeWarningInit
SkreeWarningInit: @ 0x08021A88
	ldr r0, _08021A94 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	bx lr
	.align 2, 0
_08021A94: .4byte gCurrentSprite

	thumb_func_start SkreeWarning
SkreeWarning: @ 0x08021A98
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08021AAA
	ldr r0, _08021AB0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x29
	strb r1, [r0]
_08021AAA:
	pop {r0}
	bx r0
	.align 2, 0
_08021AB0: .4byte gCurrentSprite

	thumb_func_start SkreeGoingDownInit
SkreeGoingDownInit: @ 0x08021AB4
	push {lr}
	ldr r2, _08021AE4 @ =gCurrentSprite
	ldr r0, _08021AE8 @ =0x082F9260
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	movs r1, #0
	strh r0, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	movs r0, #0xed
	lsls r0, r0, #1
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08021AE4: .4byte gCurrentSprite
_08021AE8: .4byte 0x082F9260

	thumb_func_start SkreeGoingDown
SkreeGoingDown: @ 0x08021AEC
	push {r4, r5, r6, r7, lr}
	ldr r4, _08021B18 @ =gCurrentSprite
	adds r6, r4, #0
	adds r6, #0x2e
	ldrb r0, [r6]
	cmp r0, #0
	beq _08021BC8
	ldrh r0, [r4, #2]
	subs r0, #0x64
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08021B1C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08021B20
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2b
	strb r0, [r1]
	b _08021C2E
	.align 2, 0
_08021B18: .4byte gCurrentSprite
_08021B1C: .4byte gPreviousCollisionCheck
_08021B20:
	ldrh r0, [r4, #2]
	adds r0, #6
	strh r0, [r4, #2]
	ldrh r5, [r4, #2]
	ldrh r4, [r4, #4]
	ldrb r0, [r6]
	cmp r0, #1
	bne _08021B48
	adds r2, r5, #0
	subs r2, #0xa
	movs r0, #0
	movs r1, #0x11
	adds r3, r4, #0
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0x10
	adds r3, r4, #0
	adds r3, #0xc
	b _08021B88
_08021B48:
	cmp r0, #2
	bne _08021B6C
	adds r2, r5, #0
	subs r2, #0x28
	adds r3, r4, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x13
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0x1e
	movs r0, #0
	movs r1, #4
	adds r3, r4, #0
	bl SpriteDebrisInit
	b _08021BB6
_08021B6C:
	cmp r0, #4
	bne _08021B92
	adds r2, r5, #0
	subs r2, #0x3c
	adds r3, r4, #0
	subs r3, #0x14
	movs r0, #0
	movs r1, #0x11
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0x46
	adds r3, r4, #0
	adds r3, #0x1e
_08021B88:
	movs r0, #0
	movs r1, #0x12
	bl SpriteDebrisInit
	b _08021BB6
_08021B92:
	cmp r0, #6
	bne _08021BB6
	adds r2, r5, #0
	subs r2, #0x5c
	adds r3, r4, #0
	adds r3, #0x14
	movs r0, #0
	movs r1, #0x13
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0x64
	adds r3, r4, #0
	subs r3, #0x1e
	movs r0, #0
	movs r1, #4
	bl SpriteDebrisInit
_08021BB6:
	ldr r1, _08021BC4 @ =gCurrentSprite
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _08021C2E
	.align 2, 0
_08021BC4: .4byte gCurrentSprite
_08021BC8:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08021BEC @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08021BF4
	strh r1, [r4, #2]
	movs r0, #1
	strb r0, [r6]
	ldrh r0, [r4, #4]
	strh r0, [r4, #8]
	ldr r0, _08021BF0 @ =0x000001DB
	bl SoundPlay
	b _08021C2E
	.align 2, 0
_08021BEC: .4byte gPreviousVerticalCollisionCheck
_08021BF0: .4byte 0x000001DB
_08021BF4:
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08021C1C @ =0x082F887C
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08021C20 @ =0x00007FFF
	cmp r1, r0
	bne _08021C24
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08021C2C
	.align 2, 0
_08021C1C: .4byte 0x082F887C
_08021C20: .4byte 0x00007FFF
_08021C24:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_08021C2C:
	strh r0, [r4, #2]
_08021C2E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start SkreeCrashingInit
SkreeCrashingInit: @ 0x08021C34
	ldr r0, _08021C50 @ =gCurrentSprite
	ldr r1, _08021C54 @ =0x082F92C8
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r2, r0, #0
	adds r2, #0x2e
	movs r1, #0x3c
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #0x2c
	strb r1, [r0]
	bx lr
	.align 2, 0
_08021C50: .4byte gCurrentSprite
_08021C54: .4byte 0x082F92C8

	thumb_func_start SkreeCrashing
SkreeCrashing: @ 0x08021C58
	push {r4, lr}
	ldr r4, _08021C6C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08021C70
	subs r0, #1
	b _08021C8E
	.align 2, 0
_08021C6C: .4byte gCurrentSprite
_08021C70:
	ldrh r3, [r4, #8]
	adds r1, r3, #0
	subs r1, #0xc0
	ldr r0, _08021C98 @ =gSamusData
	ldrh r2, [r0, #0x16]
	cmp r1, r2
	bge _08021C90
	adds r0, r3, #0
	adds r0, #0xc0
	cmp r2, r0
	bge _08021C90
	strh r2, [r4, #4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2d
_08021C8E:
	strb r0, [r1]
_08021C90:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08021C98: .4byte gSamusData

	thumb_func_start SkreeGoingUpWarningInit
SkreeGoingUpWarningInit: @ 0x08021C9C
	ldr r2, _08021CC4 @ =gCurrentSprite
	ldr r0, _08021CC8 @ =0x082F92C8
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	movs r1, #0
	strh r0, [r2, #0x16]
	adds r3, r2, #0
	adds r3, #0x2e
	movs r0, #0x1f
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x2f
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
	bx lr
	.align 2, 0
_08021CC4: .4byte gCurrentSprite
_08021CC8: .4byte 0x082F92C8

	thumb_func_start SkreeGoingUpWarning
SkreeGoingUpWarning: @ 0x08021CCC
	push {r4, r5, r6, r7, lr}
	ldr r4, _08021CF8 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2f
	ldrb r0, [r5]
	cmp r0, #0
	bne _08021D0C
	ldrh r0, [r4, #2]
	subs r0, #0x70
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08021CFC @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08021D00
	ldrh r0, [r4, #2]
	subs r0, #4
	strh r0, [r4, #2]
	b _08021E6C
	.align 2, 0
_08021CF8: .4byte gCurrentSprite
_08021CFC: .4byte gPreviousCollisionCheck
_08021D00:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldr r0, _08021D4C @ =0x000001DB
	bl SoundPlay
_08021D0C:
	ldr r1, _08021D50 @ =gCurrentSprite
	ldrh r2, [r1, #2]
	adds r0, r2, #0
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r7, r4, #0
	ldrh r5, [r1, #4]
	adds r6, r5, #0
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	beq _08021DB6
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1e
	bne _08021D54
	subs r4, #0x60
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	adds r3, #0x10
	movs r0, #0
	movs r1, #0x12
	b _08021DAE
	.align 2, 0
_08021D4C: .4byte 0x000001DB
_08021D50: .4byte gCurrentSprite
_08021D54:
	cmp r0, #0x14
	bne _08021D76
	subs r4, #0x40
	adds r3, r5, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x13
	adds r2, r4, #0
	bl SpriteDebrisInit
	movs r0, #0
	movs r1, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	b _08021E6C
_08021D76:
	cmp r0, #0xe
	bne _08021D94
	subs r4, #0x20
	adds r3, r5, #0
	adds r3, #8
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x12
	b _08021DAE
_08021D94:
	cmp r0, #6
	bne _08021E6C
	adds r3, r5, #0
	subs r3, #8
	movs r0, #0
	movs r1, #0x13
	adds r2, r4, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	adds r3, #0x10
	movs r0, #0
	movs r1, #4
_08021DAE:
	adds r2, r4, #0
	bl SpriteDebrisInit
	b _08021E6C
_08021DB6:
	subs r0, r2, #1
	strh r0, [r1, #2]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bne _08021DD8
	subs r4, #0x60
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	adds r3, #0x10
	b _08021E12
_08021DD8:
	cmp r0, #8
	bne _08021DFA
	subs r4, #0x40
	adds r3, r5, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x13
	adds r2, r4, #0
	bl SpriteDebrisInit
	movs r0, #0
	movs r1, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	b _08021E48
_08021DFA:
	cmp r0, #0x10
	bne _08021E1E
	subs r4, #0x20
	adds r3, r5, #0
	adds r3, #8
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	subs r3, #0x10
_08021E12:
	movs r0, #0
	movs r1, #0x12
	adds r2, r4, #0
	bl SpriteDebrisInit
	b _08021E48
_08021E1E:
	cmp r0, #0x18
	bne _08021E40
	adds r3, r6, #0
	subs r3, #8
	movs r0, #0
	movs r1, #0x13
	adds r2, r7, #0
	bl SpriteDebrisInit
	adds r3, r6, #0
	adds r3, #0x10
	movs r0, #0
	movs r1, #4
	adds r2, r7, #0
	bl SpriteDebrisInit
	b _08021E48
_08021E40:
	cmp r0, #0x1e
	bls _08021E48
	subs r0, r2, #2
	strh r0, [r1, #2]
_08021E48:
	ldr r4, _08021E74 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08021E78 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08021E6C
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2f
	strb r0, [r1]
_08021E6C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08021E74: .4byte gCurrentSprite
_08021E78: .4byte gPreviousCollisionCheck

	thumb_func_start SkreeGoingUpInit
SkreeGoingUpInit: @ 0x08021E7C
	push {lr}
	ldr r0, _08021E94 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x30
	strb r1, [r0]
	movs r0, #0xed
	lsls r0, r0, #1
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08021E94: .4byte gCurrentSprite

	thumb_func_start SkreeGoingUp
SkreeGoingUp: @ 0x08021E98
	push {r4, lr}
	ldr r4, _08021EC0 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08021EC4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08021EC8
	ldrh r1, [r4, #2]
	ldrh r0, [r4, #6]
	cmp r0, r1
	bhs _08021EC8
	adds r0, r1, #0
	subs r0, #0x10
	strh r0, [r4, #2]
	b _08021ED4
	.align 2, 0
_08021EC0: .4byte gCurrentSprite
_08021EC4: .4byte gPreviousCollisionCheck
_08021EC8:
	ldr r0, _08021EDC @ =gCurrentSprite
	ldrh r1, [r0, #6]
	strh r1, [r0, #2]
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_08021ED4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08021EDC: .4byte gCurrentSprite

	thumb_func_start Skree
Skree: @ 0x08021EE0
	push {lr}
	ldr r1, _08021EF4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08021EF8
	bl SpriteUpdateFreezeTimer
	b _080220E4
	.align 2, 0
_08021EF4: .4byte gCurrentSprite
_08021EF8:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08021F04
	b _080220E4
_08021F04:
	lsls r0, r0, #2
	ldr r1, _08021F10 @ =_08021F14
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08021F10: .4byte _08021F14
_08021F14: @ jump table
	.4byte _08022084 @ case 0
	.4byte _08022088 @ case 1
	.4byte _0802208C @ case 2
	.4byte _080220E4 @ case 3
	.4byte _080220E4 @ case 4
	.4byte _080220E4 @ case 5
	.4byte _080220E4 @ case 6
	.4byte _080220E4 @ case 7
	.4byte _080220E4 @ case 8
	.4byte _080220E4 @ case 9
	.4byte _080220E4 @ case 10
	.4byte _080220E4 @ case 11
	.4byte _080220E4 @ case 12
	.4byte _080220E4 @ case 13
	.4byte _080220E4 @ case 14
	.4byte _080220E4 @ case 15
	.4byte _080220E4 @ case 16
	.4byte _080220E4 @ case 17
	.4byte _080220E4 @ case 18
	.4byte _080220E4 @ case 19
	.4byte _080220E4 @ case 20
	.4byte _080220E4 @ case 21
	.4byte _080220E4 @ case 22
	.4byte _08022092 @ case 23
	.4byte _08022096 @ case 24
	.4byte _080220E4 @ case 25
	.4byte _080220E4 @ case 26
	.4byte _080220E4 @ case 27
	.4byte _080220E4 @ case 28
	.4byte _080220E4 @ case 29
	.4byte _080220E4 @ case 30
	.4byte _080220E4 @ case 31
	.4byte _080220E4 @ case 32
	.4byte _080220E4 @ case 33
	.4byte _080220E4 @ case 34
	.4byte _080220E4 @ case 35
	.4byte _080220E4 @ case 36
	.4byte _080220E4 @ case 37
	.4byte _080220E4 @ case 38
	.4byte _080220E4 @ case 39
	.4byte _080220E4 @ case 40
	.4byte _0802209C @ case 41
	.4byte _080220A0 @ case 42
	.4byte _080220A6 @ case 43
	.4byte _080220AA @ case 44
	.4byte _080220B0 @ case 45
	.4byte _080220B4 @ case 46
	.4byte _080220BA @ case 47
	.4byte _080220BE @ case 48
	.4byte _080220E4 @ case 49
	.4byte _080220E4 @ case 50
	.4byte _080220E4 @ case 51
	.4byte _080220E4 @ case 52
	.4byte _080220E4 @ case 53
	.4byte _080220E4 @ case 54
	.4byte _080220E4 @ case 55
	.4byte _080220E4 @ case 56
	.4byte _080220E4 @ case 57
	.4byte _080220E4 @ case 58
	.4byte _080220E4 @ case 59
	.4byte _080220E4 @ case 60
	.4byte _080220E4 @ case 61
	.4byte _080220E4 @ case 62
	.4byte _080220E4 @ case 63
	.4byte _080220E4 @ case 64
	.4byte _080220E4 @ case 65
	.4byte _080220E4 @ case 66
	.4byte _080220E4 @ case 67
	.4byte _080220E4 @ case 68
	.4byte _080220E4 @ case 69
	.4byte _080220E4 @ case 70
	.4byte _080220E4 @ case 71
	.4byte _080220E4 @ case 72
	.4byte _080220E4 @ case 73
	.4byte _080220E4 @ case 74
	.4byte _080220E4 @ case 75
	.4byte _080220E4 @ case 76
	.4byte _080220E4 @ case 77
	.4byte _080220E4 @ case 78
	.4byte _080220E4 @ case 79
	.4byte _080220E4 @ case 80
	.4byte _080220E4 @ case 81
	.4byte _080220E4 @ case 82
	.4byte _080220E4 @ case 83
	.4byte _080220E4 @ case 84
	.4byte _080220E4 @ case 85
	.4byte _080220E4 @ case 86
	.4byte _080220C4 @ case 87
	.4byte _080220C8 @ case 88
	.4byte _080220CE @ case 89
	.4byte _080220D2 @ case 90
	.4byte _080220D8 @ case 91
_08022084:
	bl SkreeInit
_08022088:
	bl SkreeIdleInit
_0802208C:
	bl SkreeDetectSamus
	b _080220E4
_08022092:
	bl SkreeWarningInit
_08022096:
	bl SkreeWarning
	b _080220E4
_0802209C:
	bl SkreeGoingDownInit
_080220A0:
	bl SkreeGoingDown
	b _080220E4
_080220A6:
	bl SkreeCrashingInit
_080220AA:
	bl SkreeCrashing
	b _080220E4
_080220B0:
	bl SkreeGoingUpWarningInit
_080220B4:
	bl SkreeGoingUpWarning
	b _080220E4
_080220BA:
	bl SkreeGoingUpInit
_080220BE:
	bl SkreeGoingUp
	b _080220E4
_080220C4:
	bl SpriteDyingInit
_080220C8:
	bl SpriteDying
	b _080220E4
_080220CE:
	bl SkreeInit
_080220D2:
	bl SpriteSpawningFromX
	b _080220E4
_080220D8:
	bl XParasiteInit
	ldr r1, _080220E8 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
_080220E4:
	pop {r0}
	bx r0
	.align 2, 0
_080220E8: .4byte gCurrentSprite

	thumb_func_start ZombieCheckSamusInRange
ZombieCheckSamusInRange: @ 0x080220EC
	push {r4, lr}
	movs r0, #0x5a
	movs r1, #0x82
	bl CheckSamusNearSpriteLeftRight
	adds r3, r0, #0
	cmp r3, #0
	beq _08022136
	ldr r2, _08022110 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r4, r2, #0
	cmp r0, #0
	beq _08022114
	cmp r3, #4
	beq _08022136
	b _08022118
	.align 2, 0
_08022110: .4byte gCurrentSprite
_08022114:
	cmp r3, #8
	beq _08022136
_08022118:
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r1]
	ldr r0, _0802213C @ =0x082FB4C0
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r0, _08022140 @ =0x0000FFC0
	strh r0, [r4, #0xa]
	adds r0, #0x20
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
_08022136:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802213C: .4byte 0x082FB4C0
_08022140: .4byte 0x0000FFC0

	thumb_func_start ZombieSetWaitingToForm
ZombieSetWaitingToForm: @ 0x08022144
	ldr r2, _08022170 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	ldr r0, _08022174 @ =0x0000FFE0
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	movs r0, #0x20
	strh r0, [r2, #0x10]
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_08022170: .4byte gCurrentSprite
_08022174: .4byte 0x0000FFE0

	thumb_func_start ZombieSetStandingHitbox
ZombieSetStandingHitbox: @ 0x08022178
	ldr r1, _0802218C @ =gCurrentSprite
	movs r2, #0
	ldr r0, _08022190 @ =0x0000FF98
	strh r0, [r1, #0xa]
	strh r2, [r1, #0xc]
	adds r0, #0x50
	strh r0, [r1, #0xe]
	movs r0, #0x18
	strh r0, [r1, #0x10]
	bx lr
	.align 2, 0
_0802218C: .4byte gCurrentSprite
_08022190: .4byte 0x0000FF98

	thumb_func_start ZombieDyingInit
ZombieDyingInit: @ 0x08022194
	ldr r2, _080221BC @ =gCurrentSprite
	ldr r0, _080221C0 @ =0x082FB420
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	movs r1, #0
	strh r0, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _080221C4 @ =0x0000FFE0
	strh r0, [r2, #0xa]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0xb4
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #0x58
	strb r0, [r1]
	bx lr
	.align 2, 0
_080221BC: .4byte gCurrentSprite
_080221C0: .4byte 0x082FB420
_080221C4: .4byte 0x0000FFE0

	thumb_func_start ZombieDying
ZombieDying: @ 0x080221C8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r5, _08022244 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x26
	movs r6, #1
	strb r6, [r0]
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #0x8c
	bne _08022204
	ldrb r1, [r5, #0x1d]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r5, #2]
	subs r0, #0x20
	str r0, [sp, #4]
	ldrh r0, [r5, #4]
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
_08022204:
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0802223A
	ldr r0, _08022248 @ =0x082FB5D0
	str r0, [r5, #0x18]
	strb r1, [r5, #0x1c]
	movs r4, #0
	strh r1, [r5, #0x16]
	ldr r2, _0802224C @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	bl ZombieSetWaitingToForm
	adds r0, r5, #0
	adds r0, #0x36
	strb r6, [r0]
	subs r0, #0x16
	strb r4, [r0]
_0802223A:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08022244: .4byte gCurrentSprite
_08022248: .4byte 0x082FB5D0
_0802224C: .4byte sPrimarySpriteStats

	thumb_func_start ZombieInit
ZombieInit: @ 0x08022250
	push {r4, r5, lr}
	ldr r4, _0802228C @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x24
	ldrb r5, [r2]
	cmp r5, #0
	bne _080222B4
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	subs r0, #0x20
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x2f
	bhi _08022294
	ldr r0, _08022290 @ =0x082FB300
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	movs r0, #8
	strb r0, [r2]
	bl ZombieSetStandingHitbox
	adds r0, r4, #0
	adds r0, #0x2e
	strb r5, [r0]
	b _080222A8
	.align 2, 0
_0802228C: .4byte gCurrentSprite
_08022290: .4byte 0x082FB300
_08022294:
	ldr r0, _080222B0 @ =0x082FB528
	str r0, [r4, #0x18]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #2
	orrs r0, r1
	strb r0, [r2]
	bl ZombieSetWaitingToForm
_080222A8:
	bl SpriteChooseRandomXFlip
	b _080222DE
	.align 2, 0
_080222B0: .4byte 0x082FB528
_080222B4:
	ldr r0, _08022314 @ =0x082FB258
	str r0, [r4, #0x18]
	adds r0, r4, #0
	adds r0, #0x25
	movs r1, #0
	strb r1, [r0]
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _08022318 @ =0x0000FFE0
	strh r0, [r4, #0xa]
	strh r1, [r4, #0xc]
	adds r0, #8
	strh r0, [r4, #0xe]
	movs r0, #0x18
	strh r0, [r4, #0x10]
	ldrh r1, [r4]
	ldr r0, _0802231C @ =0x0000FFDF
	ands r0, r1
	ldr r1, _08022320 @ =0x00007FFF
	ands r0, r1
	strh r0, [r4]
_080222DE:
	ldr r3, _08022324 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r1, #0
	strh r0, [r3, #0x16]
	adds r2, r3, #0
	adds r2, #0x27
	movs r0, #0x20
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r2, _08022328 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08022314: .4byte 0x082FB258
_08022318: .4byte 0x0000FFE0
_0802231C: .4byte 0x0000FFDF
_08022320: .4byte 0x00007FFF
_08022324: .4byte gCurrentSprite
_08022328: .4byte sPrimarySpriteStats

	thumb_func_start ZombieWaitingToForm
ZombieWaitingToForm: @ 0x0802232C
	push {r4, r5, r6, r7, lr}
	ldr r4, _0802235C @ =gCurrentSprite
	ldr r1, [r4, #0x18]
	ldr r0, _08022360 @ =0x082FB5D0
	cmp r1, r0
	bne _08022368
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _08022342
	b _0802244E
_08022342:
	ldr r0, _08022364 @ =0x082FB528
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #2
	orrs r0, r1
	strb r0, [r2]
	b _0802244E
	.align 2, 0
_0802235C: .4byte gCurrentSprite
_08022360: .4byte 0x082FB5D0
_08022364: .4byte 0x082FB528
_08022368:
	bl unk_1129c
	ldr r0, _08022380 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	cmp r1, #0
	bne _08022384
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _0802244E
	.align 2, 0
_08022380: .4byte gPreviousVerticalCollisionCheck
_08022384:
	movs r5, #0xf0
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0802244E
	ldrh r1, [r4]
	movs r7, #0x40
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080223FC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _080223D0 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080223C6
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080223D8
_080223C6:
	ldrh r1, [r4]
	ldr r0, _080223D4 @ =0x0000FFBF
	ands r0, r1
	strh r0, [r4]
	b _0802244E
	.align 2, 0
_080223D0: .4byte gPreviousCollisionCheck
_080223D4: .4byte 0x0000FFBF
_080223D8:
	ldr r0, _080223F4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802244E
	ldr r0, _080223F8 @ =gFrameCounter16Bit
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0802244E
	ldrh r0, [r4, #4]
	adds r0, #4
	b _0802244C
	.align 2, 0
_080223F4: .4byte gSpriteRandomNumber
_080223F8: .4byte gFrameCounter16Bit
_080223FC:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08022430 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08022428
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08022434
_08022428:
	ldrh r0, [r4]
	orrs r0, r7
	strh r0, [r4]
	b _0802244E
	.align 2, 0
_08022430: .4byte gPreviousCollisionCheck
_08022434:
	ldr r0, _08022454 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802244E
	ldr r0, _08022458 @ =gFrameCounter16Bit
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0802244E
	ldrh r0, [r4, #4]
	subs r0, #4
_0802244C:
	strh r0, [r4, #4]
_0802244E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08022454: .4byte gSpriteRandomNumber
_08022458: .4byte gFrameCounter16Bit

	thumb_func_start ZombieForming
ZombieForming: @ 0x0802245C
	push {lr}
	ldr r0, _08022474 @ =gCurrentSprite
	ldrh r1, [r0, #0x16]
	adds r2, r0, #0
	cmp r1, #0x11
	bne _0802247C
	ldrb r0, [r2, #0x1c]
	cmp r0, #2
	bne _0802247C
	ldr r0, _08022478 @ =0x0000FF98
	strh r0, [r2, #0xa]
	b _080224AE
	.align 2, 0
_08022474: .4byte gCurrentSprite
_08022478: .4byte 0x0000FF98
_0802247C:
	ldrh r0, [r2, #0x16]
	cmp r0, #0xd
	bne _08022498
	ldrb r1, [r2, #0x1c]
	cmp r1, #2
	bne _08022498
	ldr r0, _08022494 @ =0x0000FFC0
	strh r0, [r2, #0xa]
	adds r0, r2, #0
	adds r0, #0x25
	strb r1, [r0]
	b _080224AE
	.align 2, 0
_08022494: .4byte 0x0000FFC0
_08022498:
	ldrh r0, [r2, #0x16]
	cmp r0, #7
	bne _080224AE
	ldrb r0, [r2, #0x1c]
	cmp r0, #3
	bne _080224AE
	bl MakeSpriteFaceSamusXFlip
	ldr r0, _080224CC @ =0x0000014D
	bl CheckPlayNotAlreadyPlayingSound
_080224AE:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080224C6
	ldr r1, _080224D0 @ =gCurrentSprite
	ldr r0, _080224D4 @ =0x0000FFE8
	strh r0, [r1, #0xe]
	movs r0, #0x18
	strh r0, [r1, #0x10]
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
_080224C6:
	pop {r0}
	bx r0
	.align 2, 0
_080224CC: .4byte 0x0000014D
_080224D0: .4byte gCurrentSprite
_080224D4: .4byte 0x0000FFE8

	thumb_func_start ZombieIdleInit
ZombieIdleInit: @ 0x080224D8
	push {lr}
	ldr r1, _080224F4 @ =gCurrentSprite
	ldr r0, _080224F8 @ =0x082FB300
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bl ZombieSetStandingHitbox
	pop {r0}
	bx r0
	.align 2, 0
_080224F4: .4byte gCurrentSprite
_080224F8: .4byte 0x082FB300

	thumb_func_start ZombieIdle
ZombieIdle: @ 0x080224FC
	push {lr}
	bl unk_1129c
	ldr r0, _08022514 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802251C
	ldr r0, _08022518 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _08022530
	.align 2, 0
_08022514: .4byte gPreviousVerticalCollisionCheck
_08022518: .4byte gCurrentSprite
_0802251C:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802252C
	ldr r0, _08022534 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0802252C:
	bl ZombieCheckSamusInRange
_08022530:
	pop {r0}
	bx r0
	.align 2, 0
_08022534: .4byte gCurrentSprite

	thumb_func_start ZombieMovingInit
ZombieMovingInit: @ 0x08022538
	ldr r1, _0802254C @ =gCurrentSprite
	ldr r0, _08022550 @ =0x082FB328
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bx lr
	.align 2, 0
_0802254C: .4byte gCurrentSprite
_08022550: .4byte 0x082FB328

	thumb_func_start ZombieMoving
ZombieMoving: @ 0x08022554
	push {r4, r5, r6, lr}
	bl unk_1129c
	ldr r0, _08022580 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	cmp r1, #0
	bne _080225B0
	ldr r2, _08022584 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08022588
	ldrh r0, [r2, #2]
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	ldrh r2, [r2, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	b _08022596
	.align 2, 0
_08022580: .4byte gPreviousVerticalCollisionCheck
_08022584: .4byte gCurrentSprite
_08022588:
	ldrh r0, [r2, #2]
	movs r3, #0x10
	ldrsh r1, [r2, r3]
	ldrh r2, [r2, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
_08022596:
	ldr r0, _080225A8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08022642
	ldr r0, _080225AC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _08022646
	.align 2, 0
_080225A8: .4byte gPreviousCollisionCheck
_080225AC: .4byte gCurrentSprite
_080225B0:
	movs r5, #0xf0
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08022642
	ldr r4, _080225F8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08022600
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _080225FC @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0802262C
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0802262C
	ldrh r0, [r4, #4]
	adds r0, #1
	b _08022640
	.align 2, 0
_080225F8: .4byte gCurrentSprite
_080225FC: .4byte gPreviousCollisionCheck
_08022600:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08022638 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0802262C
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0802263C
_0802262C:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _08022646
	.align 2, 0
_08022638: .4byte gPreviousCollisionCheck
_0802263C:
	ldrh r0, [r4, #4]
	subs r0, #1
_08022640:
	strh r0, [r4, #4]
_08022642:
	bl ZombieCheckSamusInRange
_08022646:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start ZombieTurningInit
ZombieTurningInit: @ 0x0802264C
	ldr r1, _08022660 @ =gCurrentSprite
	ldr r0, _08022664 @ =0x082FB410
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #4
	strb r0, [r1]
	bx lr
	.align 2, 0
_08022660: .4byte gCurrentSprite
_08022664: .4byte 0x082FB410

	thumb_func_start ZombieTurning
ZombieTurning: @ 0x08022668
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802268A
	ldr r2, _08022690 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #5
	strb r0, [r1]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0802268A:
	pop {r0}
	bx r0
	.align 2, 0
_08022690: .4byte gCurrentSprite

	thumb_func_start ZombieTurningEnd
ZombieTurningEnd: @ 0x08022694
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080226A6
	ldr r0, _080226AC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
_080226A6:
	pop {r0}
	bx r0
	.align 2, 0
_080226AC: .4byte gCurrentSprite

	thumb_func_start ZombieLungingInit
ZombieLungingInit: @ 0x080226B0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080226D2
	ldr r1, _080226D8 @ =gCurrentSprite
	ldr r0, _080226DC @ =0x082FB460
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	ldr r0, _080226E0 @ =0x0000014F
	bl CheckPlayNotAlreadyPlayingSound
_080226D2:
	pop {r0}
	bx r0
	.align 2, 0
_080226D8: .4byte gCurrentSprite
_080226DC: .4byte 0x082FB460
_080226E0: .4byte 0x0000014F

	thumb_func_start ZombieLunging
ZombieLunging: @ 0x080226E4
	push {r4, r5, r6, r7, lr}
	bl unk_1129c
	ldr r0, _08022710 @ =gPreviousVerticalCollisionCheck
	ldrb r2, [r0]
	cmp r2, #0
	bne _08022740
	ldr r2, _08022714 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08022718
	ldrh r0, [r2, #2]
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	ldrh r2, [r2, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	b _08022726
	.align 2, 0
_08022710: .4byte gPreviousVerticalCollisionCheck
_08022714: .4byte gCurrentSprite
_08022718:
	ldrh r0, [r2, #2]
	movs r3, #0x10
	ldrsh r1, [r2, r3]
	ldrh r2, [r2, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
_08022726:
	ldr r0, _08022738 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _080227D2
	ldr r0, _0802273C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _080227EC
	.align 2, 0
_08022738: .4byte gPreviousCollisionCheck
_0802273C: .4byte gCurrentSprite
_08022740:
	ldr r0, _08022794 @ =0x082F93D0
	ldr r4, _08022798 @ =gCurrentSprite
	ldrh r1, [r4, #0x16]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r7, [r1]
	movs r5, #0xf0
	adds r0, r5, #0
	ands r0, r2
	cmp r0, #0
	beq _080227D2
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080227A0
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0802279C @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080227D2
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _080227D2
	ldrh r0, [r4, #4]
	adds r0, r0, r7
	b _080227D0
	.align 2, 0
_08022794: .4byte 0x082F93D0
_08022798: .4byte gCurrentSprite
_0802279C: .4byte gPreviousCollisionCheck
_080227A0:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _080227F4 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080227D2
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _080227D2
	ldrh r0, [r4, #4]
	subs r0, r0, r7
_080227D0:
	strh r0, [r4, #4]
_080227D2:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080227EC
	ldr r1, _080227F8 @ =gCurrentSprite
	ldr r0, _080227FC @ =0x082FB488
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
_080227EC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080227F4: .4byte gPreviousCollisionCheck
_080227F8: .4byte gCurrentSprite
_080227FC: .4byte 0x082FB488

	thumb_func_start ZombieCheckLungingAnimEnded
ZombieCheckLungingAnimEnded: @ 0x08022800
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08022812
	ldr r0, _08022818 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
_08022812:
	pop {r0}
	bx r0
	.align 2, 0
_08022818: .4byte gCurrentSprite

	thumb_func_start ZombieFallingInit
ZombieFallingInit: @ 0x0802281C
	push {lr}
	ldr r3, _08022850 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x16
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	adds r0, #3
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0802284C
	ldr r0, _08022854 @ =0x082FB300
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bl ZombieSetStandingHitbox
_0802284C:
	pop {r0}
	bx r0
	.align 2, 0
_08022850: .4byte gCurrentSprite
_08022854: .4byte 0x082FB300

	thumb_func_start ZombieFalling
ZombieFalling: @ 0x08022858
	push {r4, r5, r6, lr}
	ldr r4, _08022888 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0802288C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802289A
	strh r1, [r4, #2]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08022890
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	b _080228D8
	.align 2, 0
_08022888: .4byte gCurrentSprite
_0802288C: .4byte gPreviousVerticalCollisionCheck
_08022890:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	b _080228D8
_0802289A:
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _080228C4 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080228C8 @ =0x00007FFF
	cmp r1, r0
	bne _080228CC
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _080228D6
	.align 2, 0
_080228C4: .4byte sSpritesFallingSpeed
_080228C8: .4byte 0x00007FFF
_080228CC:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_080228D6:
	strh r0, [r4, #2]
_080228D8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Zombie
Zombie: @ 0x080228E0
	push {r4, lr}
	ldr r4, _0802290C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _080228FA
	movs r0, #0xa7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080228FA:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08022910
	bl SpriteUpdateFreezeTimer
	b _08022AF4
	.align 2, 0
_0802290C: .4byte gCurrentSprite
_08022910:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x59
	bls _0802291C
	b _08022AF4
_0802291C:
	lsls r0, r0, #2
	ldr r1, _08022928 @ =_0802292C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08022928: .4byte _0802292C
_0802292C: @ jump table
	.4byte _08022A94 @ case 0
	.4byte _08022A9A @ case 1
	.4byte _08022A9E @ case 2
	.4byte _08022AAE @ case 3
	.4byte _08022AB2 @ case 4
	.4byte _08022AB8 @ case 5
	.4byte _08022AF4 @ case 6
	.4byte _08022AA4 @ case 7
	.4byte _08022AA8 @ case 8
	.4byte _08022AF4 @ case 9
	.4byte _08022AF4 @ case 10
	.4byte _08022AF4 @ case 11
	.4byte _08022AF4 @ case 12
	.4byte _08022AF4 @ case 13
	.4byte _08022AF4 @ case 14
	.4byte _08022AF4 @ case 15
	.4byte _08022AF4 @ case 16
	.4byte _08022AF4 @ case 17
	.4byte _08022AF4 @ case 18
	.4byte _08022AF4 @ case 19
	.4byte _08022AF4 @ case 20
	.4byte _08022ADC @ case 21
	.4byte _08022AE0 @ case 22
	.4byte _08022AF4 @ case 23
	.4byte _08022ABE @ case 24
	.4byte _08022AF4 @ case 25
	.4byte _08022AC4 @ case 26
	.4byte _08022AF4 @ case 27
	.4byte _08022AF4 @ case 28
	.4byte _08022AF4 @ case 29
	.4byte _08022AF4 @ case 30
	.4byte _08022AF4 @ case 31
	.4byte _08022AF4 @ case 32
	.4byte _08022AF4 @ case 33
	.4byte _08022AF4 @ case 34
	.4byte _08022AF4 @ case 35
	.4byte _08022AF4 @ case 36
	.4byte _08022AF4 @ case 37
	.4byte _08022AF4 @ case 38
	.4byte _08022AF4 @ case 39
	.4byte _08022AF4 @ case 40
	.4byte _08022AF4 @ case 41
	.4byte _08022ACA @ case 42
	.4byte _08022AF4 @ case 43
	.4byte _08022AD0 @ case 44
	.4byte _08022AF4 @ case 45
	.4byte _08022AD6 @ case 46
	.4byte _08022AF4 @ case 47
	.4byte _08022AF4 @ case 48
	.4byte _08022AF4 @ case 49
	.4byte _08022AF4 @ case 50
	.4byte _08022AF4 @ case 51
	.4byte _08022AF4 @ case 52
	.4byte _08022AF4 @ case 53
	.4byte _08022AF4 @ case 54
	.4byte _08022AF4 @ case 55
	.4byte _08022AF4 @ case 56
	.4byte _08022AF4 @ case 57
	.4byte _08022AF4 @ case 58
	.4byte _08022AF4 @ case 59
	.4byte _08022AF4 @ case 60
	.4byte _08022AF4 @ case 61
	.4byte _08022AF4 @ case 62
	.4byte _08022AF4 @ case 63
	.4byte _08022AF4 @ case 64
	.4byte _08022AF4 @ case 65
	.4byte _08022AF4 @ case 66
	.4byte _08022AF4 @ case 67
	.4byte _08022AF4 @ case 68
	.4byte _08022AF4 @ case 69
	.4byte _08022AF4 @ case 70
	.4byte _08022AF4 @ case 71
	.4byte _08022AF4 @ case 72
	.4byte _08022AF4 @ case 73
	.4byte _08022AF4 @ case 74
	.4byte _08022AF4 @ case 75
	.4byte _08022AF4 @ case 76
	.4byte _08022AF4 @ case 77
	.4byte _08022AF4 @ case 78
	.4byte _08022AF4 @ case 79
	.4byte _08022AF4 @ case 80
	.4byte _08022AF4 @ case 81
	.4byte _08022AF4 @ case 82
	.4byte _08022AF4 @ case 83
	.4byte _08022AF4 @ case 84
	.4byte _08022AF4 @ case 85
	.4byte _08022AF4 @ case 86
	.4byte _08022AE6 @ case 87
	.4byte _08022AEA @ case 88
	.4byte _08022AF0 @ case 89
_08022A94:
	bl ZombieInit
	b _08022AF4
_08022A9A:
	bl ZombieMovingInit
_08022A9E:
	bl ZombieMoving
	b _08022AF4
_08022AA4:
	bl ZombieIdleInit
_08022AA8:
	bl ZombieIdle
	b _08022AF4
_08022AAE:
	bl ZombieTurningInit
_08022AB2:
	bl ZombieTurning
	b _08022AF4
_08022AB8:
	bl ZombieTurningEnd
	b _08022AF4
_08022ABE:
	bl ZombieWaitingToForm
	b _08022AF4
_08022AC4:
	bl ZombieForming
	b _08022AF4
_08022ACA:
	bl ZombieLungingInit
	b _08022AF4
_08022AD0:
	bl ZombieLunging
	b _08022AF4
_08022AD6:
	bl ZombieCheckLungingAnimEnded
	b _08022AF4
_08022ADC:
	bl ZombieFallingInit
_08022AE0:
	bl ZombieFalling
	b _08022AF4
_08022AE6:
	bl ZombieDyingInit
_08022AEA:
	bl ZombieDying
	b _08022AF4
_08022AF0:
	bl ZombieInit
_08022AF4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GeemerCheckCollisions
GeemerCheckCollisions: @ 0x08022AFC
	push {lr}
	ldr r2, _08022B18 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08022B28
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08022B1C
	ldrh r0, [r2, #2]
	b _08022B38
	.align 2, 0
_08022B18: .4byte gCurrentSprite
_08022B1C:
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	b _08022B48
_08022B28:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08022B40
	ldrh r0, [r2, #2]
	subs r0, #4
_08022B38:
	ldrh r1, [r2, #4]
	bl SpriteUtilCheckCollisionAtPosition
	b _08022B48
_08022B40:
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	bl SpriteUtilCheckCollisionAtPosition
_08022B48:
	pop {r0}
	bx r0

	thumb_func_start GeemerSetHitbox
GeemerSetHitbox: @ 0x08022B4C
	push {lr}
	ldr r0, _08022B7C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r2, [r1]
	adds r3, r0, #0
	cmp r2, #0
	beq _08022B94
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _08022B84
	movs r2, #0
	ldr r1, _08022B80 @ =0x0000FFD0
	strh r1, [r3, #0xa]
	movs r0, #0x30
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r2, [r3, #0x10]
	b _08022BBA
	.align 2, 0
_08022B7C: .4byte gCurrentSprite
_08022B80: .4byte 0x0000FFD0
_08022B84:
	ldr r0, _08022B90 @ =0x0000FFD0
	strh r0, [r3, #0xa]
	movs r0, #0x30
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	b _08022BB8
	.align 2, 0
_08022B90: .4byte 0x0000FFD0
_08022B94:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _08022BAC
	strh r2, [r3, #0xa]
	movs r0, #0x28
	strh r0, [r3, #0xc]
	b _08022BB2
_08022BAC:
	ldr r0, _08022BD0 @ =0x0000FFD8
	strh r0, [r3, #0xa]
	strh r1, [r3, #0xc]
_08022BB2:
	ldr r0, _08022BD4 @ =0x0000FFD0
	strh r0, [r3, #0xe]
	movs r0, #0x30
_08022BB8:
	strh r0, [r3, #0x10]
_08022BBA:
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08022BD0: .4byte 0x0000FFD8
_08022BD4: .4byte 0x0000FFD0

	thumb_func_start GeemerSetCrawlingGFX
GeemerSetCrawlingGFX: @ 0x08022BD8
	push {lr}
	ldr r0, _08022BEC @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _08022BF4
	ldr r0, _08022BF0 @ =0x082FCF90
	b _08022BF6
	.align 2, 0
_08022BEC: .4byte gCurrentSprite
_08022BF0: .4byte 0x082FCF90
_08022BF4:
	ldr r0, _08022C04 @ =0x082FCE00
_08022BF6:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08022C04: .4byte 0x082FCE00

	thumb_func_start GeemerSetIdleGFX
GeemerSetIdleGFX: @ 0x08022C08
	push {lr}
	ldr r0, _08022C1C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _08022C24
	ldr r0, _08022C20 @ =0x082FCF28
	b _08022C26
	.align 2, 0
_08022C1C: .4byte gCurrentSprite
_08022C20: .4byte 0x082FCF28
_08022C24:
	ldr r0, _08022C34 @ =0x082FCD98
_08022C26:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08022C34: .4byte 0x082FCD98

	thumb_func_start GeemerCheckShouldHide
GeemerCheckShouldHide: @ 0x08022C38
	push {r4, lr}
	ldr r4, _08022C90 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08022CC0
	ldr r0, _08022C94 @ =gChangedInput
	ldrh r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	cmp r0, #0
	beq _08022C5C
	strb r2, [r1]
_08022C5C:
	ldrb r0, [r1]
	cmp r0, #0x78
	bhi _08022CC0
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08022CC0
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x42
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #0
	beq _08022CA0
	ldr r0, _08022C98 @ =0x082FD058
	str r0, [r4, #0x18]
	ldr r0, _08022C9C @ =0x0000FFD8
	strh r0, [r4, #0xa]
	movs r0, #0x28
	strh r0, [r4, #0xc]
	b _08022CAC
	.align 2, 0
_08022C90: .4byte gCurrentSprite
_08022C94: .4byte gChangedInput
_08022C98: .4byte 0x082FD058
_08022C9C: .4byte 0x0000FFD8
_08022CA0:
	ldr r0, _08022CC8 @ =0x082FCEC8
	str r0, [r4, #0x18]
	ldr r0, _08022CCC @ =0x0000FFD8
	strh r0, [r4, #0xe]
	movs r0, #0x28
	strh r0, [r4, #0x10]
_08022CAC:
	ldr r0, _08022CD0 @ =gCurrentSprite
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0xa
	strb r1, [r0]
	ldr r0, _08022CD4 @ =0x00000165
	bl CheckPlayNotAlreadyPlayingSound
_08022CC0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08022CC8: .4byte 0x082FCEC8
_08022CCC: .4byte 0x0000FFD8
_08022CD0: .4byte gCurrentSprite
_08022CD4: .4byte 0x00000165

	thumb_func_start GeemerDelayBeforeHiding
GeemerDelayBeforeHiding: @ 0x08022CD8
	push {lr}
	ldr r1, _08022CF8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08022CF2
	adds r1, #0x24
	movs r0, #0x44
	strb r0, [r1]
_08022CF2:
	pop {r0}
	bx r0
	.align 2, 0
_08022CF8: .4byte gCurrentSprite

	thumb_func_start GeemerHiding
GeemerHiding: @ 0x08022CFC
	push {lr}
	bl GeemerCheckCollisions
	ldr r0, _08022D14 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08022D1C
	ldr r0, _08022D18 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _08022D7E
	.align 2, 0
_08022D14: .4byte gPreviousCollisionCheck
_08022D18: .4byte gCurrentSprite
_08022D1C:
	ldr r0, _08022D30 @ =gChangedInput
	ldrh r0, [r0]
	cmp r0, #0
	beq _08022D38
	ldr r1, _08022D34 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #0
	b _08022D42
	.align 2, 0
_08022D30: .4byte gChangedInput
_08022D34: .4byte gCurrentSprite
_08022D38:
	ldr r1, _08022D64 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
_08022D42:
	strb r0, [r2]
	adds r2, r1, #0
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x78
	bls _08022D7E
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x46
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #0
	beq _08022D6C
	ldr r0, _08022D68 @ =0x082FD098
	b _08022D6E
	.align 2, 0
_08022D64: .4byte gCurrentSprite
_08022D68: .4byte 0x082FD098
_08022D6C:
	ldr r0, _08022D84 @ =0x082FCF08
_08022D6E:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	movs r0, #0xb3
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08022D7E:
	pop {r0}
	bx r0
	.align 2, 0
_08022D84: .4byte 0x082FCF08

	thumb_func_start GeemerUncoveering
GeemerUncoveering: @ 0x08022D88
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08022DA2
	bl GeemerSetHitbox
	bl GeemerSetIdleGFX
	ldr r0, _08022DA8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
_08022DA2:
	pop {r0}
	bx r0
	.align 2, 0
_08022DA8: .4byte gCurrentSprite

	thumb_func_start GeemerTurningIntoX
GeemerTurningIntoX: @ 0x08022DAC
	push {lr}
	ldr r2, _08022DCC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08022DD8
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08022DD0
	ldrh r0, [r2, #4]
	subs r0, #0x20
	strh r0, [r2, #4]
	b _08022DF0
	.align 2, 0
_08022DCC: .4byte gCurrentSprite
_08022DD0:
	ldrh r0, [r2, #4]
	adds r0, #0x20
	strh r0, [r2, #4]
	b _08022DF0
_08022DD8:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08022DEA
	ldrh r0, [r2, #2]
	adds r0, #0x20
	b _08022DEE
_08022DEA:
	ldrh r0, [r2, #2]
	subs r0, #0x20
_08022DEE:
	strh r0, [r2, #2]
_08022DF0:
	pop {r0}
	bx r0

	thumb_func_start GeemerInit
GeemerInit: @ 0x08022DF4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r2, _08022E20 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08022E24
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08022E24
	strh r0, [r2]
	b _08022F98
	.align 2, 0
_08022E20: .4byte gCurrentSprite
_08022E24:
	ldr r4, _08022E3C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08022E40
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _08022F6E
	.align 2, 0
_08022E3C: .4byte gCurrentSprite
_08022E40:
	movs r0, #2
	strb r0, [r1]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08022E64 @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	movs r7, #0xf0
	adds r5, r7, #0
	ands r5, r0
	cmp r5, #0
	beq _08022E68
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	b _08022EF6
	.align 2, 0
_08022E64: .4byte gPreviousCollisionCheck
_08022E68:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08022E96
	adds r0, r4, #0
	adds r0, #0x2d
	strb r5, [r0]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	b _08022EF6
_08022E96:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08022EC0
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	b _08022EF4
_08022EC0:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	adds r2, r7, #0
	ands r2, r0
	cmp r2, #0
	bne _08022EDA
	strh r2, [r4]
	b _08022F98
_08022EDA:
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x20
_08022EF4:
	strh r0, [r4, #4]
_08022EF6:
	ldr r0, _08022F18 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r4, r0, #0
	cmp r1, #0
	beq _08022F28
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08022F1C
	ldrh r5, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x24
	b _08022F22
	.align 2, 0
_08022F18: .4byte gCurrentSprite
_08022F1C:
	ldrh r5, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x24
_08022F22:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	b _08022F44
_08022F28:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08022F3A
	ldrh r0, [r4, #2]
	adds r0, #0x24
	b _08022F3E
_08022F3A:
	ldrh r0, [r4, #2]
	subs r0, #0x24
_08022F3E:
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r0, [r4, #4]
_08022F44:
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r3, r4, #0
	adds r3, #0x23
	ldrb r3, [r3]
	str r5, [sp]
	str r0, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r0, #0xc
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _08022F68
	strh r5, [r4]
	b _08022F98
_08022F68:
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
_08022F6E:
	bl GeemerSetCrawlingGFX
	bl GeemerSetHitbox
	ldr r3, _08022FA0 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x25
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	ldr r2, _08022FA4 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
_08022F98:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08022FA0: .4byte gCurrentSprite
_08022FA4: .4byte sPrimarySpriteStats

	thumb_func_start GeemerCrawlingInit
GeemerCrawlingInit: @ 0x08022FA8
	push {lr}
	bl GeemerSetCrawlingGFX
	ldr r0, _08022FBC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08022FBC: .4byte gCurrentSprite

	thumb_func_start GeemerCrawling
GeemerCrawling: @ 0x08022FC0
	push {r4, r5, r6, lr}
	bl GeemerCheckCollisions
	ldr r5, _08022FD8 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08022FE0
	ldr r0, _08022FDC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _08023284
	.align 2, 0
_08022FD8: .4byte gPreviousCollisionCheck
_08022FDC: .4byte gCurrentSprite
_08022FE0:
	ldr r4, _0802302C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _08022FEE
	b _0802311C
_08022FEE:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802305A
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08023030
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	ldrh r1, [r4, #4]
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0802301E
	b _0802326C
_0802301E:
	movs r3, #0xc
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0802308C
	.align 2, 0
_0802302C: .4byte gCurrentSprite
_08023030:
	movs r2, #0xa
	ldrsh r0, [r4, r2]
	ldrh r3, [r4, #2]
	adds r0, r0, r3
	ldrh r1, [r4, #4]
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0802304C
	b _0802326C
_0802304C:
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	ldrh r1, [r4, #4]
	subs r1, #4
	b _080230E8
_0802305A:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080230C0
	movs r3, #0xc
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08023080
	b _0802326C
_08023080:
	movs r2, #0xc
	ldrsh r0, [r4, r2]
	ldrh r3, [r4, #2]
	adds r0, r0, r3
	ldrh r1, [r4, #4]
	adds r1, #4
_0802308C:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0802309C
	b _0802326C
_0802309C:
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	ldr r2, _080230BC @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	adds r1, #1
	strh r1, [r0, #2]
	b _08023266
	.align 2, 0
_080230BC: .4byte gSpriteData
_080230C0:
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _080230DC
	b _0802326C
_080230DC:
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	adds r1, #4
_080230E8:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080230F8
	b _0802326C
_080230F8:
	ldrh r0, [r4, #2]
	subs r0, #1
	strh r0, [r4, #2]
	ldr r2, _08023118 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	subs r1, #1
	strh r1, [r0, #2]
	b _08023266
	.align 2, 0
_08023118: .4byte gSpriteData
_0802311C:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080231BC
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802318C
	ldrh r0, [r4, #2]
	subs r0, #4
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08023150
	b _0802326C
_08023150:
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0802316A
	b _0802326C
_0802316A:
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	ldr r2, _08023188 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #4]
	adds r1, #1
	b _08023264
	.align 2, 0
_08023188: .4byte gSpriteData
_0802318C:
	ldrh r0, [r4, #2]
	subs r0, #4
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0802326C
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	b _08023244
_080231BC:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08023218
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0802326C
	ldrh r0, [r4, #2]
	subs r0, #4
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0802326C
	ldrh r0, [r4, #4]
	adds r0, #1
	strh r0, [r4, #4]
	ldr r2, _08023214 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #4]
	adds r1, #1
	b _08023264
	.align 2, 0
_08023214: .4byte gSpriteData
_08023218:
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0802326C
	ldrh r0, [r4, #2]
	subs r0, #4
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
_08023244:
	ands r0, r1
	cmp r0, #0
	bne _0802326C
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	ldr r2, _0802328C @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #4]
	subs r1, #1
_08023264:
	strh r1, [r0, #4]
_08023266:
	movs r0, #0
	cmp r0, #0
	beq _08023280
_0802326C:
	ldr r2, _08023290 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
_08023280:
	bl GeemerCheckShouldHide
_08023284:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802328C: .4byte gSpriteData
_08023290: .4byte gCurrentSprite

	thumb_func_start GeemerIdleInit
GeemerIdleInit: @ 0x08023294
	push {lr}
	ldr r0, _080232A8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
	bl GeemerSetIdleGFX
	pop {r0}
	bx r0
	.align 2, 0
_080232A8: .4byte gCurrentSprite

	thumb_func_start GeemerIdle
GeemerIdle: @ 0x080232AC
	push {lr}
	bl GeemerCheckCollisions
	ldr r0, _080232C4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _080232CC
	ldr r0, _080232C8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _080232E0
	.align 2, 0
_080232C4: .4byte gPreviousCollisionCheck
_080232C8: .4byte gCurrentSprite
_080232CC:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080232DC
	ldr r0, _080232E4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_080232DC:
	bl GeemerCheckShouldHide
_080232E0:
	pop {r0}
	bx r0
	.align 2, 0
_080232E4: .4byte gCurrentSprite

	thumb_func_start GeemerFallingInit
GeemerFallingInit: @ 0x080232E8
	push {lr}
	ldr r1, _08023308 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bl GeemerSetHitbox
	bl GeemerSetIdleGFX
	pop {r0}
	bx r0
	.align 2, 0
_08023308: .4byte gCurrentSprite

	thumb_func_start GeemerFalling
GeemerFalling: @ 0x0802330C
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _08023334 @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08023338
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08023344
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _08023344
	.align 2, 0
_08023334: .4byte gCurrentSprite
_08023338:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0802334C
_08023344:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_0802334C:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08023398 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08023410
	ldr r4, _0802339C @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _08023372
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08023372:
	ldrh r0, [r4]
	ldr r1, _080233A0 @ =0x0000FEFF
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strb r0, [r2]
	bl GeemerSetHitbox
	cmp r5, #0
	beq _080233AC
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080233A4
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _080233A8
	.align 2, 0
_08023398: .4byte gPreviousVerticalCollisionCheck
_0802339C: .4byte gCurrentSprite
_080233A0: .4byte 0x0000FEFF
_080233A4:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_080233A8:
	subs r0, r0, r1
	strh r0, [r4, #4]
_080233AC:
	ldr r4, _080233CC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080233D0
	adds r0, r4, #0
	adds r0, #0x24
	strb r2, [r0]
	bl GeemerSetCrawlingGFX
	b _08023454
	.align 2, 0
_080233CC: .4byte gCurrentSprite
_080233D0:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bl GeemerSetIdleGFX
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	ldr r2, _08023408 @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r0, [r4, #2]
	subs r0, #0x24
	strh r0, [r1, #2]
	ldrh r0, [r4, #4]
	strh r0, [r1, #4]
	ldr r2, _0802340C @ =0x0000FFF4
	strh r2, [r1, #0xa]
	movs r0, #0x20
	strh r0, [r1, #0xc]
	strh r2, [r1, #0xe]
	movs r0, #0xc
	strh r0, [r1, #0x10]
	b _08023454
	.align 2, 0
_08023408: .4byte gSpriteData
_0802340C: .4byte 0x0000FFF4
_08023410:
	ldr r3, _0802343C @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08023440 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08023444 @ =0x00007FFF
	cmp r1, r0
	bne _08023448
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08023452
	.align 2, 0
_0802343C: .4byte gCurrentSprite
_08023440: .4byte sSpritesFallingSpeed
_08023444: .4byte 0x00007FFF
_08023448:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_08023452:
	strh r0, [r3, #2]
_08023454:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Geemer
Geemer: @ 0x0802345C
	push {r4, lr}
	ldr r4, _08023494 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08023476
	movs r0, #0xb2
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08023476:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08023498
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0xc
	bl UpdateSecondarySpritesFreezeTimer
	b _08023686
	.align 2, 0
_08023494: .4byte gCurrentSprite
_08023498:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _080234A4
	b _08023686
_080234A4:
	lsls r0, r0, #2
	ldr r1, _080234B0 @ =_080234B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080234B0: .4byte _080234B4
_080234B4: @ jump table
	.4byte _08023624 @ case 0
	.4byte _0802362A @ case 1
	.4byte _0802362E @ case 2
	.4byte _08023686 @ case 3
	.4byte _08023686 @ case 4
	.4byte _08023686 @ case 5
	.4byte _08023686 @ case 6
	.4byte _08023634 @ case 7
	.4byte _08023638 @ case 8
	.4byte _08023686 @ case 9
	.4byte _08023686 @ case 10
	.4byte _08023686 @ case 11
	.4byte _08023686 @ case 12
	.4byte _08023686 @ case 13
	.4byte _08023686 @ case 14
	.4byte _08023686 @ case 15
	.4byte _08023686 @ case 16
	.4byte _08023686 @ case 17
	.4byte _08023686 @ case 18
	.4byte _08023686 @ case 19
	.4byte _08023686 @ case 20
	.4byte _0802363E @ case 21
	.4byte _08023642 @ case 22
	.4byte _08023686 @ case 23
	.4byte _08023686 @ case 24
	.4byte _08023686 @ case 25
	.4byte _08023686 @ case 26
	.4byte _08023686 @ case 27
	.4byte _08023686 @ case 28
	.4byte _08023686 @ case 29
	.4byte _08023686 @ case 30
	.4byte _08023686 @ case 31
	.4byte _08023686 @ case 32
	.4byte _08023686 @ case 33
	.4byte _08023686 @ case 34
	.4byte _08023686 @ case 35
	.4byte _08023686 @ case 36
	.4byte _08023686 @ case 37
	.4byte _08023686 @ case 38
	.4byte _08023686 @ case 39
	.4byte _08023686 @ case 40
	.4byte _08023686 @ case 41
	.4byte _08023686 @ case 42
	.4byte _08023686 @ case 43
	.4byte _08023686 @ case 44
	.4byte _08023686 @ case 45
	.4byte _08023686 @ case 46
	.4byte _08023686 @ case 47
	.4byte _08023686 @ case 48
	.4byte _08023686 @ case 49
	.4byte _08023686 @ case 50
	.4byte _08023686 @ case 51
	.4byte _08023686 @ case 52
	.4byte _08023686 @ case 53
	.4byte _08023686 @ case 54
	.4byte _08023686 @ case 55
	.4byte _08023686 @ case 56
	.4byte _08023686 @ case 57
	.4byte _08023686 @ case 58
	.4byte _08023686 @ case 59
	.4byte _08023686 @ case 60
	.4byte _08023686 @ case 61
	.4byte _08023686 @ case 62
	.4byte _08023686 @ case 63
	.4byte _08023686 @ case 64
	.4byte _08023686 @ case 65
	.4byte _08023648 @ case 66
	.4byte _08023686 @ case 67
	.4byte _0802364E @ case 68
	.4byte _08023686 @ case 69
	.4byte _08023654 @ case 70
	.4byte _08023686 @ case 71
	.4byte _08023686 @ case 72
	.4byte _08023686 @ case 73
	.4byte _08023686 @ case 74
	.4byte _08023686 @ case 75
	.4byte _08023686 @ case 76
	.4byte _08023686 @ case 77
	.4byte _08023686 @ case 78
	.4byte _08023686 @ case 79
	.4byte _08023686 @ case 80
	.4byte _08023686 @ case 81
	.4byte _08023686 @ case 82
	.4byte _08023686 @ case 83
	.4byte _08023686 @ case 84
	.4byte _08023686 @ case 85
	.4byte _08023686 @ case 86
	.4byte _0802365A @ case 87
	.4byte _0802366A @ case 88
	.4byte _08023674 @ case 89
	.4byte _08023678 @ case 90
	.4byte _0802367E @ case 91
_08023624:
	bl GeemerInit
	b _08023686
_0802362A:
	bl GeemerCrawlingInit
_0802362E:
	bl GeemerCrawling
	b _08023686
_08023634:
	bl GeemerIdleInit
_08023638:
	bl GeemerIdle
	b _08023686
_0802363E:
	bl GeemerFallingInit
_08023642:
	bl GeemerFalling
	b _08023686
_08023648:
	bl GeemerDelayBeforeHiding
	b _08023686
_0802364E:
	bl GeemerHiding
	b _08023686
_08023654:
	bl GeemerUncoveering
	b _08023686
_0802365A:
	ldr r0, _08023670 @ =gCurrentSprite
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0xc
	bl UnfreezeSecondarySprites
	bl SpriteDyingInit
_0802366A:
	bl SpriteDying
	b _08023686
	.align 2, 0
_08023670: .4byte gCurrentSprite
_08023674:
	bl GeemerInit
_08023678:
	bl SpriteSpawningFromX
	b _08023686
_0802367E:
	bl GeemerTurningIntoX
	bl XParasiteInit
_08023686:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start GeemerFlashingLight
GeemerFlashingLight: @ 0x0802368C
	push {r4, r5, r6, r7, lr}
	ldr r1, _080236B0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	adds r3, r1, #0
	cmp r0, #0
	beq _080236B4
	bl SpriteUpdateFreezeTimer
	bl UpdatePrimarySpriteFreezeTimer
	b _08023812
	.align 2, 0
_080236B0: .4byte gCurrentSprite
_080236B4:
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r6, r3, #0
	adds r6, #0x24
	ldrb r4, [r6]
	ldr r7, _08023724 @ =gSpriteData
	cmp r4, #0
	bne _08023772
	subs r0, #1
	movs r1, #3
	strb r1, [r0]
	ldr r2, _08023728 @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x27
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0802372C @ =0x082FCD78
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r6]
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r1, r0, r7
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08023744
	ldrh r1, [r1]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08023734
	ldr r0, _08023730 @ =0x0000FFF4
	strh r0, [r3, #0xa]
	movs r1, #0xc
	strh r1, [r3, #0xc]
	strh r0, [r3, #0xe]
	movs r0, #0x20
	b _08023770
	.align 2, 0
_08023724: .4byte gSpriteData
_08023728: .4byte sSecondarySpriteStats
_0802372C: .4byte 0x082FCD78
_08023730: .4byte 0x0000FFF4
_08023734:
	ldr r0, _08023740 @ =0x0000FFF4
	strh r0, [r3, #0xa]
	movs r1, #0xc
	strh r1, [r3, #0xc]
	subs r0, #0x14
	b _0802375A
	.align 2, 0
_08023740: .4byte 0x0000FFF4
_08023744:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08023764
	ldr r0, _08023760 @ =0x0000FFE0
	strh r0, [r3, #0xa]
	movs r1, #0xc
	strh r1, [r3, #0xc]
	adds r0, #0x14
_0802375A:
	strh r0, [r3, #0xe]
	strh r1, [r3, #0x10]
	b _08023772
	.align 2, 0
_08023760: .4byte 0x0000FFE0
_08023764:
	ldr r0, _08023794 @ =0x0000FFF4
	strh r0, [r3, #0xa]
	movs r1, #0x20
	strh r1, [r3, #0xc]
	strh r0, [r3, #0xe]
	movs r0, #0xc
_08023770:
	strh r0, [r3, #0x10]
_08023772:
	lsls r2, r5, #3
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	mov ip, r0
	ldrh r1, [r0]
	movs r4, #0x80
	lsls r4, r4, #6
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _08023798
	ldrh r1, [r3]
	adds r0, r4, #0
	orrs r0, r1
	b _08023810
	.align 2, 0
_08023794: .4byte 0x0000FFF4
_08023798:
	ldrh r1, [r3]
	ldr r0, _080237DC @ =0x0000DFFF
	ands r0, r1
	movs r6, #0
	strh r0, [r3]
	ldrh r4, [r3, #0x14]
	cmp r4, #0
	bne _080237E0
	mov r1, ip
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x56
	bhi _080237E0
	movs r0, #0x57
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	strb r0, [r1]
	mov r0, ip
	strh r4, [r0, #0x14]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x10
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r6, [r0]
	subs r0, #0x12
	strb r6, [r0]
	strh r4, [r3]
	b _08023812
	.align 2, 0
_080237DC: .4byte 0x0000DFFF
_080237E0:
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x44
	beq _080237FE
	cmp r0, #0x44
	blt _0802380A
	cmp r0, #0x58
	bgt _0802380A
	cmp r0, #0x57
	blt _0802380A
	movs r0, #0
	b _08023810
_080237FE:
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r0, r1
	b _08023810
_0802380A:
	ldrh r1, [r3]
	ldr r0, _08023818 @ =0x00007FFF
	ands r0, r1
_08023810:
	strh r0, [r3]
_08023812:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08023818: .4byte 0x00007FFF

	thumb_func_start ArachnusSetStandingHitbox
ArachnusSetStandingHitbox: @ 0x0802381C
	push {lr}
	ldr r2, _0802383C @ =gCurrentSprite
	movs r0, #0
	ldr r3, _08023840 @ =0x0000FF80
	strh r3, [r2, #0xa]
	strh r0, [r2, #0xc]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08023848
	ldr r0, _08023844 @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x80
	b _0802384C
	.align 2, 0
_0802383C: .4byte gCurrentSprite
_08023840: .4byte 0x0000FF80
_08023844: .4byte 0x0000FFE0
_08023848:
	strh r3, [r2, #0xe]
	movs r0, #0x20
_0802384C:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ArachnusShootingFireInit
ArachnusShootingFireInit: @ 0x08023854
	push {lr}
	ldr r2, _08023884 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x40
	strb r0, [r1]
	ldr r0, _08023888 @ =0x08302A44
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r1, [r2]
	ldr r0, _0802388C @ =0x0000FBFF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	ldr r0, _08023890 @ =0x08302A74
	bl SetSecondarySpriteOAMPointer
	pop {r0}
	bx r0
	.align 2, 0
_08023884: .4byte gCurrentSprite
_08023888: .4byte 0x08302A44
_0802388C: .4byte 0x0000FBFF
_08023890: .4byte 0x08302A74

	thumb_func_start ArachnusScreamingInit
ArachnusScreamingInit: @ 0x08023894
	push {lr}
	ldr r1, _080238C8 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x3e
	strb r0, [r3]
	ldr r0, _080238CC @ =0x08302D54
	str r0, [r1, #0x18]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _080238D0 @ =0x0000FF20
	strh r0, [r1, #0xa]
	strh r2, [r1, #0xc]
	adds r0, #0x98
	strh r0, [r1, #0xe]
	movs r0, #0x48
	strh r0, [r1, #0x10]
	ldr r0, _080238D4 @ =0x08302D8C
	bl SetSecondarySpriteOAMPointer
	movs r0, #0xbb
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_080238C8: .4byte gCurrentSprite
_080238CC: .4byte 0x08302D54
_080238D0: .4byte 0x0000FF20
_080238D4: .4byte 0x08302D8C

	thumb_func_start ArachnusDyingInit
ArachnusDyingInit: @ 0x080238D8
	push {r4, lr}
	ldr r4, _08023940 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x42
	strb r1, [r0]
	ldr r0, [r4, #0x18]
	ldr r1, _08023944 @ =0x08302D54
	cmp r0, r1
	beq _08023908
	str r1, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r0, _08023948 @ =0x0000FF20
	strh r0, [r4, #0xa]
	strh r2, [r4, #0xc]
	adds r0, #0x98
	strh r0, [r4, #0xe]
	movs r0, #0x48
	strh r0, [r4, #0x10]
	ldr r0, _0802394C @ =0x08302D8C
	bl SetSecondarySpriteOAMPointer
_08023908:
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r1, #1
	strh r1, [r4, #0x14]
	adds r0, #7
	strb r2, [r0]
	subs r0, #0xc
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r4, #6]
	strh r1, [r4, #8]
	movs r0, #0xbe
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08023940: .4byte gCurrentSprite
_08023944: .4byte 0x08302D54
_08023948: .4byte 0x0000FF20
_0802394C: .4byte 0x08302D8C

	thumb_func_start ArachnusRollingInit
ArachnusRollingInit: @ 0x08023950
	push {r4, r5, lr}
	ldr r4, _080239C4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	movs r5, #0
	orrs r1, r0
	strh r1, [r4]
	adds r0, r4, #0
	adds r0, #0x30
	strb r5, [r0]
	ldr r0, _080239C8 @ =0x0000FFE0
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08023990
	ldr r0, _080239CC @ =0x0000FBFF
	ands r1, r0
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r2, #0
	eors r1, r0
	strh r1, [r4]
_08023990:
	ldr r0, _080239D0 @ =0x08302C94
	bl SetSecondarySpriteOAMPointer
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	ldr r2, _080239D4 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, _080239D8 @ =0x0000FFA0
	strh r1, [r0, #0xa]
	movs r1, #0
	strh r1, [r0, #0xc]
	ldr r1, _080239DC @ =0x0000FFC0
	strh r1, [r0, #0xe]
	movs r1, #0x40
	strh r1, [r0, #0x10]
	movs r0, #0xb4
	bl SoundPlay
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080239C4: .4byte gCurrentSprite
_080239C8: .4byte 0x0000FFE0
_080239CC: .4byte 0x0000FBFF
_080239D0: .4byte 0x08302C94
_080239D4: .4byte gSpriteData
_080239D8: .4byte 0x0000FFA0
_080239DC: .4byte 0x0000FFC0

	thumb_func_start ArachnusSlashingInit
ArachnusSlashingInit: @ 0x080239E0
	push {lr}
	ldr r1, _08023A10 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x38
	strb r0, [r2]
	ldr r0, _08023A14 @ =0x08302AA4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldrh r2, [r1]
	ldr r0, _08023A18 @ =0x0000FBFF
	ands r0, r2
	strh r0, [r1]
	ldr r0, _08023A1C @ =0x08302B74
	bl SetSecondarySpriteOAMPointer
	movs r0, #0xba
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08023A10: .4byte gCurrentSprite
_08023A14: .4byte 0x08302AA4
_08023A18: .4byte 0x0000FBFF
_08023A1C: .4byte 0x08302B74

	thumb_func_start ArachnusSlashing
ArachnusSlashing: @ 0x08023A20
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r0, _08023A48 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	movs r5, #0x40
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _08023A8E
	mov r2, ip
	ldrh r1, [r2, #0x16]
	cmp r1, #0xf
	bhi _08023A4C
	movs r0, #0xa0
	strh r0, [r2, #0x10]
	b _08023AF6
	.align 2, 0
_08023A48: .4byte gCurrentSprite
_08023A4C:
	cmp r1, #0x11
	bhi _08023A58
	movs r0, #0x60
	mov r1, ip
	strh r0, [r1, #0x10]
	b _08023AF6
_08023A58:
	cmp r1, #0x17
	bhi _08023A86
	movs r0, #0xc0
	mov r2, ip
	strh r0, [r2, #0x10]
	cmp r1, #0x12
	bne _08023AF6
	ldrb r0, [r2, #0x1c]
	cmp r0, #3
	bne _08023AF6
	ldrb r2, [r2, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	adds r0, #0x10
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x8c
	str r0, [sp, #4]
	str r5, [sp, #8]
	b _08023ADC
_08023A86:
	movs r0, #0x80
	mov r2, ip
	strh r0, [r2, #0x10]
	b _08023AF6
_08023A8E:
	mov r0, ip
	ldrh r1, [r0, #0x16]
	cmp r1, #0xf
	bhi _08023AA4
	ldr r0, _08023AA0 @ =0x0000FF60
	mov r1, ip
	strh r0, [r1, #0xe]
	b _08023AF6
	.align 2, 0
_08023AA0: .4byte 0x0000FF60
_08023AA4:
	cmp r1, #0x11
	bhi _08023AB0
	ldr r0, _08023AAC @ =0x0000FFA0
	b _08023AF2
	.align 2, 0
_08023AAC: .4byte 0x0000FFA0
_08023AB0:
	cmp r1, #0x17
	bhi _08023AF0
	ldr r0, _08023AEC @ =0x0000FF40
	mov r2, ip
	strh r0, [r2, #0xe]
	cmp r1, #0x12
	bne _08023AF6
	ldrb r0, [r2, #0x1c]
	cmp r0, #3
	bne _08023AF6
	ldrb r2, [r2, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	adds r0, #0x10
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x8c
	str r0, [sp, #4]
	str r4, [sp, #8]
_08023ADC:
	movs r0, #0x16
	movs r1, #0
	bl SpriteSpawnSecondary
	movs r0, #0xb9
	bl SoundPlay
	b _08023AF6
	.align 2, 0
_08023AEC: .4byte 0x0000FF40
_08023AF0:
	ldr r0, _08023B18 @ =0x0000FF80
_08023AF2:
	mov r2, ip
	strh r0, [r2, #0xe]
_08023AF6:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08023B0E
	ldr r1, _08023B1C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #1
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
_08023B0E:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08023B18: .4byte 0x0000FF80
_08023B1C: .4byte gCurrentSprite

	thumb_func_start ArachnusRolling
ArachnusRolling: @ 0x08023B20
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r5, _08023B70 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	ldr r7, _08023B74 @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r6, r0, #3
	adds r0, r7, #0
	adds r0, #0x18
	adds r0, r6, r0
	ldr r1, [r0]
	ldr r0, _08023B78 @ =0x08302C94
	cmp r1, r0
	bne _08023B80
	adds r0, r2, #0
	bl CheckEndOfSpriteAnimation
	cmp r0, #0
	bne _08023B50
	b _08023D0A
_08023B50:
	ldr r0, _08023B7C @ =0x08302DC4
	bl SetSecondarySpriteOAMPointer
	adds r1, r6, r7
	ldrh r2, [r1]
	movs r0, #0x80
	movs r3, #0
	orrs r0, r2
	strh r0, [r1]
	adds r0, r1, #0
	adds r0, #0x2b
	strb r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #0x12]
	b _08023D0A
	.align 2, 0
_08023B70: .4byte gCurrentSprite
_08023B74: .4byte gSpriteData
_08023B78: .4byte 0x08302C94
_08023B7C: .4byte 0x08302DC4
_08023B80:
	ldr r0, _08023C18 @ =0x082FD0B8
	movs r1, #0x30
	adds r1, r1, r5
	mov r8, r1
	ldrb r3, [r1]
	lsls r1, r3, #0x18
	lsrs r2, r1, #0x18
	lsrs r1, r1, #0x1a
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r4, [r1]
	cmp r2, #0x2e
	bhi _08023BA0
	adds r0, r3, #1
	mov r2, r8
	strb r0, [r2]
_08023BA0:
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08023C40
	adds r6, r6, r7
	ldrh r0, [r6, #2]
	subs r0, #0x48
	movs r2, #0x10
	ldrsh r1, [r6, r2]
	ldrh r2, [r6, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08023C1C @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08023BCA
	b _08023CD0
_08023BCA:
	ldrh r0, [r5, #4]
	adds r0, r4, r0
	strh r0, [r5, #4]
	ldrh r7, [r5, #4]
	ldrh r2, [r5, #2]
	ldrh r0, [r6, #4]
	adds r0, r4, r0
	strh r0, [r6, #4]
	mov r1, r8
	ldrb r0, [r1]
	lsrs r4, r0, #1
	cmp r4, #0x10
	bls _08023BE6
	movs r4, #0x10
_08023BE6:
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r1, r1, r4
	strb r1, [r0]
	ldr r0, _08023C20 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	cmp r1, #0xc
	bls _08023CCA
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08023C28
	subs r2, #0x10
	ldr r0, _08023C24 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r3, #0x1f
	ands r3, r0
	adds r3, r7, r3
	movs r0, #0
	movs r1, #4
	bl SpriteDebrisInit
	b _08023CCA
	.align 2, 0
_08023C18: .4byte 0x082FD0B8
_08023C1C: .4byte gPreviousCollisionCheck
_08023C20: .4byte gSpriteRandomNumber
_08023C24: .4byte gFrameCounter8Bit
_08023C28:
	ldr r0, _08023C3C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r3, #0x1f
	ands r3, r0
	adds r3, r7, r3
	movs r0, #0
	movs r1, #0x11
	bl SpriteDebrisInit
	b _08023CCA
	.align 2, 0
_08023C3C: .4byte gFrameCounter8Bit
_08023C40:
	adds r6, r6, r7
	ldrh r0, [r6, #2]
	subs r0, #0x48
	movs r2, #0xe
	ldrsh r1, [r6, r2]
	ldrh r2, [r6, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08023CAC @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08023CD0
	ldrh r0, [r5, #4]
	subs r0, r0, r4
	strh r0, [r5, #4]
	ldrh r7, [r5, #4]
	ldrh r2, [r5, #2]
	ldrh r0, [r6, #4]
	subs r0, r0, r4
	strh r0, [r6, #4]
	mov r1, r8
	ldrb r0, [r1]
	lsrs r4, r0, #1
	cmp r4, #0x10
	bls _08023C7A
	movs r4, #0x10
_08023C7A:
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	subs r1, r1, r4
	strb r1, [r0]
	ldr r0, _08023CB0 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	cmp r1, #0xc
	bls _08023CCA
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08023CB8
	subs r2, #0x10
	ldr r0, _08023CB4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r3, #0x1f
	ands r3, r0
	subs r3, r7, r3
	movs r0, #0
	movs r1, #0x13
	bl SpriteDebrisInit
	b _08023CCA
	.align 2, 0
_08023CAC: .4byte gPreviousCollisionCheck
_08023CB0: .4byte gSpriteRandomNumber
_08023CB4: .4byte gFrameCounter8Bit
_08023CB8:
	ldr r0, _08023CF0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r3, #0x1f
	ands r3, r0
	subs r3, r7, r3
	movs r0, #0
	movs r1, #0x12
	bl SpriteDebrisInit
_08023CCA:
	movs r0, #0
	cmp r0, #0
	beq _08023CF8
_08023CD0:
	ldr r1, _08023CF4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x3c
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0xb7
	bl SoundPlay
	b _08023D0A
	.align 2, 0
_08023CF0: .4byte gFrameCounter8Bit
_08023CF4: .4byte gCurrentSprite
_08023CF8:
	ldr r0, _08023D14 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08023D0A
	movs r0, #0xb6
	bl SoundPlay
_08023D0A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08023D14: .4byte gFrameCounter8Bit

	thumb_func_start ArachnusBonking
ArachnusBonking: @ 0x08023D18
	push {r4, r5, r6, r7, lr}
	ldr r3, _08023D58 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r5, [r0]
	ldr r2, _08023D5C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r1, r2, #0
	adds r1, #0x18
	adds r0, r0, r1
	ldr r0, [r0]
	adds r4, r3, #0
	adds r7, r2, #0
	ldr r1, _08023D60 @ =0x08302CF4
	mov ip, r1
	cmp r0, ip
	bne _08023D64
	adds r0, r5, #0
	bl CheckNearEndOfSpriteAnimation
	cmp r0, #0
	beq _08023E22
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0xff
	strb r0, [r1]
	b _08023E22
	.align 2, 0
_08023D58: .4byte gCurrentSprite
_08023D5C: .4byte gSpriteData
_08023D60: .4byte 0x08302CF4
_08023D64:
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r1, [r6]
	ldr r2, _08023D84 @ =0x082FD0D0
	lsls r0, r1, #1
	adds r0, r0, r2
	ldrh r3, [r0]
	ldr r0, _08023D88 @ =0x00007FFF
	cmp r3, r0
	bne _08023D8C
	subs r0, r1, #1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r3, [r0]
	b _08023D90
	.align 2, 0
_08023D84: .4byte 0x082FD0D0
_08023D88: .4byte 0x00007FFF
_08023D8C:
	adds r0, r1, #1
	strb r0, [r6]
_08023D90:
	ldrh r0, [r4, #2]
	adds r0, r3, r0
	strh r0, [r4, #2]
	lsls r2, r5, #3
	subs r1, r2, r5
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrh r0, [r1, #2]
	adds r0, r3, r0
	strh r0, [r1, #2]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	movs r3, #8
	adds r6, r2, #0
	cmp r0, #0xb
	bls _08023DBA
	movs r3, #0
	cmp r0, #0x14
	bhi _08023DBA
	movs r3, #4
_08023DBA:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08023DE0
	ldrh r0, [r4, #4]
	subs r0, r0, r3
	strh r0, [r4, #4]
	subs r1, r6, r5
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrh r0, [r1, #4]
	subs r0, r0, r3
	strh r0, [r1, #4]
	adds r1, #0x2b
	lsrs r2, r3, #1
	ldrb r0, [r1]
	subs r0, r0, r2
	b _08023DFA
_08023DE0:
	ldrh r0, [r4, #4]
	adds r0, r3, r0
	strh r0, [r4, #4]
	subs r1, r6, r5
	lsls r1, r1, #3
	adds r1, r1, r7
	ldrh r0, [r1, #4]
	adds r0, r3, r0
	strh r0, [r1, #4]
	adds r1, #0x2b
	lsrs r0, r3, #1
	ldrb r2, [r1]
	adds r0, r0, r2
_08023DFA:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _08023E22
	mov r0, ip
	bl SetSecondarySpriteOAMPointer
	ldr r0, _08023E28 @ =gSpriteData
	subs r1, r6, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrh r2, [r1]
	ldr r0, _08023E2C @ =0x0000FF7F
	ands r0, r2
	strh r0, [r1]
	movs r0, #0xb5
	bl SoundPlay
_08023E22:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08023E28: .4byte gSpriteData
_08023E2C: .4byte 0x0000FF7F

	thumb_func_start ArachnusScreaming
ArachnusScreaming: @ 0x08023E30
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08023E76
	movs r0, #0x1a
	bl CountSecondarySprite
	cmp r0, #0
	beq _08023E54
	ldr r0, _08023E50 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #7
	bls _08023E5C
	b _08023E6C
	.align 2, 0
_08023E50: .4byte gSpriteRandomNumber
_08023E54:
	ldr r0, _08023E64 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xa
	bls _08023E68
_08023E5C:
	bl ArachnusSlashingInit
	b _08023E76
	.align 2, 0
_08023E64: .4byte gSpriteRandomNumber
_08023E68:
	cmp r0, #6
	bls _08023E72
_08023E6C:
	bl ArachnusRollingInit
	b _08023E76
_08023E72:
	bl ArachnusShootingFireInit
_08023E76:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ArachnusDying
ArachnusDying: @ 0x08023E7C
	push {r4, r5, lr}
	ldr r2, _08023EBC @ =gWrittenToMosaic_H
	ldr r1, _08023EC0 @ =0x083BDED6
	ldr r3, _08023EC4 @ =gCurrentSprite
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	ldrh r0, [r3, #2]
	subs r0, #0xa0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r4, [r3, #4]
	ldrh r0, [r3, #8]
	adds r2, r3, #0
	cmp r0, #0
	bne _08023EA8
	b _08023FB4
_08023EA8:
	ldrh r0, [r3, #6]
	cmp r0, #0x28
	bls _08023EB0
	b _0802410C
_08023EB0:
	lsls r0, r0, #2
	ldr r1, _08023EC8 @ =_08023ECC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08023EBC: .4byte gWrittenToMosaic_H
_08023EC0: .4byte 0x083BDED6
_08023EC4: .4byte gCurrentSprite
_08023EC8: .4byte _08023ECC
_08023ECC: @ jump table
	.4byte _08023FAA @ case 0
	.4byte _0802410C @ case 1
	.4byte _0802410C @ case 2
	.4byte _0802410C @ case 3
	.4byte _0802410C @ case 4
	.4byte _0802410C @ case 5
	.4byte _0802410C @ case 6
	.4byte _0802410C @ case 7
	.4byte _0802410C @ case 8
	.4byte _0802410C @ case 9
	.4byte _08023F9A @ case 10
	.4byte _0802410C @ case 11
	.4byte _0802410C @ case 12
	.4byte _0802410C @ case 13
	.4byte _0802410C @ case 14
	.4byte _0802410C @ case 15
	.4byte _0802410C @ case 16
	.4byte _0802410C @ case 17
	.4byte _0802410C @ case 18
	.4byte _0802410C @ case 19
	.4byte _08023F8A @ case 20
	.4byte _0802410C @ case 21
	.4byte _0802410C @ case 22
	.4byte _0802410C @ case 23
	.4byte _0802410C @ case 24
	.4byte _0802410C @ case 25
	.4byte _0802410C @ case 26
	.4byte _0802410C @ case 27
	.4byte _0802410C @ case 28
	.4byte _0802410C @ case 29
	.4byte _08023F84 @ case 30
	.4byte _0802410C @ case 31
	.4byte _0802410C @ case 32
	.4byte _0802410C @ case 33
	.4byte _0802410C @ case 34
	.4byte _0802410C @ case 35
	.4byte _0802410C @ case 36
	.4byte _0802410C @ case 37
	.4byte _0802410C @ case 38
	.4byte _0802410C @ case 39
	.4byte _08023F70 @ case 40
_08023F70:
	adds r0, r5, #0
	subs r0, #0x10
	adds r1, r4, #0
	movs r2, #0x25
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x10
	adds r1, r4, #0
	b _08023F92
_08023F84:
	adds r0, r5, #0
	subs r0, #0x20
	b _08023F9E
_08023F8A:
	adds r0, r5, #0
	adds r0, #0x40
	adds r1, r4, #0
	subs r1, #0x10
_08023F92:
	movs r2, #0x26
	bl ParticleSet
	b _0802410C
_08023F9A:
	adds r0, r5, #0
	subs r0, #0x40
_08023F9E:
	adds r1, r4, #0
	adds r1, #0x1c
	movs r2, #0x25
	bl ParticleSet
	b _0802410C
_08023FAA:
	movs r0, #0
	strh r0, [r2, #8]
	movs r0, #0x2c
	strh r0, [r2, #6]
	b _0802410C
_08023FB4:
	ldrh r0, [r3, #6]
	cmp r0, #0x28
	bls _08023FBC
	b _080240DE
_08023FBC:
	lsls r0, r0, #2
	ldr r1, _08023FC8 @ =_08023FCC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08023FC8: .4byte _08023FCC
_08023FCC: @ jump table
	.4byte _080240CE @ case 0
	.4byte _080240DE @ case 1
	.4byte _080240DE @ case 2
	.4byte _080240DE @ case 3
	.4byte _080240DE @ case 4
	.4byte _080240DE @ case 5
	.4byte _080240DE @ case 6
	.4byte _080240DE @ case 7
	.4byte _080240DE @ case 8
	.4byte _080240DE @ case 9
	.4byte _080240B0 @ case 10
	.4byte _080240DE @ case 11
	.4byte _080240DE @ case 12
	.4byte _080240DE @ case 13
	.4byte _080240DE @ case 14
	.4byte _080240DE @ case 15
	.4byte _080240DE @ case 16
	.4byte _080240DE @ case 17
	.4byte _080240DE @ case 18
	.4byte _080240DE @ case 19
	.4byte _0802409A @ case 20
	.4byte _080240DE @ case 21
	.4byte _080240DE @ case 22
	.4byte _080240DE @ case 23
	.4byte _080240DE @ case 24
	.4byte _080240DE @ case 25
	.4byte _080240DE @ case 26
	.4byte _080240DE @ case 27
	.4byte _080240DE @ case 28
	.4byte _080240DE @ case 29
	.4byte _08024086 @ case 30
	.4byte _080240DE @ case 31
	.4byte _080240DE @ case 32
	.4byte _080240DE @ case 33
	.4byte _080240DE @ case 34
	.4byte _080240DE @ case 35
	.4byte _080240DE @ case 36
	.4byte _080240DE @ case 37
	.4byte _080240DE @ case 38
	.4byte _080240DE @ case 39
	.4byte _08024070 @ case 40
_08024070:
	adds r0, r5, #0
	subs r0, #0x40
	subs r4, #0x10
	adds r1, r4, #0
	movs r2, #0x26
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x20
	adds r1, r4, #0
	b _080240C6
_08024086:
	adds r0, r5, #0
	subs r0, #0x20
	adds r1, r4, #0
	adds r1, #0x1c
	movs r2, #0x26
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x40
	b _080240C2
_0802409A:
	adds r0, r5, #0
	subs r0, #0x20
	subs r4, #0x10
	adds r1, r4, #0
	movs r2, #0x26
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x40
	adds r1, r4, #0
	b _080240C6
_080240B0:
	adds r0, r5, #0
	subs r0, #0x40
	adds r1, r4, #0
	adds r1, #0x1c
	movs r2, #0x26
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x20
_080240C2:
	adds r1, r4, #0
	adds r1, #0x20
_080240C6:
	movs r2, #0x25
	bl ParticleSet
	b _080240DE
_080240CE:
	ldr r2, _080240F4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	ldr r0, _080240F8 @ =0x030006AD
	ldrb r0, [r0]
	strb r0, [r2, #0x1d]
_080240DE:
	ldr r1, _080240F4 @ =gCurrentSprite
	ldrh r0, [r1, #6]
	cmp r0, #0x13
	bhi _080240FC
	ldr r0, _080240F8 @ =0x030006AD
	ldrb r0, [r0]
	ldrh r2, [r1, #6]
	movs r1, #0
	bl SpriteLoadGfx
	b _0802410C
	.align 2, 0
_080240F4: .4byte gCurrentSprite
_080240F8: .4byte 0x030006AD
_080240FC:
	cmp r0, #0x14
	bne _0802410C
	ldr r0, _08024114 @ =0x030006AD
	ldrb r0, [r0]
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_0802410C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08024114: .4byte 0x030006AD

	thumb_func_start ArachnusShootingFire
ArachnusShootingFire: @ 0x08024118
	push {r4, lr}
	sub sp, #0xc
	ldr r0, _08024160 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #0x16]
	cmp r0, #3
	bne _0802418A
	mov r1, ip
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0802418A
	ldrh r1, [r1]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _08024164
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x80
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x40
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x1a
	movs r1, #0
	bl SpriteSpawnSecondary
	b _08024184
	.align 2, 0
_08024160: .4byte gCurrentSprite
_08024164:
	mov r4, ip
	ldrb r2, [r4, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x80
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x1a
	movs r1, #0
	bl SpriteSpawnSecondary
_08024184:
	movs r0, #0xbc
	bl SoundPlay
_0802418A:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080241A2
	ldr r1, _080241AC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #1
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
_080241A2:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080241AC: .4byte gCurrentSprite

	thumb_func_start ArachnusDetermineAttack
ArachnusDetermineAttack: @ 0x080241B0
	push {r4, r5, lr}
	ldr r5, _080241D0 @ =gCurrentSprite
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #0
	beq _080241D4
	cmp r0, #0xff
	bne _080241C6
	bl ArachnusSlashingInit
_080241C6:
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	b _08024234
	.align 2, 0
_080241D0: .4byte gCurrentSprite
_080241D4:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080241FC
	movs r0, #0x1a
	bl CountSecondarySprite
	cmp r0, #0
	bne _08024204
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	bne _08024204
	bl ArachnusShootingFireInit
	b _08024234
_080241FC:
	bl SamusCheckHangingOnLedge
	cmp r0, #0
	beq _0802420A
_08024204:
	bl ArachnusRollingInit
	b _08024234
_0802420A:
	movs r2, #0xc0
	lsls r2, r2, #1
	movs r0, #0xc0
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #3
	bne _08024220
	bl ArachnusSlashingInit
	b _08024234
_08024220:
	movs r2, #0x80
	lsls r2, r2, #2
	movs r0, #0xc0
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #3
	bne _08024234
	bl ArachnusRollingInit
_08024234:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ArachnusCoreXTransformation
ArachnusCoreXTransformation: @ 0x0802423C
	push {lr}
	ldr r3, _08024264 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08024270
	ldr r2, _08024268 @ =gWrittenToMosaic_H
	ldr r1, _0802426C @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _08024284
	.align 2, 0
_08024264: .4byte gCurrentSprite
_08024268: .4byte gWrittenToMosaic_H
_0802426C: .4byte 0x083BDED6
_08024270:
	ldrh r0, [r3]
	ldr r1, _08024288 @ =0x00007FFF
	ands r1, r0
	adds r2, r3, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	ldr r0, _0802428C @ =0x0000FFDF
	ands r1, r0
	strh r1, [r3]
_08024284:
	pop {r0}
	bx r0
	.align 2, 0
_08024288: .4byte 0x00007FFF
_0802428C: .4byte 0x0000FFDF

	thumb_func_start ArachnusInit
ArachnusInit: @ 0x08024290
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r0, _08024308 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	movs r2, #0x40
	movs r4, #0
	orrs r0, r2
	mov r1, ip
	strh r0, [r1]
	ldr r3, _0802430C @ =sPrimarySpriteStats
	ldrb r1, [r1, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	mov r0, ip
	adds r0, #0x25
	movs r3, #2
	strb r3, [r0]
	adds r0, #2
	strb r2, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x24
	ldrb r0, [r2]
	mov r5, ip
	cmp r0, #0x59
	bne _08024314
	ldrh r0, [r5, #2]
	adds r0, #0x64
	strh r0, [r5, #2]
	adds r0, r5, #0
	adds r0, #0x21
	strb r3, [r0]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	ldrh r1, [r5]
	ldr r0, _08024310 @ =0x0000F3FF
	ands r0, r1
	strh r0, [r5]
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	strh r0, [r5, #6]
	b _08024318
	.align 2, 0
_08024308: .4byte gCurrentSprite
_0802430C: .4byte sPrimarySpriteStats
_08024310: .4byte 0x0000F3FF
_08024314:
	movs r0, #8
	strb r0, [r2]
_08024318:
	adds r4, r5, #0
	ldr r0, _0802437C @ =0x08302C44
	str r0, [r4, #0x18]
	movs r0, #0
	mov r8, r0
	mov r1, r8
	strb r1, [r4, #0x1c]
	mov r0, r8
	strh r0, [r4, #0x16]
	bl ArachnusSetStandingHitbox
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r7, r4, #0
	adds r7, #0x23
	ldrb r3, [r7]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r6, #0x40
	str r6, [sp, #8]
	movs r0, #0x15
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _0802439E
	adds r1, r4, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x17
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _08024380
	mov r0, r8
	strh r0, [r4]
	b _080243C6
	.align 2, 0
_0802437C: .4byte 0x08302C44
_08024380:
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x18
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _080243A4
_0802439E:
	mov r1, r8
	strh r1, [r4]
	b _080243C6
_080243A4:
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x19
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _080243C6
	mov r0, r8
	strh r0, [r5]
_080243C6:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ArachnusWalkingInit
ArachnusWalkingInit: @ 0x080243D4
	push {lr}
	ldr r1, _080243F8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _080243FC @ =0x083028F4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bl ArachnusSetStandingHitbox
	ldr r0, _08024400 @ =0x08302924
	bl SetSecondarySpriteOAMPointer
	pop {r0}
	bx r0
	.align 2, 0
_080243F8: .4byte gCurrentSprite
_080243FC: .4byte 0x083028F4
_08024400: .4byte 0x08302924

	thumb_func_start ArachnusWalking
ArachnusWalking: @ 0x08024404
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0802444C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08024454
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08024450 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0802448E
	ldrh r0, [r4, #2]
	subs r0, #0x48
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0802448A
	b _0802448E
	.align 2, 0
_0802444C: .4byte gCurrentSprite
_08024450: .4byte gPreviousCollisionCheck
_08024454:
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08024498 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0802448E
	ldrh r0, [r4, #2]
	subs r0, #0x48
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0802448A
	movs r6, #1
_0802448A:
	cmp r6, #0
	beq _080244A0
_0802448E:
	ldr r0, _0802449C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
	b _08024528
	.align 2, 0
_08024498: .4byte gPreviousCollisionCheck
_0802449C: .4byte gCurrentSprite
_080244A0:
	ldr r1, _080244B4 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #1
	beq _080244D6
	cmp r0, #1
	bgt _080244B8
	cmp r0, #0
	beq _080244C2
	b _080244DA
	.align 2, 0
_080244B4: .4byte gCurrentSprite
_080244B8:
	cmp r0, #2
	beq _080244D2
	cmp r0, #3
	beq _080244D6
	b _080244DA
_080244C2:
	movs r4, #1
	ldrb r0, [r1, #0x1c]
	cmp r0, #9
	bne _080244DC
	movs r0, #0xb8
	bl SoundPlay
	b _080244DC
_080244D2:
	movs r4, #3
	b _080244DC
_080244D6:
	movs r4, #2
	b _080244DC
_080244DA:
	movs r4, #0
_080244DC:
	ldr r3, _08024504 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802450C
	ldrh r0, [r3, #4]
	adds r0, r4, r0
	strh r0, [r3, #4]
	ldr r2, _08024508 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #4]
	adds r1, r4, r1
	b _08024526
	.align 2, 0
_08024504: .4byte gCurrentSprite
_08024508: .4byte gSpriteData
_0802450C:
	ldrh r0, [r3, #4]
	subs r0, r0, r4
	strh r0, [r3, #4]
	ldr r2, _08024534 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #4]
	subs r1, r1, r4
_08024526:
	strh r1, [r0, #4]
_08024528:
	bl ArachnusDetermineAttack
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08024534: .4byte gSpriteData

	thumb_func_start ArachnusIdleInit
ArachnusIdleInit: @ 0x08024538
	push {r4, lr}
	ldr r0, _08024584 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	subs r1, #1
	ldrb r1, [r1]
	adds r3, r0, #0
	cmp r1, #0xff
	bne _080245A2
	ldrh r1, [r3]
	ldr r0, _08024588 @ =0x0000DFFF
	ands r0, r1
	movs r4, #0
	strh r0, [r3]
	ldr r1, _0802458C @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r2, r0, r1
	ldrh r0, [r2]
	ldr r1, _08024590 @ =0x0000FF7F
	ands r1, r0
	strh r1, [r2]
	ldr r0, _08024594 @ =0x0000FF60
	strh r0, [r2, #0xa]
	strh r4, [r2, #0xc]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _0802459C
	ldr r0, _08024598 @ =0x0000FFB0
	strh r0, [r2, #0xe]
	strh r4, [r2, #0x10]
	b _080245A2
	.align 2, 0
_08024584: .4byte gCurrentSprite
_08024588: .4byte 0x0000DFFF
_0802458C: .4byte gSpriteData
_08024590: .4byte 0x0000FF7F
_08024594: .4byte 0x0000FF60
_08024598: .4byte 0x0000FFB0
_0802459C:
	strh r0, [r2, #0xe]
	movs r0, #0x50
	strh r0, [r2, #0x10]
_080245A2:
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #8
	strb r0, [r1]
	ldr r0, _080245C4 @ =0x08302C44
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	bl ArachnusSetStandingHitbox
	ldr r0, _080245C8 @ =0x08302C6C
	bl SetSecondarySpriteOAMPointer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080245C4: .4byte 0x08302C44
_080245C8: .4byte 0x08302C6C

	thumb_func_start ArachnusIdle
ArachnusIdle: @ 0x080245CC
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802460C
	ldr r2, _080245F0 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080245F8
	ldr r1, _080245F4 @ =gSamusData
	ldrh r0, [r2, #4]
	movs r3, #1
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08024606
	b _08024604
	.align 2, 0
_080245F0: .4byte gCurrentSprite
_080245F4: .4byte gSamusData
_080245F8:
	ldr r1, _08024610 @ =gSamusData
	ldrh r0, [r2, #4]
	movs r3, #1
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _08024606
_08024604:
	movs r3, #3
_08024606:
	adds r0, r2, #0
	adds r0, #0x24
	strb r3, [r0]
_0802460C:
	pop {r0}
	bx r0
	.align 2, 0
_08024610: .4byte gSamusData

	thumb_func_start ArachnusTurningInit
ArachnusTurningInit: @ 0x08024614
	push {lr}
	ldr r1, _0802463C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _08024640 @ =0x083029C4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _08024644 @ =0x0000FFE0
	strh r0, [r1, #0xe]
	movs r0, #0x20
	strh r0, [r1, #0x10]
	ldr r0, _08024648 @ =0x08302A04
	bl SetSecondarySpriteOAMPointer
	pop {r0}
	bx r0
	.align 2, 0
_0802463C: .4byte gCurrentSprite
_08024640: .4byte 0x083029C4
_08024644: .4byte 0x0000FFE0
_08024648: .4byte 0x08302A04

	thumb_func_start ArachnusTurning
ArachnusTurning: @ 0x0802464C
	push {lr}
	ldr r1, _08024690 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	ldrb r0, [r1, #0x1c]
	cmp r0, #4
	bne _080246A2
	ldrh r0, [r1, #0x16]
	cmp r0, #2
	bne _080246A2
	ldrh r0, [r1]
	movs r2, #0x40
	eors r0, r2
	strh r0, [r1]
	ldr r1, _08024694 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r3, r0, r1
	ldrh r0, [r3]
	eors r0, r2
	strh r0, [r3]
	movs r1, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _0802469C
	ldr r0, _08024698 @ =0x0000FFB0
	strh r0, [r3, #0xe]
	movs r0, #0
	b _080246A0
	.align 2, 0
_08024690: .4byte gCurrentSprite
_08024694: .4byte gSpriteData
_08024698: .4byte 0x0000FFB0
_0802469C:
	strh r0, [r3, #0xe]
	movs r0, #0x50
_080246A0:
	strh r0, [r3, #0x10]
_080246A2:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080246B2
	ldr r0, _080246B8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_080246B2:
	pop {r0}
	bx r0
	.align 2, 0
_080246B8: .4byte gCurrentSprite

	thumb_func_start Arachnus
Arachnus: @ 0x080246BC
	push {lr}
	ldr r2, _080246F0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r3, [r0]
	cmp r3, #0
	beq _08024718
	ldrh r0, [r2, #0x14]
	cmp r0, #0
	beq _08024714
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r1, #0x7f
	ands r1, r0
	cmp r1, #5
	bls _080246F4
	cmp r3, #2
	beq _080246E6
	cmp r3, #8
	bne _08024718
_080246E6:
	cmp r3, #0x3e
	beq _08024718
	bl ArachnusScreamingInit
	b _08024718
	.align 2, 0
_080246F0: .4byte gCurrentSprite
_080246F4:
	cmp r1, #2
	bls _08024718
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	movs r3, #0
	orrs r1, r0
	strh r1, [r2]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _08024718
	strb r3, [r1]
	b _08024718
_08024714:
	bl ArachnusDyingInit
_08024718:
	ldr r0, _08024730 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5a
	bls _08024724
	b _080248F4
_08024724:
	lsls r0, r0, #2
	ldr r1, _08024734 @ =_08024738
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08024730: .4byte gCurrentSprite
_08024734: .4byte _08024738
_08024738: @ jump table
	.4byte _080248AE @ case 0
	.4byte _080248B4 @ case 1
	.4byte _080248B8 @ case 2
	.4byte _080248C8 @ case 3
	.4byte _080248CC @ case 4
	.4byte _080248F4 @ case 5
	.4byte _080248F4 @ case 6
	.4byte _080248BE @ case 7
	.4byte _080248C2 @ case 8
	.4byte _080248F4 @ case 9
	.4byte _080248F4 @ case 10
	.4byte _080248F4 @ case 11
	.4byte _080248F4 @ case 12
	.4byte _080248F4 @ case 13
	.4byte _080248F4 @ case 14
	.4byte _080248F4 @ case 15
	.4byte _080248F4 @ case 16
	.4byte _080248F4 @ case 17
	.4byte _080248F4 @ case 18
	.4byte _080248F4 @ case 19
	.4byte _080248F4 @ case 20
	.4byte _080248F4 @ case 21
	.4byte _080248F4 @ case 22
	.4byte _080248F4 @ case 23
	.4byte _080248F4 @ case 24
	.4byte _080248F4 @ case 25
	.4byte _080248F4 @ case 26
	.4byte _080248F4 @ case 27
	.4byte _080248F4 @ case 28
	.4byte _080248F4 @ case 29
	.4byte _080248F4 @ case 30
	.4byte _080248F4 @ case 31
	.4byte _080248F4 @ case 32
	.4byte _080248F4 @ case 33
	.4byte _080248F4 @ case 34
	.4byte _080248F4 @ case 35
	.4byte _080248F4 @ case 36
	.4byte _080248F4 @ case 37
	.4byte _080248F4 @ case 38
	.4byte _080248F4 @ case 39
	.4byte _080248F4 @ case 40
	.4byte _080248F4 @ case 41
	.4byte _080248F4 @ case 42
	.4byte _080248F4 @ case 43
	.4byte _080248F4 @ case 44
	.4byte _080248F4 @ case 45
	.4byte _080248F4 @ case 46
	.4byte _080248F4 @ case 47
	.4byte _080248F4 @ case 48
	.4byte _080248F4 @ case 49
	.4byte _080248F4 @ case 50
	.4byte _080248F4 @ case 51
	.4byte _080248F4 @ case 52
	.4byte _080248F4 @ case 53
	.4byte _080248F4 @ case 54
	.4byte _080248F4 @ case 55
	.4byte _080248D2 @ case 56
	.4byte _080248F4 @ case 57
	.4byte _080248D8 @ case 58
	.4byte _080248F4 @ case 59
	.4byte _080248DE @ case 60
	.4byte _080248F4 @ case 61
	.4byte _080248E4 @ case 62
	.4byte _080248F4 @ case 63
	.4byte _080248EA @ case 64
	.4byte _080248F4 @ case 65
	.4byte _080248F0 @ case 66
	.4byte _080248F4 @ case 67
	.4byte _080248F4 @ case 68
	.4byte _080248F4 @ case 69
	.4byte _080248F4 @ case 70
	.4byte _080248F4 @ case 71
	.4byte _080248F4 @ case 72
	.4byte _080248F4 @ case 73
	.4byte _080248F4 @ case 74
	.4byte _080248F4 @ case 75
	.4byte _080248F4 @ case 76
	.4byte _080248F4 @ case 77
	.4byte _080248F4 @ case 78
	.4byte _080248F4 @ case 79
	.4byte _080248F4 @ case 80
	.4byte _080248F4 @ case 81
	.4byte _080248F4 @ case 82
	.4byte _080248F4 @ case 83
	.4byte _080248F4 @ case 84
	.4byte _080248F4 @ case 85
	.4byte _080248F4 @ case 86
	.4byte _080248F4 @ case 87
	.4byte _080248F4 @ case 88
	.4byte _080248A4 @ case 89
	.4byte _080248A8 @ case 90
_080248A4:
	bl ArachnusInit
_080248A8:
	bl ArachnusCoreXTransformation
	b _080248F4
_080248AE:
	bl ArachnusInit
	b _080248F4
_080248B4:
	bl ArachnusWalkingInit
_080248B8:
	bl ArachnusWalking
	b _080248F4
_080248BE:
	bl ArachnusIdleInit
_080248C2:
	bl ArachnusIdle
	b _080248F4
_080248C8:
	bl ArachnusTurningInit
_080248CC:
	bl ArachnusTurning
	b _080248F4
_080248D2:
	bl ArachnusSlashing
	b _080248F4
_080248D8:
	bl ArachnusRolling
	b _080248F4
_080248DE:
	bl ArachnusBonking
	b _080248F4
_080248E4:
	bl ArachnusScreaming
	b _080248F4
_080248EA:
	bl ArachnusShootingFire
	b _080248F4
_080248F0:
	bl ArachnusDying
_080248F4:
	pop {r0}
	bx r0

	thumb_func_start ArachnusShell
ArachnusShell: @ 0x080248F8
	push {r4, r5, r6, lr}
	ldr r0, _0802496C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x23
	ldrb r5, [r1]
	adds r6, r0, #0
	adds r6, #0x24
	ldrb r2, [r6]
	adds r3, r0, #0
	cmp r2, #0
	bne _0802498A
	ldrh r1, [r3]
	ldr r0, _08024970 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	ldr r1, _08024974 @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08024978 @ =0x0000FF60
	strh r0, [r3, #0xa]
	strh r2, [r3, #0xc]
	ldr r0, _0802497C @ =0x08302C6C
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r2, [r3, #0x16]
	subs r1, #4
	movs r0, #2
	strb r0, [r1]
	strb r0, [r6]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _08024984
	ldr r0, _08024980 @ =0x0000FFB0
	strh r0, [r3, #0xe]
	strh r2, [r3, #0x10]
	b _0802498A
	.align 2, 0
_0802496C: .4byte gCurrentSprite
_08024970: .4byte 0x0000FFFB
_08024974: .4byte sSecondarySpriteStats
_08024978: .4byte 0x0000FF60
_0802497C: .4byte 0x08302C6C
_08024980: .4byte 0x0000FFB0
_08024984:
	strh r0, [r3, #0xe]
	movs r0, #0x50
	strh r0, [r3, #0x10]
_0802498A:
	ldr r1, _080249C4 @ =gSpriteData
	lsls r2, r5, #3
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	adds r4, r1, #0
	cmp r0, #2
	bne _080249EA
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0
	beq _080249EA
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080249CC
	ldr r1, _080249C8 @ =gSamusData
	ldrh r0, [r3, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _080249EA
	b _080249D6
	.align 2, 0
_080249C4: .4byte gSpriteData
_080249C8: .4byte gSamusData
_080249CC:
	ldr r1, _08024A04 @ =gSamusData
	ldrh r0, [r3, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _080249EA
_080249D6:
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r0, [r0]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r4
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
_080249EA:
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08024A08
	ldrh r1, [r3]
	movs r0, #0x20
	orrs r0, r1
	b _08024A0E
	.align 2, 0
_08024A04: .4byte gSamusData
_08024A08:
	ldrh r1, [r3]
	ldr r0, _08024A28 @ =0x0000FFDF
	ands r0, r1
_08024A0E:
	strh r0, [r3]
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r4
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x59
	bne _08024A22
	movs r0, #0
	strh r0, [r3]
_08024A22:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08024A28: .4byte 0x0000FFDF

	thumb_func_start ArachnusPart
ArachnusPart: @ 0x08024A2C
	push {r4, r5, r6, lr}
	ldr r1, _08024A60 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldr r2, _08024A64 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	adds r4, r1, #0
	adds r6, r2, #0
	cmp r0, #2
	beq _08024A90
	cmp r0, #2
	bgt _08024A68
	cmp r0, #1
	beq _08024A6E
	b _08024A84
	.align 2, 0
_08024A60: .4byte gCurrentSprite
_08024A64: .4byte gSpriteData
_08024A68:
	cmp r0, #7
	beq _08024A90
	b _08024A84
_08024A6E:
	ldrh r1, [r4]
	ldr r0, _08024A80 @ =0x0000DFFF
	ands r0, r1
	movs r1, #0
	strh r0, [r4]
	strb r1, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
	b _08024A90
	.align 2, 0
_08024A80: .4byte 0x0000DFFF
_08024A84:
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
_08024A90:
	lsls r3, r5, #3
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r6
	ldrh r1, [r0, #2]
	strh r1, [r4, #2]
	ldrh r1, [r0, #4]
	strh r1, [r4, #4]
	adds r1, r0, #0
	adds r1, #0x20
	ldrb r2, [r1]
	adds r1, r4, #0
	adds r1, #0x20
	strb r2, [r1]
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08024ABE
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	b _08024AC4
_08024ABE:
	ldrh r1, [r4]
	ldr r0, _08024AE0 @ =0x0000FFBF
	ands r0, r1
_08024AC4:
	strh r0, [r4]
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r6
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x59
	bne _08024AD8
	movs r0, #0
	strh r0, [r4]
_08024AD8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08024AE0: .4byte 0x0000FFBF

	thumb_func_start ArachnusHead
ArachnusHead: @ 0x08024AE4
	push {r4, r5, lr}
	ldr r3, _08024B40 @ =gCurrentSprite
	adds r5, r3, #0
	adds r5, #0x24
	ldrb r4, [r5]
	cmp r4, #0
	bne _08024B34
	ldrh r1, [r3]
	ldr r0, _08024B44 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	ldr r1, _08024B48 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldr r0, _08024B4C @ =0x0830294C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r5]
_08024B34:
	bl ArachnusPart
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08024B40: .4byte gCurrentSprite
_08024B44: .4byte 0x0000FFFB
_08024B48: .4byte 0x0000FFFC
_08024B4C: .4byte 0x0830294C

	thumb_func_start ArachnusArm1
ArachnusArm1: @ 0x08024B50
	push {r4, r5, r6, lr}
	ldr r3, _08024BB4 @ =gCurrentSprite
	adds r5, r3, #0
	adds r5, #0x24
	ldrb r4, [r5]
	cmp r4, #0
	bne _08024BAA
	ldrh r1, [r3]
	ldr r0, _08024BB8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x22
	movs r1, #4
	strb r1, [r0]
	movs r0, #0x27
	adds r0, r0, r3
	mov ip, r0
	movs r0, #0x20
	mov r6, ip
	strb r0, [r6]
	adds r0, r3, #0
	adds r0, #0x28
	strb r2, [r0]
	movs r0, #0x29
	adds r0, r0, r3
	mov ip, r0
	movs r0, #0x28
	mov r6, ip
	strb r0, [r6]
	ldr r0, _08024BBC @ =0x0000FFFC
	strh r0, [r3, #0xa]
	strh r1, [r3, #0xc]
	strh r0, [r3, #0xe]
	strh r1, [r3, #0x10]
	ldr r0, _08024BC0 @ =0x0830299C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r5]
_08024BAA:
	bl ArachnusPart
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08024BB4: .4byte gCurrentSprite
_08024BB8: .4byte 0x0000FFFB
_08024BBC: .4byte 0x0000FFFC
_08024BC0: .4byte 0x0830299C

	thumb_func_start ArachnusArm2
ArachnusArm2: @ 0x08024BC4
	push {r4, r5, r6, lr}
	ldr r0, _08024C24 @ =gCurrentSprite
	mov ip, r0
	mov r5, ip
	adds r5, #0x24
	ldrb r4, [r5]
	cmp r4, #0
	bne _08024C18
	mov r6, ip
	ldrh r1, [r6]
	ldr r0, _08024C28 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r6]
	mov r0, ip
	adds r0, #0x22
	movs r3, #2
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x28
	strb r0, [r1]
	ldr r1, _08024C2C @ =0x0000FFFC
	strh r1, [r6, #0xa]
	movs r0, #4
	strh r0, [r6, #0xc]
	strh r1, [r6, #0xe]
	strh r0, [r6, #0x10]
	ldr r0, _08024C30 @ =0x08302974
	str r0, [r6, #0x18]
	strb r2, [r6, #0x1c]
	strh r4, [r6, #0x16]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	strb r3, [r5]
_08024C18:
	bl ArachnusPart
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08024C24: .4byte gCurrentSprite
_08024C28: .4byte 0x0000FFFB
_08024C2C: .4byte 0x0000FFFC
_08024C30: .4byte 0x08302974

	thumb_func_start ArachnusFire
ArachnusFire: @ 0x08024C34
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r3, _08024C80 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _08024C84 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	adds r4, r3, #0
	cmp r0, #0x42
	bne _08024C68
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x38
	beq _08024C68
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x28
	strb r0, [r1]
_08024C68:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x38
	bls _08024C74
	b _08024FD2
_08024C74:
	lsls r0, r0, #2
	ldr r1, _08024C88 @ =_08024C8C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08024C80: .4byte gCurrentSprite
_08024C84: .4byte gSpriteData
_08024C88: .4byte _08024C8C
_08024C8C: @ jump table
	.4byte _08024D70 @ case 0
	.4byte _08024FD2 @ case 1
	.4byte _08024E00 @ case 2
	.4byte _08024FD2 @ case 3
	.4byte _08024FD2 @ case 4
	.4byte _08024FD2 @ case 5
	.4byte _08024FD2 @ case 6
	.4byte _08024FD2 @ case 7
	.4byte _08024FD2 @ case 8
	.4byte _08024FD2 @ case 9
	.4byte _08024FD2 @ case 10
	.4byte _08024FD2 @ case 11
	.4byte _08024FD2 @ case 12
	.4byte _08024FD2 @ case 13
	.4byte _08024FD2 @ case 14
	.4byte _08024FD2 @ case 15
	.4byte _08024FD2 @ case 16
	.4byte _08024FD2 @ case 17
	.4byte _08024FD2 @ case 18
	.4byte _08024FD2 @ case 19
	.4byte _08024FD2 @ case 20
	.4byte _08024FD2 @ case 21
	.4byte _08024FD2 @ case 22
	.4byte _08024FD2 @ case 23
	.4byte _08024E60 @ case 24
	.4byte _08024FD2 @ case 25
	.4byte _08024EE0 @ case 26
	.4byte _08024FD2 @ case 27
	.4byte _08024F10 @ case 28
	.4byte _08024FD2 @ case 29
	.4byte _08024FD2 @ case 30
	.4byte _08024FD2 @ case 31
	.4byte _08024FD2 @ case 32
	.4byte _08024FD2 @ case 33
	.4byte _08024FD2 @ case 34
	.4byte _08024FD2 @ case 35
	.4byte _08024FD2 @ case 36
	.4byte _08024FD2 @ case 37
	.4byte _08024FD2 @ case 38
	.4byte _08024FD2 @ case 39
	.4byte _08024FD2 @ case 40
	.4byte _08024FD2 @ case 41
	.4byte _08024F40 @ case 42
	.4byte _08024FD2 @ case 43
	.4byte _08024F70 @ case 44
	.4byte _08024FD2 @ case 45
	.4byte _08024FD2 @ case 46
	.4byte _08024FD2 @ case 47
	.4byte _08024FD2 @ case 48
	.4byte _08024FD2 @ case 49
	.4byte _08024FD2 @ case 50
	.4byte _08024FD2 @ case 51
	.4byte _08024FD2 @ case 52
	.4byte _08024FD2 @ case 53
	.4byte _08024FD2 @ case 54
	.4byte _08024FC4 @ case 55
	.4byte _08024F90 @ case 56
_08024D70:
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	movs r5, #0
	orrs r0, r1
	strb r0, [r2]
	ldrh r1, [r4]
	ldr r0, _08024DD4 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x22
	movs r2, #2
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x28
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	strb r3, [r0]
	adds r1, #2
	movs r0, #8
	strb r0, [r1]
	strh r5, [r4, #0xc]
	ldr r0, _08024DD8 @ =0x0000FFE8
	strh r0, [r4, #0xe]
	movs r0, #0x18
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r3, [r0]
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	bne _08024DE4
	ldr r0, _08024DDC @ =0x08303170
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r5, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
	ldr r0, _08024DE0 @ =0x0000FFD0
	strh r0, [r4, #0xa]
	b _08024FD2
	.align 2, 0
_08024DD4: .4byte 0x0000FFFB
_08024DD8: .4byte 0x0000FFE8
_08024DDC: .4byte 0x08303170
_08024DE0: .4byte 0x0000FFD0
_08024DE4:
	ldr r0, _08024DFC @ =0x08303138
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r5, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	b _08024E28
	.align 2, 0
_08024DFC: .4byte 0x08303138
_08024E00:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08024E34 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08024E40
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08024E38 @ =0x08303138
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
_08024E28:
	ldr r0, _08024E3C @ =0x0000FFC0
	strh r0, [r4, #0xa]
	movs r0, #0xbd
	bl SoundPlay
	b _08024FD2
	.align 2, 0
_08024E34: .4byte gPreviousCollisionCheck
_08024E38: .4byte 0x08303138
_08024E3C: .4byte 0x0000FFC0
_08024E40:
	ldrh r0, [r4, #2]
	adds r0, #5
	strh r0, [r4, #2]
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08024E58
	ldrh r0, [r4, #4]
	adds r0, #6
	strh r0, [r4, #4]
	b _08024FD2
_08024E58:
	ldrh r0, [r4, #4]
	subs r0, #6
	strh r0, [r4, #4]
	b _08024FD2
_08024E60:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bne _08024EC6
	ldrb r0, [r4, #0x1e]
	cmp r0, #6
	bhi _08024EC6
	ldrh r1, [r4]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08024EA8
	ldrb r1, [r4, #0x1e]
	adds r1, #1
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x38
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1a
	bl SpriteSpawnSecondary
	b _08024EC6
_08024EA8:
	ldrb r1, [r4, #0x1e]
	adds r1, #1
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x38
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x1a
	bl SpriteSpawnSecondary
_08024EC6:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _08024ED0
	b _08024FD2
_08024ED0:
	ldr r1, _08024EDC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	b _08024F22
	.align 2, 0
_08024EDC: .4byte gCurrentSprite
_08024EE0:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08024FD2
	ldr r1, _08024F04 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _08024F08 @ =0x083030C8
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _08024F0C @ =0x0000FF80
	strh r0, [r1, #0xa]
	b _08024FD2
	.align 2, 0
_08024F04: .4byte gCurrentSprite
_08024F08: .4byte 0x083030C8
_08024F0C: .4byte 0x0000FF80
_08024F10:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08024FD2
	ldr r1, _08024F34 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x2a
_08024F22:
	strb r0, [r2]
	ldr r0, _08024F38 @ =0x08303100
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _08024F3C @ =0x0000FFA0
	strh r0, [r1, #0xa]
	b _08024FD2
	.align 2, 0
_08024F34: .4byte gCurrentSprite
_08024F38: .4byte 0x08303100
_08024F3C: .4byte 0x0000FFA0
_08024F40:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08024FD2
	ldr r1, _08024F64 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x2c
	strb r0, [r2]
	ldr r0, _08024F68 @ =0x08303138
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _08024F6C @ =0x0000FFC0
	strh r0, [r1, #0xa]
	b _08024FD2
	.align 2, 0
_08024F64: .4byte gCurrentSprite
_08024F68: .4byte 0x08303138
_08024F6C: .4byte 0x0000FFC0
_08024F70:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08024FD2
	ldr r1, _08024F8C @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	movs r2, #0x25
	bl ParticleSet
	b _08024FD2
	.align 2, 0
_08024F8C: .4byte gCurrentSprite
_08024F90:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r1, _08024FC0 @ =gFrameCounter8Bit
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08024FAA
	ldrh r0, [r4]
	movs r1, #4
	eors r0, r1
	strh r0, [r4]
_08024FAA:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08024FD2
	strh r0, [r4]
	b _08024FD2
	.align 2, 0
_08024FC0: .4byte gFrameCounter8Bit
_08024FC4:
	movs r0, #0
	strh r0, [r4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x25
	bl ParticleSet
_08024FD2:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ArachnusSlash
ArachnusSlash: @ 0x08024FDC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r2, _08025028 @ =gSpriteData
	ldr r3, _0802502C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	adds r2, r3, #0
	cmp r0, #0x42
	bne _08025010
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x38
	beq _08025010
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x28
	strb r0, [r1]
_08025010:
	adds r5, r2, #0
	adds r7, r5, #0
	adds r7, #0x24
	ldrb r6, [r7]
	cmp r6, #2
	beq _080250F8
	cmp r6, #2
	bgt _08025030
	cmp r6, #0
	beq _08025038
	b _080251BA
	.align 2, 0
_08025028: .4byte gSpriteData
_0802502C: .4byte gCurrentSprite
_08025030:
	cmp r6, #0x38
	bne _08025036
	b _0802518C
_08025036:
	b _080251BA
_08025038:
	ldrh r0, [r5]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r2, r1, #0
	movs r4, #0
	orrs r2, r0
	adds r3, r5, #0
	adds r3, #0x34
	ldrb r1, [r3]
	movs r0, #4
	orrs r0, r1
	strb r0, [r3]
	ldr r0, _080250B0 @ =0x0000FFFB
	ands r2, r0
	strh r2, [r5]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #0x38
	strb r0, [r1]
	ldr r0, _080250B4 @ =0x0000FF40
	strh r0, [r5, #0xa]
	strh r6, [r5, #0xc]
	adds r0, #0xa0
	strh r0, [r5, #0xe]
	movs r0, #0x20
	strh r0, [r5, #0x10]
	ldr r0, _080250B8 @ =0x08303198
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r6, [r5, #0x16]
	subs r1, #4
	movs r0, #2
	strb r0, [r1]
	strb r0, [r7]
	movs r4, #0x40
	ands r2, r4
	lsls r2, r2, #0x10
	lsrs r1, r2, #0x10
	cmp r1, #0
	beq _080250BC
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	subs r0, #0xc
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	b _080250D0
	.align 2, 0
_080250B0: .4byte 0x0000FFFB
_080250B4: .4byte 0x0000FF40
_080250B8: .4byte 0x08303198
_080250BC:
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	subs r0, #0xc
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r1, [sp, #8]
_080250D0:
	movs r0, #0x20
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _080250EC
	ldr r1, _080250E8 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _080251BA
	.align 2, 0
_080250E8: .4byte gCurrentSprite
_080250EC:
	ldr r0, _080250F4 @ =gCurrentSprite
	adds r0, #0x2f
	strb r1, [r0]
	b _080251BA
	.align 2, 0
_080250F4: .4byte gCurrentSprite
_080250F8:
	ldrh r0, [r5, #2]
	subs r0, #0x60
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802514C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08025154
	movs r2, #0
	strh r2, [r5]
	ldr r3, _08025150 @ =gSpriteData
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	strh r2, [r0]
	ldrh r0, [r5, #2]
	subs r0, #0x60
	ldrh r1, [r5, #4]
	movs r2, #0x25
	bl ParticleSet
	ldrh r0, [r5, #2]
	subs r0, #0x20
	ldrh r1, [r5, #4]
	movs r2, #0x25
	bl ParticleSet
	ldrh r0, [r5, #2]
	subs r0, #0xa0
	ldrh r1, [r5, #4]
	movs r2, #0x25
	bl ParticleSet
	movs r0, #0xbf
	bl CheckPlayNotAlreadyPlayingSound
	b _080251BA
	.align 2, 0
_0802514C: .4byte gPreviousCollisionCheck
_08025150: .4byte gSpriteData
_08025154:
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08025164
	ldrh r0, [r5, #4]
	adds r0, #0xc
	b _08025168
_08025164:
	ldrh r0, [r5, #4]
	subs r0, #0xc
_08025168:
	strh r0, [r5, #4]
	ldr r3, _08025184 @ =gSpriteData
	ldr r2, _08025188 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r1, [r2, #4]
	strh r1, [r0, #4]
	b _080251BA
	.align 2, 0
_08025184: .4byte gSpriteData
_08025188: .4byte gCurrentSprite
_0802518C:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r1, _080251C4 @ =gFrameCounter8Bit
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080251A6
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
_080251A6:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _080251BA
	strh r0, [r2]
_080251BA:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080251C4: .4byte gFrameCounter8Bit

	thumb_func_start ArachnusSlashTrail
ArachnusSlashTrail: @ 0x080251C8
	push {r4, r5, r6, lr}
	ldr r2, _080251EC @ =gSpriteData
	ldr r0, _080251F0 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x42
	bne _080251F4
	movs r0, #0
	mov r1, ip
	strh r0, [r1]
	b _0802525E
	.align 2, 0
_080251EC: .4byte gSpriteData
_080251F0: .4byte gCurrentSprite
_080251F4:
	mov r1, ip
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x24
	ldrb r5, [r6]
	cmp r5, #0
	bne _0802525E
	mov r3, ip
	ldrh r0, [r3]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r2, r1, #0
	movs r4, #0
	orrs r2, r0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r1, #4
	orrs r0, r1
	strb r0, [r3]
	ldr r0, _08025264 @ =0x0000FFFB
	ands r2, r0
	mov r3, ip
	strh r2, [r3]
	mov r0, ip
	adds r0, #0x22
	movs r2, #2
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #0x40
	strb r0, [r1]
	ldr r1, _08025268 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldr r0, _0802526C @ =0x083031B8
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r5, [r3, #0x16]
	mov r0, ip
	adds r0, #0x25
	strb r4, [r0]
	strb r2, [r6]
_0802525E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08025264: .4byte 0x0000FFFB
_08025268: .4byte 0x0000FFFC
_0802526C: .4byte 0x083031B8

	thumb_func_start MakeXParasitesFlee
MakeXParasitesFlee: @ 0x08025270
	push {r4, r5, lr}
	movs r4, #0
	ldr r5, _080252C0 @ =gSpriteData
_08025276:
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r2, r0, r5
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080252B0
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _080252B0
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x32
	bne _080252B0
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x5d
	bne _080252B0
	strh r3, [r2, #6]
	movs r0, #0x61
	strb r0, [r1]
_080252B0:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x17
	bls _08025276
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080252C0: .4byte gSpriteData

	thumb_func_start CoreXAbilityTransfromation
CoreXAbilityTransfromation: @ 0x080252C4
	push {lr}
	ldr r1, _080252F0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r0, [r1, #6]
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	adds r3, r1, #0
	cmp r0, #0
	beq _080252FC
	ldr r2, _080252F4 @ =gWrittenToMosaic_H
	ldr r1, _080252F8 @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _0802531A
	.align 2, 0
_080252F0: .4byte gCurrentSprite
_080252F4: .4byte gWrittenToMosaic_H
_080252F8: .4byte 0x083BDED6
_080252FC:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _0802532C @ =0x0000FFDF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _08025330 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
_0802531A:
	ldrh r0, [r3, #6]
	cmp r0, #7
	bhi _08025334
	adds r2, r0, #0
	movs r0, #0x21
	movs r1, #6
	bl SpriteLoadGfx
	b _08025342
	.align 2, 0
_0802532C: .4byte 0x0000FFDF
_08025330: .4byte gIoRegisters
_08025334:
	cmp r0, #8
	bne _08025342
	movs r0, #0x21
	movs r1, #6
	movs r2, #2
	bl SpriteLoadPal
_08025342:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start CoreXAbilityInit
CoreXAbilityInit: @ 0x08025348
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	movs r2, #0
	movs r4, #0x3a
	movs r0, #0x1b
	mov ip, r0
	ldr r0, _0802537C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x26
	movs r3, #1
	strb r3, [r1]
	subs r1, #2
	ldrb r1, [r1]
	adds r5, r0, #0
	cmp r1, #0x59
	bne _08025400
	ldrb r0, [r5, #0x1d]
	subs r0, #0x3f
	cmp r0, #0xa
	bhi _080253E2
	lsls r0, r0, #2
	ldr r1, _08025380 @ =_08025384
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802537C: .4byte gCurrentSprite
_08025380: .4byte _08025384
_08025384: @ jump table
	.4byte _080253B0 @ case 0
	.4byte _080253E2 @ case 1
	.4byte _080253E2 @ case 2
	.4byte _080253E2 @ case 3
	.4byte _080253E2 @ case 4
	.4byte _080253BC @ case 5
	.4byte _080253C2 @ case 6
	.4byte _080253E2 @ case 7
	.4byte _080253C6 @ case 8
	.4byte _080253CC @ case 9
	.4byte _080253DE @ case 10
_080253B0:
	ldrh r0, [r5, #2]
	subs r0, #0x80
	strh r0, [r5, #2]
	movs r1, #0x1b
	mov ip, r1
	b _080253E2
_080253BC:
	movs r3, #0x5e
	mov ip, r3
	b _080253E2
_080253C2:
	movs r0, #0x5f
	b _080253E0
_080253C6:
	movs r1, #0x61
	mov ip, r1
	b _080253E2
_080253CC:
	ldrh r0, [r5, #2]
	subs r0, #0x80
	strh r0, [r5, #2]
	ldrh r0, [r5, #4]
	subs r0, #0x40
	strh r0, [r5, #4]
	movs r3, #0x62
	mov ip, r3
	b _080253E2
_080253DE:
	movs r0, #0x63
_080253E0:
	mov ip, r0
_080253E2:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r5, #6]
	ldrh r1, [r5]
	movs r0, #0x20
	orrs r0, r1
	ldr r1, _080253FC @ =0x0000F3FF
	ands r0, r1
	strh r0, [r5]
	b _08025464
	.align 2, 0
_080253FC: .4byte 0x0000F3FF
_08025400:
	ldrb r0, [r5, #0x1d]
	cmp r0, #0x3f
	beq _0802540C
	cmp r0, #0x44
	beq _08025420
	b _08025438
_0802540C:
	ldr r0, _0802541C @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08025434
	b _08025438
	.align 2, 0
_0802541C: .4byte gEquipment
_08025420:
	ldr r0, _08025440 @ =gEquipment
	ldrb r1, [r0, #0xc]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0802542E
	movs r2, #1
_0802542E:
	movs r4, #0x4b
	movs r1, #0x5e
	mov ip, r1
_08025434:
	cmp r2, #0
	beq _08025444
_08025438:
	movs r0, #0
	strh r0, [r5]
	b _0802555C
	.align 2, 0
_08025440: .4byte gEquipment
_08025444:
	ldr r0, _08025524 @ =0x030006AC
	strb r4, [r0]
	ldr r1, _08025528 @ =0x030006AD
	ldrb r0, [r5, #0x1d]
	strb r0, [r1]
	ldrh r0, [r5, #2]
	strh r0, [r5, #6]
	ldrh r1, [r5, #4]
	strh r1, [r5, #8]
	ldr r3, _0802552C @ =0xFFFFFE80
	adds r0, r0, r3
	strh r0, [r5, #2]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_08025464:
	adds r4, r5, #0
	ldr r2, _08025530 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	movs r6, #0
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r4]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08025534 @ =0x0000FFE0
	strh r1, [r4, #0xa]
	movs r0, #0x20
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08025538 @ =0x08306008
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x30
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r7, r4, #0
	adds r7, #0x23
	ldrb r3, [r7]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	mov r0, ip
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _08025520
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1c
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _08025520
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1c
	movs r1, #1
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _0802553C
_08025520:
	strh r6, [r4]
	b _0802555C
	.align 2, 0
_08025524: .4byte 0x030006AC
_08025528: .4byte 0x030006AD
_0802552C: .4byte 0xFFFFFE80
_08025530: .4byte sPrimarySpriteStats
_08025534: .4byte 0x0000FFE0
_08025538: .4byte 0x08306008
_0802553C:
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1c
	movs r1, #2
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _0802555C
	strh r6, [r5]
_0802555C:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start CoreXAbilityIdleInit
CoreXAbilityIdleInit: @ 0x08025564
	ldr r3, _08025580 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	subs r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08025584 @ =0x08306008
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	bx lr
	.align 2, 0
_08025580: .4byte gCurrentSprite
_08025584: .4byte 0x08306008

	thumb_func_start CoreXAbilityIdle
CoreXAbilityIdle: @ 0x08025588
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	ldr r4, _0802577C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #0
	mov r8, r0
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4]
	movs r1, #4
	eors r0, r1
	strh r0, [r4]
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r3, _08025780 @ =0x083031E0
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r7, _08025784 @ =0x00007FFF
	mov ip, r7
	cmp r0, ip
	bne _080255C4
	ldrh r2, [r3]
	movs r1, #0
_080255C4:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #2]
	adds r6, r0, r2
	strh r6, [r4, #2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r3, _08025788 @ =0x08303262
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, ip
	bne _080255E8
	ldrh r2, [r3]
	movs r1, #0
_080255E8:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r1, [r4, #4]
	adds r1, r1, r2
	strh r1, [r4, #4]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x12
	ldr r0, _0802578C @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	ldr r1, _08025790 @ =gSamusData
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1, #0x18]
	cmp r0, r1
	blo _08025610
	b _0802576E
_08025610:
	cmp r2, #0x14
	bhi _08025616
	b _0802576E
_08025616:
	cmp r2, #0xdb
	bls _0802561C
	b _0802576E
_0802561C:
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	movs r5, #0x30
	str r5, [sp]
	ldrh r0, [r4, #2]
	adds r0, #0xb4
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x14
	str r0, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	movs r0, #0x40
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _08025656
	ldr r0, _08025794 @ =gSpriteData
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0xb4
	strh r0, [r1, #6]
_08025656:
	ldrb r3, [r6]
	str r5, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0xc8
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0xa
	str r0, [sp, #8]
	mov r7, r8
	str r7, [sp, #0xc]
	movs r0, #0x40
	movs r1, #1
	movs r2, #0
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802568A
	ldr r0, _08025794 @ =gSpriteData
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0xb4
	strh r0, [r1, #6]
_0802568A:
	ldrb r3, [r6]
	str r5, [sp]
	ldrh r0, [r4, #2]
	adds r0, #0x82
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0x8c
	str r0, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	movs r0, #0x40
	movs r1, #2
	movs r2, #0
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _080256BE
	ldr r0, _08025794 @ =gSpriteData
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0xb4
	strh r0, [r1, #6]
_080256BE:
	ldrb r3, [r6]
	str r5, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x82
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0x96
	str r0, [sp, #8]
	mov r7, r8
	str r7, [sp, #0xc]
	movs r0, #0x40
	movs r1, #3
	movs r2, #0
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _080256F2
	ldr r0, _08025794 @ =gSpriteData
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0xb4
	strh r0, [r1, #6]
_080256F2:
	ldrb r3, [r6]
	str r5, [sp]
	ldrh r0, [r4, #2]
	adds r0, #0x8c
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0xa0
	str r0, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	movs r0, #0x40
	movs r1, #4
	movs r2, #0
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _08025726
	ldr r0, _08025794 @ =gSpriteData
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0xb4
	strh r0, [r1, #6]
_08025726:
	ldrb r3, [r6]
	str r5, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x96
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x82
	str r0, [sp, #8]
	mov r6, r8
	str r6, [sp, #0xc]
	movs r0, #0x40
	movs r1, #5
	movs r2, #0
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802575A
	ldr r0, _08025794 @ =gSpriteData
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0xb4
	strh r0, [r1, #6]
_0802575A:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x50
	strb r0, [r1]
	subs r1, #3
	movs r0, #0xbe
	strb r0, [r1]
_0802576E:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802577C: .4byte gCurrentSprite
_08025780: .4byte 0x083031E0
_08025784: .4byte 0x00007FFF
_08025788: .4byte 0x08303262
_0802578C: .4byte gBg1XPosition
_08025790: .4byte gSamusData
_08025794: .4byte gSpriteData

	thumb_func_start CoreXAbilityMovingToSpawnPoint
CoreXAbilityMovingToSpawnPoint: @ 0x08025798
	push {r4, r5, r6, r7, lr}
	ldr r2, _08025840 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	movs r1, #0
	mov ip, r1
	strh r0, [r2]
	adds r5, r2, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r4, _08025844 @ =0x083031E0
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _08025848 @ =0x00007FFF
	cmp r0, r6
	bne _080257CC
	ldrh r3, [r4]
	movs r1, #0
_080257CC:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	adds r5, r2, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _0802584C @ =0x08303262
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _080257F0
	ldrh r3, [r4]
	movs r1, #0
_080257F0:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	ldr r0, _08025850 @ =0x030006AC
	ldrb r0, [r0]
	cmp r0, #0x4b
	bne _08025860
	ldrh r1, [r2, #2]
	ldrh r0, [r2, #6]
	ldr r3, _08025854 @ =0xFFFFFEC0
	adds r0, r0, r3
	cmp r1, r0
	blt _080258B8
	strh r0, [r2, #2]
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _080258CA
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldrh r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x2c
	strb r0, [r1]
	ldr r1, _08025858 @ =gWrittenToMosaic_H
	ldr r0, _0802585C @ =0x083BDED6
	adds r0, #0x58
	ldrh r0, [r0]
	strh r0, [r1]
	movs r0, #0x1a
	b _080258A2
	.align 2, 0
_08025840: .4byte gCurrentSprite
_08025844: .4byte 0x083031E0
_08025848: .4byte 0x00007FFF
_0802584C: .4byte 0x08303262
_08025850: .4byte 0x030006AC
_08025854: .4byte 0xFFFFFEC0
_08025858: .4byte gWrittenToMosaic_H
_0802585C: .4byte 0x083BDED6
_08025860:
	ldrh r1, [r2, #2]
	ldrh r0, [r2, #6]
	subs r0, #0x64
	cmp r1, r0
	blt _080258B8
	strh r0, [r2, #2]
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _080258CA
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldrh r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x2c
	strb r0, [r1]
	ldr r1, _080258AC @ =gWrittenToMosaic_H
	ldr r0, _080258B0 @ =0x083BDED6
	adds r0, #0x58
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r0, _080258B4 @ =gDemoState
	ldrb r0, [r0]
	cmp r0, #0
	bne _080258BC
	movs r0, #0x19
_080258A2:
	movs r1, #7
	bl PlayMusic
	b _080258BC
	.align 2, 0
_080258AC: .4byte gWrittenToMosaic_H
_080258B0: .4byte 0x083BDED6
_080258B4: .4byte gDemoState
_080258B8:
	adds r0, r1, #1
	strh r0, [r2, #2]
_080258BC:
	ldr r1, _080258FC @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	beq _080258D4
_080258CA:
	adds r1, r2, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
_080258D4:
	adds r4, r2, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #0x50
	bne _080258E4
	movs r0, #0xc4
	bl SoundPlay
_080258E4:
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080258F4
	movs r0, #0x50
	strb r0, [r4]
_080258F4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080258FC: .4byte gCurrentSprite

	thumb_func_start CoreXAbilitySpawningBoss
CoreXAbilitySpawningBoss: @ 0x08025900
	push {r4, lr}
	ldr r2, _08025938 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #4
	eors r1, r0
	strh r1, [r2]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	adds r4, r2, #0
	cmp r0, #0
	beq _08025944
	ldr r2, _0802593C @ =gWrittenToMosaic_H
	ldr r1, _08025940 @ =0x083BDED6
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _08025958
	.align 2, 0
_08025938: .4byte gCurrentSprite
_0802593C: .4byte gWrittenToMosaic_H
_08025940: .4byte 0x083BDED6
_08025944:
	ldr r0, _08025970 @ =0x0000FFFB
	ands r1, r0
	strh r1, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	ldr r0, _08025974 @ =0x030006AC
	ldrb r0, [r0]
	strb r0, [r4, #0x1d]
_08025958:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0x1f
	bhi _08025978
	ldr r0, _08025974 @ =0x030006AC
	ldrb r0, [r0]
	ldrb r2, [r1]
	movs r1, #0
	bl SpriteLoadGfx
	b _08025988
	.align 2, 0
_08025970: .4byte 0x0000FFFB
_08025974: .4byte 0x030006AC
_08025978:
	cmp r0, #0x20
	bne _08025988
	ldr r0, _08025990 @ =0x030006AC
	ldrb r0, [r0]
	movs r1, #0
	movs r2, #4
	bl SpriteLoadPal
_08025988:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08025990: .4byte 0x030006AC

	thumb_func_start CoreXAbilityMovingInit
CoreXAbilityMovingInit: @ 0x08025994
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r6, _08025A70 @ =gCurrentSprite
	adds r7, r6, #0
	adds r7, #0x23
	ldrb r3, [r7]
	movs r5, #0x20
	str r5, [sp]
	ldrh r0, [r6, #2]
	adds r0, #0x64
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	str r0, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r3, [r7]
	str r5, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x64
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r3, [r7]
	str r5, [sp]
	ldrh r0, [r6, #2]
	adds r0, #0x22
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	adds r0, #0x64
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r3, [r7]
	str r5, [sp]
	ldrh r0, [r6, #2]
	adds r0, #0x22
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	subs r0, #0x64
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r3, [r7]
	str r5, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x22
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	adds r0, #0x64
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r3, [r7]
	str r5, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x22
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	subs r0, #0x64
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x2f
	strb r4, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r4, [r0]
	adds r0, #3
	strb r1, [r0]
	subs r0, #4
	strb r4, [r0]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08025A70: .4byte gCurrentSprite

	thumb_func_start CoreXAbilityMoving
CoreXAbilityMoving: @ 0x08025A74
	push {lr}
	sub sp, #8
	ldr r1, _08025A9C @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0xc0
	str r2, [sp, #4]
	movs r2, #0x1c
	movs r3, #0x28
	bl XParasiteMoveWithSound
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_08025A9C: .4byte gSamusData

	thumb_func_start CoreXAbilityMovingToTargetInit
CoreXAbilityMovingToTargetInit: @ 0x08025AA0
	push {lr}
	ldr r0, _08025AE0 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x5d
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xc
	strb r0, [r1]
	movs r2, #0
	mov r0, ip
	strh r3, [r0, #0x14]
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	subs r0, #0xb
	strb r1, [r0]
	movs r0, #0x18
	movs r1, #6
	bl PlayMusic
	pop {r0}
	bx r0
	.align 2, 0
_08025AE0: .4byte gCurrentSprite

	thumb_func_start CoreXAbilityMovingToTarget
CoreXAbilityMovingToTarget: @ 0x08025AE4
	push {r4, r5, r6, lr}
	sub sp, #8
	bl MakeXParasitesFlee
	ldr r0, _08025B68 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08025B02
	ldr r0, _08025B6C @ =gCurrentSprite
	ldrh r1, [r0]
	movs r2, #4
	eors r1, r2
	strh r1, [r0]
_08025B02:
	ldr r5, _08025B6C @ =gCurrentSprite
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r4, _08025B70 @ =gAbilityRestingYPosition
	ldrh r0, [r4]
	ldr r6, _08025B74 @ =gAbilityRestingXPosition
	ldrh r1, [r6]
	movs r2, #2
	str r2, [sp]
	ldr r2, _08025B78 @ =0x00000141
	str r2, [sp, #4]
	movs r2, #0x10
	movs r3, #0x18
	bl XParasiteMoveWithSound
	ldrh r2, [r5, #2]
	ldrh r1, [r4]
	adds r0, r1, #6
	cmp r2, r0
	bge _08025B60
	subs r0, r1, #6
	cmp r2, r0
	ble _08025B60
	ldrh r2, [r5, #4]
	ldrh r1, [r6]
	adds r0, r1, #6
	cmp r2, r0
	bge _08025B60
	subs r0, r1, #6
	cmp r2, r0
	ble _08025B60
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x5e
	strb r0, [r1]
	ldrh r1, [r5]
	ldr r0, _08025B7C @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_08025B60:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08025B68: .4byte gFrameCounter8Bit
_08025B6C: .4byte gCurrentSprite
_08025B70: .4byte gAbilityRestingYPosition
_08025B74: .4byte gAbilityRestingXPosition
_08025B78: .4byte 0x00000141
_08025B7C: .4byte 0x0000FFFB

	thumb_func_start CoreXAbilityWaitingAtTarget
CoreXAbilityWaitingAtTarget: @ 0x08025B80
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _08025C64 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r1, [r0]
	ldr r3, _08025C68 @ =0x083031E0
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldr r7, _08025C6C @ =0x00007FFF
	mov r8, r7
	cmp r0, r8
	bne _08025BA8
	ldrh r2, [r3]
	movs r1, #0
_08025BA8:
	adds r0, r1, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	movs r6, #0
	strh r0, [r4, #2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r3, _08025C70 @ =0x08303262
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r8
	bne _08025BD0
	ldrh r2, [r3]
	movs r1, #0
_08025BD0:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	ldrh r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r3
	cmp r0, #0
	bne _08025BE8
	b _08025D04
_08025BE8:
	ldr r1, _08025C74 @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x5f
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	strb r0, [r1]
	adds r1, #9
	strb r6, [r1]
	strb r0, [r5]
	subs r1, #1
	strb r6, [r1]
	mov r5, ip
	strb r0, [r5]
	movs r0, #0x80
	orrs r0, r3
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x2b
	strb r6, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x12]
	movs r0, #0x14
	strh r0, [r4, #6]
	strb r6, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
	ldr r0, _08025C78 @ =0x08306098
	str r0, [r4, #0x18]
	ldr r2, _08025C7C @ =gSamusData
	movs r7, #0x26
	ldrsh r0, [r2, r7]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r1, [r2, #0x18]
	adds r0, r0, r1
	ldrh r1, [r2, #0x16]
	movs r2, #0x1d
	bl ParticleSet
	ldrb r0, [r4, #0x1d]
	subs r0, #0x3f
	cmp r0, #0xa
	bhi _08025CE6
	lsls r0, r0, #2
	ldr r1, _08025C80 @ =_08025C84
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08025C64: .4byte gCurrentSprite
_08025C68: .4byte 0x083031E0
_08025C6C: .4byte 0x00007FFF
_08025C70: .4byte 0x08303262
_08025C74: .4byte gPreventMovementTimer
_08025C78: .4byte 0x08306098
_08025C7C: .4byte gSamusData
_08025C80: .4byte _08025C84
_08025C84: @ jump table
	.4byte _08025CB0 @ case 0
	.4byte _08025CE6 @ case 1
	.4byte _08025CE6 @ case 2
	.4byte _08025CE6 @ case 3
	.4byte _08025CE6 @ case 4
	.4byte _08025CB8 @ case 5
	.4byte _08025CC0 @ case 6
	.4byte _08025CC8 @ case 7
	.4byte _08025CD0 @ case 8
	.4byte _08025CD8 @ case 9
	.4byte _08025CE0 @ case 10
_08025CB0:
	movs r0, #0xa
	bl EventCheckAdvance
	b _08025CE6
_08025CB8:
	movs r0, #0x19
	bl EventCheckAdvance
	b _08025CE6
_08025CC0:
	movs r0, #0x1d
	bl EventCheckAdvance
	b _08025CE6
_08025CC8:
	movs r0, #0x33
	bl EventCheckAdvance
	b _08025CE6
_08025CD0:
	movs r0, #0x49
	bl EventCheckAdvance
	b _08025CE6
_08025CD8:
	movs r0, #0x51
	bl EventCheckAdvance
	b _08025CE6
_08025CE0:
	movs r0, #0x60
	bl EventCheckAdvance
_08025CE6:
	movs r0, #0xc8
	lsls r0, r0, #1
	movs r1, #0x32
	movs r2, #0xa
	bl RefillSamus
	ldr r1, _08025D00 @ =0x030012F0
	movs r0, #0x30
	strb r0, [r1, #3]
	movs r0, #0x92
	bl SoundPlay
	b _08025D16
	.align 2, 0
_08025D00: .4byte 0x030012F0
_08025D04:
	ldr r0, _08025D20 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08025D16
	movs r0, #0xc3
	bl SoundPlay
_08025D16:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08025D20: .4byte gFrameCounter8Bit

	thumb_func_start CoreXAbilityGettingAbsorbed
CoreXAbilityGettingAbsorbed: @ 0x08025D24
	push {r4, lr}
	sub sp, #0xc
	ldr r4, _08025D44 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl XParasiteStickToSamus
	ldrh r0, [r4, #6]
	adds r1, r0, #0
	cmp r1, #0
	beq _08025D48
	subs r0, #1
	strh r0, [r4, #6]
	b _08025D70
	.align 2, 0
_08025D44: .4byte gCurrentSprite
_08025D48:
	ldrh r0, [r4, #0x12]
	cmp r0, #0x50
	bls _08025D54
	subs r0, #8
	strh r0, [r4, #0x12]
	b _08025D70
_08025D54:
	strh r1, [r4]
	ldr r0, _08025D78 @ =gAbilityRestingYPosition
	ldrh r0, [r0]
	str r0, [sp]
	ldr r0, _08025D7C @ =gAbilityRestingXPosition
	ldrh r0, [r0]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x21
	movs r1, #0
	movs r2, #6
	movs r3, #0x10
	bl SpriteSpawnPrimary
_08025D70:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08025D78: .4byte gAbilityRestingYPosition
_08025D7C: .4byte gAbilityRestingXPosition

	thumb_func_start CoreXAbility
CoreXAbility: @ 0x08025D80
	push {lr}
	ldr r0, _08025D98 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5f
	bls _08025D8E
	b _08025F66
_08025D8E:
	lsls r0, r0, #2
	ldr r1, _08025D9C @ =_08025DA0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08025D98: .4byte gCurrentSprite
_08025D9C: .4byte _08025DA0
_08025DA0: @ jump table
	.4byte _08025F2A @ case 0
	.4byte _08025F30 @ case 1
	.4byte _08025F34 @ case 2
	.4byte _08025F66 @ case 3
	.4byte _08025F66 @ case 4
	.4byte _08025F66 @ case 5
	.4byte _08025F66 @ case 6
	.4byte _08025F66 @ case 7
	.4byte _08025F66 @ case 8
	.4byte _08025F66 @ case 9
	.4byte _08025F66 @ case 10
	.4byte _08025F66 @ case 11
	.4byte _08025F66 @ case 12
	.4byte _08025F66 @ case 13
	.4byte _08025F66 @ case 14
	.4byte _08025F66 @ case 15
	.4byte _08025F66 @ case 16
	.4byte _08025F66 @ case 17
	.4byte _08025F66 @ case 18
	.4byte _08025F66 @ case 19
	.4byte _08025F66 @ case 20
	.4byte _08025F66 @ case 21
	.4byte _08025F66 @ case 22
	.4byte _08025F66 @ case 23
	.4byte _08025F3A @ case 24
	.4byte _08025F66 @ case 25
	.4byte _08025F40 @ case 26
	.4byte _08025F46 @ case 27
	.4byte _08025F4A @ case 28
	.4byte _08025F66 @ case 29
	.4byte _08025F66 @ case 30
	.4byte _08025F66 @ case 31
	.4byte _08025F66 @ case 32
	.4byte _08025F66 @ case 33
	.4byte _08025F66 @ case 34
	.4byte _08025F66 @ case 35
	.4byte _08025F66 @ case 36
	.4byte _08025F66 @ case 37
	.4byte _08025F66 @ case 38
	.4byte _08025F66 @ case 39
	.4byte _08025F66 @ case 40
	.4byte _08025F66 @ case 41
	.4byte _08025F66 @ case 42
	.4byte _08025F66 @ case 43
	.4byte _08025F66 @ case 44
	.4byte _08025F66 @ case 45
	.4byte _08025F66 @ case 46
	.4byte _08025F66 @ case 47
	.4byte _08025F66 @ case 48
	.4byte _08025F66 @ case 49
	.4byte _08025F66 @ case 50
	.4byte _08025F66 @ case 51
	.4byte _08025F66 @ case 52
	.4byte _08025F66 @ case 53
	.4byte _08025F66 @ case 54
	.4byte _08025F66 @ case 55
	.4byte _08025F66 @ case 56
	.4byte _08025F66 @ case 57
	.4byte _08025F66 @ case 58
	.4byte _08025F66 @ case 59
	.4byte _08025F66 @ case 60
	.4byte _08025F66 @ case 61
	.4byte _08025F66 @ case 62
	.4byte _08025F66 @ case 63
	.4byte _08025F66 @ case 64
	.4byte _08025F66 @ case 65
	.4byte _08025F66 @ case 66
	.4byte _08025F66 @ case 67
	.4byte _08025F66 @ case 68
	.4byte _08025F66 @ case 69
	.4byte _08025F66 @ case 70
	.4byte _08025F66 @ case 71
	.4byte _08025F66 @ case 72
	.4byte _08025F66 @ case 73
	.4byte _08025F66 @ case 74
	.4byte _08025F66 @ case 75
	.4byte _08025F66 @ case 76
	.4byte _08025F66 @ case 77
	.4byte _08025F66 @ case 78
	.4byte _08025F66 @ case 79
	.4byte _08025F66 @ case 80
	.4byte _08025F66 @ case 81
	.4byte _08025F66 @ case 82
	.4byte _08025F66 @ case 83
	.4byte _08025F66 @ case 84
	.4byte _08025F66 @ case 85
	.4byte _08025F66 @ case 86
	.4byte _08025F66 @ case 87
	.4byte _08025F66 @ case 88
	.4byte _08025F20 @ case 89
	.4byte _08025F24 @ case 90
	.4byte _08025F66 @ case 91
	.4byte _08025F50 @ case 92
	.4byte _08025F56 @ case 93
	.4byte _08025F5C @ case 94
	.4byte _08025F62 @ case 95
_08025F20:
	bl CoreXAbilityInit
_08025F24:
	bl CoreXAbilityTransfromation
	b _08025F66
_08025F2A:
	bl CoreXAbilityInit
	b _08025F66
_08025F30:
	bl CoreXAbilityIdleInit
_08025F34:
	bl CoreXAbilityIdle
	b _08025F66
_08025F3A:
	bl CoreXAbilityMovingToSpawnPoint
	b _08025F66
_08025F40:
	bl CoreXAbilitySpawningBoss
	b _08025F66
_08025F46:
	bl CoreXAbilityMovingInit
_08025F4A:
	bl CoreXAbilityMoving
	b _08025F66
_08025F50:
	bl CoreXAbilityMovingToTargetInit
	b _08025F66
_08025F56:
	bl CoreXAbilityMovingToTarget
	b _08025F66
_08025F5C:
	bl CoreXAbilityWaitingAtTarget
	b _08025F66
_08025F62:
	bl CoreXAbilityGettingAbsorbed
_08025F66:
	ldr r2, _08025F84 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1a
	bhi _08025F7E
	ldr r1, _08025F88 @ =gXParasiteTargetYPosition
	ldrh r0, [r2, #2]
	strh r0, [r1]
	ldr r1, _08025F8C @ =gXParasiteTargetXPosition
	ldrh r0, [r2, #4]
	strh r0, [r1]
_08025F7E:
	pop {r0}
	bx r0
	.align 2, 0
_08025F84: .4byte gCurrentSprite
_08025F88: .4byte gXParasiteTargetYPosition
_08025F8C: .4byte gXParasiteTargetXPosition

	thumb_func_start CoreXShell
CoreXShell: @ 0x08025F90
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	ldr r2, _08025FD4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov r8, r0
	ldr r1, _08025FD8 @ =sSecondarySpriteStats
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r6, [r0]
	adds r7, r2, #0
	adds r7, #0x24
	ldrb r4, [r7]
	adds r5, r2, #0
	cmp r4, #0
	beq _08025FDC
	cmp r4, #0x18
	bne _08026040
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _08025FCE
	b _08026338
_08025FCE:
	movs r0, #0
	strh r0, [r5]
	b _08026338
	.align 2, 0
_08025FD4: .4byte gCurrentSprite
_08025FD8: .4byte sSecondarySpriteStats
_08025FDC:
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r3, #0
	orrs r0, r1
	strh r0, [r5]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r5]
	ldr r0, _0802606C @ =0x0000FFFB
	ands r0, r1
	strh r0, [r5]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	ldr r0, _08026070 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r5, #0
	adds r1, #0x21
	strb r0, [r1]
	strh r6, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r1, _08026074 @ =0x0000FFB0
	strh r1, [r5, #0xa]
	movs r0, #0x50
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _08026078 @ =0x08306498
	str r0, [r5, #0x18]
	strb r3, [r5, #0x1c]
	strh r4, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r7]
_08026040:
	ldr r2, _0802607C @ =gSpriteData
	mov r0, r8
	lsls r3, r0, #3
	subs r0, r3, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	strh r1, [r5, #2]
	ldrh r1, [r0, #4]
	strh r1, [r5, #4]
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	mov ip, r2
	adds r7, r3, #0
	cmp r0, #0
	beq _08026080
	ldrh r0, [r5]
	movs r1, #0x20
	orrs r0, r1
	b _08026086
	.align 2, 0
_0802606C: .4byte 0x0000FFFB
_08026070: .4byte gIoRegisters
_08026074: .4byte 0x0000FFB0
_08026078: .4byte 0x08306498
_0802607C: .4byte gSpriteData
_08026080:
	ldrh r1, [r5]
	ldr r0, _080260A8 @ =0x0000FFDF
	ands r0, r1
_08026086:
	strh r0, [r5]
	mov r1, r8
	subs r0, r7, r1
	lsls r0, r0, #3
	add r0, ip
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #0x1b
	bls _0802609C
	b _08026338
_0802609C:
	lsls r0, r0, #2
	ldr r1, _080260AC @ =_080260B0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080260A8: .4byte 0x0000FFDF
_080260AC: .4byte _080260B0
_080260B0: @ jump table
	.4byte _08026134 @ case 0
	.4byte _08026134 @ case 1
	.4byte _08026338 @ case 2
	.4byte _08026338 @ case 3
	.4byte _08026338 @ case 4
	.4byte _08026338 @ case 5
	.4byte _08026338 @ case 6
	.4byte _08026338 @ case 7
	.4byte _08026338 @ case 8
	.4byte _08026338 @ case 9
	.4byte _08026338 @ case 10
	.4byte _08026338 @ case 11
	.4byte _08026338 @ case 12
	.4byte _08026338 @ case 13
	.4byte _08026338 @ case 14
	.4byte _08026338 @ case 15
	.4byte _08026338 @ case 16
	.4byte _08026338 @ case 17
	.4byte _08026338 @ case 18
	.4byte _08026338 @ case 19
	.4byte _08026338 @ case 20
	.4byte _08026338 @ case 21
	.4byte _08026338 @ case 22
	.4byte _08026134 @ case 23
	.4byte _08026338 @ case 24
	.4byte _08026120 @ case 25
	.4byte _08026146 @ case 26
	.4byte _0802614E @ case 27
_08026120:
	mov r2, r8
	subs r0, r7, r2
	lsls r0, r0, #3
	add r0, ip
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x20
	bhi _08026134
	movs r0, #0
	strh r0, [r5]
_08026134:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
	b _08026338
_08026146:
	ldrh r1, [r5]
	ldr r0, _08026180 @ =0x00007FFF
	ands r0, r1
	strh r0, [r5]
_0802614E:
	ldrh r4, [r5, #0x14]
	cmp r4, #0
	bne _08026188
	adds r0, r5, #0
	adds r0, #0x25
	strb r4, [r0]
	ldr r0, _08026184 @ =0x083061C0
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	mov r3, r8
	subs r0, r7, r3
	lsls r0, r0, #3
	add r0, ip
	adds r0, #0x24
	movs r1, #0x5c
	strb r1, [r0]
	movs r0, #0xc1
	bl SoundPlay
	b _08026338
	.align 2, 0
_08026180: .4byte 0x00007FFF
_08026184: .4byte 0x083061C0
_08026188:
	adds r0, r6, #0
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r4, r0
	bhi _080261A8
	ldr r0, _080261A4 @ =0x083064B8
	str r0, [r5, #0x18]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #3
	b _080261C0
	.align 2, 0
_080261A4: .4byte 0x083064B8
_080261A8:
	ldrh r4, [r5, #0x14]
	lsls r0, r6, #1
	movs r1, #3
	bl __divsi3
	cmp r4, r0
	bgt _080261C2
	ldr r0, _08026204 @ =0x083064A8
	str r0, [r5, #0x18]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #2
_080261C0:
	strb r0, [r1]
_080261C2:
	adds r6, r5, #0
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r1, #0x7f
	ands r1, r0
	cmp r1, #1
	bne _08026208
	movs r0, #0x32
	bl CountPrimarySprite
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bhi _080262BE
	adds r0, r6, #0
	adds r0, #0x23
	ldrb r3, [r0]
	movs r0, #0x20
	str r0, [sp]
	ldrh r0, [r6, #2]
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	b _080262BE
	.align 2, 0
_08026204: .4byte 0x083064A8
_08026208:
	cmp r1, #0x10
	bne _080262BE
	movs r0, #0xc2
	bl SoundPlay
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldr r1, _08026248 @ =gSpriteData
	mov r2, r8
	subs r0, r7, r2
	lsls r0, r0, #3
	adds r3, r0, r1
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0xb4
	strb r0, [r1]
	ldrh r1, [r5, #2]
	ldr r0, _0802624C @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #0x40
	cmp r1, r0
	ble _08026250
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	b _08026256
	.align 2, 0
_08026248: .4byte gSpriteData
_0802624C: .4byte gSamusData
_08026250:
	ldrh r1, [r3]
	ldr r0, _0802627C @ =0x0000FBFF
	ands r0, r1
_08026256:
	strh r0, [r3]
	ldr r0, _08026280 @ =gCurrentSprite
	ldr r1, _08026284 @ =gSamusData
	ldrh r0, [r0, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0802628C
	ldr r0, _08026288 @ =gSpriteData
	mov r3, r8
	subs r1, r7, r3
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	orrs r0, r2
	b _0802629C
	.align 2, 0
_0802627C: .4byte 0x0000FBFF
_08026280: .4byte gCurrentSprite
_08026284: .4byte gSamusData
_08026288: .4byte gSpriteData
_0802628C:
	ldr r0, _080262FC @ =gSpriteData
	mov r2, r8
	subs r1, r7, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrh r2, [r1]
	ldr r0, _08026300 @ =0x0000FDFF
	ands r0, r2
_0802629C:
	strh r0, [r1]
	ldr r1, _080262FC @ =gSpriteData
	mov r3, r8
	subs r0, r7, r3
	lsls r0, r0, #3
	adds r2, r0, r1
	adds r0, r2, #0
	adds r0, #0x2f
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #2
	movs r1, #0x1c
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
_080262BE:
	ldr r1, _080262FC @ =gSpriteData
	mov r2, r8
	subs r0, r7, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	ldrb r4, [r0]
	mov ip, r1
	cmp r4, #0
	beq _08026338
	movs r0, #3
	ands r0, r4
	cmp r0, #0
	bne _0802630E
	movs r0, #4
	ands r4, r0
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08026308
	ldr r0, _08026304 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	ldrb r3, [r0, #0x1f]
	adds r1, r1, r3
	movs r2, #0xd
	subs r2, r2, r1
	adds r0, #0x20
	strb r2, [r0]
	b _0802630E
	.align 2, 0
_080262FC: .4byte gSpriteData
_08026300: .4byte 0x0000FDFF
_08026304: .4byte gCurrentSprite
_08026308:
	ldr r0, _08026344 @ =gCurrentSprite
	adds r0, #0x20
	strb r1, [r0]
_0802630E:
	mov r1, r8
	subs r0, r7, r1
	lsls r0, r0, #3
	add r0, ip
	adds r0, #0x2d
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	cmp r4, #0
	bne _08026338
	ldr r1, _08026344 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x34
	ldrb r2, [r3]
	movs r0, #0xbf
	ands r0, r2
	strb r0, [r3]
	adds r1, #0x20
	strb r4, [r1]
_08026338:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08026344: .4byte gCurrentSprite

	thumb_func_start AbilityAura
AbilityAura: @ 0x08026348
	push {r4, r5, r6, lr}
	ldr r1, _080263BC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r4, [r0]
	adds r6, r1, #0
	adds r6, #0x24
	ldrb r5, [r6]
	mov ip, r1
	cmp r5, #0
	bne _080263E6
	ldrh r1, [r1]
	ldr r0, _080263C0 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x22
	movs r2, #4
	strb r2, [r0]
	ldr r0, _080263C4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _080263C8 @ =0x0000FFFC
	mov r1, ip
	strh r0, [r1, #0xa]
	strh r2, [r1, #0xc]
	strh r0, [r1, #0xe]
	strh r2, [r1, #0x10]
	strb r3, [r1, #0x1c]
	strh r5, [r1, #0x16]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #2
	strb r0, [r6]
	ldrb r0, [r1, #0x1e]
	cmp r0, #2
	bne _080263D0
	ldr r0, _080263CC @ =0x08306100
	b _080263E4
	.align 2, 0
_080263BC: .4byte gCurrentSprite
_080263C0: .4byte 0x0000FFFB
_080263C4: .4byte gIoRegisters
_080263C8: .4byte 0x0000FFFC
_080263CC: .4byte 0x08306100
_080263D0:
	cmp r0, #1
	bne _080263E0
	ldr r0, _080263DC @ =0x083060D8
	mov r5, ip
	str r0, [r5, #0x18]
	b _080263E6
	.align 2, 0
_080263DC: .4byte 0x083060D8
_080263E0:
	ldr r0, _08026410 @ =0x083060B0
	mov r1, ip
_080263E4:
	str r0, [r1, #0x18]
_080263E6:
	ldr r2, _08026414 @ =gSpriteData
	lsls r3, r4, #3
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	mov r5, ip
	strh r1, [r5, #2]
	ldrh r1, [r0, #4]
	strh r1, [r5, #4]
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08026418
	ldrh r0, [r5]
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r5]
	b _08026424
	.align 2, 0
_08026410: .4byte 0x083060B0
_08026414: .4byte gSpriteData
_08026418:
	mov r0, ip
	ldrh r1, [r0]
	ldr r0, _08026440 @ =0x0000FFDF
	ands r0, r1
	mov r1, ip
	strh r0, [r1]
_08026424:
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #0x5e
	bls _08026436
	b _08026642
_08026436:
	lsls r0, r0, #2
	ldr r1, _08026444 @ =_08026448
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08026440: .4byte 0x0000FFDF
_08026444: .4byte _08026448
_08026448: @ jump table
	.4byte _080265E2 @ case 0
	.4byte _080265E2 @ case 1
	.4byte _08026642 @ case 2
	.4byte _08026642 @ case 3
	.4byte _08026642 @ case 4
	.4byte _08026642 @ case 5
	.4byte _08026642 @ case 6
	.4byte _08026642 @ case 7
	.4byte _08026642 @ case 8
	.4byte _08026642 @ case 9
	.4byte _08026642 @ case 10
	.4byte _08026642 @ case 11
	.4byte _08026642 @ case 12
	.4byte _08026642 @ case 13
	.4byte _08026642 @ case 14
	.4byte _08026642 @ case 15
	.4byte _08026642 @ case 16
	.4byte _08026642 @ case 17
	.4byte _08026642 @ case 18
	.4byte _08026642 @ case 19
	.4byte _08026642 @ case 20
	.4byte _08026642 @ case 21
	.4byte _08026642 @ case 22
	.4byte _080265E2 @ case 23
	.4byte _08026642 @ case 24
	.4byte _080265CE @ case 25
	.4byte _08026642 @ case 26
	.4byte _08026642 @ case 27
	.4byte _08026642 @ case 28
	.4byte _08026642 @ case 29
	.4byte _08026642 @ case 30
	.4byte _08026642 @ case 31
	.4byte _08026642 @ case 32
	.4byte _08026642 @ case 33
	.4byte _08026642 @ case 34
	.4byte _08026642 @ case 35
	.4byte _08026642 @ case 36
	.4byte _08026642 @ case 37
	.4byte _08026642 @ case 38
	.4byte _08026642 @ case 39
	.4byte _08026642 @ case 40
	.4byte _08026642 @ case 41
	.4byte _08026642 @ case 42
	.4byte _08026642 @ case 43
	.4byte _08026642 @ case 44
	.4byte _08026642 @ case 45
	.4byte _08026642 @ case 46
	.4byte _08026642 @ case 47
	.4byte _08026642 @ case 48
	.4byte _08026642 @ case 49
	.4byte _08026642 @ case 50
	.4byte _08026642 @ case 51
	.4byte _08026642 @ case 52
	.4byte _08026642 @ case 53
	.4byte _080265C4 @ case 54
	.4byte _080265C4 @ case 55
	.4byte _080265C4 @ case 56
	.4byte _080265C4 @ case 57
	.4byte _080265C4 @ case 58
	.4byte _08026628 @ case 59
	.4byte _08026642 @ case 60
	.4byte _08026642 @ case 61
	.4byte _08026642 @ case 62
	.4byte _08026642 @ case 63
	.4byte _08026642 @ case 64
	.4byte _08026642 @ case 65
	.4byte _08026642 @ case 66
	.4byte _08026642 @ case 67
	.4byte _08026642 @ case 68
	.4byte _08026642 @ case 69
	.4byte _08026642 @ case 70
	.4byte _08026642 @ case 71
	.4byte _08026642 @ case 72
	.4byte _08026642 @ case 73
	.4byte _08026642 @ case 74
	.4byte _08026642 @ case 75
	.4byte _08026642 @ case 76
	.4byte _08026642 @ case 77
	.4byte _08026642 @ case 78
	.4byte _08026642 @ case 79
	.4byte _08026642 @ case 80
	.4byte _08026642 @ case 81
	.4byte _08026642 @ case 82
	.4byte _08026642 @ case 83
	.4byte _08026642 @ case 84
	.4byte _08026642 @ case 85
	.4byte _08026642 @ case 86
	.4byte _08026642 @ case 87
	.4byte _08026642 @ case 88
	.4byte _08026642 @ case 89
	.4byte _08026642 @ case 90
	.4byte _080265EC @ case 91
	.4byte _0802660C @ case 92
	.4byte _08026628 @ case 93
	.4byte _0802663C @ case 94
_080265C4:
	mov r5, ip
	ldrh r1, [r5]
	movs r0, #4
	orrs r0, r1
	b _08026640
_080265CE:
	subs r0, r3, r4
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x20
	bhi _080265E2
	movs r0, #0
	mov r5, ip
	strh r0, [r5]
_080265E2:
	mov r1, ip
	ldrh r0, [r1]
	movs r1, #4
	eors r0, r1
	b _0802663E
_080265EC:
	mov r1, ip
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	beq _080265FA
	movs r0, #0
	strh r0, [r1]
	b _08026642
_080265FA:
	mov r5, ip
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	ldr r0, _08026608 @ =0x08306350
	str r0, [r5, #0x18]
	b _08026642
	.align 2, 0
_08026608: .4byte 0x08306350
_0802660C:
	ldr r0, _08026624 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08026642
	mov r1, ip
	ldrh r0, [r1]
	movs r1, #4
	eors r0, r1
	b _0802663E
	.align 2, 0
_08026624: .4byte gFrameCounter8Bit
_08026628:
	mov r0, ip
	ldrh r1, [r0]
	ldr r0, _08026638 @ =0x0000FFFB
	ands r0, r1
	mov r1, ip
	strh r0, [r1]
	b _08026642
	.align 2, 0
_08026638: .4byte 0x0000FFFB
_0802663C:
	movs r0, #0
_0802663E:
	mov r5, ip
_08026640:
	strh r0, [r5]
_08026642:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start CoreAbilityBeforeVariaCoreInit
CoreAbilityBeforeVariaCoreInit: @ 0x08026648
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r5, _08026770 @ =gCurrentSprite
	ldrh r0, [r5, #2]
	adds r0, #0x30
	movs r3, #0
	movs r6, #0
	strh r0, [r5, #2]
	adds r0, r5, #0
	adds r0, #0x24
	movs r4, #2
	strb r4, [r0]
	ldr r2, _08026774 @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	ldr r0, _08026778 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r5, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x25
	strb r3, [r0]
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802677C @ =0x0000FFE0
	strh r1, [r5, #0xa]
	movs r0, #0x20
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _08026780 @ =0x083151FC
	str r0, [r5, #0x18]
	strb r3, [r5, #0x1c]
	strh r6, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x2e
	strb r4, [r0]
	adds r0, #2
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r4, r5, #0
	adds r4, #0x23
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x5d
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08026764
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x5c
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08026764
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x5c
	movs r1, #1
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08026764
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x5c
	movs r1, #2
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08026764
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x5c
	movs r1, #3
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _08026766
_08026764:
	strh r6, [r5]
_08026766:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08026770: .4byte gCurrentSprite
_08026774: .4byte sPrimarySpriteStats
_08026778: .4byte gIoRegisters
_0802677C: .4byte 0x0000FFE0
_08026780: .4byte 0x083151FC

	thumb_func_start CoreXAbilityBeforeVariaCoreIdle
CoreXAbilityBeforeVariaCoreIdle: @ 0x08026784
	push {lr}
	ldr r0, _080267A8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _080267A2
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080267A2
	ldr r0, _080267AC @ =0x00000231
	bl SoundPlay
_080267A2:
	pop {r0}
	bx r0
	.align 2, 0
_080267A8: .4byte gCurrentSprite
_080267AC: .4byte 0x00000231

	thumb_func_start CoreXAbilityBeforeVariaCoreExplodingDataPad
CoreXAbilityBeforeVariaCoreExplodingDataPad: @ 0x080267B0
	push {r4, r5, r6, r7, lr}
	ldr r2, _08026804 @ =gCurrentSprite
	adds r5, r2, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r4, _08026808 @ =0x083031E0
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _0802680C @ =0x00007FFF
	cmp r0, r6
	bne _080267D0
	ldrh r3, [r4]
	movs r1, #0
_080267D0:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	adds r5, r2, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _08026810 @ =0x08303262
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _080267F4
	ldrh r3, [r4]
	movs r1, #0
_080267F4:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08026804: .4byte gCurrentSprite
_08026808: .4byte 0x083031E0
_0802680C: .4byte 0x00007FFF
_08026810: .4byte 0x08303262

	thumb_func_start CoreXAbilityBeforeVariaCoreFloatingAway
CoreXAbilityBeforeVariaCoreFloatingAway: @ 0x08026814
	push {r4, r5, r6, r7, lr}
	ldr r3, _08026878 @ =gCurrentSprite
	ldrh r0, [r3]
	movs r1, #4
	eors r0, r1
	strh r0, [r3]
	adds r5, r3, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r4, _0802687C @ =0x083031E0
	lsls r0, r2, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r7, _08026880 @ =0x00007FFF
	mov ip, r7
	cmp r0, ip
	bne _0802683E
	ldrh r1, [r4]
	movs r2, #0
_0802683E:
	adds r0, r2, #1
	strb r0, [r5]
	ldrh r0, [r3, #2]
	adds r5, r0, r1
	strh r5, [r3, #2]
	adds r6, r3, #0
	adds r6, #0x30
	ldrb r2, [r6]
	ldr r4, _08026884 @ =0x08303262
	lsls r0, r2, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, ip
	bne _08026862
	ldrh r1, [r4]
	movs r2, #0
_08026862:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r3, #4]
	adds r0, r0, r1
	subs r1, r5, #2
	strh r1, [r3, #2]
	adds r0, #3
	strh r0, [r3, #4]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08026878: .4byte gCurrentSprite
_0802687C: .4byte 0x083031E0
_08026880: .4byte 0x00007FFF
_08026884: .4byte 0x08303262

	thumb_func_start CoreXAbilityBeforeVariaCore
CoreXAbilityBeforeVariaCore: @ 0x08026888
	push {lr}
	ldr r0, _080268A8 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080268BC
	cmp r0, #2
	bgt _080268AC
	cmp r0, #0
	beq _080268B6
	b _080268CC
	.align 2, 0
_080268A8: .4byte gCurrentSprite
_080268AC:
	cmp r0, #0x18
	beq _080268C2
	cmp r0, #0x1a
	beq _080268C8
	b _080268CC
_080268B6:
	bl CoreAbilityBeforeVariaCoreInit
	b _080268CC
_080268BC:
	bl CoreXAbilityBeforeVariaCoreIdle
	b _080268CC
_080268C2:
	bl CoreXAbilityBeforeVariaCoreExplodingDataPad
	b _080268CC
_080268C8:
	bl CoreXAbilityBeforeVariaCoreFloatingAway
_080268CC:
	pop {r0}
	bx r0

	thumb_func_start CoreXShellBeforeVariaCore
CoreXShellBeforeVariaCore: @ 0x080268D0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08026964 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x23
	ldrb r7, [r1]
	adds r5, r0, #0
	adds r5, #0x24
	ldrb r3, [r5]
	mov ip, r0
	cmp r3, #0
	bne _08026978
	ldrh r1, [r0]
	movs r0, #8
	movs r2, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #0x12]
	mov r0, ip
	adds r0, #0x2b
	strb r2, [r0]
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	mov r4, ip
	ldrh r1, [r4]
	ldr r0, _08026968 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0802696C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0x14]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08026970 @ =0x0000FFB0
	strh r1, [r4, #0xa]
	movs r0, #0x50
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08026974 @ =0x083151E4
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	mov r1, ip
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	adds r1, #9
	strb r2, [r1]
	strb r0, [r5]
	b _08026B0C
	.align 2, 0
_08026964: .4byte gCurrentSprite
_08026968: .4byte 0x0000FFFB
_0802696C: .4byte gIoRegisters
_08026970: .4byte 0x0000FFB0
_08026974: .4byte 0x083151E4
_08026978:
	cmp r3, #0x1a
	bne _0802699C
	mov r1, ip
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	mov r1, ip
	ldrh r0, [r1]
	movs r1, #4
	eors r0, r1
	mov r2, ip
	strh r0, [r2]
	mov r1, ip
	adds r1, #0x2b
	ldrb r0, [r1]
	adds r0, #0xe
	strb r0, [r1]
	b _08026B0C
_0802699C:
	mov r3, ip
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r0, #1
	movs r4, #0
	mov r8, r4
	strb r0, [r3]
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0x77
	bls _080269BE
	mov r2, ip
	adds r2, #0x2b
	lsrs r0, r1, #0x1c
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
_080269BE:
	ldrb r0, [r3]
	cmp r0, #0xb4
	bne _08026A08
	mov r2, ip
	ldrh r1, [r2]
	movs r4, #0x80
	lsls r4, r4, #8
	adds r0, r4, #0
	movs r6, #0
	orrs r0, r1
	strh r0, [r2]
	movs r4, #0x1a
	strb r4, [r5]
	mov r0, ip
	adds r0, #0x25
	strb r6, [r0]
	ldr r3, _08026A00 @ =gSpriteData
	lsls r5, r7, #3
	subs r1, r5, r7
	lsls r1, r1, #3
	adds r2, r1, r3
	adds r0, r2, #0
	adds r0, #0x24
	strb r4, [r0]
	adds r0, r3, #0
	adds r0, #0x18
	adds r1, r1, r0
	ldr r0, _08026A04 @ =0x083152BC
	str r0, [r1]
	strb r6, [r2, #0x1c]
	mov r0, r8
	strh r0, [r2, #0x16]
	b _08026B40
	.align 2, 0
_08026A00: .4byte gSpriteData
_08026A04: .4byte 0x083152BC
_08026A08:
	cmp r0, #0x78
	bne _08026A50
	ldr r4, _08026A44 @ =gSpriteData
	lsls r5, r7, #3
	subs r1, r5, r7
	lsls r1, r1, #3
	adds r3, r1, r4
	adds r2, r3, #0
	adds r2, #0x24
	movs r0, #0x18
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x18
	adds r1, r1, r0
	ldr r0, _08026A48 @ =0x08315284
	str r0, [r1]
	mov r1, r8
	strb r1, [r3, #0x1c]
	movs r1, #0
	mov r2, r8
	strh r2, [r3, #0x16]
	ldr r0, _08026A4C @ =0x083151D4
	mov r2, ip
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	mov r0, r8
	strh r0, [r2, #0x16]
	adds r3, r4, #0
	b _08026B40
	.align 2, 0
_08026A44: .4byte gSpriteData
_08026A48: .4byte 0x08315284
_08026A4C: .4byte 0x083151D4
_08026A50:
	cmp r0, #0x79
	bne _08026A6C
	ldr r1, _08026A60 @ =0x040000D4
	ldr r0, _08026A64 @ =0x08315414
	str r0, [r1]
	ldr r0, _08026A68 @ =0x06015800
	b _08026B04
	.align 2, 0
_08026A60: .4byte 0x040000D4
_08026A64: .4byte 0x08315414
_08026A68: .4byte 0x06015800
_08026A6C:
	cmp r0, #0x7a
	bne _08026A88
	ldr r1, _08026A7C @ =0x040000D4
	ldr r0, _08026A80 @ =0x08315614
	str r0, [r1]
	ldr r0, _08026A84 @ =0x06015A00
	b _08026B04
	.align 2, 0
_08026A7C: .4byte 0x040000D4
_08026A80: .4byte 0x08315614
_08026A84: .4byte 0x06015A00
_08026A88:
	cmp r0, #0x7b
	bne _08026AA4
	ldr r1, _08026A98 @ =0x040000D4
	ldr r0, _08026A9C @ =0x08315814
	str r0, [r1]
	ldr r0, _08026AA0 @ =0x06015C00
	b _08026B04
	.align 2, 0
_08026A98: .4byte 0x040000D4
_08026A9C: .4byte 0x08315814
_08026AA0: .4byte 0x06015C00
_08026AA4:
	cmp r0, #0x7c
	bne _08026AC0
	ldr r1, _08026AB4 @ =0x040000D4
	ldr r0, _08026AB8 @ =0x08315A14
	str r0, [r1]
	ldr r0, _08026ABC @ =0x06015E00
	b _08026B04
	.align 2, 0
_08026AB4: .4byte 0x040000D4
_08026AB8: .4byte 0x08315A14
_08026ABC: .4byte 0x06015E00
_08026AC0:
	cmp r0, #0x7d
	bne _08026ADC
	ldr r1, _08026AD0 @ =0x040000D4
	ldr r0, _08026AD4 @ =0x08315C14
	str r0, [r1]
	ldr r0, _08026AD8 @ =0x06016000
	b _08026B04
	.align 2, 0
_08026AD0: .4byte 0x040000D4
_08026AD4: .4byte 0x08315C14
_08026AD8: .4byte 0x06016000
_08026ADC:
	cmp r0, #0x7e
	bne _08026AF8
	ldr r1, _08026AEC @ =0x040000D4
	ldr r0, _08026AF0 @ =0x08315E14
	str r0, [r1]
	ldr r0, _08026AF4 @ =0x06016200
	b _08026B04
	.align 2, 0
_08026AEC: .4byte 0x040000D4
_08026AF0: .4byte 0x08315E14
_08026AF4: .4byte 0x06016200
_08026AF8:
	cmp r0, #0x7f
	bne _08026B28
	ldr r1, _08026B14 @ =0x040000D4
	ldr r0, _08026B18 @ =0x08316014
	str r0, [r1]
	ldr r0, _08026B1C @ =0x06016400
_08026B04:
	str r0, [r1, #4]
	ldr r0, _08026B20 @ =0x80000100
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08026B0C:
	ldr r3, _08026B24 @ =gSpriteData
	lsls r5, r7, #3
	b _08026B40
	.align 2, 0
_08026B14: .4byte 0x040000D4
_08026B18: .4byte 0x08316014
_08026B1C: .4byte 0x06016400
_08026B20: .4byte 0x80000100
_08026B24: .4byte gSpriteData
_08026B28:
	ldr r3, _08026B5C @ =gSpriteData
	lsls r5, r7, #3
	cmp r0, #0x80
	bne _08026B40
	ldr r1, _08026B60 @ =0x040000D4
	ldr r0, _08026B64 @ =0x08316214
	str r0, [r1]
	ldr r0, _08026B68 @ =0x06016600
	str r0, [r1, #4]
	ldr r0, _08026B6C @ =0x80000100
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08026B40:
	subs r0, r5, r7
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r1, [r0, #2]
	mov r2, ip
	strh r1, [r2, #2]
	ldrh r0, [r0, #4]
	strh r0, [r2, #4]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08026B5C: .4byte gSpriteData
_08026B60: .4byte 0x040000D4
_08026B64: .4byte 0x08316214
_08026B68: .4byte 0x06016600
_08026B6C: .4byte 0x80000100

	thumb_func_start CoreXStaticBeforeVariaCore
CoreXStaticBeforeVariaCore: @ 0x08026B70
	push {r4, r5, r6, lr}
	ldr r1, _08026BDC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r6, r1, #0
	adds r6, #0x24
	ldrb r4, [r6]
	adds r3, r1, #0
	cmp r4, #0
	bne _08026C2A
	adds r0, r3, #0
	adds r0, #0x22
	movs r2, #4
	strb r2, [r0]
	ldr r0, _08026BE0 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r1, #0
	ldr r0, _08026BE4 @ =0x0000FFFC
	strh r0, [r3, #0xa]
	strh r2, [r3, #0xc]
	strh r0, [r3, #0xe]
	strh r2, [r3, #0x10]
	strb r1, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	movs r0, #2
	strb r0, [r6]
	ldrb r0, [r3, #0x1e]
	cmp r0, #0
	bne _08026BEC
	ldr r0, _08026BE8 @ =0x0831539C
	str r0, [r3, #0x18]
	b _08026C2A
	.align 2, 0
_08026BDC: .4byte gCurrentSprite
_08026BE0: .4byte gIoRegisters
_08026BE4: .4byte 0x0000FFFC
_08026BE8: .4byte 0x0831539C
_08026BEC:
	cmp r0, #1
	bne _08026BFC
	ldr r0, _08026BF8 @ =0x083153C4
	str r0, [r3, #0x18]
	b _08026C2A
	.align 2, 0
_08026BF8: .4byte 0x083153C4
_08026BFC:
	cmp r0, #2
	bne _08026C0C
	ldr r0, _08026C08 @ =0x083153EC
	str r0, [r3, #0x18]
	b _08026C2A
	.align 2, 0
_08026C08: .4byte 0x083153EC
_08026C0C:
	cmp r0, #3
	bne _08026C28
	ldr r0, _08026C20 @ =0x08315304
	str r0, [r3, #0x18]
	ldrh r1, [r3]
	ldr r0, _08026C24 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r3]
	b _08026C2A
	.align 2, 0
_08026C20: .4byte 0x08315304
_08026C24: .4byte 0x0000FFFB
_08026C28:
	strh r4, [r3]
_08026C2A:
	ldr r0, _08026C48 @ =gSpriteData
	lsls r2, r5, #3
	subs r1, r2, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r1, [r1]
	adds r4, r0, #0
	cmp r1, #0x1a
	bne _08026C4C
	ldrh r0, [r3]
	movs r1, #4
	eors r0, r1
	b _08026C60
	.align 2, 0
_08026C48: .4byte gSpriteData
_08026C4C:
	cmp r1, #0x18
	bne _08026C62
	ldrb r0, [r3, #0x1e]
	cmp r0, #3
	bne _08026C5A
	movs r0, #0
	b _08026C60
_08026C5A:
	ldrh r1, [r3]
	ldr r0, _08026C78 @ =0x0000FFFB
	ands r0, r1
_08026C60:
	strh r0, [r3]
_08026C62:
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r1, [r0, #2]
	strh r1, [r3, #2]
	ldrh r0, [r0, #4]
	strh r0, [r3, #4]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08026C78: .4byte 0x0000FFFB

	thumb_func_start WaverCheckSamusInRange
WaverCheckSamusInRange: @ 0x08026C7C
	push {r4, lr}
	movs r4, #0
	ldr r0, _08026CA4 @ =gCurrentSprite
	ldrh r0, [r0, #0x14]
	cmp r0, #0
	beq _08026C9A
	movs r1, #0xc8
	lsls r1, r1, #1
	movs r0, #0x28
	movs r2, #0x40
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #3
	bne _08026C9A
	movs r4, #1
_08026C9A:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08026CA4: .4byte gCurrentSprite

	thumb_func_start WaverSetFlyingGFX
WaverSetFlyingGFX: @ 0x08026CA8
	push {lr}
	ldr r2, _08026CC4 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08026CCC
	ldr r0, _08026CC8 @ =0x08317590
	b _08026CCE
	.align 2, 0
_08026CC4: .4byte gCurrentSprite
_08026CC8: .4byte 0x08317590
_08026CCC:
	ldr r0, _08026CD4 @ =0x08317580
_08026CCE:
	str r0, [r2, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_08026CD4: .4byte 0x08317580

	thumb_func_start WaverInit
WaverInit: @ 0x08026CD8
	push {lr}
	bl TrySetAbsorbXFlag
	ldr r2, _08026D04 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08026D08
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08026D08
	strh r0, [r2]
	b _08026D88
	.align 2, 0
_08026D04: .4byte gCurrentSprite
_08026D08:
	ldr r1, _08026D20 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	ldrb r0, [r2]
	adds r3, r1, #0
	cmp r0, #0x59
	bne _08026D24
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	strh r0, [r3, #6]
	b _08026D40
	.align 2, 0
_08026D20: .4byte gCurrentSprite
_08026D24:
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08026D8C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08026D40
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
_08026D40:
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08026D90 @ =0x0000FFE0
	strh r1, [r3, #0xa]
	movs r0, #0x20
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldr r2, _08026D94 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	subs r1, #0x10
	movs r0, #2
	strb r0, [r1]
	adds r1, #0xc
	movs r0, #0x30
	strb r0, [r1]
	bl WaverSetFlyingGFX
	bl SpriteChooseRandomXFlip
_08026D88:
	pop {r0}
	bx r0
	.align 2, 0
_08026D8C: .4byte gSpriteRandomNumber
_08026D90: .4byte 0x0000FFE0
_08026D94: .4byte sPrimarySpriteStats

	thumb_func_start WaverFlyingInit
WaverFlyingInit: @ 0x08026D98
	push {lr}
	ldr r0, _08026DAC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bl WaverSetFlyingGFX
	pop {r0}
	bx r0
	.align 2, 0
_08026DAC: .4byte gCurrentSprite

	thumb_func_start WaverFlying
WaverFlying: @ 0x08026DB0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r1, _08026DDC @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _08026DC6
	b _08026F56
_08026DC6:
	movs r0, #0
	mov r8, r0
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r2
	cmp r0, #0
	beq _08026DE0
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	b _08026DE4
	.align 2, 0
_08026DDC: .4byte gCurrentSprite
_08026DE0:
	movs r2, #0xa
	ldrsh r0, [r1, r2]
_08026DE4:
	ldrh r2, [r1, #2]
	adds r0, r0, r2
	ldrh r1, [r1, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08026E34 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08026DFA
	movs r0, #1
	mov r8, r0
_08026DFA:
	bl WaverCheckSamusInRange
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _08026E40
	ldr r3, _08026E38 @ =gCurrentSprite
	ldr r0, _08026E3C @ =0x083175D8
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r2, #0
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	adds r1, #0xa
	movs r0, #0x14
	strb r0, [r1]
	movs r0, #0xd3
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _08026F56
	.align 2, 0
_08026E34: .4byte gPreviousCollisionCheck
_08026E38: .4byte gCurrentSprite
_08026E3C: .4byte 0x083175D8
_08026E40:
	ldr r1, _08026E84 @ =0x08316450
	ldr r2, _08026E88 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x31
	ldrb r0, [r3]
	lsrs r0, r0, #3
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r5, r2, #0
	cmp r4, #0
	beq _08026E90
	mov r2, r8
	cmp r2, #0
	bne _08026E70
	ldrh r0, [r5, #2]
	adds r0, r0, r6
	strh r0, [r5, #2]
_08026E70:
	ldrb r0, [r3]
	cmp r0, #0x5e
	bls _08026EDA
	strb r7, [r3]
	ldrh r1, [r5]
	ldr r0, _08026E8C @ =0x0000FBFF
	ands r0, r1
	strh r0, [r5]
	b _08026EDA
	.align 2, 0
_08026E84: .4byte 0x08316450
_08026E88: .4byte gCurrentSprite
_08026E8C: .4byte 0x0000FBFF
_08026E90:
	ldr r1, [r5, #0x18]
	ldr r0, _08026F10 @ =0x08317590
	cmp r1, r0
	bne _08026EA8
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08026EA8
	ldr r0, _08026F14 @ =0x08317580
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
_08026EA8:
	ldr r5, _08026F18 @ =gCurrentSprite
	mov r0, r8
	cmp r0, #0
	bne _08026EB6
	ldrh r0, [r5, #2]
	subs r0, r0, r6
	strh r0, [r5, #2]
_08026EB6:
	adds r1, r5, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0x5e
	bls _08026EDA
	movs r3, #0
	strb r3, [r1]
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r5]
	ldr r0, _08026F10 @ =0x08317590
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r3, [r5, #0x16]
_08026EDA:
	adds r4, r5, #0
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08026F2C
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08026F1C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08026F24
	ldrh r1, [r4]
	ldr r0, _08026F20 @ =0x0000FFBF
	ands r0, r1
	strh r0, [r4]
	b _08026F56
	.align 2, 0
_08026F10: .4byte 0x08317590
_08026F14: .4byte 0x08317580
_08026F18: .4byte gCurrentSprite
_08026F1C: .4byte gPreviousCollisionCheck
_08026F20: .4byte 0x0000FFBF
_08026F24:
	ldrh r0, [r4, #4]
	adds r0, #4
	strh r0, [r4, #4]
	b _08026F56
_08026F2C:
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08026F4C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08026F50
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r4]
	b _08026F56
	.align 2, 0
_08026F4C: .4byte gPreviousCollisionCheck
_08026F50:
	ldrh r0, [r5, #4]
	subs r0, #4
	strh r0, [r5, #4]
_08026F56:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start WaverCharging
WaverCharging: @ 0x08026F60
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r5, _08026FBC @ =gCurrentSprite
	adds r3, r5, #0
	adds r3, #0x30
	ldrb r2, [r3]
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	lsrs r0, r0, #0x1b
	adds r4, r0, #6
	adds r6, r4, #0
	cmp r1, #0x27
	bhi _08026F7E
	adds r0, r2, #1
	strb r0, [r3]
_08026F7E:
	ldrh r1, [r5]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08026FCA
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08026FC0 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08026FC4
	adds r1, r5, #0
	adds r1, #0x24
	movs r4, #0
	movs r0, #0x2b
	strb r0, [r1]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	b _08026FF6
	.align 2, 0
_08026FBC: .4byte gCurrentSprite
_08026FC0: .4byte gPreviousCollisionCheck
_08026FC4:
	ldrh r0, [r5, #4]
	adds r0, r4, r0
	b _0802701C
_08026FCA:
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08027010 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08027018
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x2b
	strb r0, [r1]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
_08026FF6:
	movs r0, #0x37
	bl SpriteSpawnSecondary
	ldrh r1, [r5]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027046
	ldr r0, _08027014 @ =0x000001A7
	bl CheckPlayNotAlreadyPlayingSound
	b _08027046
	.align 2, 0
_08027010: .4byte gPreviousCollisionCheck
_08027014: .4byte 0x000001A7
_08027018:
	ldrh r0, [r5, #4]
	subs r0, r0, r6
_0802701C:
	strh r0, [r5, #4]
	ldr r1, _08027050 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08027046
	movs r0, #0x14
	strb r0, [r2]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027046
	movs r0, #0xd3
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08027046:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08027050: .4byte gCurrentSprite

	thumb_func_start WaverCrashingInit
WaverCrashingInit: @ 0x08027054
	ldr r1, _08027068 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x2c
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	bx lr
	.align 2, 0
_08027068: .4byte gCurrentSprite

	thumb_func_start WaverCrashing
WaverCrashing: @ 0x0802706C
	push {lr}
	ldr r1, _08027098 @ =gCurrentSprite
	ldrb r0, [r1, #0x1c]
	subs r0, #1
	strb r0, [r1, #0x1c]
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08027092
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #0x2e
	strb r1, [r0]
	movs r0, #0x44
	strb r0, [r2]
_08027092:
	pop {r0}
	bx r0
	.align 2, 0
_08027098: .4byte gCurrentSprite

	thumb_func_start WaverBackingOut
WaverBackingOut: @ 0x0802709C
	push {lr}
	ldr r2, _080270CC @ =gCurrentSprite
	ldrb r0, [r2, #0x1c]
	subs r0, #1
	strb r0, [r2, #0x1c]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _080270D4
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x30
	strb r1, [r0]
	ldr r0, _080270D0 @ =0x083175C0
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	b _080270EA
	.align 2, 0
_080270CC: .4byte gCurrentSprite
_080270D0: .4byte 0x083175C0
_080270D4:
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080270E4
	ldrh r0, [r2, #4]
	subs r0, #1
	b _080270E8
_080270E4:
	ldrh r0, [r2, #4]
	adds r0, #1
_080270E8:
	strh r0, [r2, #4]
_080270EA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start WaverCheckBackingOutAnimEnded
WaverCheckBackingOutAnimEnded: @ 0x080270F0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08027116
	ldr r2, _0802711C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x32
	strb r0, [r1]
	ldr r0, _08027120 @ =0x083175C0
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_08027116:
	pop {r0}
	bx r0
	.align 2, 0
_0802711C: .4byte gCurrentSprite
_08027120: .4byte 0x083175C0

	thumb_func_start WaverCheckTurningAnimNearEnded
WaverCheckTurningAnimNearEnded: @ 0x08027124
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08027136
	ldr r0, _0802713C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_08027136:
	pop {r0}
	bx r0
	.align 2, 0
_0802713C: .4byte gCurrentSprite

	thumb_func_start WaverDebrisInit
WaverDebrisInit: @ 0x08027140
	push {r4, lr}
	ldr r0, _080271B0 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _080271B4 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _080271B8 @ =0x0000FFE0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	ldr r0, _080271BC @ =0x0000FFD8
	strh r0, [r2, #0xe]
	movs r0, #0x28
	strh r0, [r2, #0x10]
	ldr r0, _080271C0 @ =0x08317608
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #3
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	subs r1, #2
	movs r0, #3
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080271B0: .4byte gCurrentSprite
_080271B4: .4byte 0x0000FFFB
_080271B8: .4byte 0x0000FFE0
_080271BC: .4byte 0x0000FFD8
_080271C0: .4byte 0x08317608

	thumb_func_start WaverDebrisFalling
WaverDebrisFalling: @ 0x080271C4
	push {r4, r5, r6, lr}
	ldr r4, _080271F4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r5, r0, #0
	cmp r5, #0
	bne _080271FC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	ldr r0, _080271F8 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027200
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x27
	bl ParticleSet
	strh r5, [r4]
	b _0802725A
	.align 2, 0
_080271F4: .4byte gCurrentSprite
_080271F8: .4byte gPreviousVerticalCollisionCheck
_080271FC:
	subs r0, #1
	strb r0, [r1]
_08027200:
	ldr r2, _0802722C @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _08027230 @ =0x08316414
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08027234 @ =0x00007FFF
	cmp r1, r0
	bne _08027238
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r2, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08027242
	.align 2, 0
_0802722C: .4byte gCurrentSprite
_08027230: .4byte 0x08316414
_08027234: .4byte 0x00007FFF
_08027238:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
_08027242:
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08027254
	ldrh r0, [r2, #4]
	adds r0, #4
	b _08027258
_08027254:
	ldrh r0, [r2, #4]
	subs r0, #4
_08027258:
	strh r0, [r2, #4]
_0802725A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start WaverDebrisExploding
WaverDebrisExploding: @ 0x08027260
	push {r4, lr}
	ldr r4, _08027278 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x25
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08027278: .4byte gCurrentSprite

	thumb_func_start Waver
Waver: @ 0x0802727C
	push {r4, lr}
	ldr r4, _080272A8 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08027296
	movs r0, #0xd4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08027296:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _080272AC
	bl SpriteUpdateFreezeTimer
	b _08027482
	.align 2, 0
_080272A8: .4byte gCurrentSprite
_080272AC:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _080272B8
	b _08027482
_080272B8:
	lsls r0, r0, #2
	ldr r1, _080272C4 @ =_080272C8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080272C4: .4byte _080272C8
_080272C8: @ jump table
	.4byte _08027438 @ case 0
	.4byte _0802743E @ case 1
	.4byte _08027442 @ case 2
	.4byte _08027482 @ case 3
	.4byte _08027482 @ case 4
	.4byte _08027482 @ case 5
	.4byte _08027482 @ case 6
	.4byte _08027482 @ case 7
	.4byte _08027482 @ case 8
	.4byte _08027482 @ case 9
	.4byte _08027482 @ case 10
	.4byte _08027482 @ case 11
	.4byte _08027482 @ case 12
	.4byte _08027482 @ case 13
	.4byte _08027482 @ case 14
	.4byte _08027482 @ case 15
	.4byte _08027482 @ case 16
	.4byte _08027482 @ case 17
	.4byte _08027482 @ case 18
	.4byte _08027482 @ case 19
	.4byte _08027482 @ case 20
	.4byte _08027482 @ case 21
	.4byte _08027482 @ case 22
	.4byte _08027482 @ case 23
	.4byte _08027482 @ case 24
	.4byte _08027482 @ case 25
	.4byte _08027482 @ case 26
	.4byte _08027482 @ case 27
	.4byte _08027482 @ case 28
	.4byte _08027482 @ case 29
	.4byte _08027482 @ case 30
	.4byte _08027482 @ case 31
	.4byte _08027482 @ case 32
	.4byte _08027482 @ case 33
	.4byte _08027482 @ case 34
	.4byte _08027482 @ case 35
	.4byte _08027482 @ case 36
	.4byte _08027482 @ case 37
	.4byte _08027482 @ case 38
	.4byte _08027482 @ case 39
	.4byte _08027482 @ case 40
	.4byte _08027482 @ case 41
	.4byte _08027448 @ case 42
	.4byte _0802744E @ case 43
	.4byte _08027452 @ case 44
	.4byte _08027482 @ case 45
	.4byte _08027458 @ case 46
	.4byte _08027482 @ case 47
	.4byte _0802745E @ case 48
	.4byte _08027482 @ case 49
	.4byte _08027464 @ case 50
	.4byte _08027482 @ case 51
	.4byte _08027482 @ case 52
	.4byte _08027482 @ case 53
	.4byte _08027482 @ case 54
	.4byte _08027482 @ case 55
	.4byte _08027482 @ case 56
	.4byte _08027482 @ case 57
	.4byte _08027482 @ case 58
	.4byte _08027482 @ case 59
	.4byte _08027482 @ case 60
	.4byte _08027482 @ case 61
	.4byte _08027482 @ case 62
	.4byte _08027482 @ case 63
	.4byte _08027482 @ case 64
	.4byte _08027482 @ case 65
	.4byte _08027482 @ case 66
	.4byte _08027482 @ case 67
	.4byte _08027482 @ case 68
	.4byte _08027482 @ case 69
	.4byte _08027482 @ case 70
	.4byte _08027482 @ case 71
	.4byte _08027482 @ case 72
	.4byte _08027482 @ case 73
	.4byte _08027482 @ case 74
	.4byte _08027482 @ case 75
	.4byte _08027482 @ case 76
	.4byte _08027482 @ case 77
	.4byte _08027482 @ case 78
	.4byte _08027482 @ case 79
	.4byte _08027482 @ case 80
	.4byte _08027482 @ case 81
	.4byte _08027482 @ case 82
	.4byte _08027482 @ case 83
	.4byte _08027482 @ case 84
	.4byte _08027482 @ case 85
	.4byte _08027482 @ case 86
	.4byte _0802746A @ case 87
	.4byte _0802746E @ case 88
	.4byte _08027474 @ case 89
	.4byte _08027478 @ case 90
	.4byte _0802747E @ case 91
_08027438:
	bl WaverInit
	b _08027482
_0802743E:
	bl WaverFlyingInit
_08027442:
	bl WaverFlying
	b _08027482
_08027448:
	bl WaverCharging
	b _08027482
_0802744E:
	bl WaverCrashingInit
_08027452:
	bl WaverCrashing
	b _08027482
_08027458:
	bl WaverBackingOut
	b _08027482
_0802745E:
	bl WaverCheckBackingOutAnimEnded
	b _08027482
_08027464:
	bl WaverCheckTurningAnimNearEnded
	b _08027482
_0802746A:
	bl SpriteDyingInit
_0802746E:
	bl SpriteDying
	b _08027482
_08027474:
	bl WaverInit
_08027478:
	bl SpriteSpawningFromX
	b _08027482
_0802747E:
	bl XParasiteInit
_08027482:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start WaverExplosion
WaverExplosion: @ 0x08027488
	push {lr}
	ldr r0, _080274A8 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _080274AC
	cmp r0, #2
	beq _080274B0
	bl WaverDebrisExploding
	b _080274B4
	.align 2, 0
_080274A8: .4byte gCurrentSprite
_080274AC:
	bl WaverDebrisInit
_080274B0:
	bl WaverDebrisFalling
_080274B4:
	pop {r0}
	bx r0

	thumb_func_start SciserCheckCollisions
SciserCheckCollisions: @ 0x080274B8
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _080274EC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027518
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080274F4
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080274F0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08027568
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _0802755C
	.align 2, 0
_080274EC: .4byte gCurrentSprite
_080274F0: .4byte gPreviousCollisionCheck
_080274F4:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027514 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08027568
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0802755C
	.align 2, 0
_08027514: .4byte gPreviousCollisionCheck
_08027518:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08027544
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027540 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08027568
	ldrh r0, [r4, #2]
	subs r0, #4
	b _08027558
	.align 2, 0
_08027540: .4byte gPreviousCollisionCheck
_08027544:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027570 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08027568
	ldrh r0, [r4, #2]
_08027558:
	ldrh r1, [r4, #4]
	adds r1, #0x20
_0802755C:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08027568
	movs r6, #1
_08027568:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08027570: .4byte gPreviousCollisionCheck

	thumb_func_start SciserUpdateHitbox
SciserUpdateHitbox: @ 0x08027574
	push {lr}
	ldr r2, _0802759C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _080275C0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080275A8
	ldr r0, _080275A0 @ =0x0000FFD0
	strh r0, [r2, #0xa]
	movs r0, #0x30
	strh r0, [r2, #0xc]
	ldr r0, _080275A4 @ =0x0000FFB8
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _080275E2
	.align 2, 0
_0802759C: .4byte gCurrentSprite
_080275A0: .4byte 0x0000FFD0
_080275A4: .4byte 0x0000FFB8
_080275A8:
	ldr r0, _080275B8 @ =0x0000FFD0
	strh r0, [r2, #0xa]
	movs r0, #0x30
	strh r0, [r2, #0xc]
	ldr r0, _080275BC @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x48
	b _080275E2
	.align 2, 0
_080275B8: .4byte 0x0000FFD0
_080275BC: .4byte 0x0000FFF0
_080275C0:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080275D4
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x48
	b _080275DA
_080275D4:
	ldr r0, _080275E8 @ =0x0000FFB8
	strh r0, [r2, #0xa]
	movs r0, #0x10
_080275DA:
	strh r0, [r2, #0xc]
	ldr r0, _080275EC @ =0x0000FFD0
	strh r0, [r2, #0xe]
	movs r0, #0x30
_080275E2:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_080275E8: .4byte 0x0000FFB8
_080275EC: .4byte 0x0000FFD0

	thumb_func_start SciserSetCrawlingGFX
SciserSetCrawlingGFX: @ 0x080275F0
	push {lr}
	ldr r2, _08027614 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	adds r1, r2, #0
	cmp r0, #0
	beq _08027624
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802761C
	ldr r0, _08027618 @ =0x083190A0
	b _0802763A
	.align 2, 0
_08027614: .4byte gCurrentSprite
_08027618: .4byte 0x083190A0
_0802761C:
	ldr r0, _08027620 @ =0x08319078
	b _0802763A
	.align 2, 0
_08027620: .4byte 0x08319078
_08027624:
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027638
	ldr r0, _08027634 @ =0x08318FC0
	b _0802763A
	.align 2, 0
_08027634: .4byte 0x08318FC0
_08027638:
	ldr r0, _08027648 @ =0x08318F08
_0802763A:
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08027648: .4byte 0x08318F08

	thumb_func_start SciserSetIdleGFX
SciserSetIdleGFX: @ 0x0802764C
	push {lr}
	ldr r2, _08027670 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	adds r1, r2, #0
	cmp r0, #0
	beq _08027680
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027678
	ldr r0, _08027674 @ =0x083190A0
	b _08027696
	.align 2, 0
_08027670: .4byte gCurrentSprite
_08027674: .4byte 0x083190A0
_08027678:
	ldr r0, _0802767C @ =0x08319078
	b _08027696
	.align 2, 0
_0802767C: .4byte 0x08319078
_08027680:
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027694
	ldr r0, _08027690 @ =0x08318FE8
	b _08027696
	.align 2, 0
_08027690: .4byte 0x08318FE8
_08027694:
	ldr r0, _080276A4 @ =0x08318F30
_08027696:
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_080276A4: .4byte 0x08318F30

	thumb_func_start SciserCheckSamusInRange
SciserCheckSamusInRange: @ 0x080276A8
	push {r4, lr}
	ldr r4, _080276C8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802770C
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _080276CC
	subs r0, #1
	strb r0, [r1]
	b _0802770C
	.align 2, 0
_080276C8: .4byte gCurrentSprite
_080276CC:
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _0802770C
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x2a
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #0
	beq _080276F4
	ldr r0, _080276F0 @ =0x08319030
	b _080276F6
	.align 2, 0
_080276F0: .4byte 0x08319030
_080276F4:
	ldr r0, _08027714 @ =0x08318F78
_080276F6:
	str r0, [r4, #0x18]
	ldr r0, _08027718 @ =gCurrentSprite
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0x1e
	strb r1, [r0]
	ldr r0, _0802771C @ =0x00000161
	bl CheckPlayNotAlreadyPlayingSound
_0802770C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08027714: .4byte 0x08318F78
_08027718: .4byte gCurrentSprite
_0802771C: .4byte 0x00000161

	thumb_func_start SciserShooting
SciserShooting: @ 0x08027720
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r2, _08027750 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802775C
	ldr r1, [r2, #0x18]
	ldr r0, _08027754 @ =0x08319030
	cmp r1, r0
	bne _08027798
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0802774C
	b _080278CA
_0802774C:
	ldr r0, _08027758 @ =0x08319000
	b _0802777A
	.align 2, 0
_08027750: .4byte gCurrentSprite
_08027754: .4byte 0x08319030
_08027758: .4byte 0x08319000
_0802775C:
	ldr r1, [r2, #0x18]
	ldr r0, _08027790 @ =0x08318F78
	cmp r1, r0
	bne _08027798
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08027778
	b _080278CA
_08027778:
	ldr r0, _08027794 @ =0x08318F48
_0802777A:
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	movs r0, #0x3c
	strb r0, [r3]
	movs r0, #0xb1
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _080278CA
	.align 2, 0
_08027790: .4byte 0x08318F78
_08027794: .4byte 0x08318F48
_08027798:
	ldr r5, _080277F0 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x32
	beq _080277A6
	b _080278AC
_080277A6:
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r4, [r0]
	cmp r4, #0
	beq _08027826
	ldrh r1, [r5]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080277F4
	ldrb r2, [r5, #0x1f]
	adds r6, r5, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	subs r0, #0x30
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r0, #4
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	adds r0, #0x30
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	str r4, [sp, #8]
	b _08027868
	.align 2, 0
_080277F0: .4byte gCurrentSprite
_080277F4:
	ldrb r2, [r5, #0x1f]
	adds r6, r5, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	subs r0, #0x30
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x40
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #4
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	adds r0, #0x30
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x40
	str r0, [sp, #4]
	str r4, [sp, #8]
	b _08027868
_08027826:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _08027872
	ldrb r2, [r5, #0x1f]
	adds r6, r5, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	adds r0, #0x40
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x30
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #4
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	adds r0, #0x40
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x30
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
_08027868:
	movs r0, #4
	movs r1, #1
	bl SpriteSpawnSecondary
	b _080278AC
_08027872:
	ldrb r2, [r5, #0x1f]
	adds r4, r5, #0
	adds r4, #0x23
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	subs r0, #0x40
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x30
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #4
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	subs r0, #0x40
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x30
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #4
	movs r1, #0
	bl SpriteSpawnSecondary
_080278AC:
	ldr r1, _080278D4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080278CA
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
	movs r0, #0x78
	strb r0, [r2]
_080278CA:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080278D4: .4byte gCurrentSprite

	thumb_func_start SciserTurningIntoX
SciserTurningIntoX: @ 0x080278D8
	push {lr}
	ldr r2, _080278F8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027904
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080278FC
	ldrh r0, [r2, #4]
	subs r0, #0x28
	strh r0, [r2, #4]
	b _0802791C
	.align 2, 0
_080278F8: .4byte gCurrentSprite
_080278FC:
	ldrh r0, [r2, #4]
	adds r0, #0x28
	strh r0, [r2, #4]
	b _0802791C
_08027904:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08027916
	ldrh r0, [r2, #2]
	adds r0, #0x28
	b _0802791A
_08027916:
	ldrh r0, [r2, #2]
	subs r0, #0x28
_0802791A:
	strh r0, [r2, #2]
_0802791C:
	pop {r0}
	bx r0

	thumb_func_start SciserInit
SciserInit: @ 0x08027920
	push {r4, r5, r6, r7, lr}
	bl TrySetAbsorbXFlag
	ldr r4, _0802793C @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #0x59
	bne _08027940
	movs r0, #0x5a
	strb r0, [r5]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _080279FE
	.align 2, 0
_0802793C: .4byte gCurrentSprite
_08027940:
	bl SpriteUtilChooseRandomXDirection
	movs r0, #2
	strb r0, [r5]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08027968 @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	movs r7, #0xf0
	adds r5, r7, #0
	ands r5, r0
	cmp r5, #0
	beq _0802796C
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	b _080279FE
	.align 2, 0
_08027968: .4byte gPreviousCollisionCheck
_0802796C:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0802799A
	adds r0, r4, #0
	adds r0, #0x2d
	strb r5, [r0]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	b _080279FE
_0802799A:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080279C6
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	strh r0, [r4, #4]
	b _080279FE
_080279C6:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	adds r2, r7, #0
	ands r2, r0
	cmp r2, #0
	beq _080279FA
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x20
	strh r0, [r4, #4]
	b _080279FE
_080279FA:
	strh r2, [r4]
	b _08027A90
_080279FE:
	ldr r3, _08027A34 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08027A38
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	subs r1, #1
	movs r0, #3
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	b _08027A58
	.align 2, 0
_08027A34: .4byte gCurrentSprite
_08027A38:
	ldrh r1, [r3]
	ldr r0, _08027A98 @ =0x00007FFF
	ands r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x21
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	adds r1, #0x13
	movs r0, #1
	strb r0, [r1]
_08027A58:
	bl SciserSetCrawlingGFX
	bl SciserUpdateHitbox
	ldr r3, _08027A9C @ =gCurrentSprite
	ldr r2, _08027AA0 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #9
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_08027A90:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08027A98: .4byte 0x00007FFF
_08027A9C: .4byte gCurrentSprite
_08027AA0: .4byte sPrimarySpriteStats

	thumb_func_start SciserCrawlingInit
SciserCrawlingInit: @ 0x08027AA4
	push {lr}
	bl SciserSetCrawlingGFX
	ldr r0, _08027AB8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08027AB8: .4byte gCurrentSprite

	thumb_func_start SciserCrawling
SciserCrawling: @ 0x08027ABC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r4, _08027AEC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	adds r2, r4, #0
	cmp r0, #0
	beq _08027B38
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027AF4
	ldr r1, _08027AF0 @ =0x08317648
	b _08027AF6
	.align 2, 0
_08027AEC: .4byte gCurrentSprite
_08027AF0: .4byte 0x08317648
_08027AF4:
	ldr r1, _08027B18 @ =0x08317630
_08027AF6:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsrs r0, r0, #3
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027B1C
	ldrh r0, [r2, #2]
	adds r0, r0, r1
	strh r0, [r2, #2]
	b _08027B22
	.align 2, 0
_08027B18: .4byte 0x08317630
_08027B1C:
	ldrh r0, [r2, #4]
	adds r0, r0, r1
	strh r0, [r2, #4]
_08027B22:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0x5e
	bhi _08027B32
	adds r0, #1
	strb r0, [r1]
	b _08027E70
_08027B32:
	movs r0, #0
	strb r0, [r1]
	b _08027E70
_08027B38:
	movs r7, #0
	bl SciserCheckCollisions
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08027B4E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _08027E70
_08027B4E:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	bne _08027C30
	ldrh r1, [r4, #2]
	ldrh r2, [r4, #4]
	ldrh r0, [r4, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r4, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0x14]
	ldrh r0, [r4, #0xe]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sl, r0
	ldrh r0, [r4, #0x10]
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov sb, r2
	movs r6, #0
	mov r8, r4
_08027B88:
	mov r0, r8
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r6, r0
	beq _08027BFA
	ldr r1, _08027C08 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r5, r0, r1
	ldrh r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08027BFA
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x82
	ands r0, r1
	cmp r0, #0
	bne _08027BFA
	ldrb r0, [r5, #0x1d]
	cmp r0, #0x3c
	beq _08027BBE
	cmp r0, #0x8b
	bne _08027BFA
_08027BBE:
	ldrh r3, [r5, #2]
	ldrh r4, [r5, #4]
	ldrh r2, [r5, #0xa]
	adds r2, r3, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldrh r0, [r5, #0xc]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	ldrh r1, [r5, #0xe]
	adds r1, r4, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r5, #0x10]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r2, [sp]
	str r3, [sp, #4]
	str r1, [sp, #8]
	str r4, [sp, #0xc]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r2, sl
	mov r3, sb
	bl CheckObjectsTouching
	cmp r0, #0
	bne _08027C0C
_08027BFA:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0x17
	bls _08027B88
	b _08027C34
	.align 2, 0
_08027C08: .4byte gSpriteData
_08027C0C:
	ldrh r0, [r5]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r2, r1, #0
	eors r0, r2
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x2f
	movs r1, #0x78
	strb r1, [r0]
	mov r3, r8
	ldrh r0, [r3]
	eors r0, r2
	strh r0, [r3]
	mov r0, r8
	adds r0, #0x2f
	strb r1, [r0]
	b _08027C34
_08027C30:
	subs r0, #1
	strb r0, [r1]
_08027C34:
	ldr r4, _08027C78 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _08027C42
	b _08027D48
_08027C42:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08027CC0
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027C80
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027C7C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08027C6E
	b _08027E40
_08027C6E:
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	b _08027CEA
	.align 2, 0
_08027C78: .4byte gCurrentSprite
_08027C7C: .4byte gPreviousCollisionCheck
_08027C80:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027CBC @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08027C98
	b _08027E40
_08027C98:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08027CB0
	b _08027E40
_08027CB0:
	ldrh r0, [r4, #2]
	movs r1, #1
	subs r0, r0, r1
	strh r0, [r4, #2]
	b _08027E54
	.align 2, 0
_08027CBC: .4byte gPreviousCollisionCheck
_08027CC0:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027D08
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027D04 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08027CE4
	b _08027E40
_08027CE4:
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
_08027CEA:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08027CFA
	b _08027E40
_08027CFA:
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	b _08027E54
	.align 2, 0
_08027D04: .4byte gPreviousCollisionCheck
_08027D08:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027D44 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08027D22
	b _08027E40
_08027D22:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08027D38
	b _08027E40
_08027D38:
	ldrh r0, [r4, #2]
	movs r2, #1
	subs r0, r0, r2
	strh r0, [r4, #2]
	b _08027E54
	.align 2, 0
_08027D44: .4byte gPreviousCollisionCheck
_08027D48:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08027DD4
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027D98
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027D94 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08027E40
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08027E40
	ldrh r0, [r4, #4]
	adds r0, #1
	b _08027E52
	.align 2, 0
_08027D94: .4byte gPreviousCollisionCheck
_08027D98:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027DD0 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08027E40
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08027E40
	ldrh r0, [r4, #4]
	movs r3, #1
	subs r0, r0, r3
	b _08027E52
	.align 2, 0
_08027DD0: .4byte gPreviousCollisionCheck
_08027DD4:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08027E14
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027E10 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08027E40
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08027E40
	ldrh r0, [r4, #4]
	adds r0, #1
	b _08027E52
	.align 2, 0
_08027E10: .4byte gPreviousCollisionCheck
_08027E14:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08027E48 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08027E40
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08027E4C
_08027E40:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	b _08027E54
	.align 2, 0
_08027E48: .4byte gPreviousCollisionCheck
_08027E4C:
	ldrh r0, [r4, #4]
	movs r1, #1
	subs r0, r0, r1
_08027E52:
	strh r0, [r4, #4]
_08027E54:
	cmp r7, #0
	beq _08027E6C
	ldr r2, _08027E80 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
_08027E6C:
	bl SciserCheckSamusInRange
_08027E70:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08027E80: .4byte gCurrentSprite

	thumb_func_start SciserIdleInit
SciserIdleInit: @ 0x08027E84
	push {lr}
	ldr r0, _08027E98 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
	bl SciserSetIdleGFX
	pop {r0}
	bx r0
	.align 2, 0
_08027E98: .4byte gCurrentSprite

	thumb_func_start SciserIdle
SciserIdle: @ 0x08027E9C
	push {lr}
	bl SciserCheckCollisions
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08027EB4
	ldr r0, _08027EB0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _08027EC2
	.align 2, 0
_08027EB0: .4byte gCurrentSprite
_08027EB4:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08027EC4
	ldr r0, _08027EC8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
_08027EC2:
	strb r1, [r0]
_08027EC4:
	pop {r0}
	bx r0
	.align 2, 0
_08027EC8: .4byte gCurrentSprite

	thumb_func_start SciserFallingInit
SciserFallingInit: @ 0x08027ECC
	push {lr}
	ldr r1, _08027EE8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bl SciserSetIdleGFX
	pop {r0}
	bx r0
	.align 2, 0
_08027EE8: .4byte gCurrentSprite

	thumb_func_start SciserFalling
SciserFalling: @ 0x08027EEC
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _08027F14 @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027F18
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08027F24
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _08027F24
	.align 2, 0
_08027F14: .4byte gCurrentSprite
_08027F18:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08027F2C
_08027F24:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_08027F2C:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08027F78 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08027FBE
	ldr r4, _08027F7C @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _08027F52
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08027F52:
	ldrh r0, [r4]
	ldr r1, _08027F80 @ =0x0000FEFF
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strb r0, [r2]
	bl SciserUpdateHitbox
	cmp r5, #0
	beq _08027F8C
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08027F84
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _08027F88
	.align 2, 0
_08027F78: .4byte gPreviousVerticalCollisionCheck
_08027F7C: .4byte gCurrentSprite
_08027F80: .4byte 0x0000FEFF
_08027F84:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_08027F88:
	subs r0, r0, r1
	strh r0, [r4, #4]
_08027F8C:
	ldr r2, _08027FAC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _08027FB0
	adds r0, r2, #0
	adds r0, #0x24
	strb r3, [r0]
	bl SciserSetCrawlingGFX
	b _08028000
	.align 2, 0
_08027FAC: .4byte gCurrentSprite
_08027FB0:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bl SciserSetIdleGFX
	b _08028000
_08027FBE:
	ldr r3, _08027FE8 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08027FEC @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08027FF0 @ =0x00007FFF
	cmp r1, r0
	bne _08027FF4
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08027FFE
	.align 2, 0
_08027FE8: .4byte gCurrentSprite
_08027FEC: .4byte sSpritesFallingSpeed
_08027FF0: .4byte 0x00007FFF
_08027FF4:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_08027FFE:
	strh r0, [r3, #2]
_08028000:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SciserProjectileInit
SciserProjectileInit: @ 0x08028008
	push {r4, lr}
	ldr r0, _0802806C @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08028070 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08028074 @ =0x0000FFF8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _08028078 @ =0x08318EF0
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802806C: .4byte gCurrentSprite
_08028070: .4byte 0x0000FFFB
_08028074: .4byte 0x0000FFF8
_08028078: .4byte 0x08318EF0

	thumb_func_start SciserProjectileFalling
SciserProjectileFalling: @ 0x0802807C
	push {r4, r5, r6, lr}
	ldr r1, _080280A4 @ =gCurrentClipdataAffectingAction
	movs r0, #5
	strb r0, [r1]
	ldr r4, _080280A8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080280AC @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _080280B0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _08028152
	.align 2, 0
_080280A4: .4byte gCurrentClipdataAffectingAction
_080280A8: .4byte gCurrentSprite
_080280AC: .4byte gPreviousCollisionCheck
_080280B0:
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _080280F8
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _080280E0 @ =0x08317692
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080280E4 @ =0x00007FFF
	cmp r1, r0
	bne _080280E8
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _080280F2
	.align 2, 0
_080280E0: .4byte 0x08317692
_080280E4: .4byte 0x00007FFF
_080280E8:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_080280F2:
	strh r0, [r4, #2]
	movs r3, #8
	b _08028136
_080280F8:
	movs r6, #0x31
	adds r6, r6, r4
	mov ip, r6
	ldrb r2, [r6]
	ldr r5, _08028120 @ =0x08317660
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08028124 @ =0x00007FFF
	cmp r1, r0
	bne _08028128
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08028132
	.align 2, 0
_08028120: .4byte 0x08317660
_08028124: .4byte 0x00007FFF
_08028128:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_08028132:
	strh r0, [r4, #2]
	movs r3, #4
_08028136:
	ldr r2, _08028148 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802814C
	ldrh r0, [r2, #4]
	adds r0, r3, r0
	b _08028150
	.align 2, 0
_08028148: .4byte gCurrentSprite
_0802814C:
	ldrh r0, [r2, #4]
	subs r0, r0, r3
_08028150:
	strh r0, [r2, #4]
_08028152:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start SciserProjectileExplodingInit
SciserProjectileExplodingInit: @ 0x08028158
	push {lr}
	ldr r3, _08028188 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x21
	movs r0, #1
	strb r0, [r1]
	ldr r1, _0802818C @ =gFrameCounter8Bit
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08028194
	ldr r0, _08028190 @ =0x083190C8
	b _08028196
	.align 2, 0
_08028188: .4byte gCurrentSprite
_0802818C: .4byte gSpriteRandomNumber
_08028190: .4byte 0x083190C8
_08028194:
	ldr r0, _0802819C @ =0x083190F0
_08028196:
	str r0, [r3, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0802819C: .4byte 0x083190F0

	thumb_func_start SciserProjectileExploding
SciserProjectileExploding: @ 0x080281A0
	push {r4, lr}
	ldr r4, _080281C0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080281B8
	movs r0, #0
	strh r0, [r4]
_080281B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080281C0: .4byte gCurrentSprite

	thumb_func_start Sciser
Sciser: @ 0x080281C4
	push {lr}
	ldr r2, _080281E4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _080281F2
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x8b
	bne _080281EC
	ldr r0, _080281E8 @ =0x000001B1
	bl CheckPlayNotAlreadyPlayingSound
	b _080281F2
	.align 2, 0
_080281E4: .4byte gCurrentSprite
_080281E8: .4byte 0x000001B1
_080281EC:
	ldr r0, _08028204 @ =0x00000163
	bl CheckPlayNotAlreadyPlayingSound
_080281F2:
	ldr r1, _08028208 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802820C
	bl SpriteUpdateFreezeTimer
	b _080283DE
	.align 2, 0
_08028204: .4byte 0x00000163
_08028208: .4byte gCurrentSprite
_0802820C:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08028218
	b _080283DE
_08028218:
	lsls r0, r0, #2
	ldr r1, _08028224 @ =_08028228
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08028224: .4byte _08028228
_08028228: @ jump table
	.4byte _08028398 @ case 0
	.4byte _0802839E @ case 1
	.4byte _080283A2 @ case 2
	.4byte _080283DE @ case 3
	.4byte _080283DE @ case 4
	.4byte _080283DE @ case 5
	.4byte _080283DE @ case 6
	.4byte _080283A8 @ case 7
	.4byte _080283AC @ case 8
	.4byte _080283DE @ case 9
	.4byte _080283DE @ case 10
	.4byte _080283DE @ case 11
	.4byte _080283DE @ case 12
	.4byte _080283DE @ case 13
	.4byte _080283DE @ case 14
	.4byte _080283DE @ case 15
	.4byte _080283DE @ case 16
	.4byte _080283DE @ case 17
	.4byte _080283DE @ case 18
	.4byte _080283DE @ case 19
	.4byte _080283DE @ case 20
	.4byte _080283B2 @ case 21
	.4byte _080283B6 @ case 22
	.4byte _080283DE @ case 23
	.4byte _080283DE @ case 24
	.4byte _080283DE @ case 25
	.4byte _080283DE @ case 26
	.4byte _080283DE @ case 27
	.4byte _080283DE @ case 28
	.4byte _080283DE @ case 29
	.4byte _080283DE @ case 30
	.4byte _080283DE @ case 31
	.4byte _080283DE @ case 32
	.4byte _080283DE @ case 33
	.4byte _080283DE @ case 34
	.4byte _080283DE @ case 35
	.4byte _080283DE @ case 36
	.4byte _080283DE @ case 37
	.4byte _080283DE @ case 38
	.4byte _080283DE @ case 39
	.4byte _080283DE @ case 40
	.4byte _080283DE @ case 41
	.4byte _080283BC @ case 42
	.4byte _080283DE @ case 43
	.4byte _080283DE @ case 44
	.4byte _080283DE @ case 45
	.4byte _080283DE @ case 46
	.4byte _080283DE @ case 47
	.4byte _080283DE @ case 48
	.4byte _080283DE @ case 49
	.4byte _080283DE @ case 50
	.4byte _080283DE @ case 51
	.4byte _080283DE @ case 52
	.4byte _080283DE @ case 53
	.4byte _080283DE @ case 54
	.4byte _080283DE @ case 55
	.4byte _080283DE @ case 56
	.4byte _080283DE @ case 57
	.4byte _080283DE @ case 58
	.4byte _080283DE @ case 59
	.4byte _080283DE @ case 60
	.4byte _080283DE @ case 61
	.4byte _080283DE @ case 62
	.4byte _080283DE @ case 63
	.4byte _080283DE @ case 64
	.4byte _080283DE @ case 65
	.4byte _080283DE @ case 66
	.4byte _080283DE @ case 67
	.4byte _080283DE @ case 68
	.4byte _080283DE @ case 69
	.4byte _080283DE @ case 70
	.4byte _080283DE @ case 71
	.4byte _080283DE @ case 72
	.4byte _080283DE @ case 73
	.4byte _080283DE @ case 74
	.4byte _080283DE @ case 75
	.4byte _080283DE @ case 76
	.4byte _080283DE @ case 77
	.4byte _080283DE @ case 78
	.4byte _080283DE @ case 79
	.4byte _080283DE @ case 80
	.4byte _080283DE @ case 81
	.4byte _080283DE @ case 82
	.4byte _080283DE @ case 83
	.4byte _080283DE @ case 84
	.4byte _080283DE @ case 85
	.4byte _080283DE @ case 86
	.4byte _080283C2 @ case 87
	.4byte _080283C6 @ case 88
	.4byte _080283CC @ case 89
	.4byte _080283D0 @ case 90
	.4byte _080283D6 @ case 91
_08028398:
	bl SciserInit
	b _080283DE
_0802839E:
	bl SciserCrawlingInit
_080283A2:
	bl SciserCrawling
	b _080283DE
_080283A8:
	bl SciserIdleInit
_080283AC:
	bl SciserIdle
	b _080283DE
_080283B2:
	bl SciserFallingInit
_080283B6:
	bl SciserFalling
	b _080283DE
_080283BC:
	bl SciserShooting
	b _080283DE
_080283C2:
	bl SpriteDyingInit
_080283C6:
	bl SpriteDying
	b _080283DE
_080283CC:
	bl SciserInit
_080283D0:
	bl SpriteSpawningFromX
	b _080283DE
_080283D6:
	bl SciserTurningIntoX
	bl XParasiteInit
_080283DE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SciserProjectile
SciserProjectile: @ 0x080283E4
	push {lr}
	ldr r0, _080283FC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0802840A
	cmp r0, #2
	bgt _08028400
	cmp r0, #0
	beq _08028406
	b _08028416
	.align 2, 0
_080283FC: .4byte gCurrentSprite
_08028400:
	cmp r0, #0x38
	beq _08028410
	b _08028416
_08028406:
	bl SciserProjectileInit
_0802840A:
	bl SciserProjectileFalling
	b _0802841A
_08028410:
	bl SciserProjectileExploding
	b _0802841A
_08028416:
	bl SciserProjectileExplodingInit
_0802841A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SidehopperCheckSamusInRange
SidehopperCheckSamusInRange: @ 0x08028420
	push {r4, lr}
	movs r4, #0
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08028438
	movs r4, #1
	bl MakeSpriteFaceSamusDirection
_08028438:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start SidehopperInit
SidehopperInit: @ 0x08028440
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0802846C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08028470
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08028470
	strh r0, [r2]
	b _0802853A
	.align 2, 0
_0802846C: .4byte gCurrentSprite
_08028470:
	ldr r1, _08028488 @ =gCurrentSprite
	adds r5, r1, #0
	adds r5, #0x24
	ldrb r0, [r5]
	adds r4, r1, #0
	cmp r0, #0x59
	bne _0802848C
	movs r0, #0x5a
	strb r0, [r5]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _080284C0
	.align 2, 0
_08028488: .4byte gCurrentSprite
_0802848C:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080284E4 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _080284B4
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
_080284B4:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
	movs r0, #8
	strb r0, [r5]
_080284C0:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080284EC
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	movs r0, #0x58
	strh r0, [r4, #0xc]
	ldr r0, _080284E8 @ =0x0000FFE0
	strh r0, [r4, #0xa]
	b _08028502
	.align 2, 0
_080284E4: .4byte gPreviousCollisionCheck
_080284E8: .4byte 0x0000FFE0
_080284EC:
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08028540 @ =0x0000FFA8
	strh r0, [r4, #0xa]
	movs r0, #0x20
	strh r0, [r4, #0xc]
_08028502:
	adds r1, r4, #0
	adds r1, #0x29
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _08028544 @ =0x0000FFC0
	strh r0, [r4, #0xe]
	movs r0, #0x40
	strh r0, [r4, #0x10]
	ldr r0, _08028548 @ =0x0831ACA0
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	ldr r2, _0802854C @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	bl SpriteUtilChooseRandomXDirection
_0802853A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08028540: .4byte 0x0000FFA8
_08028544: .4byte 0x0000FFC0
_08028548: .4byte 0x0831ACA0
_0802854C: .4byte sPrimarySpriteStats

	thumb_func_start SidehopperPreparingtoJumpInit
SidehopperPreparingtoJumpInit: @ 0x08028550
	ldr r1, _08028568 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0802856C @ =0x0831AD10
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_08028568: .4byte gCurrentSprite
_0802856C: .4byte 0x0831AD10

	thumb_func_start SidehopperJumpingInit
SidehopperJumpingInit: @ 0x08028570
	push {r4, lr}
	ldr r3, _080285A4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r4, #0
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x31
	strb r4, [r0]
	ldr r0, _080285A8 @ =0x0831AD30
	str r0, [r3, #0x18]
	ldr r0, _080285AC @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080285B0
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	b _080285B6
	.align 2, 0
_080285A4: .4byte gCurrentSprite
_080285A8: .4byte 0x0831AD30
_080285AC: .4byte gSpriteRandomNumber
_080285B0:
	adds r0, r3, #0
	adds r0, #0x30
	strb r4, [r0]
_080285B6:
	movs r0, #0xbd
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SidehopperLandingInit
SidehopperLandingInit: @ 0x080285C4
	push {lr}
	ldr r1, _080285E4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _080285E8 @ =0x0831AD50
	str r0, [r1, #0x18]
	ldr r0, _080285EC @ =0x0000017B
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_080285E4: .4byte gCurrentSprite
_080285E8: .4byte 0x0831AD50
_080285EC: .4byte 0x0000017B

	thumb_func_start SidehopperIdle
SidehopperIdle: @ 0x080285F0
	push {lr}
	bl SidehopperCheckSamusInRange
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _08028604
	bl SidehopperPreparingtoJumpInit
	b _0802864C
_08028604:
	ldr r2, _0802863C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	movs r0, #0
	strh r3, [r2, #0x16]
	adds r1, #0xa
	strb r0, [r1]
	ldr r0, _08028640 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	adds r3, r2, #0
	adds r3, #0x2f
	strb r0, [r3]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #7
	bls _08028648
	ldr r0, _08028644 @ =0x0831ACC8
	str r0, [r2, #0x18]
	movs r0, #0xbe
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0802864C
	.align 2, 0
_0802863C: .4byte gCurrentSprite
_08028640: .4byte gSpriteRandomNumber
_08028644: .4byte 0x0831ACC8
_08028648:
	ldr r0, _08028650 @ =0x0831ACA0
	str r0, [r2, #0x18]
_0802864C:
	pop {r0}
	bx r0
	.align 2, 0
_08028650: .4byte 0x0831ACA0

	thumb_func_start SidehopperFallingInit
SidehopperFallingInit: @ 0x08028654
	ldr r3, _08028670 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x16
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r0, #0
	strh r2, [r3, #0x16]
	adds r1, #0xd
	strb r0, [r1]
	ldr r0, _08028674 @ =0x0831AD30
	str r0, [r3, #0x18]
	bx lr
	.align 2, 0
_08028670: .4byte gCurrentSprite
_08028674: .4byte 0x0831AD30

	thumb_func_start SidehopperPreparingToJumpGround
SidehopperPreparingToJumpGround: @ 0x08028678
	push {r4, r5, lr}
	ldr r4, _080286B8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _080286CC
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080286BC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _080286C0
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _080286C0
	bl SidehopperFallingInit
	b _080286CC
	.align 2, 0
_080286B8: .4byte gCurrentSprite
_080286BC: .4byte gPreviousCollisionCheck
_080286C0:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080286CC
	bl SidehopperJumpingInit
_080286CC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SidehopperPreparingToJumpCeiling
SidehopperPreparingToJumpCeiling: @ 0x080286D4
	push {lr}
	ldr r0, _080286F4 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _080286F0
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080286F0
	bl SidehopperJumpingInit
_080286F0:
	pop {r0}
	bx r0
	.align 2, 0
_080286F4: .4byte gCurrentSprite

	thumb_func_start SidehopperJumpingGround
SidehopperJumpingGround: @ 0x080286F8
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r2, _0802870C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _08028714
	ldr r1, _08028710 @ =0x0831A16C
	b _08028716
	.align 2, 0
_0802870C: .4byte gCurrentSprite
_08028710: .4byte 0x0831A16C
_08028714:
	ldr r1, _08028758 @ =0x0831A158
_08028716:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r4, _0802875C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08028778
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08028760 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08028764
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	b _0802879C
	.align 2, 0
_08028758: .4byte 0x0831A158
_0802875C: .4byte gCurrentSprite
_08028760: .4byte gPreviousCollisionCheck
_08028764:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _08028772
	ldrh r0, [r4, #4]
	adds r0, #4
	b _080287BA
_08028772:
	ldrh r0, [r4, #4]
	adds r0, #5
	b _080287BA
_08028778:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080287A4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080287A8
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
_0802879C:
	strh r0, [r4, #4]
	lsls r1, r5, #0x10
	b _080287BC
	.align 2, 0
_080287A4: .4byte gPreviousCollisionCheck
_080287A8:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _080287B6
	ldrh r0, [r4, #4]
	subs r0, #4
	b _080287BA
_080287B6:
	ldrh r0, [r4, #4]
	subs r0, #5
_080287BA:
	strh r0, [r4, #4]
_080287BC:
	ldr r4, _08028800 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0x26
	bhi _080287D2
	adds r0, #1
	strb r0, [r2]
_080287D2:
	cmp r1, #0
	ble _0802884C
	cmp r6, #0
	beq _080287E6
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r4]
_080287E6:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _08028804 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _08028808
	strh r1, [r4, #2]
	bl SidehopperLandingInit
	b _080288CA
	.align 2, 0
_08028800: .4byte gCurrentSprite
_08028804: .4byte gPreviousVerticalCollisionCheck
_08028808:
	cmp r6, #0
	bne _080288CA
	ldrh r0, [r4, #2]
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802883E
	ldrh r0, [r4, #2]
	movs r3, #0xe
	ldrsh r1, [r4, r3]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802883A
	movs r6, #1
_0802883A:
	cmp r6, #0
	beq _080288CA
_0802883E:
	ldr r0, _08028848 @ =gCurrentSprite
	strh r1, [r0, #2]
	bl SidehopperLandingInit
	b _080288CA
	.align 2, 0
_08028848: .4byte gCurrentSprite
_0802884C:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802888C
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08028888 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080288B8
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	strh r0, [r4, #4]
	bl SidehopperFallingInit
	b _080288B8
	.align 2, 0
_08028888: .4byte gPreviousCollisionCheck
_0802888C:
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080288D0 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080288B8
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
	strh r0, [r4, #4]
	bl SidehopperFallingInit
_080288B8:
	cmp r6, #0
	beq _080288CA
	ldr r0, _080288D4 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
_080288CA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080288D0: .4byte gPreviousCollisionCheck
_080288D4: .4byte gCurrentSprite

	thumb_func_start SidehopperJumpingCeiling
SidehopperJumpingCeiling: @ 0x080288D8
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	ldr r2, _080288EC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080288F4
	ldr r1, _080288F0 @ =0x0831A16C
	b _080288F6
	.align 2, 0
_080288EC: .4byte gCurrentSprite
_080288F0: .4byte 0x0831A16C
_080288F4:
	ldr r1, _08028938 @ =0x0831A158
_080288F6:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r4, _0802893C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08028958
	ldrh r0, [r4, #2]
	adds r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08028940 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08028944
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	b _0802897C
	.align 2, 0
_08028938: .4byte 0x0831A158
_0802893C: .4byte gCurrentSprite
_08028940: .4byte gPreviousCollisionCheck
_08028944:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _08028952
	ldrh r0, [r4, #4]
	adds r0, #4
	b _0802899A
_08028952:
	ldrh r0, [r4, #4]
	adds r0, #5
	b _0802899A
_08028958:
	ldrh r0, [r4, #2]
	adds r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08028984 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08028988
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
_0802897C:
	strh r0, [r4, #4]
	lsls r1, r5, #0x10
	b _0802899C
	.align 2, 0
_08028984: .4byte gPreviousCollisionCheck
_08028988:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _08028996
	ldrh r0, [r4, #4]
	subs r0, #4
	b _0802899A
_08028996:
	ldrh r0, [r4, #4]
	subs r0, #5
_0802899A:
	strh r0, [r4, #4]
_0802899C:
	ldr r4, _080289F0 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, r0, r5
	strh r0, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0x26
	bhi _080289B2
	adds r0, #1
	strb r0, [r2]
_080289B2:
	cmp r1, #0
	bge _08028A40
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080289F8
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080289F4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08028A24
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	strh r0, [r4, #4]
	bl SidehopperFallingInit
	b _08028A24
	.align 2, 0
_080289F0: .4byte gCurrentSprite
_080289F4: .4byte gPreviousCollisionCheck
_080289F8:
	movs r3, #0xc
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08028A38 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08028A24
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
	strh r0, [r4, #4]
	bl SidehopperFallingInit
_08028A24:
	cmp r7, #0
	beq _08028AC2
	ldr r0, _08028A3C @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
	b _08028AC2
	.align 2, 0
_08028A38: .4byte gPreviousCollisionCheck
_08028A3C: .4byte gCurrentSprite
_08028A40:
	cmp r7, #0
	beq _08028A50
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r4]
_08028A50:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r5, _08028A74 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08028A78
	adds r0, r2, #0
	adds r0, #0x40
	strh r0, [r4, #2]
	bl SidehopperLandingInit
	b _08028AC2
	.align 2, 0
_08028A74: .4byte gPreviousVerticalCollisionCheck
_08028A78:
	cmp r7, #0
	bne _08028AC2
	ldrh r0, [r4, #2]
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08028AB6
	ldrh r0, [r4, #2]
	movs r3, #0xe
	ldrsh r1, [r4, r3]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08028AB2
	movs r7, #1
_08028AB2:
	cmp r7, #0
	beq _08028AC2
_08028AB6:
	ldr r1, _08028AC8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x40
	strh r0, [r1, #2]
	bl SidehopperLandingInit
_08028AC2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08028AC8: .4byte gCurrentSprite

	thumb_func_start SidehopperLanding
SidehopperLanding: @ 0x08028ACC
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08028ADA
	bl SidehopperIdle
_08028ADA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SidehopperFallingGround
SidehopperFallingGround: @ 0x08028AE0
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r4, _08028B34 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _08028B38 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08028B2A
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _08028B2A
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _08028B26
	movs r6, #1
_08028B26:
	cmp r6, #0
	beq _08028B3C
_08028B2A:
	ldr r0, _08028B34 @ =gCurrentSprite
	strh r1, [r0, #2]
	bl SidehopperLandingInit
	b _08028B7C
	.align 2, 0
_08028B34: .4byte gCurrentSprite
_08028B38: .4byte gPreviousVerticalCollisionCheck
_08028B3C:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08028B68 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08028B6C @ =0x00007FFF
	cmp r1, r0
	bne _08028B70
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _08028B7C
	.align 2, 0
_08028B68: .4byte sSpritesFallingSpeed
_08028B6C: .4byte 0x00007FFF
_08028B70:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_08028B7C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SidehopperFallingCeiling
SidehopperFallingCeiling: @ 0x08028B84
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r4, _08028BDC @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r5, _08028BE0 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08028BCE
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _08028BCE
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _08028BCA
	movs r6, #1
_08028BCA:
	cmp r6, #0
	beq _08028BE4
_08028BCE:
	ldr r1, _08028BDC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x40
	strh r0, [r1, #2]
	bl SidehopperLandingInit
	b _08028C24
	.align 2, 0
_08028BDC: .4byte gCurrentSprite
_08028BE0: .4byte gPreviousVerticalCollisionCheck
_08028BE4:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08028C10 @ =sSpritesFallingSpeedCeiling
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08028C14 @ =0x00007FFF
	cmp r1, r0
	bne _08028C18
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _08028C24
	.align 2, 0
_08028C10: .4byte sSpritesFallingSpeedCeiling
_08028C14: .4byte 0x00007FFF
_08028C18:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_08028C24:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SidehopperIdleGround
SidehopperIdleGround: @ 0x08028C2C
	push {r4, r5, lr}
	bl SidehopperCheckSamusInRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08028C96
	ldr r4, _08028C6C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08028C70 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08028C74
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08028C74
	bl SidehopperFallingInit
	b _08028CB0
	.align 2, 0
_08028C6C: .4byte gCurrentSprite
_08028C70: .4byte gPreviousCollisionCheck
_08028C74:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08028CB0
	ldr r2, _08028C9C @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	adds r1, r2, #0
	adds r1, #0x2f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r1, [r1]
	cmp r0, r1
	bne _08028CA0
_08028C96:
	bl SidehopperPreparingtoJumpInit
	b _08028CB0
	.align 2, 0
_08028C9C: .4byte gCurrentSprite
_08028CA0:
	ldr r1, [r2, #0x18]
	ldr r0, _08028CB8 @ =0x0831ACC8
	cmp r1, r0
	bne _08028CB0
	movs r0, #0xbe
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08028CB0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08028CB8: .4byte 0x0831ACC8

	thumb_func_start SidehopperIdleCeiling
SidehopperIdleCeiling: @ 0x08028CBC
	push {lr}
	bl SidehopperCheckSamusInRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08028CEA
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08028D04
	ldr r2, _08028CF0 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	adds r1, r2, #0
	adds r1, #0x2f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r1, [r1]
	cmp r0, r1
	bne _08028CF4
_08028CEA:
	bl SidehopperPreparingtoJumpInit
	b _08028D04
	.align 2, 0
_08028CF0: .4byte gCurrentSprite
_08028CF4:
	ldr r1, [r2, #0x18]
	ldr r0, _08028D08 @ =0x0831ACC8
	cmp r1, r0
	bne _08028D04
	movs r0, #0xbe
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08028D04:
	pop {r0}
	bx r0
	.align 2, 0
_08028D08: .4byte 0x0831ACC8

	thumb_func_start Sidehopper
Sidehopper: @ 0x08028D0C
	push {r4, lr}
	ldr r4, _08028D34 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08028D24
	ldr r0, _08028D38 @ =0x0000017D
	bl CheckPlayNotAlreadyPlayingSound
_08028D24:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08028D3C
	bl SpriteUpdateFreezeTimer
	b _08028F8E
	.align 2, 0
_08028D34: .4byte gCurrentSprite
_08028D38: .4byte 0x0000017D
_08028D3C:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08028D48
	b _08028F8E
_08028D48:
	lsls r0, r0, #2
	ldr r1, _08028D54 @ =_08028D58
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08028D54: .4byte _08028D58
_08028D58: @ jump table
	.4byte _08028EC8 @ case 0
	.4byte _08028ECE @ case 1
	.4byte _08028ED2 @ case 2
	.4byte _08028F8E @ case 3
	.4byte _08028F8E @ case 4
	.4byte _08028F8E @ case 5
	.4byte _08028F8E @ case 6
	.4byte _08028F8E @ case 7
	.4byte _08028F18 @ case 8
	.4byte _08028F8E @ case 9
	.4byte _08028F8E @ case 10
	.4byte _08028F8E @ case 11
	.4byte _08028F8E @ case 12
	.4byte _08028F8E @ case 13
	.4byte _08028F8E @ case 14
	.4byte _08028F8E @ case 15
	.4byte _08028F8E @ case 16
	.4byte _08028F8E @ case 17
	.4byte _08028F8E @ case 18
	.4byte _08028F8E @ case 19
	.4byte _08028F8E @ case 20
	.4byte _08028F8E @ case 21
	.4byte _08028F36 @ case 22
	.4byte _08028F8E @ case 23
	.4byte _08028EF2 @ case 24
	.4byte _08028F8E @ case 25
	.4byte _08028F12 @ case 26
	.4byte _08028F8E @ case 27
	.4byte _08028F8E @ case 28
	.4byte _08028F8E @ case 29
	.4byte _08028F8E @ case 30
	.4byte _08028F8E @ case 31
	.4byte _08028F8E @ case 32
	.4byte _08028F8E @ case 33
	.4byte _08028F8E @ case 34
	.4byte _08028F8E @ case 35
	.4byte _08028F8E @ case 36
	.4byte _08028F8E @ case 37
	.4byte _08028F8E @ case 38
	.4byte _08028F8E @ case 39
	.4byte _08028F8E @ case 40
	.4byte _08028F8E @ case 41
	.4byte _08028F8E @ case 42
	.4byte _08028F8E @ case 43
	.4byte _08028F8E @ case 44
	.4byte _08028F8E @ case 45
	.4byte _08028F8E @ case 46
	.4byte _08028F8E @ case 47
	.4byte _08028F8E @ case 48
	.4byte _08028F8E @ case 49
	.4byte _08028F8E @ case 50
	.4byte _08028F8E @ case 51
	.4byte _08028F8E @ case 52
	.4byte _08028F8E @ case 53
	.4byte _08028F8E @ case 54
	.4byte _08028F8E @ case 55
	.4byte _08028F8E @ case 56
	.4byte _08028F8E @ case 57
	.4byte _08028F8E @ case 58
	.4byte _08028F8E @ case 59
	.4byte _08028F8E @ case 60
	.4byte _08028F8E @ case 61
	.4byte _08028F8E @ case 62
	.4byte _08028F8E @ case 63
	.4byte _08028F8E @ case 64
	.4byte _08028F8E @ case 65
	.4byte _08028F8E @ case 66
	.4byte _08028F8E @ case 67
	.4byte _08028F8E @ case 68
	.4byte _08028F8E @ case 69
	.4byte _08028F8E @ case 70
	.4byte _08028F8E @ case 71
	.4byte _08028F8E @ case 72
	.4byte _08028F8E @ case 73
	.4byte _08028F8E @ case 74
	.4byte _08028F8E @ case 75
	.4byte _08028F8E @ case 76
	.4byte _08028F8E @ case 77
	.4byte _08028F8E @ case 78
	.4byte _08028F8E @ case 79
	.4byte _08028F8E @ case 80
	.4byte _08028F8E @ case 81
	.4byte _08028F8E @ case 82
	.4byte _08028F8E @ case 83
	.4byte _08028F8E @ case 84
	.4byte _08028F8E @ case 85
	.4byte _08028F8E @ case 86
	.4byte _08028F56 @ case 87
	.4byte _08028F5A @ case 88
	.4byte _08028F60 @ case 89
	.4byte _08028F64 @ case 90
	.4byte _08028F6A @ case 91
_08028EC8:
	bl SidehopperInit
	b _08028F8E
_08028ECE:
	bl SidehopperPreparingtoJumpInit
_08028ED2:
	ldr r0, _08028EE8 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08028EEC
	bl SidehopperPreparingToJumpCeiling
	b _08028F8E
	.align 2, 0
_08028EE8: .4byte gCurrentSprite
_08028EEC:
	bl SidehopperPreparingToJumpGround
	b _08028F8E
_08028EF2:
	ldr r0, _08028F08 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08028F0C
	bl SidehopperJumpingCeiling
	b _08028F8E
	.align 2, 0
_08028F08: .4byte gCurrentSprite
_08028F0C:
	bl SidehopperJumpingGround
	b _08028F8E
_08028F12:
	bl SidehopperLanding
	b _08028F8E
_08028F18:
	ldr r0, _08028F2C @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08028F30
	bl SidehopperIdleCeiling
	b _08028F8E
	.align 2, 0
_08028F2C: .4byte gCurrentSprite
_08028F30:
	bl SidehopperIdleGround
	b _08028F8E
_08028F36:
	ldr r0, _08028F4C @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08028F50
	bl SidehopperFallingCeiling
	b _08028F8E
	.align 2, 0
_08028F4C: .4byte gCurrentSprite
_08028F50:
	bl SidehopperFallingGround
	b _08028F8E
_08028F56:
	bl SpriteDyingInit
_08028F5A:
	bl SpriteDying
	b _08028F8E
_08028F60:
	bl SidehopperInit
_08028F64:
	bl SpriteSpawningFromX
	b _08028F8E
_08028F6A:
	ldr r2, _08028F80 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08028F84
	ldrh r0, [r2, #2]
	adds r0, #0x40
	b _08028F88
	.align 2, 0
_08028F80: .4byte gCurrentSprite
_08028F84:
	ldrh r0, [r2, #2]
	subs r0, #0x40
_08028F88:
	strh r0, [r2, #2]
	bl XParasiteInit
_08028F8E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start DessgeegaCheckSamusInRange
DessgeegaCheckSamusInRange: @ 0x08028F94
	push {r4, lr}
	movs r4, #0
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08028FAC
	movs r4, #1
	bl MakeSpriteFaceSamusDirection
_08028FAC:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start DesgeegaInit
DesgeegaInit: @ 0x08028FB4
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _08028FE0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08028FE4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08028FE4
	strh r0, [r2]
	b _080290AE
	.align 2, 0
_08028FE0: .4byte gCurrentSprite
_08028FE4:
	ldr r1, _08028FFC @ =gCurrentSprite
	adds r5, r1, #0
	adds r5, #0x24
	ldrb r0, [r5]
	adds r4, r1, #0
	cmp r0, #0x59
	bne _08029000
	movs r0, #0x5a
	strb r0, [r5]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _08029034
	.align 2, 0
_08028FFC: .4byte gCurrentSprite
_08029000:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08029058 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08029028
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
_08029028:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
	movs r0, #8
	strb r0, [r5]
_08029034:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08029060
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x30
	strb r0, [r1]
	ldr r0, _0802905C @ =0x0000FFE0
	strh r0, [r4, #0xa]
	movs r0, #0x54
	strh r0, [r4, #0xc]
	b _08029076
	.align 2, 0
_08029058: .4byte gPreviousCollisionCheck
_0802905C: .4byte 0x0000FFE0
_08029060:
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #0x20
	strb r1, [r0]
	ldr r0, _080290B4 @ =0x0000FFAC
	strh r0, [r4, #0xa]
	strh r1, [r4, #0xc]
_08029076:
	adds r1, r4, #0
	adds r1, #0x29
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _080290B8 @ =0x0000FFC0
	strh r0, [r4, #0xe]
	movs r0, #0x40
	strh r0, [r4, #0x10]
	ldr r0, _080290BC @ =0x0831B8F0
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	ldr r2, _080290C0 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	bl SpriteUtilChooseRandomXDirection
_080290AE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080290B4: .4byte 0x0000FFAC
_080290B8: .4byte 0x0000FFC0
_080290BC: .4byte 0x0831B8F0
_080290C0: .4byte sPrimarySpriteStats

	thumb_func_start DessgeegaPreparingToJumpInit
DessgeegaPreparingToJumpInit: @ 0x080290C4
	ldr r1, _080290DC @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _080290E0 @ =0x0831B960
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_080290DC: .4byte gCurrentSprite
_080290E0: .4byte 0x0831B960

	thumb_func_start DesgeegaJumpingGroundInit
DesgeegaJumpingGroundInit: @ 0x080290E4
	push {r4, lr}
	ldr r3, _08029118 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r4, #0
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x31
	strb r4, [r0]
	ldr r0, _0802911C @ =0x0831B980
	str r0, [r3, #0x18]
	ldr r0, _08029120 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08029124
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	b _0802912A
	.align 2, 0
_08029118: .4byte gCurrentSprite
_0802911C: .4byte 0x0831B980
_08029120: .4byte gSpriteRandomNumber
_08029124:
	adds r0, r3, #0
	adds r0, #0x30
	strb r4, [r0]
_0802912A:
	movs r0, #0xbf
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start DesgeegaLandingInit
DesgeegaLandingInit: @ 0x08029138
	push {lr}
	ldr r1, _08029158 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0802915C @ =0x0831B9A0
	str r0, [r1, #0x18]
	ldr r0, _08029160 @ =0x0000017F
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_08029158: .4byte gCurrentSprite
_0802915C: .4byte 0x0831B9A0
_08029160: .4byte 0x0000017F

	thumb_func_start DessgeegaIdleInit
DessgeegaIdleInit: @ 0x08029164
	push {lr}
	bl DessgeegaCheckSamusInRange
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _08029178
	bl DessgeegaPreparingToJumpInit
	b _080291C0
_08029178:
	ldr r2, _080291A8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	movs r0, #0
	strh r3, [r2, #0x16]
	adds r1, #0xa
	strb r0, [r1]
	ldr r0, _080291AC @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	adds r3, r2, #0
	adds r3, #0x2f
	strb r0, [r3]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #7
	bls _080291B4
	ldr r0, _080291B0 @ =0x0831B8F0
	str r0, [r2, #0x18]
	b _080291C0
	.align 2, 0
_080291A8: .4byte gCurrentSprite
_080291AC: .4byte gSpriteRandomNumber
_080291B0: .4byte 0x0831B8F0
_080291B4:
	ldr r0, _080291C4 @ =0x0831B918
	str r0, [r2, #0x18]
	movs r0, #0xc0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080291C0:
	pop {r0}
	bx r0
	.align 2, 0
_080291C4: .4byte 0x0831B918

	thumb_func_start DessgeegaFallingInit
DessgeegaFallingInit: @ 0x080291C8
	ldr r3, _080291E4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x16
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r0, #0
	strh r2, [r3, #0x16]
	adds r1, #0xd
	strb r0, [r1]
	ldr r0, _080291E8 @ =0x0831B980
	str r0, [r3, #0x18]
	bx lr
	.align 2, 0
_080291E4: .4byte gCurrentSprite
_080291E8: .4byte 0x0831B980

	thumb_func_start DessgeegaJumpWarningGround
DessgeegaJumpWarningGround: @ 0x080291EC
	push {r4, r5, lr}
	ldr r4, _0802922C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _08029240
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08029230 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08029234
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08029234
	bl DessgeegaFallingInit
	b _08029240
	.align 2, 0
_0802922C: .4byte gCurrentSprite
_08029230: .4byte gPreviousCollisionCheck
_08029234:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08029240
	bl DesgeegaJumpingGroundInit
_08029240:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DessgeegaJumpWarningCeiling
DessgeegaJumpWarningCeiling: @ 0x08029248
	push {lr}
	ldr r0, _08029268 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _08029264
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08029264
	bl DesgeegaJumpingGroundInit
_08029264:
	pop {r0}
	bx r0
	.align 2, 0
_08029268: .4byte gCurrentSprite

	thumb_func_start DessgeegaJumpingGround
DessgeegaJumpingGround: @ 0x0802926C
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r2, _08029280 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _08029288
	ldr r1, _08029284 @ =0x0831AD84
	b _0802928A
	.align 2, 0
_08029280: .4byte gCurrentSprite
_08029284: .4byte 0x0831AD84
_08029288:
	ldr r1, _080292CC @ =0x0831AD70
_0802928A:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r4, _080292D0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080292EC
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080292D4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080292D8
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	b _08029310
	.align 2, 0
_080292CC: .4byte 0x0831AD70
_080292D0: .4byte gCurrentSprite
_080292D4: .4byte gPreviousCollisionCheck
_080292D8:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _080292E6
	ldrh r0, [r4, #4]
	adds r0, #4
	b _0802932E
_080292E6:
	ldrh r0, [r4, #4]
	adds r0, #5
	b _0802932E
_080292EC:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08029318 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0802931C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
_08029310:
	strh r0, [r4, #4]
	lsls r1, r5, #0x10
	b _08029330
	.align 2, 0
_08029318: .4byte gPreviousCollisionCheck
_0802931C:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _0802932A
	ldrh r0, [r4, #4]
	subs r0, #4
	b _0802932E
_0802932A:
	ldrh r0, [r4, #4]
	subs r0, #5
_0802932E:
	strh r0, [r4, #4]
_08029330:
	ldr r4, _08029374 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0x26
	bhi _08029346
	adds r0, #1
	strb r0, [r2]
_08029346:
	cmp r1, #0
	ble _080293C0
	cmp r6, #0
	beq _0802935A
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r4]
_0802935A:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _08029378 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802937C
	strh r1, [r4, #2]
	bl DesgeegaLandingInit
	b _0802943E
	.align 2, 0
_08029374: .4byte gCurrentSprite
_08029378: .4byte gPreviousVerticalCollisionCheck
_0802937C:
	cmp r6, #0
	bne _0802943E
	ldrh r0, [r4, #2]
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _080293B2
	ldrh r0, [r4, #2]
	movs r3, #0xe
	ldrsh r1, [r4, r3]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _080293AE
	movs r6, #1
_080293AE:
	cmp r6, #0
	beq _0802943E
_080293B2:
	ldr r0, _080293BC @ =gCurrentSprite
	strh r1, [r0, #2]
	bl DesgeegaLandingInit
	b _0802943E
	.align 2, 0
_080293BC: .4byte gCurrentSprite
_080293C0:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08029400
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080293FC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0802942C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	strh r0, [r4, #4]
	bl DessgeegaFallingInit
	b _0802942C
	.align 2, 0
_080293FC: .4byte gPreviousCollisionCheck
_08029400:
	movs r3, #0xa
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08029444 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0802942C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
	strh r0, [r4, #4]
	bl DessgeegaFallingInit
_0802942C:
	cmp r6, #0
	beq _0802943E
	ldr r0, _08029448 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
_0802943E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08029444: .4byte gPreviousCollisionCheck
_08029448: .4byte gCurrentSprite

	thumb_func_start DessgeegaJumpingCeiling
DessgeegaJumpingCeiling: @ 0x0802944C
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	ldr r2, _08029460 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _08029468
	ldr r1, _08029464 @ =0x0831AD84
	b _0802946A
	.align 2, 0
_08029460: .4byte gCurrentSprite
_08029464: .4byte 0x0831AD84
_08029468:
	ldr r1, _080294AC @ =0x0831AD70
_0802946A:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r4, _080294B0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080294CC
	ldrh r0, [r4, #2]
	adds r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080294B4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080294B8
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	b _080294F0
	.align 2, 0
_080294AC: .4byte 0x0831AD70
_080294B0: .4byte gCurrentSprite
_080294B4: .4byte gPreviousCollisionCheck
_080294B8:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _080294C6
	ldrh r0, [r4, #4]
	adds r0, #4
	b _0802950E
_080294C6:
	ldrh r0, [r4, #4]
	adds r0, #5
	b _0802950E
_080294CC:
	ldrh r0, [r4, #2]
	adds r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080294F8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080294FC
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
_080294F0:
	strh r0, [r4, #4]
	lsls r1, r5, #0x10
	b _08029510
	.align 2, 0
_080294F8: .4byte gPreviousCollisionCheck
_080294FC:
	lsls r0, r5, #0x10
	adds r1, r0, #0
	cmp r1, #0
	ble _0802950A
	ldrh r0, [r4, #4]
	subs r0, #4
	b _0802950E
_0802950A:
	ldrh r0, [r4, #4]
	subs r0, #5
_0802950E:
	strh r0, [r4, #4]
_08029510:
	ldr r4, _08029564 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, r0, r5
	strh r0, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0x26
	bhi _08029526
	adds r0, #1
	strb r0, [r2]
_08029526:
	cmp r1, #0
	bge _080295B4
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802956C
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08029568 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08029598
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #6
	strh r0, [r4, #4]
	bl DessgeegaFallingInit
	b _08029598
	.align 2, 0
_08029564: .4byte gCurrentSprite
_08029568: .4byte gPreviousCollisionCheck
_0802956C:
	movs r3, #0xc
	ldrsh r0, [r4, r3]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r3, [r4, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080295AC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08029598
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #6
	strh r0, [r4, #4]
	bl DessgeegaFallingInit
_08029598:
	cmp r7, #0
	beq _08029636
	ldr r0, _080295B0 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
	b _08029636
	.align 2, 0
_080295AC: .4byte gPreviousCollisionCheck
_080295B0: .4byte gCurrentSprite
_080295B4:
	cmp r7, #0
	beq _080295C4
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r4]
_080295C4:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r5, _080295E8 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080295EC
	adds r0, r2, #0
	adds r0, #0x40
	strh r0, [r4, #2]
	bl DesgeegaLandingInit
	b _08029636
	.align 2, 0
_080295E8: .4byte gPreviousVerticalCollisionCheck
_080295EC:
	cmp r7, #0
	bne _08029636
	ldrh r0, [r4, #2]
	movs r3, #0x10
	ldrsh r1, [r4, r3]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _0802962A
	ldrh r0, [r4, #2]
	movs r3, #0xe
	ldrsh r1, [r4, r3]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08029626
	movs r7, #1
_08029626:
	cmp r7, #0
	beq _08029636
_0802962A:
	ldr r1, _0802963C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x40
	strh r0, [r1, #2]
	bl DesgeegaLandingInit
_08029636:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802963C: .4byte gCurrentSprite

	thumb_func_start DessgeegaLanding
DessgeegaLanding: @ 0x08029640
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802964E
	bl DessgeegaIdleInit
_0802964E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DessgeegaFallingGround
DessgeegaFallingGround: @ 0x08029654
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r4, _080296A8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _080296AC @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802969E
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802969E
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802969A
	movs r6, #1
_0802969A:
	cmp r6, #0
	beq _080296B0
_0802969E:
	ldr r0, _080296A8 @ =gCurrentSprite
	strh r1, [r0, #2]
	bl DesgeegaLandingInit
	b _080296F0
	.align 2, 0
_080296A8: .4byte gCurrentSprite
_080296AC: .4byte gPreviousVerticalCollisionCheck
_080296B0:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _080296DC @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _080296E0 @ =0x00007FFF
	cmp r1, r0
	bne _080296E4
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _080296F0
	.align 2, 0
_080296DC: .4byte sSpritesFallingSpeed
_080296E0: .4byte 0x00007FFF
_080296E4:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_080296F0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DessgeegaFallingCeiling
DessgeegaFallingCeiling: @ 0x080296F8
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r4, _08029750 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r5, _08029754 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08029742
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _08029742
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802973E
	movs r6, #1
_0802973E:
	cmp r6, #0
	beq _08029758
_08029742:
	ldr r1, _08029750 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x40
	strh r0, [r1, #2]
	bl DesgeegaLandingInit
	b _08029798
	.align 2, 0
_08029750: .4byte gCurrentSprite
_08029754: .4byte gPreviousVerticalCollisionCheck
_08029758:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08029784 @ =sSpritesFallingSpeedCeiling
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08029788 @ =0x00007FFF
	cmp r1, r0
	bne _0802978C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _08029798
	.align 2, 0
_08029784: .4byte sSpritesFallingSpeedCeiling
_08029788: .4byte 0x00007FFF
_0802978C:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_08029798:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DessgeegaIdleGround
DessgeegaIdleGround: @ 0x080297A0
	push {r4, r5, lr}
	bl DessgeegaCheckSamusInRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802980A
	ldr r4, _080297E0 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080297E4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _080297E8
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _080297E8
	bl DessgeegaFallingInit
	b _08029824
	.align 2, 0
_080297E0: .4byte gCurrentSprite
_080297E4: .4byte gPreviousCollisionCheck
_080297E8:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08029824
	ldr r2, _08029810 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	adds r1, r2, #0
	adds r1, #0x2f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r1, [r1]
	cmp r0, r1
	bne _08029814
_0802980A:
	bl DessgeegaPreparingToJumpInit
	b _08029824
	.align 2, 0
_08029810: .4byte gCurrentSprite
_08029814:
	ldr r1, [r2, #0x18]
	ldr r0, _0802982C @ =0x0831B918
	cmp r1, r0
	bne _08029824
	movs r0, #0xc0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08029824:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802982C: .4byte 0x0831B918

	thumb_func_start DessgeegaIdleCeiling
DessgeegaIdleCeiling: @ 0x08029830
	push {lr}
	bl DessgeegaCheckSamusInRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802985E
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08029878
	ldr r2, _08029864 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	adds r1, r2, #0
	adds r1, #0x2f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r1, [r1]
	cmp r0, r1
	bne _08029868
_0802985E:
	bl DessgeegaPreparingToJumpInit
	b _08029878
	.align 2, 0
_08029864: .4byte gCurrentSprite
_08029868:
	ldr r1, [r2, #0x18]
	ldr r0, _0802987C @ =0x0831B918
	cmp r1, r0
	bne _08029878
	movs r0, #0xc0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08029878:
	pop {r0}
	bx r0
	.align 2, 0
_0802987C: .4byte 0x0831B918

	thumb_func_start DessgeegaSpikeInit
DessgeegaSpikeInit: @ 0x08029880
	push {r4, r5, lr}
	ldr r0, _080298E4 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _080298E8 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _080298EC @ =0x0000FFFC
	mov r5, ip
	strh r1, [r5, #0xa]
	movs r2, #4
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _080298F0 @ =0x0831B9C0
	str r0, [r5, #0x18]
	strb r3, [r5, #0x1c]
	strh r4, [r5, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	subs r1, #2
	movs r0, #3
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080298E4: .4byte gCurrentSprite
_080298E8: .4byte 0x0000FFFB
_080298EC: .4byte 0x0000FFFC
_080298F0: .4byte 0x0831B9C0

	thumb_func_start DessgeegaSpikeMove
DessgeegaSpikeMove: @ 0x080298F4
	push {r4, lr}
	ldr r4, _0802990C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08029910
	strh r0, [r4]
	b _08029946
	.align 2, 0
_0802990C: .4byte gCurrentSprite
_08029910:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	ldr r0, _0802992C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08029930
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _08029946
	.align 2, 0
_0802992C: .4byte gPreviousVerticalCollisionCheck
_08029930:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08029940
	ldrh r0, [r4, #4]
	adds r0, #0xa
	b _08029944
_08029940:
	ldrh r0, [r4, #4]
	subs r0, #0xa
_08029944:
	strh r0, [r4, #4]
_08029946:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start DessgeegaSpikeExplodingInit
DessgeegaSpikeExplodingInit: @ 0x0802994C
	ldr r3, _08029968 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _0802996C @ =0x0831B9D0
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_08029968: .4byte gCurrentSprite
_0802996C: .4byte 0x0831B9D0

	thumb_func_start DessgeegaSpikeExploding
DessgeegaSpikeExploding: @ 0x08029970
	push {r4, r5, lr}
	ldr r4, _08029998 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r5, #0
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08029990
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08029992
_08029990:
	strh r5, [r4]
_08029992:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08029998: .4byte gCurrentSprite

	thumb_func_start Dessgeega
Dessgeega: @ 0x0802999C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r4, _080299B4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r7, [r0]
	cmp r7, #0
	beq _080299B8
	bl SpriteUpdateFreezeTimer
	b _08029CAC
	.align 2, 0
_080299B4: .4byte gCurrentSprite
_080299B8:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5a
	bhi _08029A72
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08029A72
	ldr r0, _08029A38 @ =0x00000181
	bl CheckPlayNotAlreadyPlayingSound
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08029A72
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r1, [r6]
	movs r0, #0x32
	bl CountSecondarySpriteWithRamSlot
	cmp r0, #2
	bgt _08029A72
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08029A3C
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x4c
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x32
	bl SpriteSpawnSecondary
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x4c
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x40
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #0x32
	bl SpriteSpawnSecondary
	b _08029A72
	.align 2, 0
_08029A38: .4byte 0x00000181
_08029A3C:
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x4c
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x32
	bl SpriteSpawnSecondary
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x4c
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x40
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #0x32
	bl SpriteSpawnSecondary
_08029A72:
	ldr r1, _08029A8C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0x5b
	bls _08029A82
	b _08029CAC
_08029A82:
	lsls r0, r0, #2
	ldr r1, _08029A90 @ =_08029A94
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08029A8C: .4byte gCurrentSprite
_08029A90: .4byte _08029A94
_08029A94: @ jump table
	.4byte _08029C04 @ case 0
	.4byte _08029C0A @ case 1
	.4byte _08029C0E @ case 2
	.4byte _08029CAC @ case 3
	.4byte _08029CAC @ case 4
	.4byte _08029CAC @ case 5
	.4byte _08029CAC @ case 6
	.4byte _08029CAC @ case 7
	.4byte _08029C4C @ case 8
	.4byte _08029CAC @ case 9
	.4byte _08029CAC @ case 10
	.4byte _08029CAC @ case 11
	.4byte _08029CAC @ case 12
	.4byte _08029CAC @ case 13
	.4byte _08029CAC @ case 14
	.4byte _08029CAC @ case 15
	.4byte _08029CAC @ case 16
	.4byte _08029CAC @ case 17
	.4byte _08029CAC @ case 18
	.4byte _08029CAC @ case 19
	.4byte _08029CAC @ case 20
	.4byte _08029CAC @ case 21
	.4byte _08029C64 @ case 22
	.4byte _08029CAC @ case 23
	.4byte _08029C2E @ case 24
	.4byte _08029CAC @ case 25
	.4byte _08029C46 @ case 26
	.4byte _08029CAC @ case 27
	.4byte _08029CAC @ case 28
	.4byte _08029CAC @ case 29
	.4byte _08029CAC @ case 30
	.4byte _08029CAC @ case 31
	.4byte _08029CAC @ case 32
	.4byte _08029CAC @ case 33
	.4byte _08029CAC @ case 34
	.4byte _08029CAC @ case 35
	.4byte _08029CAC @ case 36
	.4byte _08029CAC @ case 37
	.4byte _08029CAC @ case 38
	.4byte _08029CAC @ case 39
	.4byte _08029CAC @ case 40
	.4byte _08029CAC @ case 41
	.4byte _08029CAC @ case 42
	.4byte _08029CAC @ case 43
	.4byte _08029CAC @ case 44
	.4byte _08029CAC @ case 45
	.4byte _08029CAC @ case 46
	.4byte _08029CAC @ case 47
	.4byte _08029CAC @ case 48
	.4byte _08029CAC @ case 49
	.4byte _08029CAC @ case 50
	.4byte _08029CAC @ case 51
	.4byte _08029CAC @ case 52
	.4byte _08029CAC @ case 53
	.4byte _08029CAC @ case 54
	.4byte _08029CAC @ case 55
	.4byte _08029CAC @ case 56
	.4byte _08029CAC @ case 57
	.4byte _08029CAC @ case 58
	.4byte _08029CAC @ case 59
	.4byte _08029CAC @ case 60
	.4byte _08029CAC @ case 61
	.4byte _08029CAC @ case 62
	.4byte _08029CAC @ case 63
	.4byte _08029CAC @ case 64
	.4byte _08029CAC @ case 65
	.4byte _08029CAC @ case 66
	.4byte _08029CAC @ case 67
	.4byte _08029CAC @ case 68
	.4byte _08029CAC @ case 69
	.4byte _08029CAC @ case 70
	.4byte _08029CAC @ case 71
	.4byte _08029CAC @ case 72
	.4byte _08029CAC @ case 73
	.4byte _08029CAC @ case 74
	.4byte _08029CAC @ case 75
	.4byte _08029CAC @ case 76
	.4byte _08029CAC @ case 77
	.4byte _08029CAC @ case 78
	.4byte _08029CAC @ case 79
	.4byte _08029CAC @ case 80
	.4byte _08029CAC @ case 81
	.4byte _08029CAC @ case 82
	.4byte _08029CAC @ case 83
	.4byte _08029CAC @ case 84
	.4byte _08029CAC @ case 85
	.4byte _08029CAC @ case 86
	.4byte _08029C7C @ case 87
	.4byte _08029C80 @ case 88
	.4byte _08029C86 @ case 89
	.4byte _08029C8A @ case 90
	.4byte _08029C90 @ case 91
_08029C04:
	bl DesgeegaInit
	b _08029CAC
_08029C0A:
	bl DessgeegaPreparingToJumpInit
_08029C0E:
	ldr r0, _08029C24 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08029C28
	bl DessgeegaJumpWarningCeiling
	b _08029CAC
	.align 2, 0
_08029C24: .4byte gCurrentSprite
_08029C28:
	bl DessgeegaJumpWarningGround
	b _08029CAC
_08029C2E:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08029C40
	bl DessgeegaJumpingCeiling
	b _08029CAC
_08029C40:
	bl DessgeegaJumpingGround
	b _08029CAC
_08029C46:
	bl DessgeegaLanding
	b _08029CAC
_08029C4C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08029C5E
	bl DessgeegaIdleCeiling
	b _08029CAC
_08029C5E:
	bl DessgeegaIdleGround
	b _08029CAC
_08029C64:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08029C76
	bl DessgeegaFallingCeiling
	b _08029CAC
_08029C76:
	bl DessgeegaFallingGround
	b _08029CAC
_08029C7C:
	bl SpriteDyingInit
_08029C80:
	bl SpriteDying
	b _08029CAC
_08029C86:
	bl DesgeegaInit
_08029C8A:
	bl SpriteSpawningFromX
	b _08029CAC
_08029C90:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08029CA2
	ldrh r0, [r2, #2]
	adds r0, #0x40
	b _08029CA6
_08029CA2:
	ldrh r0, [r2, #2]
	subs r0, #0x40
_08029CA6:
	strh r0, [r2, #2]
	bl XParasiteInit
_08029CAC:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start DessgeegaSpike
DessgeegaSpike: @ 0x08029CB4
	push {lr}
	ldr r0, _08029CCC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08029CDC
	cmp r0, #2
	bgt _08029CD0
	cmp r0, #0
	beq _08029CD6
	b _08029CE8
	.align 2, 0
_08029CCC: .4byte gCurrentSprite
_08029CD0:
	cmp r0, #0x38
	beq _08029CE2
	b _08029CE8
_08029CD6:
	bl DessgeegaSpikeInit
	b _08029CEC
_08029CDC:
	bl DessgeegaSpikeMove
	b _08029CEC
_08029CE2:
	bl DessgeegaSpikeExploding
	b _08029CEC
_08029CE8:
	bl DessgeegaSpikeExplodingInit
_08029CEC:
	pop {r0}
	bx r0

	thumb_func_start XBarrierCoreSetCollision
XBarrierCoreSetCollision: @ 0x08029CF0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _08029D44 @ =gCurrentSprite
	ldrh r4, [r0, #2]
	subs r4, #0x20
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldrh r0, [r0, #4]
	mov r8, r0
	ldr r6, _08029D48 @ =gCurrentClipdataAffectingAction
	strb r5, [r6]
	adds r0, r4, #0
	subs r0, #0x40
	mov r1, r8
	bl ProcessClipdata
	strb r5, [r6]
	adds r0, r4, #0
	mov r1, r8
	bl ProcessClipdata
	strb r5, [r6]
	adds r0, r4, #0
	adds r0, #0x40
	mov r1, r8
	bl ProcessClipdata
	strb r5, [r6]
	adds r4, #0x80
	adds r0, r4, #0
	mov r1, r8
	bl ProcessClipdata
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08029D44: .4byte gCurrentSprite
_08029D48: .4byte gCurrentClipdataAffectingAction

	thumb_func_start XBarrierCoreInit
XBarrierCoreInit: @ 0x08029D4C
	push {r4, r5, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r2, _08029D6C @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #0x59
	bne _08029D70
	movs r0, #0x5a
	strb r0, [r3]
	movs r0, #0x2c
	strh r0, [r2, #6]
	b _08029D9C
	.align 2, 0
_08029D6C: .4byte gCurrentSprite
_08029D70:
	ldrb r1, [r2, #0x1d]
	adds r0, r1, #0
	subs r0, #0x41
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	ldr r0, _08029D94 @ =gNormalXBarrierCoresDestroyed
	ldrh r0, [r0]
	asrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08029D98
	movs r0, #0
	strh r0, [r2]
	b _08029E6E
	.align 2, 0
_08029D94: .4byte gNormalXBarrierCoresDestroyed
_08029D98:
	movs r0, #2
	strb r0, [r3]
_08029D9C:
	ldr r4, _08029E00 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r3, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r2, _08029E04 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r1, #3
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _08029E08 @ =0x0831C348
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	beq _08029E28
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08029E0C
	strh r0, [r4]
	b _08029E6E
	.align 2, 0
_08029E00: .4byte gCurrentSprite
_08029E04: .4byte sPrimarySpriteStats
_08029E08: .4byte 0x0831C348
_08029E0C:
	ldr r0, _08029E20 @ =0x0000FFC0
	strh r0, [r4, #0xa]
	movs r0, #0x40
	strh r0, [r4, #0xc]
	ldr r0, _08029E24 @ =0x0000FFD0
	strh r0, [r4, #0xe]
	movs r0, #0x30
	strh r0, [r4, #0x10]
	b _08029E6E
	.align 2, 0
_08029E20: .4byte 0x0000FFC0
_08029E24: .4byte 0x0000FFD0
_08029E28:
	ldr r0, _08029E60 @ =0x0000FFD0
	strh r0, [r4, #0xa]
	movs r0, #0x30
	strh r0, [r4, #0xc]
	ldr r0, _08029E64 @ =0x0000FFD8
	strh r0, [r4, #0xe]
	movs r0, #0x28
	strh r0, [r4, #0x10]
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x1d
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _08029E68
	strh r5, [r4]
	b _08029E6E
	.align 2, 0
_08029E60: .4byte 0x0000FFD0
_08029E64: .4byte 0x0000FFD8
_08029E68:
	movs r0, #3
	bl XBarrierCoreSetCollision
_08029E6E:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierCoreIdleInit
XBarrierCoreIdleInit: @ 0x08029E78
	ldr r1, _08029E90 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08029E94 @ =0x0831C348
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08029E90: .4byte gCurrentSprite
_08029E94: .4byte 0x0831C348

	thumb_func_start XBarrierCoreIdle
XBarrierCoreIdle: @ 0x08029E98
	bx lr
	.align 2, 0

	thumb_func_start XBarrierCoreDeath
XBarrierCoreDeath: @ 0x08029E9C
	push {lr}
	ldr r0, _08029EC4 @ =gCurrentSprite
	ldrb r0, [r0, #0x1d]
	subs r0, #0x41
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #9
	lsls r1, r0
	lsrs r1, r1, #0x10
	ldr r2, _08029EC8 @ =gNormalXBarrierCoresDestroyed
	ldrh r0, [r2]
	orrs r1, r0
	strh r1, [r2]
	movs r0, #1
	bl XBarrierCoreSetCollision
	pop {r0}
	bx r0
	.align 2, 0
_08029EC4: .4byte gCurrentSprite
_08029EC8: .4byte gNormalXBarrierCoresDestroyed

	thumb_func_start XBarrierCore
XBarrierCore: @ 0x08029ECC
	push {r4, lr}
	ldr r4, _08029F04 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08029EE6
	movs r0, #0xb0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08029EE6:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08029F08
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x1d
	bl UpdateSecondarySpritesFreezeTimer
	b _08029F74
	.align 2, 0
_08029F04: .4byte gCurrentSprite
_08029F08:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x57
	beq _08029F4C
	cmp r0, #0x57
	bgt _08029F2A
	cmp r0, #1
	beq _08029F42
	cmp r0, #1
	bgt _08029F24
	cmp r0, #0
	beq _08029F3C
	b _08029F74
_08029F24:
	cmp r0, #2
	beq _08029F46
	b _08029F74
_08029F2A:
	cmp r0, #0x59
	beq _08029F66
	cmp r0, #0x59
	blt _08029F60
	cmp r0, #0x5a
	beq _08029F6A
	cmp r0, #0x5b
	beq _08029F70
	b _08029F74
_08029F3C:
	bl XBarrierCoreInit
	b _08029F74
_08029F42:
	bl XBarrierCoreIdleInit
_08029F46:
	bl XBarrierCoreIdle
	b _08029F74
_08029F4C:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x1d
	bl UnfreezeSecondarySprites
	bl XBarrierCoreDeath
	bl SpriteDyingInit
_08029F60:
	bl SpriteDying
	b _08029F74
_08029F66:
	bl XBarrierCoreInit
_08029F6A:
	bl SpriteSpawningFromX
	b _08029F74
_08029F70:
	bl XParasiteInit
_08029F74:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierStem
XBarrierStem: @ 0x08029F7C
	push {r4, r5, r6, lr}
	ldr r4, _08029F94 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r6, [r0]
	cmp r6, #0
	beq _08029F98
	bl SpriteUpdateFreezeTimer
	bl UpdatePrimarySpriteFreezeTimer
	b _0802A0AA
	.align 2, 0
_08029F94: .4byte gCurrentSprite
_08029F98:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r3, r4, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #2
	beq _0802A028
	cmp r0, #2
	bgt _08029FB4
	cmp r0, #0
	beq _08029FBC
	lsls r2, r5, #3
	b _0802A070
_08029FB4:
	cmp r0, #0x18
	beq _0802A05C
	lsls r2, r5, #3
	b _0802A070
_08029FBC:
	ldrh r1, [r4]
	ldr r0, _0802A014 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	movs r0, #2
	strb r0, [r3]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	ldr r0, _0802A018 @ =0x0000FF80
	strh r0, [r4, #0xa]
	movs r0, #0x80
	strh r0, [r4, #0xc]
	ldr r0, _0802A01C @ =0x0000FFF0
	strh r0, [r4, #0xe]
	movs r0, #0x10
	strh r0, [r4, #0x10]
	ldr r1, _0802A020 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	adds r1, #3
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _0802A024 @ =0x0831C2F8
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r6, [r4, #0x16]
	lsls r2, r5, #3
	b _0802A070
	.align 2, 0
_0802A014: .4byte 0x0000FFFB
_0802A018: .4byte 0x0000FF80
_0802A01C: .4byte 0x0000FFF0
_0802A020: .4byte sSecondarySpriteStats
_0802A024: .4byte 0x0831C2F8
_0802A028:
	ldr r2, _0802A054 @ =gSpriteData
	lsls r1, r5, #3
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0, #0x14]
	adds r2, r1, #0
	cmp r0, #0
	bne _0802A070
	movs r0, #0x18
	strb r0, [r3]
	ldr r0, _0802A058 @ =0x0831C320
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
	strh r6, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	b _0802A070
	.align 2, 0
_0802A054: .4byte gSpriteData
_0802A058: .4byte 0x0831C320
_0802A05C:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	lsls r2, r5, #3
	cmp r0, #0
	beq _0802A070
	strh r6, [r4]
_0802A070:
	ldr r1, _0802A098 @ =gSpriteData
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0802A0A0
	ldr r1, _0802A09C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r2, [r1]
	movs r0, #0x20
	orrs r0, r2
	strh r0, [r1]
	b _0802A0AA
	.align 2, 0
_0802A098: .4byte gSpriteData
_0802A09C: .4byte gCurrentSprite
_0802A0A0:
	ldr r2, _0802A0B0 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _0802A0B4 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r2]
_0802A0AA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802A0B0: .4byte gCurrentSprite
_0802A0B4: .4byte 0x0000FFDF

	thumb_func_start NavPadDetectSamus
NavPadDetectSamus: @ 0x0802A0B8
	push {r4, lr}
	movs r4, #0
	ldr r0, _0802A0E8 @ =gSamusData
	ldrh r2, [r0, #0x18]
	ldrh r3, [r0, #0x16]
	ldr r1, _0802A0EC @ =gCurrentSprite
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	subs r0, #1
	cmp r2, r0
	bne _0802A0DE
	adds r0, r1, #0
	subs r0, #0x40
	cmp r0, r3
	bge _0802A0DE
	adds r0, #0x80
	cmp r0, r3
	ble _0802A0DE
	movs r4, #1
_0802A0DE:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0802A0E8: .4byte gSamusData
_0802A0EC: .4byte gCurrentSprite

	thumb_func_start NavPadDetectSamus_Unused
NavPadDetectSamus_Unused: @ 0x0802A0F0
	push {lr}
	movs r3, #0
	ldr r0, _0802A114 @ =gSamusData
	ldrh r2, [r0, #0x16]
	ldr r0, _0802A118 @ =gCurrentSprite
	ldrh r1, [r0, #4]
	adds r0, r1, #0
	subs r0, #0xa0
	cmp r0, r2
	bge _0802A10E
	adds r0, r1, #0
	adds r0, #0xa0
	cmp r0, r2
	ble _0802A10E
	movs r3, #1
_0802A10E:
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
_0802A114: .4byte gSamusData
_0802A118: .4byte gCurrentSprite

	thumb_func_start NavPadInit
NavPadInit: @ 0x0802A11C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r5, _0802A18C @ =gCurrentSprite
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r4, #0
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x25
	strb r4, [r0]
	adds r1, r5, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0802A190 @ =0x0000FFFC
	strh r1, [r5, #0xa]
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	adds r0, r5, #0
	adds r0, #0x21
	movs r7, #1
	strb r7, [r0]
	ldrb r2, [r5, #0x1f]
	adds r6, r5, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #7
	movs r1, #0
	bl SpriteSpawnSecondary
	bl EventCheckWith_NavigationDisabled
	adds r4, r0, #0
	cmp r4, #0
	beq _0802A194
	adds r0, r5, #0
	adds r0, #0x2f
	strb r7, [r0]
	b _0802A1B2
	.align 2, 0
_0802A18C: .4byte gCurrentSprite
_0802A190: .4byte 0x0000FFFC
_0802A194:
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #8
	movs r1, #0
	bl SpriteSpawnSecondary
_0802A1B2:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NavPadIdleInit
NavPadIdleInit: @ 0x0802A1BC
	push {lr}
	ldr r1, _0802A1E4 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802A1EC
	ldr r0, _0802A1E8 @ =0x0831E380
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x46
	b _0802A1F4
	.align 2, 0
_0802A1E4: .4byte gCurrentSprite
_0802A1E8: .4byte 0x0831E380
_0802A1EC:
	ldr r0, _0802A1FC @ =0x0831E318
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #2
_0802A1F4:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0802A1FC: .4byte 0x0831E318

	thumb_func_start NavPadIdle
NavPadIdle: @ 0x0802A200
	push {lr}
	bl NavPadDetectSamus
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802A244
	ldr r3, _0802A238 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802A24C
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802A23C @ =0x0831E278
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0802A240 @ =0x00000101
	bl SoundPlay
	b _0802A24C
	.align 2, 0
_0802A238: .4byte gCurrentSprite
_0802A23C: .4byte 0x0831E278
_0802A240: .4byte 0x00000101
_0802A244:
	ldr r0, _0802A250 @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
_0802A24C:
	pop {r0}
	bx r0
	.align 2, 0
_0802A250: .4byte gCurrentSprite

	thumb_func_start NavPadPressingSwitch
NavPadPressingSwitch: @ 0x0802A254
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802A272
	ldr r1, _0802A278 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _0802A27C @ =0x0831E380
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
_0802A272:
	pop {r0}
	bx r0
	.align 2, 0
_0802A278: .4byte gCurrentSprite
_0802A27C: .4byte 0x0831E380

	thumb_func_start NavPadSwitchPressed
NavPadSwitchPressed: @ 0x0802A280
	push {r4, lr}
	bl NavPadDetectSamus
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _0802A2D4
	bl SamusCheckMorphed
	cmp r0, #0
	bne _0802A2EE
	ldr r2, _0802A2C8 @ =gSamusData
	ldr r4, _0802A2CC @ =gCurrentSprite
	ldrh r0, [r4, #4]
	strh r0, [r2, #0x16]
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _0802A2A8
	movs r0, #0
	strb r0, [r2, #5]
_0802A2A8:
	ldr r1, _0802A2D0 @ =0x0828FD04
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x36
	bl _call_via_r1
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x14
	strb r0, [r1]
	b _0802A2EE
	.align 2, 0
_0802A2C8: .4byte gSamusData
_0802A2CC: .4byte gCurrentSprite
_0802A2D0: .4byte 0x0828FD04
_0802A2D4:
	ldr r1, _0802A2F4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _0802A2F8 @ =0x0831E2F0
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_0802A2EE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802A2F4: .4byte gCurrentSprite
_0802A2F8: .4byte 0x0831E2F0

	thumb_func_start NavPadReleasingSwitch
NavPadReleasingSwitch: @ 0x0802A2FC
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802A30A
	bl NavPadIdleInit
_0802A30A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NavPadAfterConversationInit
NavPadAfterConversationInit: @ 0x0802A310
	push {lr}
	bl EventCheckOn_Escape
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _0802A332
	ldr r0, _0802A340 @ =gEscapeStatus
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802A332
	bl EscapeStart
	movs r0, #0x35
	movs r1, #0xa
	bl PlayMusic
_0802A332:
	ldr r0, _0802A344 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1e
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0802A340: .4byte gEscapeStatus
_0802A344: .4byte gCurrentSprite

	thumb_func_start NavPadAfterConversation
NavPadAfterConversation: @ 0x0802A348
	push {lr}
	bl NavPadDetectSamus
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0802A370
	ldr r1, _0802A374 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _0802A378 @ =0x0831E2F0
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_0802A370:
	pop {r0}
	bx r0
	.align 2, 0
_0802A374: .4byte gCurrentSprite
_0802A378: .4byte 0x0831E2F0

	thumb_func_start NavPadUsingConsole
NavPadUsingConsole: @ 0x0802A37C
	push {r4, lr}
	sub sp, #0xc
	ldr r0, _0802A3E4 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802A39C
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802A39C
	ldr r0, _0802A3E8 @ =0x00000103
	bl SoundPlay
_0802A39C:
	ldr r1, _0802A3EC @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x36
	bne _0802A3DC
	adds r0, r1, #0
	adds r0, #0x22
	ldrb r0, [r0]
	cmp r0, #0xe
	bne _0802A3DC
	ldr r4, _0802A3E4 @ =gCurrentSprite
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0xf0
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #9
	movs r1, #0
	bl SpriteSpawnSecondary
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
_0802A3DC:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802A3E4: .4byte gCurrentSprite
_0802A3E8: .4byte 0x00000103
_0802A3EC: .4byte gSamusData

	thumb_func_start NavPadStartConversation
NavPadStartConversation: @ 0x0802A3F0
	push {lr}
	ldr r2, _0802A420 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802A41A
	ldr r1, _0802A424 @ =gPauseScreenFlag
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0802A428 @ =gSubGameMode1
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1d
	strb r0, [r1]
_0802A41A:
	pop {r0}
	bx r0
	.align 2, 0
_0802A420: .4byte gCurrentSprite
_0802A424: .4byte gPauseScreenFlag
_0802A428: .4byte gSubGameMode1

	thumb_func_start NavConsoleInit
NavConsoleInit: @ 0x0802A42C
	push {r4, lr}
	ldr r0, _0802A480 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0802A484 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802A488 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802A48C @ =0x0831E268
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802A480: .4byte gCurrentSprite
_0802A484: .4byte 0x0000FFFB
_0802A488: .4byte 0x0000FFFC
_0802A48C: .4byte 0x0831E268

	thumb_func_start NavConsoleIdle
NavConsoleIdle: @ 0x0802A490
	bx lr
	.align 2, 0

	thumb_func_start NavConsoleScreenInit
NavConsoleScreenInit: @ 0x0802A494
	push {r4, lr}
	ldr r0, _0802A4F4 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0802A4F8 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802A4FC @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802A500 @ =0x0831E2C8
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802A4F4: .4byte gCurrentSprite
_0802A4F8: .4byte 0x0000FFFB
_0802A4FC: .4byte 0x0000FFFC
_0802A500: .4byte 0x0831E2C8

	thumb_func_start NavConsoleScreenIdle
NavConsoleScreenIdle: @ 0x0802A504
	push {lr}
	ldr r3, _0802A528 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r0, [r0]
	ldr r2, _0802A52C @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x1c
	beq _0802A534
	cmp r0, #0x38
	bne _0802A538
	ldr r0, _0802A530 @ =0x0831E2A0
	b _0802A536
	.align 2, 0
_0802A528: .4byte gCurrentSprite
_0802A52C: .4byte gSpriteData
_0802A530: .4byte 0x0831E2A0
_0802A534:
	ldr r0, _0802A53C @ =0x0831E2C8
_0802A536:
	str r0, [r3, #0x18]
_0802A538:
	pop {r0}
	bx r0
	.align 2, 0
_0802A53C: .4byte 0x0831E2C8

	thumb_func_start NavScreenInit
NavScreenInit: @ 0x0802A540
	push {r4, lr}
	ldr r0, _0802A5A4 @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	mov r4, ip
	ldrh r1, [r4]
	ldr r0, _0802A5A8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802A5AC @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802A5B0 @ =0x0831E340
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	movs r0, #0x82
	lsls r0, r0, #1
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802A5A4: .4byte gCurrentSprite
_0802A5A8: .4byte 0x0000FFFB
_0802A5AC: .4byte 0x0000FFFC
_0802A5B0: .4byte 0x0831E340

	thumb_func_start NavScreenTurningOn
NavScreenTurningOn: @ 0x0802A5B4
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802A5D0
	ldr r1, _0802A5D4 @ =gCurrentSprite
	ldr r0, _0802A5D8 @ =0x0831E328
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_0802A5D0:
	pop {r0}
	bx r0
	.align 2, 0
_0802A5D4: .4byte gCurrentSprite
_0802A5D8: .4byte 0x0831E328

	thumb_func_start NavScreenIdle
NavScreenIdle: @ 0x0802A5DC
	push {lr}
	ldr r3, _0802A614 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0802A618 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bne _0802A610
	ldr r0, _0802A61C @ =0x0831E390
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	adds r0, #0xeb
	bl SoundPlay
_0802A610:
	pop {r0}
	bx r0
	.align 2, 0
_0802A614: .4byte gCurrentSprite
_0802A618: .4byte gSpriteData
_0802A61C: .4byte 0x0831E390

	thumb_func_start NavScreenTurningOff
NavScreenTurningOff: @ 0x0802A620
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802A630
	ldr r1, _0802A634 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_0802A630:
	pop {r0}
	bx r0
	.align 2, 0
_0802A634: .4byte gCurrentSprite

	thumb_func_start NavPad
NavPad: @ 0x0802A638
	push {lr}
	ldr r0, _0802A658 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bls _0802A64E
	b _0802A782
_0802A64E:
	lsls r0, r0, #2
	ldr r1, _0802A65C @ =_0802A660
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802A658: .4byte gCurrentSprite
_0802A65C: .4byte _0802A660
_0802A660: @ jump table
	.4byte _0802A74C @ case 0
	.4byte _0802A750 @ case 1
	.4byte _0802A756 @ case 2
	.4byte _0802A782 @ case 3
	.4byte _0802A782 @ case 4
	.4byte _0802A782 @ case 5
	.4byte _0802A782 @ case 6
	.4byte _0802A782 @ case 7
	.4byte _0802A782 @ case 8
	.4byte _0802A782 @ case 9
	.4byte _0802A782 @ case 10
	.4byte _0802A782 @ case 11
	.4byte _0802A782 @ case 12
	.4byte _0802A782 @ case 13
	.4byte _0802A782 @ case 14
	.4byte _0802A782 @ case 15
	.4byte _0802A782 @ case 16
	.4byte _0802A782 @ case 17
	.4byte _0802A782 @ case 18
	.4byte _0802A782 @ case 19
	.4byte _0802A782 @ case 20
	.4byte _0802A782 @ case 21
	.4byte _0802A782 @ case 22
	.4byte _0802A782 @ case 23
	.4byte _0802A75C @ case 24
	.4byte _0802A782 @ case 25
	.4byte _0802A762 @ case 26
	.4byte _0802A782 @ case 27
	.4byte _0802A768 @ case 28
	.4byte _0802A76E @ case 29
	.4byte _0802A772 @ case 30
	.4byte _0802A782 @ case 31
	.4byte _0802A782 @ case 32
	.4byte _0802A782 @ case 33
	.4byte _0802A782 @ case 34
	.4byte _0802A782 @ case 35
	.4byte _0802A782 @ case 36
	.4byte _0802A782 @ case 37
	.4byte _0802A782 @ case 38
	.4byte _0802A782 @ case 39
	.4byte _0802A782 @ case 40
	.4byte _0802A782 @ case 41
	.4byte _0802A782 @ case 42
	.4byte _0802A782 @ case 43
	.4byte _0802A782 @ case 44
	.4byte _0802A782 @ case 45
	.4byte _0802A782 @ case 46
	.4byte _0802A782 @ case 47
	.4byte _0802A782 @ case 48
	.4byte _0802A782 @ case 49
	.4byte _0802A782 @ case 50
	.4byte _0802A782 @ case 51
	.4byte _0802A782 @ case 52
	.4byte _0802A782 @ case 53
	.4byte _0802A782 @ case 54
	.4byte _0802A782 @ case 55
	.4byte _0802A778 @ case 56
	.4byte _0802A782 @ case 57
	.4byte _0802A77E @ case 58
_0802A74C:
	bl NavPadInit
_0802A750:
	bl NavPadIdleInit
	b _0802A782
_0802A756:
	bl NavPadIdle
	b _0802A782
_0802A75C:
	bl NavPadPressingSwitch
	b _0802A782
_0802A762:
	bl NavPadSwitchPressed
	b _0802A782
_0802A768:
	bl NavPadReleasingSwitch
	b _0802A782
_0802A76E:
	bl NavPadAfterConversationInit
_0802A772:
	bl NavPadAfterConversation
	b _0802A782
_0802A778:
	bl NavPadUsingConsole
	b _0802A782
_0802A77E:
	bl NavPadStartConversation
_0802A782:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NavConsole
NavConsole: @ 0x0802A788
	push {lr}
	ldr r0, _0802A7A4 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802A7A8
	cmp r0, #2
	beq _0802A7AC
	b _0802A7B0
	.align 2, 0
_0802A7A4: .4byte gCurrentSprite
_0802A7A8:
	bl NavConsoleInit
_0802A7AC:
	bl NavConsoleIdle
_0802A7B0:
	pop {r0}
	bx r0

	thumb_func_start NavConsoleScreen
NavConsoleScreen: @ 0x0802A7B4
	push {lr}
	ldr r0, _0802A7D0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802A7D4
	cmp r0, #2
	beq _0802A7D8
	b _0802A7DC
	.align 2, 0
_0802A7D0: .4byte gCurrentSprite
_0802A7D4:
	bl NavConsoleScreenInit
_0802A7D8:
	bl NavConsoleScreenIdle
_0802A7DC:
	pop {r0}
	bx r0

	thumb_func_start NavScreen
NavScreen: @ 0x0802A7E0
	push {lr}
	ldr r0, _0802A800 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0802A812
	cmp r0, #2
	bgt _0802A804
	cmp r0, #0
	beq _0802A80E
	b _0802A822
	.align 2, 0
_0802A800: .4byte gCurrentSprite
_0802A804:
	cmp r0, #0x18
	beq _0802A818
	cmp r0, #0x1a
	beq _0802A81E
	b _0802A822
_0802A80E:
	bl NavScreenInit
_0802A812:
	bl NavScreenTurningOn
	b _0802A822
_0802A818:
	bl NavScreenIdle
	b _0802A822
_0802A81E:
	bl NavScreenTurningOff
_0802A822:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start TrySpawnMessageBanner
TrySpawnMessageBanner: @ 0x0802A828
	push {r4, r5, lr}
	sub sp, #0xc
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r2, #0x80
	movs r3, #0
	ldr r0, _0802A844 @ =gSpritesetSpriteIds
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0x21
	bne _0802A84C
	ldr r0, _0802A848 @ =gSpritesetSpriteGfxSlots
	b _0802A862
	.align 2, 0
_0802A844: .4byte gSpritesetSpriteIds
_0802A848: .4byte gSpritesetSpriteGfxSlots
_0802A84C:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xe
	bhi _0802A864
	adds r0, r3, r4
	ldrb r0, [r0]
	cmp r0, #0x21
	bne _0802A84C
	ldr r0, _0802A888 @ =gSpritesetSpriteGfxSlots
	adds r0, r3, r0
_0802A862:
	ldrb r2, [r0]
_0802A864:
	cmp r2, #7
	bhi _0802A890
	ldr r1, _0802A88C @ =gSamusData
	ldrh r0, [r1, #0x18]
	str r0, [sp]
	ldrh r0, [r1, #0x16]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x21
	adds r1, r5, #0
	movs r3, #0x10
	bl SpriteSpawnPrimary
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	b _0802A892
	.align 2, 0
_0802A888: .4byte gSpritesetSpriteGfxSlots
_0802A88C: .4byte gSamusData
_0802A890:
	movs r3, #0x18
_0802A892:
	adds r0, r3, #0
	add sp, #0xc
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start MessageBannerInit
MessageBannerInit: @ 0x0802A89C
	push {r4, r5, r6, lr}
	ldr r1, _0802A920 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #2
	ands r0, r2
	mov ip, r1
	cmp r0, #0
	bne _0802A8B6
	movs r0, #2
	orrs r0, r2
	strh r0, [r1]
	movs r0, #0xff
	strb r0, [r1, #0x1e]
_0802A8B6:
	mov r0, ip
	ldrb r6, [r0, #0x1e]
	ldrh r0, [r0]
	movs r3, #0x10
	movs r5, #0
	movs r4, #0
	orrs r0, r3
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x21
	strb r5, [r0]
	adds r0, #4
	strb r5, [r0]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x21
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x80
	strb r0, [r1]
	ldr r1, _0802A924 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _0802A928 @ =0x0831F758
	str r0, [r2, #0x18]
	strb r5, [r2, #0x1c]
	strh r4, [r2, #0x16]
	movs r0, #9
	strh r0, [r2, #6]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	cmp r6, #0xc
	bne _0802A92C
	adds r1, #1
	movs r0, #1
	strb r0, [r1]
	b _0802A932
	.align 2, 0
_0802A920: .4byte gCurrentSprite
_0802A924: .4byte 0x0000FFFC
_0802A928: .4byte 0x0831F758
_0802A92C:
	mov r0, ip
	adds r0, #0x2f
	strb r5, [r0]
_0802A932:
	adds r0, r6, #0
	subs r0, #0x12
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0802A9A2
	movs r3, #0x80
	movs r2, #0
	ldr r0, _0802A954 @ =gSpritesetSpriteIds
	ldrb r1, [r0]
	adds r4, r0, #0
	ldr r5, _0802A958 @ =gPreventMovementTimer
	cmp r1, #0x21
	bne _0802A960
	ldr r0, _0802A95C @ =gSpritesetSpriteGfxSlots
	b _0802A976
	.align 2, 0
_0802A954: .4byte gSpritesetSpriteIds
_0802A958: .4byte gPreventMovementTimer
_0802A95C: .4byte gSpritesetSpriteGfxSlots
_0802A960:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xe
	bhi _0802A978
	adds r0, r2, r4
	ldrb r0, [r0]
	cmp r0, #0x21
	bne _0802A960
	ldr r0, _0802A98C @ =gSpritesetSpriteGfxSlots
	adds r0, r2, r0
_0802A976:
	ldrb r3, [r0]
_0802A978:
	cmp r3, #7
	bhi _0802A990
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	strb r3, [r0, #0x1f]
	b _0802A998
	.align 2, 0
_0802A98C: .4byte gSpritesetSpriteGfxSlots
_0802A990:
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_0802A998:
	movs r1, #0xfa
	lsls r1, r1, #2
	adds r0, r1, #0
	strh r0, [r5]
	b _0802A9AA
_0802A9A2:
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
_0802A9AA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start MessageBannerGfxInit
MessageBannerGfxInit: @ 0x0802A9B0
	push {lr}
	ldr r2, _0802A9D0 @ =gCurrentSprite
	ldrh r0, [r2, #6]
	subs r0, #1
	strh r0, [r2, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #7
	bhi _0802A9D4
	ldrb r1, [r2, #0x1f]
	ldrh r2, [r2, #6]
	movs r0, #0x21
	bl SpriteLoadGfx
	b _0802A9E2
	.align 2, 0
_0802A9D0: .4byte gCurrentSprite
_0802A9D4:
	cmp r0, #8
	bne _0802A9E2
	ldrb r1, [r2, #0x1f]
	movs r0, #0x21
	movs r2, #2
	bl SpriteLoadPal
_0802A9E2:
	ldr r3, _0802A9FC @ =gCurrentSprite
	ldrh r2, [r3, #6]
	cmp r2, #0
	bne _0802A9F6
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
_0802A9F6:
	pop {r0}
	bx r0
	.align 2, 0
_0802A9FC: .4byte gCurrentSprite

	thumb_func_start MessageBannerPopUp
MessageBannerPopUp: @ 0x0802AA00
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r4, _0802AA34 @ =gCurrentSprite
	ldrb r6, [r4, #0x1e]
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r1, [r2]
	adds r5, r1, #0
	cmp r5, #0
	beq _0802AA92
	ldrb r0, [r4, #0x1c]
	subs r0, #1
	strb r0, [r4, #0x1c]
	subs r0, r1, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802AA66
	ldrh r1, [r4]
	ldr r0, _0802AA38 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	cmp r6, #0
	bne _0802AA3C
	movs r0, #0x10
	b _0802AA54
	.align 2, 0
_0802AA34: .4byte gCurrentSprite
_0802AA38: .4byte 0x0000FFFB
_0802AA3C:
	subs r0, r6, #5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bhi _0802AA5C
	cmp r6, #7
	bne _0802AA52
	movs r0, #3
	movs r1, #0xa
	bl PlayMusic
_0802AA52:
	movs r0, #0x3b
_0802AA54:
	movs r1, #0
	bl unk_38a8
	b _0802AA66
_0802AA5C:
	cmp r0, #7
	bls _0802AA66
	movs r0, #0x14
	bl unk_3b1c
_0802AA66:
	ldr r1, _0802AA84 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	cmp r0, #7
	bhi _0802AB0A
	cmp r6, #0
	beq _0802AA88
	ldrb r1, [r1, #0x1f]
	adds r2, r0, #0
	adds r0, r6, #0
	bl TextDrawMessageBanner
	b _0802AB0A
	.align 2, 0
_0802AA84: .4byte gCurrentSprite
_0802AA88:
	ldrb r0, [r1, #0x1f]
	ldrb r1, [r2]
	bl DisplayMessage
	b _0802AB0A
_0802AA92:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802AB0A
	ldr r0, _0802AAB8 @ =0x0831F808
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	cmp r6, #0
	bne _0802AABC
	movs r0, #0xb9
	lsls r0, r0, #1
	strh r0, [r4, #6]
	b _0802AB0A
	.align 2, 0
_0802AAB8: .4byte 0x0831F808
_0802AABC:
	cmp r6, #0xc
	beq _0802AAC4
	cmp r6, #0xe
	bne _0802AAE0
_0802AAC4:
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	movs r0, #0x3f
	str r0, [sp]
	movs r0, #0x96
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x26
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0802AAF0
_0802AAE0:
	adds r0, r6, #0
	subs r0, #0xa
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0802AAF0
	bl EscapeStart
_0802AAF0:
	subs r0, r6, #5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bhi _0802AB04
	ldr r1, _0802AB00 @ =gCurrentSprite
	movs r0, #0xb4
	b _0802AB08
	.align 2, 0
_0802AB00: .4byte gCurrentSprite
_0802AB04:
	ldr r1, _0802AB14 @ =gCurrentSprite
	movs r0, #0x5a
_0802AB08:
	strh r0, [r1, #6]
_0802AB0A:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802AB14: .4byte gCurrentSprite

	thumb_func_start MessageBannerStatic
MessageBannerStatic: @ 0x0802AB18
	push {r4, r5, lr}
	ldr r1, _0802AB38 @ =gCurrentSprite
	ldrb r2, [r1, #0x1e]
	adds r4, r2, #0
	ldr r5, _0802AB3C @ =gPreventMovementTimer
	movs r3, #0xfa
	lsls r3, r3, #2
	adds r0, r3, #0
	strh r0, [r5]
	ldrh r0, [r1, #6]
	cmp r0, #0
	beq _0802AB40
	subs r0, #1
	strh r0, [r1, #6]
	b _0802AB96
	.align 2, 0
_0802AB38: .4byte gCurrentSprite
_0802AB3C: .4byte gPreventMovementTimer
_0802AB40:
	cmp r2, #0xc
	beq _0802AB96
	cmp r2, #0xe
	beq _0802AB96
	ldr r0, _0802AB68 @ =gButtonInput
	ldrh r0, [r0]
	movs r3, #0xf3
	ands r3, r0
	cmp r3, #0
	beq _0802AB82
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
	cmp r2, #0
	bne _0802AB6C
	bl ProjectileLoadBeamGraphics
	bl ProjectileLoadMissileGraphics
	b _0802AB96
	.align 2, 0
_0802AB68: .4byte gButtonInput
_0802AB6C:
	cmp r2, #0xa
	bne _0802AB74
	movs r0, #0x17
	b _0802AB7A
_0802AB74:
	cmp r2, #0xb
	bne _0802AB96
	movs r0, #0x38
_0802AB7A:
	movs r1, #0xa
	bl PlayMusic
	b _0802AB96
_0802AB82:
	cmp r4, #8
	bne _0802AB96
	ldr r0, _0802AB9C @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x3b
	bne _0802AB96
	strh r3, [r5]
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
_0802AB96:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802AB9C: .4byte gSamusData

	thumb_func_start MessageBannerRemovalInit
MessageBannerRemovalInit: @ 0x0802ABA0
	push {lr}
	ldr r0, _0802ABD8 @ =gCurrentSprite
	ldrb r2, [r0, #0x1e]
	cmp r2, #8
	beq _0802ABC0
	ldr r1, _0802ABDC @ =gPreventMovementTimer
	movs r0, #0
	strh r0, [r1]
	adds r0, r2, #0
	subs r0, #0x12
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _0802ABC0
	bl FinishCollectingTank
_0802ABC0:
	ldr r1, _0802ABD8 @ =gCurrentSprite
	ldr r0, _0802ABE0 @ =0x0831F7B0
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0802ABD8: .4byte gCurrentSprite
_0802ABDC: .4byte gPreventMovementTimer
_0802ABE0: .4byte 0x0831F7B0

	thumb_func_start MesageBannerRemoval
MesageBannerRemoval: @ 0x0802ABE4
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802AC12
	ldr r1, _0802AC18 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	ldrb r0, [r1, #0x1e]
	cmp r0, #0xe
	bne _0802AC12
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bne _0802AC12
	ldr r1, _0802AC1C @ =gPauseScreenFlag
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0802AC20 @ =gSubGameMode1
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_0802AC12:
	pop {r0}
	bx r0
	.align 2, 0
_0802AC18: .4byte gCurrentSprite
_0802AC1C: .4byte gPauseScreenFlag
_0802AC20: .4byte gSubGameMode1

	thumb_func_start MessageBanner
MessageBanner: @ 0x0802AC24
	push {lr}
	ldr r0, _0802AC44 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1a
	bhi _0802ACDA
	lsls r0, r0, #2
	ldr r1, _0802AC48 @ =_0802AC4C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802AC44: .4byte gCurrentSprite
_0802AC48: .4byte _0802AC4C
_0802AC4C: @ jump table
	.4byte _0802ACB8 @ case 0
	.4byte _0802ACBE @ case 1
	.4byte _0802ACC4 @ case 2
	.4byte _0802ACDA @ case 3
	.4byte _0802ACDA @ case 4
	.4byte _0802ACDA @ case 5
	.4byte _0802ACDA @ case 6
	.4byte _0802ACDA @ case 7
	.4byte _0802ACDA @ case 8
	.4byte _0802ACDA @ case 9
	.4byte _0802ACDA @ case 10
	.4byte _0802ACDA @ case 11
	.4byte _0802ACDA @ case 12
	.4byte _0802ACDA @ case 13
	.4byte _0802ACDA @ case 14
	.4byte _0802ACDA @ case 15
	.4byte _0802ACDA @ case 16
	.4byte _0802ACDA @ case 17
	.4byte _0802ACDA @ case 18
	.4byte _0802ACDA @ case 19
	.4byte _0802ACDA @ case 20
	.4byte _0802ACDA @ case 21
	.4byte _0802ACDA @ case 22
	.4byte _0802ACDA @ case 23
	.4byte _0802ACCA @ case 24
	.4byte _0802ACD0 @ case 25
	.4byte _0802ACD6 @ case 26
_0802ACB8:
	bl MessageBannerInit
	b _0802ACDA
_0802ACBE:
	bl MessageBannerGfxInit
	b _0802ACDA
_0802ACC4:
	bl MessageBannerPopUp
	b _0802ACDA
_0802ACCA:
	bl MessageBannerStatic
	b _0802ACDA
_0802ACD0:
	bl MessageBannerRemovalInit
	b _0802ACDA
_0802ACD6:
	bl MesageBannerRemoval
_0802ACDA:
	ldr r0, _0802ACE8 @ =gCurrentSprite
	movs r1, #0x36
	strh r1, [r0, #2]
	movs r1, #0x78
	strh r1, [r0, #4]
	pop {r0}
	bx r0
	.align 2, 0
_0802ACE8: .4byte gCurrentSprite

	thumb_func_start SaveYesNoCursor
SaveYesNoCursor: @ 0x0802ACEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r5, _0802AD20 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x26
	movs r1, #0
	mov r8, r1
	movs r2, #1
	strb r2, [r0]
	subs r0, #3
	ldrb r6, [r0]
	adds r7, r5, #0
	adds r7, #0x24
	ldrb r0, [r7]
	cmp r0, #0x38
	bne _0802AD10
	b _0802AE50
_0802AD10:
	cmp r0, #0x38
	bgt _0802AD24
	cmp r0, #0
	beq _0802AD32
	cmp r0, #2
	beq _0802ADB0
	b _0802AE72
	.align 2, 0
_0802AD20: .4byte gCurrentSprite
_0802AD24:
	cmp r0, #0x3a
	bne _0802AD2A
	b _0802AE5C
_0802AD2A:
	cmp r0, #0x3c
	bne _0802AD30
	b _0802AE68
_0802AD30:
	b _0802AE72
_0802AD32:
	ldrh r0, [r5]
	movs r3, #0x10
	movs r4, #0
	orrs r0, r3
	ldr r1, _0802ADA0 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x21
	strb r4, [r0]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x25
	strb r4, [r0]
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #0x21
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x27
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r1, _0802ADA4 @ =0x0000FFFC
	strh r1, [r5, #0xa]
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _0802ADA8 @ =0x0831F730
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	mov r0, r8
	strh r0, [r5, #0x16]
	movs r0, #2
	strb r0, [r7]
	movs r0, #0x3f
	strh r0, [r5, #2]
	ldr r1, _0802ADAC @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #0x1e]
	cmp r0, #0xc
	beq _0802ADCA
	b _0802ADEA
	.align 2, 0
_0802ADA0: .4byte 0x0000FFFB
_0802ADA4: .4byte 0x0000FFFC
_0802ADA8: .4byte 0x0831F730
_0802ADAC: .4byte gSpriteData
_0802ADB0:
	ldr r0, _0802ADD0 @ =gChangedInput
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0802ADD4
	ldrh r0, [r5, #4]
	cmp r0, #0x36
	beq _0802AE72
	movs r0, #0xfd
	lsls r0, r0, #1
	bl SoundPlay
_0802ADCA:
	movs r0, #0x36
	strh r0, [r5, #4]
	b _0802AE72
	.align 2, 0
_0802ADD0: .4byte gChangedInput
_0802ADD4:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0802ADF0
	ldrh r0, [r5, #4]
	cmp r0, #0x96
	beq _0802AE72
	movs r0, #0xfd
	lsls r0, r0, #1
	bl SoundPlay
_0802ADEA:
	movs r0, #0x96
	strh r0, [r5, #4]
	b _0802AE72
_0802ADF0:
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0802AE72
	ldr r0, _0802AE28 @ =0x000001FB
	bl SoundPlay
	ldr r1, _0802AE2C @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r2, r0, r1
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
	ldrh r0, [r5, #4]
	cmp r0, #0x36
	bne _0802AE3A
	ldrb r0, [r2, #0x1e]
	cmp r0, #0xc
	bne _0802AE30
	movs r0, #0
	bl Sram_QuickSave
	movs r0, #0x38
	strb r0, [r7]
	b _0802AE72
	.align 2, 0
_0802AE28: .4byte 0x000001FB
_0802AE2C: .4byte gSpriteData
_0802AE30:
	adds r1, r2, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	b _0802AE42
_0802AE3A:
	adds r0, r2, #0
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
_0802AE42:
	ldr r1, _0802AE4C @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0802AE72
	.align 2, 0
_0802AE4C: .4byte gCurrentSprite
_0802AE50:
	movs r0, #1
	bl Sram_QuickSave
	movs r0, #0x3a
	strb r0, [r7]
	b _0802AE72
_0802AE5C:
	movs r0, #2
	bl Sram_QuickSave
	movs r0, #0x3c
	strb r0, [r7]
	b _0802AE72
_0802AE68:
	movs r0, #3
	bl Sram_QuickSave
	mov r0, r8
	strh r0, [r5]
_0802AE72:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start DataPadInit
DataPadInit: @ 0x0802AE7C
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r4, _0802AED0 @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0802AED4 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x21
	movs r5, #1
	strb r5, [r0]
	movs r0, #0
	bl CheckDownloadedDataItem
	cmp r0, #0
	beq _0802AED8
	adds r0, r4, #0
	adds r0, #0x2f
	strb r5, [r0]
	b _0802AEE0
	.align 2, 0
_0802AED0: .4byte gCurrentSprite
_0802AED4: .4byte 0x0000FFFC
_0802AED8:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
_0802AEE0:
	ldr r4, _0802AF1C @ =gCurrentSprite
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r0, #0x1e
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x1f
	movs r1, #0
	bl SpriteSpawnSecondary
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802AF1C: .4byte gCurrentSprite

	thumb_func_start DataPadIdleInit
DataPadIdleInit: @ 0x0802AF20
	push {lr}
	ldr r1, _0802AF48 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802AF50
	ldr r0, _0802AF4C @ =0x083219C4
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #2
	b _0802AF58
	.align 2, 0
_0802AF48: .4byte gCurrentSprite
_0802AF4C: .4byte 0x083219C4
_0802AF50:
	ldr r0, _0802AF60 @ =0x083219D4
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x1e
_0802AF58:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0802AF60: .4byte 0x083219D4

	thumb_func_start DataPadIdle
DataPadIdle: @ 0x0802AF64
	push {lr}
	bl NavPadDetectSamus
	cmp r0, #0
	beq _0802AFA4
	ldr r3, _0802AF98 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802AFAC
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802AF9C @ =0x083219E4
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0802AFA0 @ =0x00000101
	bl SoundPlay
	b _0802AFAC
	.align 2, 0
_0802AF98: .4byte gCurrentSprite
_0802AF9C: .4byte 0x083219E4
_0802AFA0: .4byte 0x00000101
_0802AFA4:
	ldr r0, _0802AFB0 @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
_0802AFAC:
	pop {r0}
	bx r0
	.align 2, 0
_0802AFB0: .4byte gCurrentSprite

	thumb_func_start DataPadPressingSwitch
DataPadPressingSwitch: @ 0x0802AFB4
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802AFD2
	ldr r1, _0802AFD8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _0802AFDC @ =0x083219D4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
_0802AFD2:
	pop {r0}
	bx r0
	.align 2, 0
_0802AFD8: .4byte gCurrentSprite
_0802AFDC: .4byte 0x083219D4

	thumb_func_start DataPadSwitchPressed
DataPadSwitchPressed: @ 0x0802AFE0
	push {r4, lr}
	bl NavPadDetectSamus
	adds r3, r0, #0
	cmp r3, #0
	beq _0802B034
	bl SamusCheckMorphed
	cmp r0, #0
	bne _0802B04E
	ldr r2, _0802B028 @ =gSamusData
	ldr r4, _0802B02C @ =gCurrentSprite
	ldrh r0, [r4, #4]
	strh r0, [r2, #0x16]
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _0802B006
	movs r0, #0
	strb r0, [r2, #5]
_0802B006:
	ldr r1, _0802B030 @ =0x0828FD04
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x20
	bl _call_via_r1
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	b _0802B04E
	.align 2, 0
_0802B028: .4byte gSamusData
_0802B02C: .4byte gCurrentSprite
_0802B030: .4byte 0x0828FD04
_0802B034:
	ldr r1, _0802B054 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _0802B058 @ =0x08321A0C
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_0802B04E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802B054: .4byte gCurrentSprite
_0802B058: .4byte 0x08321A0C

	thumb_func_start DataPadReleasingSwitch
DataPadReleasingSwitch: @ 0x0802B05C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802B06A
	bl DataPadIdleInit
_0802B06A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DataPadLockingSamus
DataPadLockingSamus: @ 0x0802B070
	push {lr}
	ldr r1, _0802B0B0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802B0AC
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	movs r0, #0x78
	strb r0, [r2]
	movs r0, #1
	bl CheckDownloadedDataItem
	ldr r1, _0802B0B4 @ =gDoorUnlockTimer
	movs r0, #0x3c
	strb r0, [r1]
	ldr r1, _0802B0B8 @ =0x0828FD04
	ldr r0, _0802B0BC @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x37
	bl _call_via_r1
_0802B0AC:
	pop {r0}
	bx r0
	.align 2, 0
_0802B0B0: .4byte gCurrentSprite
_0802B0B4: .4byte gDoorUnlockTimer
_0802B0B8: .4byte 0x0828FD04
_0802B0BC: .4byte gSamusData

	thumb_func_start DataPadDownloadingData
DataPadDownloadingData: @ 0x0802B0C0
	push {lr}
	ldr r1, _0802B0E0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802B0DA
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_0802B0DA:
	pop {r0}
	bx r0
	.align 2, 0
_0802B0E0: .4byte gCurrentSprite

	thumb_func_start DataPadCenterInit
DataPadCenterInit: @ 0x0802B0E4
	push {r4, lr}
	ldr r0, _0802B160 @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	mov r4, ip
	ldrh r1, [r4]
	ldr r0, _0802B164 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x28
	strb r0, [r1]
	ldr r1, _0802B168 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r2, _0802B16C @ =gSpriteData
	mov r0, ip
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802B174
	ldr r0, _0802B170 @ =0x08321A44
	str r0, [r4, #0x18]
	b _0802B17A
	.align 2, 0
_0802B160: .4byte gCurrentSprite
_0802B164: .4byte 0x0000FFFB
_0802B168: .4byte 0x0000FFFC
_0802B16C: .4byte gSpriteData
_0802B170: .4byte 0x08321A44
_0802B174:
	ldr r0, _0802B180 @ =0x08321A34
	mov r1, ip
	str r0, [r1, #0x18]
_0802B17A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802B180: .4byte 0x08321A34

	thumb_func_start DataPadCenterIdle
DataPadCenterIdle: @ 0x0802B184
	push {lr}
	ldr r2, _0802B1CC @ =gSpriteData
	ldr r3, _0802B1D0 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x38
	bne _0802B1C8
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802B1C8
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0802B1D4 @ =0x08321A64
	str r0, [r3, #0x18]
	movs r0, #0x85
	lsls r0, r0, #1
	bl SoundPlay
_0802B1C8:
	pop {r0}
	bx r0
	.align 2, 0
_0802B1CC: .4byte gSpriteData
_0802B1D0: .4byte gCurrentSprite
_0802B1D4: .4byte 0x08321A64

	thumb_func_start DataPadCenterEngaging
DataPadCenterEngaging: @ 0x0802B1D8
	push {lr}
	ldr r2, _0802B214 @ =gSpriteData
	ldr r3, _0802B218 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bne _0802B20E
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x1a
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	ldr r0, _0802B21C @ =0x08321A44
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x14
	strb r0, [r1]
_0802B20E:
	pop {r0}
	bx r0
	.align 2, 0
_0802B214: .4byte gSpriteData
_0802B218: .4byte gCurrentSprite
_0802B21C: .4byte 0x08321A44

	thumb_func_start DataPadCenterDownloadingData
DataPadCenterDownloadingData: @ 0x0802B220
	push {lr}
	ldr r3, _0802B24C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802B246
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0x1c
	strb r1, [r0]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0802B250 @ =0x08321A34
	str r0, [r3, #0x18]
_0802B246:
	pop {r0}
	bx r0
	.align 2, 0
_0802B24C: .4byte gCurrentSprite
_0802B250: .4byte 0x08321A34

	thumb_func_start DataPadSidesInit
DataPadSidesInit: @ 0x0802B254
	push {r4, lr}
	ldr r0, _0802B2B8 @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	mov r4, ip
	ldrh r1, [r4]
	ldr r0, _0802B2BC @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x28
	strb r0, [r1]
	ldr r1, _0802B2C0 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802B2C4 @ =0x08321A8C
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802B2B8: .4byte gCurrentSprite
_0802B2BC: .4byte 0x0000FFFB
_0802B2C0: .4byte 0x0000FFFC
_0802B2C4: .4byte 0x08321A8C

	thumb_func_start DataPadSidesIdle
DataPadSidesIdle: @ 0x0802B2C8
	push {lr}
	ldr r2, _0802B304 @ =gSpriteData
	ldr r3, _0802B308 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x38
	bne _0802B2FE
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	ldr r0, _0802B30C @ =0x08321A9C
	str r0, [r3, #0x18]
	movs r0, #0x84
	lsls r0, r0, #1
	bl SoundPlay
_0802B2FE:
	pop {r0}
	bx r0
	.align 2, 0
_0802B304: .4byte gSpriteData
_0802B308: .4byte gCurrentSprite
_0802B30C: .4byte 0x08321A9C

	thumb_func_start DataPadSidesEngaging
DataPadSidesEngaging: @ 0x0802B310
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802B32E
	ldr r1, _0802B334 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0802B338 @ =0x08321ADC
	str r0, [r1, #0x18]
_0802B32E:
	pop {r0}
	bx r0
	.align 2, 0
_0802B334: .4byte gCurrentSprite
_0802B338: .4byte 0x08321ADC

	thumb_func_start DataPadSidesDownloadingData
DataPadSidesDownloadingData: @ 0x0802B33C
	push {r4, lr}
	ldr r2, _0802B38C @ =gSpriteData
	ldr r3, _0802B390 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bne _0802B386
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x14
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #0x1c
	strb r0, [r1]
	ldr r1, _0802B394 @ =0x0828FD04
	ldr r4, _0802B398 @ =gSamusData
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x39
	bl _call_via_r1
	movs r0, #0xa
	strh r0, [r4, #0x10]
	ldr r1, _0802B39C @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
_0802B386:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802B38C: .4byte gSpriteData
_0802B390: .4byte gCurrentSprite
_0802B394: .4byte 0x0828FD04
_0802B398: .4byte gSamusData
_0802B39C: .4byte gPreventMovementTimer

	thumb_func_start DataPadSidesDoneDownloadingData
DataPadSidesDoneDownloadingData: @ 0x0802B3A0
	push {lr}
	ldr r3, _0802B3D0 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802B3CA
	subs r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0802B3D4 @ =0x08321ABC
	str r0, [r3, #0x18]
	ldr r0, _0802B3D8 @ =0x00000109
	bl SoundPlay
_0802B3CA:
	pop {r0}
	bx r0
	.align 2, 0
_0802B3D0: .4byte gCurrentSprite
_0802B3D4: .4byte 0x08321ABC
_0802B3D8: .4byte 0x00000109

	thumb_func_start DataPadSidesDisengaging
DataPadSidesDisengaging: @ 0x0802B3DC
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802B400
	ldr r1, _0802B404 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x46
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0802B408 @ =0x08321A8C
	str r0, [r1, #0x18]
	movs r0, #0
	bl TrySpawnMessageBanner
_0802B400:
	pop {r0}
	bx r0
	.align 2, 0
_0802B404: .4byte gCurrentSprite
_0802B408: .4byte 0x08321A8C

	thumb_func_start DataPad
DataPad: @ 0x0802B40C
	push {lr}
	ldr r0, _0802B42C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bls _0802B422
	b _0802B54C
_0802B422:
	lsls r0, r0, #2
	ldr r1, _0802B430 @ =_0802B434
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802B42C: .4byte gCurrentSprite
_0802B430: .4byte _0802B434
_0802B434: @ jump table
	.4byte _0802B520 @ case 0
	.4byte _0802B524 @ case 1
	.4byte _0802B52A @ case 2
	.4byte _0802B54C @ case 3
	.4byte _0802B54C @ case 4
	.4byte _0802B54C @ case 5
	.4byte _0802B54C @ case 6
	.4byte _0802B54C @ case 7
	.4byte _0802B54C @ case 8
	.4byte _0802B54C @ case 9
	.4byte _0802B54C @ case 10
	.4byte _0802B54C @ case 11
	.4byte _0802B54C @ case 12
	.4byte _0802B54C @ case 13
	.4byte _0802B54C @ case 14
	.4byte _0802B54C @ case 15
	.4byte _0802B54C @ case 16
	.4byte _0802B54C @ case 17
	.4byte _0802B54C @ case 18
	.4byte _0802B54C @ case 19
	.4byte _0802B54C @ case 20
	.4byte _0802B54C @ case 21
	.4byte _0802B54C @ case 22
	.4byte _0802B54C @ case 23
	.4byte _0802B530 @ case 24
	.4byte _0802B54C @ case 25
	.4byte _0802B536 @ case 26
	.4byte _0802B54C @ case 27
	.4byte _0802B53C @ case 28
	.4byte _0802B54C @ case 29
	.4byte _0802B54C @ case 30
	.4byte _0802B54C @ case 31
	.4byte _0802B54C @ case 32
	.4byte _0802B54C @ case 33
	.4byte _0802B54C @ case 34
	.4byte _0802B54C @ case 35
	.4byte _0802B54C @ case 36
	.4byte _0802B54C @ case 37
	.4byte _0802B54C @ case 38
	.4byte _0802B54C @ case 39
	.4byte _0802B54C @ case 40
	.4byte _0802B54C @ case 41
	.4byte _0802B54C @ case 42
	.4byte _0802B54C @ case 43
	.4byte _0802B54C @ case 44
	.4byte _0802B54C @ case 45
	.4byte _0802B54C @ case 46
	.4byte _0802B54C @ case 47
	.4byte _0802B54C @ case 48
	.4byte _0802B54C @ case 49
	.4byte _0802B54C @ case 50
	.4byte _0802B54C @ case 51
	.4byte _0802B54C @ case 52
	.4byte _0802B54C @ case 53
	.4byte _0802B54C @ case 54
	.4byte _0802B54C @ case 55
	.4byte _0802B542 @ case 56
	.4byte _0802B54C @ case 57
	.4byte _0802B548 @ case 58
_0802B520:
	bl DataPadInit
_0802B524:
	bl DataPadIdleInit
	b _0802B54C
_0802B52A:
	bl DataPadIdle
	b _0802B54C
_0802B530:
	bl DataPadPressingSwitch
	b _0802B54C
_0802B536:
	bl DataPadSwitchPressed
	b _0802B54C
_0802B53C:
	bl DataPadReleasingSwitch
	b _0802B54C
_0802B542:
	bl DataPadLockingSamus
	b _0802B54C
_0802B548:
	bl DataPadDownloadingData
_0802B54C:
	pop {r0}
	bx r0

	thumb_func_start DataPadCenter
DataPadCenter: @ 0x0802B550
	push {lr}
	ldr r0, _0802B570 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0802B582
	cmp r0, #2
	bgt _0802B574
	cmp r0, #0
	beq _0802B57E
	b _0802B592
	.align 2, 0
_0802B570: .4byte gCurrentSprite
_0802B574:
	cmp r0, #0x18
	beq _0802B588
	cmp r0, #0x1a
	beq _0802B58E
	b _0802B592
_0802B57E:
	bl DataPadCenterInit
_0802B582:
	bl DataPadCenterIdle
	b _0802B592
_0802B588:
	bl DataPadCenterEngaging
	b _0802B592
_0802B58E:
	bl DataPadCenterDownloadingData
_0802B592:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DataPadSides
DataPadSides: @ 0x0802B598
	push {lr}
	ldr r0, _0802B5B8 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bhi _0802B65C
	lsls r0, r0, #2
	ldr r1, _0802B5BC @ =_0802B5C0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802B5B8: .4byte gCurrentSprite
_0802B5BC: .4byte _0802B5C0
_0802B5C0: @ jump table
	.4byte _0802B63C @ case 0
	.4byte _0802B65C @ case 1
	.4byte _0802B640 @ case 2
	.4byte _0802B65C @ case 3
	.4byte _0802B65C @ case 4
	.4byte _0802B65C @ case 5
	.4byte _0802B65C @ case 6
	.4byte _0802B65C @ case 7
	.4byte _0802B65C @ case 8
	.4byte _0802B65C @ case 9
	.4byte _0802B65C @ case 10
	.4byte _0802B65C @ case 11
	.4byte _0802B65C @ case 12
	.4byte _0802B65C @ case 13
	.4byte _0802B65C @ case 14
	.4byte _0802B65C @ case 15
	.4byte _0802B65C @ case 16
	.4byte _0802B65C @ case 17
	.4byte _0802B65C @ case 18
	.4byte _0802B65C @ case 19
	.4byte _0802B65C @ case 20
	.4byte _0802B65C @ case 21
	.4byte _0802B65C @ case 22
	.4byte _0802B65C @ case 23
	.4byte _0802B646 @ case 24
	.4byte _0802B65C @ case 25
	.4byte _0802B64C @ case 26
	.4byte _0802B65C @ case 27
	.4byte _0802B652 @ case 28
	.4byte _0802B65C @ case 29
	.4byte _0802B658 @ case 30
_0802B63C:
	bl DataPadSidesInit
_0802B640:
	bl DataPadSidesIdle
	b _0802B65C
_0802B646:
	bl DataPadSidesEngaging
	b _0802B65C
_0802B64C:
	bl DataPadSidesDownloadingData
	b _0802B65C
_0802B652:
	bl DataPadSidesDoneDownloadingData
	b _0802B65C
_0802B658:
	bl DataPadSidesDisengaging
_0802B65C:
	pop {r0}
	bx r0

	thumb_func_start ZebesianWallSetSideHitboxs
ZebesianWallSetSideHitboxs: @ 0x0802B660
	push {lr}
	ldr r2, _0802B678 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802B680
	ldr r0, _0802B67C @ =0x0000FFB0
	strh r0, [r2, #0xe]
	movs r0, #4
	b _0802B686
	.align 2, 0
_0802B678: .4byte gCurrentSprite
_0802B67C: .4byte 0x0000FFB0
_0802B680:
	ldr r0, _0802B68C @ =0x0000FFFC
	strh r0, [r2, #0xe]
	movs r0, #0x50
_0802B686:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_0802B68C: .4byte 0x0000FFFC

	thumb_func_start unk_2b690
unk_2b690: @ 0x0802B690
	push {lr}
	ldr r0, _0802B6A4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xc
	bhi _0802B728
	lsls r0, r0, #2
	ldr r1, _0802B6A8 @ =_0802B6AC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802B6A4: .4byte gSpriteRandomNumber
_0802B6A8: .4byte _0802B6AC
_0802B6AC: @ jump table
	.4byte _0802B6E0 @ case 0
	.4byte _0802B6E0 @ case 1
	.4byte _0802B6E0 @ case 2
	.4byte _0802B6E0 @ case 3
	.4byte _0802B6F4 @ case 4
	.4byte _0802B6F4 @ case 5
	.4byte _0802B6F4 @ case 6
	.4byte _0802B6F4 @ case 7
	.4byte _0802B710 @ case 8
	.4byte _0802B710 @ case 9
	.4byte _0802B71C @ case 10
	.4byte _0802B71C @ case 11
	.4byte _0802B71C @ case 12
_0802B6E0:
	ldr r1, _0802B6EC @ =gCurrentSprite
	ldrh r2, [r1]
	ldr r0, _0802B6F0 @ =0x0000FDFF
	ands r0, r2
	b _0802B700
	.align 2, 0
_0802B6EC: .4byte gCurrentSprite
_0802B6F0: .4byte 0x0000FDFF
_0802B6F4:
	ldr r1, _0802B70C @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	orrs r0, r2
_0802B700:
	strh r0, [r1]
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _0802B730
	.align 2, 0
_0802B70C: .4byte gCurrentSprite
_0802B710:
	ldr r0, _0802B718 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	b _0802B72E
	.align 2, 0
_0802B718: .4byte gCurrentSprite
_0802B71C:
	ldr r0, _0802B724 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x29
	b _0802B72E
	.align 2, 0
_0802B724: .4byte gCurrentSprite
_0802B728:
	ldr r0, _0802B734 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
_0802B72E:
	strb r1, [r0]
_0802B730:
	pop {r0}
	bx r0
	.align 2, 0
_0802B734: .4byte gCurrentSprite

	thumb_func_start ZebesianWallInit
ZebesianWallInit: @ 0x0802B738
	push {r4, r5, r6, lr}
	bl TrySetAbsorbXFlag
	ldr r4, _0802B78C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x25
	movs r3, #0
	movs r5, #2
	strb r5, [r0]
	ldr r2, _0802B790 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r6, #0
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _0802B794 @ =0x083236E0
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r3, [r4, #0x16]
	subs r1, #5
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0802B798
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #8]
	b _0802B7DA
	.align 2, 0
_0802B78C: .4byte gCurrentSprite
_0802B790: .4byte sPrimarySpriteStats
_0802B794: .4byte 0x083236E0
_0802B798:
	adds r2, r4, #0
	adds r2, #0x21
	movs r0, #1
	strb r0, [r2]
	strb r5, [r1]
	ldrh r0, [r4, #2]
	strh r0, [r4, #6]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802B7CC @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0802B7D0
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldrh r0, [r4, #4]
	adds r0, #0x20
	b _0802B7D4
	.align 2, 0
_0802B7CC: .4byte gPreviousCollisionCheck
_0802B7D0:
	ldrh r0, [r4, #4]
	subs r0, #0x20
_0802B7D4:
	strh r0, [r4, #4]
	bl SpriteUtilChooseRandomXDirection
_0802B7DA:
	ldr r2, _0802B800 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0802B814
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0802B804
	strh r0, [r2]
	b _0802B820
	.align 2, 0
_0802B800: .4byte gCurrentSprite
_0802B804:
	adds r0, r2, #0
	adds r0, #0x36
	strb r3, [r0]
	ldr r0, _0802B810 @ =0x0000FF90
	b _0802B816
	.align 2, 0
_0802B810: .4byte 0x0000FF90
_0802B814:
	ldr r0, _0802B828 @ =0x0000FFA0
_0802B816:
	strh r0, [r2, #0xa]
	movs r0, #0x50
	strh r0, [r2, #0xc]
	bl ZebesianWallSetSideHitboxs
_0802B820:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802B828: .4byte 0x0000FFA0

	thumb_func_start ZebesianWallFormingFromX
ZebesianWallFormingFromX: @ 0x0802B82C
	push {lr}
	ldr r3, _0802B854 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #8]
	subs r0, #1
	strh r0, [r3, #8]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0802B860
	ldr r2, _0802B858 @ =gWrittenToMosaic_H
	ldr r1, _0802B85C @ =0x083BDED6
	ldrh r0, [r3, #8]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _0802B874
	.align 2, 0
_0802B854: .4byte gCurrentSprite
_0802B858: .4byte gWrittenToMosaic_H
_0802B85C: .4byte 0x083BDED6
_0802B860:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _0802B878 @ =0x0000FFDF
	ands r0, r1
	ldr r1, _0802B87C @ =0x00007FFF
	ands r0, r1
	strh r0, [r3]
_0802B874:
	pop {r0}
	bx r0
	.align 2, 0
_0802B878: .4byte 0x0000FFDF
_0802B87C: .4byte 0x00007FFF

	thumb_func_start ZebesianWallDeath
ZebesianWallDeath: @ 0x0802B880
	push {lr}
	sub sp, #0x10
	ldr r2, _0802B89C @ =gCurrentSprite
	ldrh r0, [r2, #2]
	adds r0, #8
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802B8A0
	ldrh r0, [r2, #4]
	subs r0, #0x28
	b _0802B8A4
	.align 2, 0
_0802B89C: .4byte gCurrentSprite
_0802B8A0:
	ldrh r0, [r2, #4]
	adds r0, #0x28
_0802B8A4:
	strh r0, [r2, #4]
	ldrb r1, [r2, #0x1d]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r2, #2]
	subs r0, #0x38
	str r0, [sp, #4]
	ldrh r0, [r2, #4]
	str r0, [sp, #8]
	movs r0, #0x40
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	add sp, #0x10
	pop {r0}
	bx r0

	thumb_func_start ZebesianWallMovingVerticallyInit
ZebesianWallMovingVerticallyInit: @ 0x0802B8D0
	ldr r0, _0802B8EC @ =gCurrentSprite
	ldr r1, _0802B8F0 @ =0x083236E0
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r2, r0, #0
	adds r2, #0x2e
	movs r1, #0x40
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bx lr
	.align 2, 0
_0802B8EC: .4byte gCurrentSprite
_0802B8F0: .4byte 0x083236E0

	thumb_func_start ZebesianWallMoveVertically
ZebesianWallMoveVertically: @ 0x0802B8F4
	push {lr}
	movs r3, #0
	ldr r2, _0802B92C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r1, r2, #0
	cmp r0, #0
	beq _0802B930
	ldrh r0, [r1, #6]
	adds r0, #0x80
	ldrh r2, [r1, #2]
	cmp r0, r2
	ble _0802B952
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802B952
	ldrh r0, [r1, #2]
	adds r0, #1
	strh r0, [r1, #2]
	b _0802B954
	.align 2, 0
_0802B92C: .4byte gCurrentSprite
_0802B930:
	ldrh r0, [r1, #6]
	subs r0, #0xc0
	ldrh r2, [r1, #2]
	cmp r0, r2
	bge _0802B952
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802B952
	ldrh r0, [r1, #2]
	subs r0, #1
	strh r0, [r1, #2]
	b _0802B954
_0802B952:
	movs r3, #1
_0802B954:
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _0802B970
	cmp r3, #0
	beq _0802B978
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	eors r0, r2
	strh r0, [r1]
	b _0802B978
_0802B970:
	cmp r3, #0
	beq _0802B978
	bl unk_2b690
_0802B978:
	pop {r0}
	bx r0

	thumb_func_start ZebesianWallTurningAroundInit
ZebesianWallTurningAroundInit: @ 0x0802B97C
	ldr r1, _0802B990 @ =gCurrentSprite
	ldr r0, _0802B994 @ =0x083237D0
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	bx lr
	.align 2, 0
_0802B990: .4byte gCurrentSprite
_0802B994: .4byte 0x083237D0

	thumb_func_start ZebesianWallTurningAround
ZebesianWallTurningAround: @ 0x0802B998
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802B9F0
	ldr r3, _0802B9D8 @ =gCurrentSprite
	ldr r0, _0802B9DC @ =0x08323850
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r2, #0
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldrh r0, [r3]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r3]
	movs r1, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802B9E0
	ldrh r0, [r3, #4]
	adds r0, #0x80
	b _0802B9E4
	.align 2, 0
_0802B9D8: .4byte gCurrentSprite
_0802B9DC: .4byte 0x08323850
_0802B9E0:
	ldrh r0, [r3, #4]
	subs r0, #0x80
_0802B9E4:
	strh r0, [r3, #4]
	bl ZebesianWallSetSideHitboxs
	ldr r0, _0802B9F4 @ =0x0000015B
	bl CheckPlayNotAlreadyPlayingSound
_0802B9F0:
	pop {r0}
	bx r0
	.align 2, 0
_0802B9F4: .4byte 0x0000015B

	thumb_func_start ZebesianWallJumping
ZebesianWallJumping: @ 0x0802B9F8
	push {r4, r5, r6, lr}
	ldr r2, _0802BA28 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r5, [r0]
	ldr r4, _0802BA2C @ =0x08321B64
	lsls r0, r5, #1
	adds r3, r0, r4
	ldr r1, _0802BA30 @ =0x08321BA8
	adds r0, r0, r1
	ldrh r6, [r0]
	ldrh r0, [r2, #2]
	ldrh r3, [r3]
	adds r0, r0, r3
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802BA34
	ldrh r0, [r2, #4]
	adds r0, r0, r6
	b _0802BA38
	.align 2, 0
_0802BA28: .4byte gCurrentSprite
_0802BA2C: .4byte 0x08321B64
_0802BA30: .4byte 0x08321BA8
_0802BA34:
	ldrh r0, [r2, #4]
	subs r0, r0, r6
_0802BA38:
	strh r0, [r2, #4]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r0, r2, #0
	adds r0, #0x31
	strb r5, [r0]
	lsls r0, r5, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r0, _0802BA60 @ =0x00007FFF
	cmp r1, r0
	bne _0802BA58
	bl unk_2b690
_0802BA58:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802BA60: .4byte 0x00007FFF

	thumb_func_start ZebesianWallIdleInit
ZebesianWallIdleInit: @ 0x0802BA64
	ldr r1, _0802BA78 @ =gCurrentSprite
	ldr r0, _0802BA7C @ =0x08323728
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bx lr
	.align 2, 0
_0802BA78: .4byte gCurrentSprite
_0802BA7C: .4byte 0x08323728

	thumb_func_start ZebesianWallIdle
ZebesianWallIdle: @ 0x0802BA80
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802BA8E
	bl unk_2b690
_0802BA8E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianWallShootingInit
ZebesianWallShootingInit: @ 0x0802BA94
	ldr r1, _0802BAA8 @ =gCurrentSprite
	ldr r0, _0802BAAC @ =0x08323890
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bx lr
	.align 2, 0
_0802BAA8: .4byte gCurrentSprite
_0802BAAC: .4byte 0x08323890

	thumb_func_start ZebesianWallShooting
ZebesianWallShooting: @ 0x0802BAB0
	push {r4, lr}
	sub sp, #0xc
	ldr r0, _0802BAF8 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #0x16]
	cmp r0, #0x13
	bne _0802BB1A
	mov r1, ip
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0802BB1A
	ldrh r1, [r1]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _0802BAFC
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x88
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #5
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0802BB1A
	.align 2, 0
_0802BAF8: .4byte gCurrentSprite
_0802BAFC:
	mov r4, ip
	ldrb r2, [r4, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x88
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #5
	movs r1, #0
	bl SpriteSpawnSecondary
_0802BB1A:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802BB26
	bl unk_2b690
_0802BB26:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianBeamInit
ZebesianBeamInit: @ 0x0802BB30
	push {r4, r5, r6, lr}
	ldr r0, _0802BBA0 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r3, _0802BBA4 @ =0x0000FFFB
	ands r3, r0
	movs r5, #0
	movs r4, #0
	mov r1, ip
	strh r3, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	movs r2, #0x30
	strb r2, [r0]
	ldr r0, _0802BBA8 @ =0x0000FFF8
	mov r6, ip
	strh r0, [r6, #0xa]
	strh r1, [r6, #0xc]
	ldr r0, _0802BBAC @ =0x08323998
	str r0, [r6, #0x18]
	strb r5, [r6, #0x1c]
	strh r4, [r6, #0x16]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	subs r1, #1
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _0802BBB4
	ldr r0, _0802BBB0 @ =0x0000FFD0
	strh r0, [r6, #0xe]
	adds r0, #0x20
	strh r0, [r6, #0x10]
	b _0802BBBC
	.align 2, 0
_0802BBA0: .4byte gCurrentSprite
_0802BBA4: .4byte 0x0000FFFB
_0802BBA8: .4byte 0x0000FFF8
_0802BBAC: .4byte 0x08323998
_0802BBB0: .4byte 0x0000FFD0
_0802BBB4:
	movs r0, #0x10
	mov r1, ip
	strh r0, [r1, #0xe]
	strh r2, [r1, #0x10]
_0802BBBC:
	ldr r0, _0802BBC8 @ =0x0000015D
	bl CheckPlayNotAlreadyPlayingSound
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802BBC8: .4byte 0x0000015D

	thumb_func_start ZebesianBeamSpawning
ZebesianBeamSpawning: @ 0x0802BBCC
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802BC10
	ldr r2, _0802BBFC @ =gCurrentSprite
	ldr r0, _0802BC00 @ =0x083239C0
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802BC08
	ldr r0, _0802BC04 @ =0x0000FFA0
	strh r0, [r2, #0xe]
	adds r0, #0x40
	b _0802BC0E
	.align 2, 0
_0802BBFC: .4byte gCurrentSprite
_0802BC00: .4byte 0x083239C0
_0802BC04: .4byte 0x0000FFA0
_0802BC08:
	movs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0x60
_0802BC0E:
	strh r0, [r2, #0x10]
_0802BC10:
	pop {r0}
	bx r0

	thumb_func_start ZebesianBeamExtending
ZebesianBeamExtending: @ 0x0802BC14
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802BC58
	ldr r2, _0802BC44 @ =gCurrentSprite
	ldr r0, _0802BC48 @ =0x08323968
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802BC50
	ldr r0, _0802BC4C @ =0x0000FF60
	strh r0, [r2, #0xe]
	adds r0, #0x80
	b _0802BC56
	.align 2, 0
_0802BC44: .4byte gCurrentSprite
_0802BC48: .4byte 0x08323968
_0802BC4C: .4byte 0x0000FF60
_0802BC50:
	movs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0xa0
_0802BC56:
	strh r0, [r2, #0x10]
_0802BC58:
	pop {r0}
	bx r0

	thumb_func_start ZebesianWall
ZebesianWall: @ 0x0802BC5C
	push {r4, lr}
	ldr r4, _0802BC88 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0802BC76
	movs r0, #0xaf
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0802BC76:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802BC8C
	bl SpriteUpdateFreezeTimer
	b _0802BE68
	.align 2, 0
_0802BC88: .4byte gCurrentSprite
_0802BC8C:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0802BC98
	b _0802BE68
_0802BC98:
	lsls r0, r0, #2
	ldr r1, _0802BCA4 @ =_0802BCA8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802BCA4: .4byte _0802BCA8
_0802BCA8: @ jump table
	.4byte _0802BE18 @ case 0
	.4byte _0802BE1E @ case 1
	.4byte _0802BE22 @ case 2
	.4byte _0802BE68 @ case 3
	.4byte _0802BE68 @ case 4
	.4byte _0802BE68 @ case 5
	.4byte _0802BE68 @ case 6
	.4byte _0802BE38 @ case 7
	.4byte _0802BE3C @ case 8
	.4byte _0802BE68 @ case 9
	.4byte _0802BE68 @ case 10
	.4byte _0802BE68 @ case 11
	.4byte _0802BE68 @ case 12
	.4byte _0802BE68 @ case 13
	.4byte _0802BE68 @ case 14
	.4byte _0802BE68 @ case 15
	.4byte _0802BE68 @ case 16
	.4byte _0802BE68 @ case 17
	.4byte _0802BE68 @ case 18
	.4byte _0802BE68 @ case 19
	.4byte _0802BE68 @ case 20
	.4byte _0802BE68 @ case 21
	.4byte _0802BE68 @ case 22
	.4byte _0802BE68 @ case 23
	.4byte _0802BE68 @ case 24
	.4byte _0802BE28 @ case 25
	.4byte _0802BE2C @ case 26
	.4byte _0802BE68 @ case 27
	.4byte _0802BE32 @ case 28
	.4byte _0802BE68 @ case 29
	.4byte _0802BE68 @ case 30
	.4byte _0802BE68 @ case 31
	.4byte _0802BE68 @ case 32
	.4byte _0802BE68 @ case 33
	.4byte _0802BE68 @ case 34
	.4byte _0802BE68 @ case 35
	.4byte _0802BE68 @ case 36
	.4byte _0802BE68 @ case 37
	.4byte _0802BE68 @ case 38
	.4byte _0802BE68 @ case 39
	.4byte _0802BE68 @ case 40
	.4byte _0802BE42 @ case 41
	.4byte _0802BE46 @ case 42
	.4byte _0802BE68 @ case 43
	.4byte _0802BE68 @ case 44
	.4byte _0802BE68 @ case 45
	.4byte _0802BE68 @ case 46
	.4byte _0802BE68 @ case 47
	.4byte _0802BE68 @ case 48
	.4byte _0802BE68 @ case 49
	.4byte _0802BE68 @ case 50
	.4byte _0802BE68 @ case 51
	.4byte _0802BE68 @ case 52
	.4byte _0802BE68 @ case 53
	.4byte _0802BE68 @ case 54
	.4byte _0802BE68 @ case 55
	.4byte _0802BE68 @ case 56
	.4byte _0802BE68 @ case 57
	.4byte _0802BE68 @ case 58
	.4byte _0802BE68 @ case 59
	.4byte _0802BE68 @ case 60
	.4byte _0802BE68 @ case 61
	.4byte _0802BE68 @ case 62
	.4byte _0802BE68 @ case 63
	.4byte _0802BE68 @ case 64
	.4byte _0802BE68 @ case 65
	.4byte _0802BE68 @ case 66
	.4byte _0802BE68 @ case 67
	.4byte _0802BE68 @ case 68
	.4byte _0802BE68 @ case 69
	.4byte _0802BE68 @ case 70
	.4byte _0802BE68 @ case 71
	.4byte _0802BE68 @ case 72
	.4byte _0802BE68 @ case 73
	.4byte _0802BE68 @ case 74
	.4byte _0802BE68 @ case 75
	.4byte _0802BE68 @ case 76
	.4byte _0802BE68 @ case 77
	.4byte _0802BE68 @ case 78
	.4byte _0802BE68 @ case 79
	.4byte _0802BE68 @ case 80
	.4byte _0802BE68 @ case 81
	.4byte _0802BE68 @ case 82
	.4byte _0802BE68 @ case 83
	.4byte _0802BE68 @ case 84
	.4byte _0802BE68 @ case 85
	.4byte _0802BE68 @ case 86
	.4byte _0802BE4C @ case 87
	.4byte _0802BE50 @ case 88
	.4byte _0802BE56 @ case 89
	.4byte _0802BE5A @ case 90
	.4byte _0802BE60 @ case 91
_0802BE18:
	bl ZebesianWallInit
	b _0802BE68
_0802BE1E:
	bl ZebesianWallMovingVerticallyInit
_0802BE22:
	bl ZebesianWallMoveVertically
	b _0802BE68
_0802BE28:
	bl ZebesianWallTurningAroundInit
_0802BE2C:
	bl ZebesianWallTurningAround
	b _0802BE68
_0802BE32:
	bl ZebesianWallJumping
	b _0802BE68
_0802BE38:
	bl ZebesianWallIdleInit
_0802BE3C:
	bl ZebesianWallIdle
	b _0802BE68
_0802BE42:
	bl ZebesianWallShootingInit
_0802BE46:
	bl ZebesianWallShooting
	b _0802BE68
_0802BE4C:
	bl SpriteDyingInit
_0802BE50:
	bl SpriteDying
	b _0802BE68
_0802BE56:
	bl ZebesianWallInit
_0802BE5A:
	bl ZebesianWallFormingFromX
	b _0802BE68
_0802BE60:
	bl ZebesianWallDeath
	bl XParasiteInit
_0802BE68:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianBeam
ZebesianBeam: @ 0x0802BE70
	push {lr}
	ldr r0, _0802BE88 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0802BE98
	cmp r0, #2
	bgt _0802BE8C
	cmp r0, #0
	beq _0802BE92
	b _0802BEA2
	.align 2, 0
_0802BE88: .4byte gCurrentSprite
_0802BE8C:
	cmp r0, #0x18
	beq _0802BE9E
	b _0802BEA2
_0802BE92:
	bl ZebesianBeamInit
	b _0802BEA2
_0802BE98:
	bl ZebesianBeamSpawning
	b _0802BEA2
_0802BE9E:
	bl ZebesianBeamExtending
_0802BEA2:
	ldr r2, _0802BEB4 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802BEB8
	ldrh r0, [r2, #4]
	subs r0, #0xa
	b _0802BEBC
	.align 2, 0
_0802BEB4: .4byte gCurrentSprite
_0802BEB8:
	ldrh r0, [r2, #4]
	adds r0, #0xa
_0802BEBC:
	strh r0, [r2, #4]
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RechargePadInit
RechargePadInit: @ 0x0802BEC4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r4, _0802BF18 @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0802BF1C @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x21
	movs r5, #1
	strb r5, [r0]
	bl EventCheckWith_RechargeDisabled
	cmp r0, #0
	beq _0802BF20
	adds r0, r4, #0
	adds r0, #0x31
	strb r5, [r0]
	b _0802BF28
	.align 2, 0
_0802BF18: .4byte gCurrentSprite
_0802BF1C: .4byte 0x0000FFFC
_0802BF20:
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
_0802BF28:
	ldr r4, _0802BF94 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r7, #1
	ands r7, r0
	cmp r7, #0
	beq _0802BF98
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x21
	movs r1, #0
	bl SpriteSpawnSecondary
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r5, [r0]
	cmp r5, #0
	bne _0802BFF0
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x22
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x90
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x22
	movs r1, #1
	bl SpriteSpawnSecondary
	b _0802BFF0
	.align 2, 0
_0802BF94: .4byte gCurrentSprite
_0802BF98:
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	movs r5, #0x40
	str r5, [sp, #8]
	movs r0, #0x21
	movs r1, #0
	bl SpriteSpawnSecondary
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802BFF0
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x22
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x90
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x22
	movs r1, #1
	bl SpriteSpawnSecondary
_0802BFF0:
	ldr r0, _0802C000 @ =gCurrentSprite
	adds r0, #0x2f
	strb r7, [r0]
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802C000: .4byte gCurrentSprite

	thumb_func_start RechargePadIdleInit
RechargePadIdleInit: @ 0x0802C004
	push {lr}
	ldr r1, _0802C02C @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802C034
	ldr r0, _0802C030 @ =0x083257E0
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x46
	b _0802C03C
	.align 2, 0
_0802C02C: .4byte gCurrentSprite
_0802C030: .4byte 0x083257E0
_0802C034:
	ldr r0, _0802C044 @ =0x083257D0
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #2
_0802C03C:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0802C044: .4byte 0x083257D0

	thumb_func_start RechargePadIdle
RechargePadIdle: @ 0x0802C048
	push {lr}
	bl NavPadDetectSamus
	cmp r0, #0
	beq _0802C088
	ldr r3, _0802C07C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802C090
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802C080 @ =0x08325780
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0802C084 @ =0x00000101
	bl SoundPlay
	b _0802C090
	.align 2, 0
_0802C07C: .4byte gCurrentSprite
_0802C080: .4byte 0x08325780
_0802C084: .4byte 0x00000101
_0802C088:
	ldr r0, _0802C094 @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
_0802C090:
	pop {r0}
	bx r0
	.align 2, 0
_0802C094: .4byte gCurrentSprite

	thumb_func_start RechargePadOpening
RechargePadOpening: @ 0x0802C098
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802C0B6
	ldr r1, _0802C0BC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _0802C0C0 @ =0x083257E0
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
_0802C0B6:
	pop {r0}
	bx r0
	.align 2, 0
_0802C0BC: .4byte gCurrentSprite
_0802C0C0: .4byte 0x083257E0

	thumb_func_start RechargePadOpened
RechargePadOpened: @ 0x0802C0C4
	push {r4, lr}
	movs r4, #0
	bl NavPadDetectSamus
	adds r3, r0, #0
	cmp r3, #0
	beq _0802C168
	bl SamusCheckMorphed
	cmp r0, #0
	bne _0802C182
	ldr r0, _0802C10C @ =gSamusData
	ldrb r1, [r0, #2]
	adds r2, r0, #0
	cmp r1, #0
	bne _0802C182
	ldr r1, _0802C110 @ =gCurrentSprite
	ldrh r0, [r1, #4]
	strh r0, [r2, #0x16]
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _0802C0F4
	movs r0, #0
	strb r0, [r2, #5]
_0802C0F4:
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802C114
	ldrh r1, [r2, #0x12]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0802C120
	b _0802C124
	.align 2, 0
_0802C10C: .4byte gSamusData
_0802C110: .4byte gCurrentSprite
_0802C114:
	ldrh r1, [r2, #0x12]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0802C120
	movs r4, #1
_0802C120:
	cmp r4, #0
	beq _0802C13C
_0802C124:
	ldr r0, _0802C138 @ =0x0828FD04
	ldrb r1, [r2]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r1, [r1]
	movs r0, #0x22
	bl _call_via_r1
	b _0802C14C
	.align 2, 0
_0802C138: .4byte 0x0828FD04
_0802C13C:
	ldr r0, _0802C160 @ =0x0828FD04
	ldrb r1, [r2]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r1, [r1]
	movs r0, #0x21
	bl _call_via_r1
_0802C14C:
	ldr r1, _0802C164 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x38
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	b _0802C182
	.align 2, 0
_0802C160: .4byte 0x0828FD04
_0802C164: .4byte gCurrentSprite
_0802C168:
	ldr r1, _0802C188 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _0802C18C @ =0x083257A8
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_0802C182:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802C188: .4byte gCurrentSprite
_0802C18C: .4byte 0x083257A8

	thumb_func_start RechargePadClosing
RechargePadClosing: @ 0x0802C190
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802C19E
	bl RechargePadIdleInit
_0802C19E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RechargePadExtending
RechargePadExtending: @ 0x0802C1A4
	push {lr}
	ldr r2, _0802C1D0 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802C1CA
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	movs r0, #0x3c
	strb r0, [r3]
	adds r1, #0xc
	movs r0, #0xa
	strb r0, [r1]
_0802C1CA:
	pop {r0}
	bx r0
	.align 2, 0
_0802C1D0: .4byte gCurrentSprite

	thumb_func_start RechargePadRefilling
RechargePadRefilling: @ 0x0802C1D4
	push {lr}
	ldr r1, _0802C1E8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	cmp r0, #0
	beq _0802C1EC
	subs r0, #1
	strb r0, [r2]
	b _0802C236
	.align 2, 0
_0802C1E8: .4byte gCurrentSprite
_0802C1EC:
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x28
	bne _0802C1F8
	bl RefillEnergy
	b _0802C214
_0802C1F8:
	cmp r0, #0x29
	beq _0802C208
	cmp r0, #0x2a
	bne _0802C218
	bl RefillEnergy
	cmp r0, #0
	bne _0802C236
_0802C208:
	bl RefillMissiles
	cmp r0, #0
	bne _0802C236
	bl RefillPowerBombs
_0802C214:
	cmp r0, #0
	bne _0802C236
_0802C218:
	ldr r2, _0802C23C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802C236
	subs r1, #0xc
	movs r0, #0x3c
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x14
	strb r0, [r1]
_0802C236:
	pop {r0}
	bx r0
	.align 2, 0
_0802C23C: .4byte gCurrentSprite

	thumb_func_start RechargePadRetracting
RechargePadRetracting: @ 0x0802C240
	push {r4, lr}
	ldr r4, _0802C284 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802C2C2
	subs r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	ldr r1, _0802C288 @ =0x0828FD04
	ldr r0, _0802C28C @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0
	bl _call_via_r1
	ldr r1, _0802C290 @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
	ldrb r1, [r4, #0x1d]
	cmp r1, #0x28
	bne _0802C294
	movs r0, #0x10
	bl TrySpawnMessageBanner
	b _0802C2C2
	.align 2, 0
_0802C284: .4byte gCurrentSprite
_0802C288: .4byte 0x0828FD04
_0802C28C: .4byte gSamusData
_0802C290: .4byte gPreventMovementTimer
_0802C294:
	cmp r1, #0x29
	bne _0802C2A0
	movs r0, #0xf
	bl TrySpawnMessageBanner
	b _0802C2C2
_0802C2A0:
	cmp r1, #0x2a
	bne _0802C2C2
	ldr r0, _0802C2B8 @ =gEquipment
	ldrb r1, [r0, #0xb]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0802C2BC
	movs r0, #0x11
	bl TrySpawnMessageBanner
	b _0802C2C2
	.align 2, 0
_0802C2B8: .4byte gEquipment
_0802C2BC:
	movs r0, #0x10
	bl TrySpawnMessageBanner
_0802C2C2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RechargePadMonitorInit
RechargePadMonitorInit: @ 0x0802C2C8
	push {r4, r5, lr}
	ldr r0, _0802C32C @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r4, #0
	orrs r0, r1
	strb r0, [r2]
	mov r5, ip
	ldrh r1, [r5]
	ldr r0, _0802C330 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	strh r0, [r5]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0802C334 @ =0x0000FFFC
	strh r1, [r5, #0xa]
	movs r2, #4
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	mov r0, ip
	adds r0, #0x22
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802C338 @ =0x08325700
	str r0, [r5, #0x18]
	strb r3, [r5, #0x1c]
	strh r4, [r5, #0x16]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802C32C: .4byte gCurrentSprite
_0802C330: .4byte 0x0000FFFB
_0802C334: .4byte 0x0000FFFC
_0802C338: .4byte 0x08325700

	thumb_func_start RechargePadMonitorIdle
RechargePadMonitorIdle: @ 0x0802C33C
	push {lr}
	ldr r2, _0802C374 @ =gSpriteData
	ldr r3, _0802C378 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _0802C370
	ldr r0, _0802C37C @ =0x08325710
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, #0xfa
	bl SoundPlay
_0802C370:
	pop {r0}
	bx r0
	.align 2, 0
_0802C374: .4byte gSpriteData
_0802C378: .4byte gCurrentSprite
_0802C37C: .4byte 0x08325710

	thumb_func_start RechargePadMonitorExtended
RechargePadMonitorExtended: @ 0x0802C380
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802C3B4
	ldr r1, _0802C3B8 @ =gCurrentSprite
	ldr r0, _0802C3BC @ =0x08325738
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldr r1, _0802C3C0 @ =0x0828FD04
	ldr r0, _0802C3C4 @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x38
	bl _call_via_r1
	ldr r0, _0802C3C8 @ =0x00000111
	bl SoundPlay
_0802C3B4:
	pop {r0}
	bx r0
	.align 2, 0
_0802C3B8: .4byte gCurrentSprite
_0802C3BC: .4byte 0x08325738
_0802C3C0: .4byte 0x0828FD04
_0802C3C4: .4byte gSamusData
_0802C3C8: .4byte 0x00000111

	thumb_func_start RechargePadMonitorRetractingInit
RechargePadMonitorRetractingInit: @ 0x0802C3CC
	push {lr}
	ldr r2, _0802C404 @ =gSpriteData
	ldr r3, _0802C408 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	bne _0802C400
	ldr r0, _0802C40C @ =0x08325758
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, #0xf7
	bl SoundPlay
_0802C400:
	pop {r0}
	bx r0
	.align 2, 0
_0802C404: .4byte gSpriteData
_0802C408: .4byte gCurrentSprite
_0802C40C: .4byte 0x08325758

	thumb_func_start RechargePadMonitorRetracting
RechargePadMonitorRetracting: @ 0x0802C410
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802C42C
	ldr r1, _0802C430 @ =gCurrentSprite
	ldr r0, _0802C434 @ =0x08325700
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_0802C42C:
	pop {r0}
	bx r0
	.align 2, 0
_0802C430: .4byte gCurrentSprite
_0802C434: .4byte 0x08325700

	thumb_func_start RechargePadScreenInit
RechargePadScreenInit: @ 0x0802C438
	push {r4, r5, lr}
	ldr r0, _0802C4A4 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r4, [r0]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	mov r2, ip
	ldrh r1, [r2]
	ldr r0, _0802C4A8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	mov r5, ip
	strh r0, [r5]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0802C4AC @ =0x0000FFFC
	strh r1, [r5, #0xa]
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	strb r2, [r5, #0x1c]
	strh r3, [r5, #0x16]
	ldrb r2, [r5, #0x1e]
	cmp r2, #0
	beq _0802C4B4
	ldr r0, _0802C4B0 @ =0x083256B8
	str r0, [r5, #0x18]
	mov r0, ip
	adds r0, #0x22
	strb r1, [r0]
	b _0802C500
	.align 2, 0
_0802C4A4: .4byte gCurrentSprite
_0802C4A8: .4byte 0x0000FFFB
_0802C4AC: .4byte 0x0000FFFC
_0802C4B0: .4byte 0x083256B8
_0802C4B4:
	mov r1, ip
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0802C4D4 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #0x1d]
	cmp r0, #0x28
	bne _0802C4DC
	ldr r0, _0802C4D8 @ =0x08325640
	mov r1, ip
	str r0, [r1, #0x18]
	b _0802C500
	.align 2, 0
_0802C4D4: .4byte gSpriteData
_0802C4D8: .4byte 0x08325640
_0802C4DC:
	cmp r0, #0x29
	bne _0802C4EC
	ldr r0, _0802C4E8 @ =0x08325668
	mov r2, ip
	str r0, [r2, #0x18]
	b _0802C500
	.align 2, 0
_0802C4E8: .4byte 0x08325668
_0802C4EC:
	cmp r0, #0x2a
	bne _0802C4FC
	ldr r0, _0802C4F8 @ =0x08325690
	mov r5, ip
	str r0, [r5, #0x18]
	b _0802C500
	.align 2, 0
_0802C4F8: .4byte 0x08325690
_0802C4FC:
	mov r0, ip
	strh r2, [r0]
_0802C500:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RechargePad
RechargePad: @ 0x0802C508
	push {lr}
	ldr r0, _0802C528 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _0802C51E
	b _0802C656
_0802C51E:
	lsls r0, r0, #2
	ldr r1, _0802C52C @ =_0802C530
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802C528: .4byte gCurrentSprite
_0802C52C: .4byte _0802C530
_0802C530: @ jump table
	.4byte _0802C624 @ case 0
	.4byte _0802C628 @ case 1
	.4byte _0802C62E @ case 2
	.4byte _0802C656 @ case 3
	.4byte _0802C656 @ case 4
	.4byte _0802C656 @ case 5
	.4byte _0802C656 @ case 6
	.4byte _0802C656 @ case 7
	.4byte _0802C656 @ case 8
	.4byte _0802C656 @ case 9
	.4byte _0802C656 @ case 10
	.4byte _0802C656 @ case 11
	.4byte _0802C656 @ case 12
	.4byte _0802C656 @ case 13
	.4byte _0802C656 @ case 14
	.4byte _0802C656 @ case 15
	.4byte _0802C656 @ case 16
	.4byte _0802C656 @ case 17
	.4byte _0802C656 @ case 18
	.4byte _0802C656 @ case 19
	.4byte _0802C656 @ case 20
	.4byte _0802C656 @ case 21
	.4byte _0802C656 @ case 22
	.4byte _0802C656 @ case 23
	.4byte _0802C634 @ case 24
	.4byte _0802C656 @ case 25
	.4byte _0802C63A @ case 26
	.4byte _0802C656 @ case 27
	.4byte _0802C640 @ case 28
	.4byte _0802C656 @ case 29
	.4byte _0802C656 @ case 30
	.4byte _0802C656 @ case 31
	.4byte _0802C656 @ case 32
	.4byte _0802C656 @ case 33
	.4byte _0802C656 @ case 34
	.4byte _0802C656 @ case 35
	.4byte _0802C656 @ case 36
	.4byte _0802C656 @ case 37
	.4byte _0802C656 @ case 38
	.4byte _0802C656 @ case 39
	.4byte _0802C656 @ case 40
	.4byte _0802C656 @ case 41
	.4byte _0802C656 @ case 42
	.4byte _0802C656 @ case 43
	.4byte _0802C656 @ case 44
	.4byte _0802C656 @ case 45
	.4byte _0802C656 @ case 46
	.4byte _0802C656 @ case 47
	.4byte _0802C656 @ case 48
	.4byte _0802C656 @ case 49
	.4byte _0802C656 @ case 50
	.4byte _0802C656 @ case 51
	.4byte _0802C656 @ case 52
	.4byte _0802C656 @ case 53
	.4byte _0802C656 @ case 54
	.4byte _0802C656 @ case 55
	.4byte _0802C646 @ case 56
	.4byte _0802C656 @ case 57
	.4byte _0802C64C @ case 58
	.4byte _0802C656 @ case 59
	.4byte _0802C652 @ case 60
_0802C624:
	bl RechargePadInit
_0802C628:
	bl RechargePadIdleInit
	b _0802C656
_0802C62E:
	bl RechargePadIdle
	b _0802C656
_0802C634:
	bl RechargePadOpening
	b _0802C656
_0802C63A:
	bl RechargePadOpened
	b _0802C656
_0802C640:
	bl RechargePadClosing
	b _0802C656
_0802C646:
	bl RechargePadExtending
	b _0802C656
_0802C64C:
	bl RechargePadRefilling
	b _0802C656
_0802C652:
	bl RechargePadRetracting
_0802C656:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RechargePadMonitor
RechargePadMonitor: @ 0x0802C65C
	push {lr}
	ldr r0, _0802C67C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _0802C714
	lsls r0, r0, #2
	ldr r1, _0802C680 @ =_0802C684
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802C67C: .4byte gCurrentSprite
_0802C680: .4byte _0802C684
_0802C684: @ jump table
	.4byte _0802C6F8 @ case 0
	.4byte _0802C714 @ case 1
	.4byte _0802C6FE @ case 2
	.4byte _0802C714 @ case 3
	.4byte _0802C714 @ case 4
	.4byte _0802C714 @ case 5
	.4byte _0802C714 @ case 6
	.4byte _0802C714 @ case 7
	.4byte _0802C714 @ case 8
	.4byte _0802C714 @ case 9
	.4byte _0802C714 @ case 10
	.4byte _0802C714 @ case 11
	.4byte _0802C714 @ case 12
	.4byte _0802C714 @ case 13
	.4byte _0802C714 @ case 14
	.4byte _0802C714 @ case 15
	.4byte _0802C714 @ case 16
	.4byte _0802C714 @ case 17
	.4byte _0802C714 @ case 18
	.4byte _0802C714 @ case 19
	.4byte _0802C714 @ case 20
	.4byte _0802C714 @ case 21
	.4byte _0802C714 @ case 22
	.4byte _0802C714 @ case 23
	.4byte _0802C704 @ case 24
	.4byte _0802C714 @ case 25
	.4byte _0802C70A @ case 26
	.4byte _0802C714 @ case 27
	.4byte _0802C710 @ case 28
_0802C6F8:
	bl RechargePadMonitorInit
	b _0802C714
_0802C6FE:
	bl RechargePadMonitorIdle
	b _0802C714
_0802C704:
	bl RechargePadMonitorExtended
	b _0802C714
_0802C70A:
	bl RechargePadMonitorRetractingInit
	b _0802C714
_0802C710:
	bl RechargePadMonitorRetracting
_0802C714:
	pop {r0}
	bx r0

	thumb_func_start RechargePadScreen
RechargePadScreen: @ 0x0802C718
	push {lr}
	ldr r0, _0802C734 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802C730
	bl RechargePadScreenInit
_0802C730:
	pop {r0}
	bx r0
	.align 2, 0
_0802C734: .4byte gCurrentSprite

	thumb_func_start AtmosphericSbabilizerCheckIsInfected
AtmosphericSbabilizerCheckIsInfected: @ 0x0802C738
	push {r4, r5, lr}
	movs r3, #0
	ldr r5, _0802C784 @ =gSpriteData
	movs r4, #1
_0802C740:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r5
	ldrh r1, [r2]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0802C78C
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0802C78C
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x30
	bgt _0802C78C
	cmp r0, #0x2c
	blt _0802C78C
	adds r1, r0, #0
	subs r1, #0x2c
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r0, _0802C788 @ =gAtmosphericStabilizersOnline
	ldrh r0, [r0]
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	bne _0802C796
	movs r0, #1
	b _0802C798
	.align 2, 0
_0802C784: .4byte gSpriteData
_0802C788: .4byte gAtmosphericStabilizersOnline
_0802C78C:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _0802C740
_0802C796:
	movs r0, #0
_0802C798:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start AtmosphericSbabilizerInit
AtmosphericSbabilizerInit: @ 0x0802C7A0
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r4, _0802C800 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x22
	movs r5, #0
	movs r0, #0xc
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	movs r3, #0
	strh r0, [r4, #2]
	ldr r2, _0802C804 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	strb r3, [r4, #0x1c]
	strh r5, [r4, #0x16]
	adds r0, #5
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bl SpriteUtilChooseRandomXDirection
	ldrb r0, [r4, #0x1d]
	subs r0, #0x2c
	cmp r0, #4
	bls _0802C7F6
	b _0802CA18
_0802C7F6:
	lsls r0, r0, #2
	ldr r1, _0802C808 @ =_0802C80C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802C800: .4byte gCurrentSprite
_0802C804: .4byte sPrimarySpriteStats
_0802C808: .4byte _0802C80C
_0802C80C: @ jump table
	.4byte _0802C820 @ case 0
	.4byte _0802C86C @ case 1
	.4byte _0802C820 @ case 2
	.4byte _0802C840 @ case 3
	.4byte _0802C840 @ case 4
_0802C820:
	movs r6, #0x23
	ldr r1, _0802C838 @ =gCurrentSprite
	movs r3, #0
	ldr r2, _0802C83C @ =0x0000FFA0
	strh r2, [r1, #0xa]
	movs r0, #0x60
	strh r0, [r1, #0xc]
	strh r2, [r1, #0xe]
	movs r0, #0x20
	strh r0, [r1, #0x10]
	b _0802C854
	.align 2, 0
_0802C838: .4byte gCurrentSprite
_0802C83C: .4byte 0x0000FFA0
_0802C840:
	movs r6, #0x24
	ldr r1, _0802C860 @ =gCurrentSprite
	movs r3, #0
	ldr r0, _0802C864 @ =0x0000FFA0
	strh r0, [r1, #0xa]
	movs r2, #0x60
	strh r2, [r1, #0xc]
	adds r0, #0x40
	strh r0, [r1, #0xe]
	strh r2, [r1, #0x10]
_0802C854:
	adds r0, r1, #0
	adds r0, #0x2f
	strb r3, [r0]
	ldr r0, _0802C868 @ =0x083277F8
	b _0802C888
	.align 2, 0
_0802C860: .4byte gCurrentSprite
_0802C864: .4byte 0x0000FFA0
_0802C868: .4byte 0x083277F8
_0802C86C:
	movs r6, #0x13
	ldr r1, _0802C8C0 @ =gCurrentSprite
	ldr r2, _0802C8C4 @ =0x0000FFA0
	strh r2, [r1, #0xa]
	movs r0, #0x20
	strh r0, [r1, #0xc]
	strh r2, [r1, #0xe]
	movs r0, #0x60
	strh r0, [r1, #0x10]
	adds r2, r1, #0
	adds r2, #0x2f
	movs r0, #1
	strb r0, [r2]
	ldr r0, _0802C8C8 @ =0x08327660
_0802C888:
	str r0, [r1, #0x18]
	adds r4, r1, #0
	ldrb r2, [r4, #0x1d]
	adds r0, r2, #0
	subs r0, #0x2c
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r0, _0802C8CC @ =gAtmosphericStabilizersOnline
	ldrh r0, [r0]
	asrs r0, r2
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	movs r0, #1
	ands r5, r0
	cmp r5, #0
	beq _0802C8E4
	adds r1, #0x25
	movs r0, #0
	strb r0, [r1]
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802C8D4
	ldr r0, _0802C8D0 @ =0x08327640
	b _0802C8D6
	.align 2, 0
_0802C8C0: .4byte gCurrentSprite
_0802C8C4: .4byte 0x0000FFA0
_0802C8C8: .4byte 0x08327660
_0802C8CC: .4byte gAtmosphericStabilizersOnline
_0802C8D0: .4byte 0x08327640
_0802C8D4:
	ldr r0, _0802C8E0 @ =0x083277D8
_0802C8D6:
	str r0, [r4, #0x18]
	movs r0, #0xfe
	bl SoundPlay
	b _0802CA26
	.align 2, 0
_0802C8E0: .4byte 0x083277D8
_0802C8E4:
	adds r2, r4, #0
	adds r2, #0x25
	movs r0, #2
	strb r0, [r2]
	cmp r6, #0x23
	bne _0802C94E
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x23
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _0802C914
	b _0802CA18
_0802C914:
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x23
	movs r1, #1
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802CA18
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	str r0, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x2b
	movs r1, #1
	b _0802CA0C
_0802C94E:
	cmp r6, #0x24
	bne _0802C9AE
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x24
	movs r1, #2
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802CA18
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x24
	movs r1, #3
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802CA18
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	str r0, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x2b
	movs r1, #2
	b _0802CA0C
_0802C9AE:
	cmp r6, #0x13
	bne _0802CA1C
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x13
	movs r1, #4
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802CA18
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x13
	movs r1, #5
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	beq _0802CA18
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	str r0, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x2b
	movs r1, #3
_0802CA0C:
	bl SpriteSpawnNewXParasite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _0802CA20
_0802CA18:
	strh r5, [r4]
	b _0802CA2E
_0802CA1C:
	strh r5, [r1]
	b _0802CA2E
_0802CA20:
	movs r0, #0xff
	bl SoundPlay
_0802CA26:
	ldr r0, _0802CA38 @ =gCurrentSprite
	adds r0, #0x2a
	movs r1, #0x10
	strb r1, [r0]
_0802CA2E:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802CA38: .4byte gCurrentSprite

	thumb_func_start AtmosphericStabilizerBackOnlineInit
AtmosphericStabilizerBackOnlineInit: @ 0x0802CA3C
	push {lr}
	ldr r3, _0802CA64 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	movs r0, #0
	strh r1, [r3, #0x16]
	adds r2, #1
	strb r0, [r2]
	strh r1, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802CA6C
	ldr r0, _0802CA68 @ =0x083276E0
	b _0802CA6E
	.align 2, 0
_0802CA64: .4byte gCurrentSprite
_0802CA68: .4byte 0x083276E0
_0802CA6C:
	ldr r0, _0802CA7C @ =0x08327878
_0802CA6E:
	str r0, [r3, #0x18]
	movs r0, #0x80
	lsls r0, r0, #1
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_0802CA7C: .4byte 0x08327878

	thumb_func_start AtmosphericStabilizerBackOnline
AtmosphericStabilizerBackOnline: @ 0x0802CA80
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802CABA
	ldr r3, _0802CAA8 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802CAB0
	ldr r0, _0802CAAC @ =0x08327640
	b _0802CAB2
	.align 2, 0
_0802CAA8: .4byte gCurrentSprite
_0802CAAC: .4byte 0x08327640
_0802CAB0:
	ldr r0, _0802CAC0 @ =0x083277D8
_0802CAB2:
	str r0, [r3, #0x18]
	movs r0, #1
	bl StartStopEventBasedEffect
_0802CABA:
	pop {r0}
	bx r0
	.align 2, 0
_0802CAC0: .4byte 0x083277D8

	thumb_func_start AtmosphericStabilizerCoverInit
AtmosphericStabilizerCoverInit: @ 0x0802CAC4
	push {r4, lr}
	ldr r0, _0802CB1C @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x25
	movs r4, #0
	movs r3, #2
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	ldr r1, _0802CB20 @ =sSecondarySpriteStats
	mov r2, ip
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r2, #0
	mov r1, ip
	strh r0, [r1, #0x14]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r0, ip
	strb r2, [r0, #0x1c]
	strh r4, [r0, #0x16]
	adds r0, #0x24
	strb r3, [r0]
	mov r1, ip
	ldrb r0, [r1, #0x1e]
	mov r2, ip
	cmp r0, #7
	bls _0802CB12
	b _0802CC34
_0802CB12:
	lsls r0, r0, #2
	ldr r1, _0802CB24 @ =_0802CB28
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802CB1C: .4byte gCurrentSprite
_0802CB20: .4byte sSecondarySpriteStats
_0802CB24: .4byte _0802CB28
_0802CB28: @ jump table
	.4byte _0802CB48 @ case 0
	.4byte _0802CB74 @ case 1
	.4byte _0802CB84 @ case 2
	.4byte _0802CBA8 @ case 3
	.4byte _0802CBC0 @ case 4
	.4byte _0802CBE4 @ case 5
	.4byte _0802CBF4 @ case 6
	.4byte _0802CC1C @ case 7
_0802CB48:
	ldrh r1, [r2]
	ldr r0, _0802CB68 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0802CB6C @ =0x08327A30
	str r0, [r2, #0x18]
	ldr r0, _0802CB70 @ =0x0000FFA0
	strh r0, [r2, #0xa]
	adds r0, #0x40
	strh r0, [r2, #0xc]
	movs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0x60
	strh r0, [r2, #0x10]
	b _0802CC38
	.align 2, 0
_0802CB68: .4byte 0x0000FFFB
_0802CB6C: .4byte 0x08327A30
_0802CB70: .4byte 0x0000FFA0
_0802CB74:
	ldr r0, _0802CB80 @ =0x08327A30
	str r0, [r2, #0x18]
	movs r1, #0x20
	strh r1, [r2, #0xa]
	b _0802CC26
	.align 2, 0
_0802CB80: .4byte 0x08327A30
_0802CB84:
	ldrh r1, [r2]
	ldr r0, _0802CB9C @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0802CBA0 @ =0x08327A40
	str r0, [r2, #0x18]
	movs r0, #0x20
	strh r0, [r2, #0xa]
	movs r0, #0x60
	strh r0, [r2, #0xc]
	ldr r0, _0802CBA4 @ =0x0000FFA0
	b _0802CC08
	.align 2, 0
_0802CB9C: .4byte 0x0000FFFB
_0802CBA0: .4byte 0x08327A40
_0802CBA4: .4byte 0x0000FFA0
_0802CBA8:
	ldr r0, _0802CBB4 @ =0x08327A40
	str r0, [r2, #0x18]
	ldr r1, _0802CBB8 @ =0x0000FFA0
	strh r1, [r2, #0xa]
	ldr r0, _0802CBBC @ =0x0000FFE0
	b _0802CC28
	.align 2, 0
_0802CBB4: .4byte 0x08327A40
_0802CBB8: .4byte 0x0000FFA0
_0802CBBC: .4byte 0x0000FFE0
_0802CBC0:
	ldrh r1, [r2]
	ldr r0, _0802CBD8 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	ldr r0, _0802CBDC @ =0x08327A20
	str r0, [r2, #0x18]
	movs r0, #0x20
	strh r0, [r2, #0xa]
	movs r0, #0x60
	strh r0, [r2, #0xc]
	ldr r0, _0802CBE0 @ =0x0000FFA0
	b _0802CC08
	.align 2, 0
_0802CBD8: .4byte 0x0000FFFB
_0802CBDC: .4byte 0x08327A20
_0802CBE0: .4byte 0x0000FFA0
_0802CBE4:
	ldr r0, _0802CBF0 @ =0x08327A20
	str r0, [r2, #0x18]
	movs r1, #0x20
	strh r1, [r2, #0xa]
	b _0802CC26
	.align 2, 0
_0802CBF0: .4byte 0x08327A20
_0802CBF4:
	ldrh r1, [r2]
	ldr r0, _0802CC10 @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r2]
	ldr r0, _0802CC14 @ =0x08327A60
	str r0, [r2, #0x18]
	ldr r0, _0802CC18 @ =0x0000FFA0
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
_0802CC08:
	strh r0, [r2, #0xe]
	adds r0, #0x40
	strh r0, [r2, #0x10]
	b _0802CC38
	.align 2, 0
_0802CC10: .4byte 0x0000FFFB
_0802CC14: .4byte 0x08327A60
_0802CC18: .4byte 0x0000FFA0
_0802CC1C:
	ldr r0, _0802CC30 @ =0x08327A60
	str r0, [r2, #0x18]
	movs r1, #0
	movs r0, #0x20
	strh r0, [r2, #0xa]
_0802CC26:
	movs r0, #0x60
_0802CC28:
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	b _0802CC38
	.align 2, 0
_0802CC30: .4byte 0x08327A60
_0802CC34:
	mov r2, ip
	strh r4, [r2]
_0802CC38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start AtmosphericStabilizerCoverIdle
AtmosphericStabilizerCoverIdle: @ 0x0802CC40
	push {lr}
	ldr r3, _0802CC74 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0802CC78 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	strh r1, [r3, #2]
	ldrh r1, [r0, #4]
	strh r1, [r3, #4]
	adds r0, #0x24
	ldrb r2, [r0]
	cmp r2, #0x18
	bne _0802CC8A
	ldrh r1, [r3]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0802CC7C
	movs r0, #0
	strh r0, [r3]
	b _0802CC8A
	.align 2, 0
_0802CC74: .4byte gCurrentSprite
_0802CC78: .4byte gSpriteData
_0802CC7C:
	adds r0, r3, #0
	adds r0, #0x24
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
_0802CC8A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start AtmosphericStabilizerCoverExploding
AtmosphericStabilizerCoverExploding: @ 0x0802CC90
	push {r4, r5, r6, r7, lr}
	ldr r6, _0802CCCC @ =gCurrentSprite
	ldrh r4, [r6, #2]
	ldrh r5, [r6, #4]
	ldrh r0, [r6]
	movs r1, #4
	eors r0, r1
	strh r0, [r6]
	adds r7, r6, #0
	adds r7, #0x2e
	ldrb r1, [r7]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0802CCB4
	ldr r0, _0802CCD0 @ =0x000001BF
	bl SoundPlay
_0802CCB4:
	ldrb r0, [r6, #0x1e]
	cmp r0, #0
	bne _0802CDAA
	ldrb r0, [r7]
	cmp r0, #0x18
	bls _0802CCC2
	b _0802D096
_0802CCC2:
	lsls r0, r0, #2
	ldr r1, _0802CCD4 @ =_0802CCD8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802CCCC: .4byte gCurrentSprite
_0802CCD0: .4byte 0x000001BF
_0802CCD4: .4byte _0802CCD8
_0802CCD8: @ jump table
	.4byte _0802CD3C @ case 0
	.4byte _0802D096 @ case 1
	.4byte _0802CD44 @ case 2
	.4byte _0802D096 @ case 3
	.4byte _0802CD4C @ case 4
	.4byte _0802D096 @ case 5
	.4byte _0802CD56 @ case 6
	.4byte _0802D024 @ case 7
	.4byte _0802CD5C @ case 8
	.4byte _0802CD66 @ case 9
	.4byte _0802CD70 @ case 10
	.4byte _0802D096 @ case 11
	.4byte _0802CD78 @ case 12
	.4byte _0802D096 @ case 13
	.4byte _0802CD82 @ case 14
	.4byte _0802D096 @ case 15
	.4byte _0802CD8C @ case 16
	.4byte _0802CD96 @ case 17
	.4byte _0802CDA0 @ case 18
	.4byte _0802D080 @ case 19
	.4byte _0802D096 @ case 20
	.4byte _0802D096 @ case 21
	.4byte _0802D096 @ case 22
	.4byte _0802D096 @ case 23
	.4byte _0802D090 @ case 24
_0802CD3C:
	adds r0, r4, #0
	subs r0, #0x30
	adds r1, r5, #4
	b _0802D088
_0802CD44:
	adds r0, r4, #0
	adds r0, #0x40
	subs r1, r5, #4
	b _0802D088
_0802CD4C:
	adds r0, r4, #0
	subs r0, #8
	adds r1, r5, #0
	subs r1, #0x40
	b _0802D088
_0802CD56:
	adds r0, r4, #0
	subs r0, #0x26
	b _0802D028
_0802CD5C:
	adds r0, r4, #0
	subs r0, #0x3c
	adds r1, r5, #0
	adds r1, #0x3c
	b _0802D088
_0802CD66:
	adds r0, r4, #0
	adds r0, #0x32
	adds r1, r5, #0
	adds r1, #0x32
	b _0802D088
_0802CD70:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	b _0802D02C
_0802CD78:
	adds r0, r4, #0
	adds r0, #0x50
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802CD82:
	adds r0, r4, #0
	adds r0, #0x10
	adds r1, r5, #0
	subs r1, #0x44
	b _0802D088
_0802CD8C:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802CD96:
	adds r0, r4, #0
	adds r0, #0x58
	adds r1, r5, #0
	adds r1, #0x10
	b _0802D088
_0802CDA0:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	adds r1, #0x50
	b _0802D088
_0802CDAA:
	cmp r0, #2
	bne _0802CE96
	ldrb r0, [r7]
	cmp r0, #0x18
	bls _0802CDB6
	b _0802D096
_0802CDB6:
	lsls r0, r0, #2
	ldr r1, _0802CDC0 @ =_0802CDC4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802CDC0: .4byte _0802CDC4
_0802CDC4: @ jump table
	.4byte _0802CE28 @ case 0
	.4byte _0802D096 @ case 1
	.4byte _0802CE30 @ case 2
	.4byte _0802D096 @ case 3
	.4byte _0802CE38 @ case 4
	.4byte _0802D096 @ case 5
	.4byte _0802CE42 @ case 6
	.4byte _0802D024 @ case 7
	.4byte _0802CE48 @ case 8
	.4byte _0802CE52 @ case 9
	.4byte _0802CE5C @ case 10
	.4byte _0802D096 @ case 11
	.4byte _0802CE64 @ case 12
	.4byte _0802D096 @ case 13
	.4byte _0802CE6E @ case 14
	.4byte _0802D096 @ case 15
	.4byte _0802CE78 @ case 16
	.4byte _0802CE82 @ case 17
	.4byte _0802CE8C @ case 18
	.4byte _0802D080 @ case 19
	.4byte _0802D096 @ case 20
	.4byte _0802D096 @ case 21
	.4byte _0802D096 @ case 22
	.4byte _0802D096 @ case 23
	.4byte _0802D090 @ case 24
_0802CE28:
	adds r0, r4, #0
	subs r0, #0x30
	adds r1, r5, #4
	b _0802D088
_0802CE30:
	adds r0, r4, #0
	adds r0, #0x40
	subs r1, r5, #4
	b _0802D088
_0802CE38:
	adds r0, r4, #0
	subs r0, #8
	adds r1, r5, #0
	adds r1, #0x40
	b _0802D088
_0802CE42:
	adds r0, r4, #0
	subs r0, #0x26
	b _0802D028
_0802CE48:
	adds r0, r4, #0
	subs r0, #0x3c
	adds r1, r5, #0
	adds r1, #0x3c
	b _0802D088
_0802CE52:
	adds r0, r4, #0
	adds r0, #0x32
	adds r1, r5, #0
	adds r1, #0x32
	b _0802D088
_0802CE5C:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	b _0802D02C
_0802CE64:
	adds r0, r4, #0
	adds r0, #0x50
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802CE6E:
	adds r0, r4, #0
	adds r0, #0x10
	adds r1, r5, #0
	adds r1, #0x44
	b _0802D088
_0802CE78:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802CE82:
	adds r0, r4, #0
	adds r0, #0x48
	adds r1, r5, #0
	subs r1, #8
	b _0802D088
_0802CE8C:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	adds r1, #0x50
	b _0802D088
_0802CE96:
	cmp r0, #4
	bne _0802CF82
	ldrb r0, [r7]
	cmp r0, #0x18
	bls _0802CEA2
	b _0802D096
_0802CEA2:
	lsls r0, r0, #2
	ldr r1, _0802CEAC @ =_0802CEB0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802CEAC: .4byte _0802CEB0
_0802CEB0: @ jump table
	.4byte _0802CF14 @ case 0
	.4byte _0802D096 @ case 1
	.4byte _0802CF1C @ case 2
	.4byte _0802D096 @ case 3
	.4byte _0802CF24 @ case 4
	.4byte _0802D096 @ case 5
	.4byte _0802CF2E @ case 6
	.4byte _0802D024 @ case 7
	.4byte _0802CF34 @ case 8
	.4byte _0802CF3E @ case 9
	.4byte _0802CF48 @ case 10
	.4byte _0802D096 @ case 11
	.4byte _0802CF50 @ case 12
	.4byte _0802D096 @ case 13
	.4byte _0802CF5A @ case 14
	.4byte _0802D096 @ case 15
	.4byte _0802CF64 @ case 16
	.4byte _0802CF6E @ case 17
	.4byte _0802CF78 @ case 18
	.4byte _0802D080 @ case 19
	.4byte _0802D096 @ case 20
	.4byte _0802D096 @ case 21
	.4byte _0802D096 @ case 22
	.4byte _0802D096 @ case 23
	.4byte _0802D090 @ case 24
_0802CF14:
	adds r0, r4, #0
	subs r0, #0x30
	adds r1, r5, #4
	b _0802D088
_0802CF1C:
	adds r1, r5, #0
	subs r1, #0x48
	adds r0, r4, #0
	b _0802D088
_0802CF24:
	adds r0, r4, #0
	subs r0, #8
	adds r1, r5, #0
	adds r1, #0x40
	b _0802D088
_0802CF2E:
	adds r0, r4, #0
	subs r0, #0x26
	b _0802D028
_0802CF34:
	adds r0, r4, #0
	subs r0, #0x3c
	adds r1, r5, #0
	adds r1, #0x3c
	b _0802D088
_0802CF3E:
	adds r0, r4, #0
	adds r0, #0x32
	adds r1, r5, #0
	adds r1, #0x32
	b _0802D088
_0802CF48:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	b _0802D088
_0802CF50:
	adds r0, r4, #0
	adds r0, #0x50
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802CF5A:
	adds r0, r4, #0
	adds r0, #0x10
	adds r1, r5, #0
	adds r1, #0x44
	b _0802D088
_0802CF64:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802CF6E:
	adds r0, r4, #0
	adds r0, #8
	adds r1, r5, #0
	subs r1, #0x40
	b _0802D088
_0802CF78:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	adds r1, #0x50
	b _0802D088
_0802CF82:
	cmp r0, #6
	beq _0802CF88
	b _0802D0A8
_0802CF88:
	ldrb r0, [r7]
	cmp r0, #0x18
	bls _0802CF90
	b _0802D096
_0802CF90:
	lsls r0, r0, #2
	ldr r1, _0802CF9C @ =_0802CFA0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802CF9C: .4byte _0802CFA0
_0802CFA0: @ jump table
	.4byte _0802D004 @ case 0
	.4byte _0802D096 @ case 1
	.4byte _0802D00C @ case 2
	.4byte _0802D096 @ case 3
	.4byte _0802D014 @ case 4
	.4byte _0802D096 @ case 5
	.4byte _0802D01E @ case 6
	.4byte _0802D024 @ case 7
	.4byte _0802D034 @ case 8
	.4byte _0802D03E @ case 9
	.4byte _0802D048 @ case 10
	.4byte _0802D096 @ case 11
	.4byte _0802D050 @ case 12
	.4byte _0802D096 @ case 13
	.4byte _0802D058 @ case 14
	.4byte _0802D096 @ case 15
	.4byte _0802D062 @ case 16
	.4byte _0802D06C @ case 17
	.4byte _0802D076 @ case 18
	.4byte _0802D080 @ case 19
	.4byte _0802D096 @ case 20
	.4byte _0802D096 @ case 21
	.4byte _0802D096 @ case 22
	.4byte _0802D096 @ case 23
	.4byte _0802D090 @ case 24
_0802D004:
	adds r0, r4, #0
	subs r0, #0x30
	adds r1, r5, #4
	b _0802D088
_0802D00C:
	adds r1, r5, #0
	subs r1, #0x48
	adds r0, r4, #0
	b _0802D088
_0802D014:
	adds r0, r4, #0
	subs r0, #8
	adds r1, r5, #0
	adds r1, #0x40
	b _0802D088
_0802D01E:
	adds r0, r4, #0
	subs r0, #0x26
	b _0802D028
_0802D024:
	adds r0, r4, #0
	adds r0, #0x26
_0802D028:
	adds r1, r5, #0
	subs r1, #0x30
_0802D02C:
	movs r2, #0x26
	bl ParticleSet
	b _0802D096
_0802D034:
	adds r0, r4, #0
	subs r0, #0x3c
	adds r1, r5, #0
	adds r1, #0x3c
	b _0802D088
_0802D03E:
	adds r0, r4, #0
	adds r0, #0x32
	adds r1, r5, #0
	adds r1, #0x32
	b _0802D088
_0802D048:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	b _0802D088
_0802D050:
	adds r0, r4, #0
	adds r0, #0x50
	adds r1, r5, #0
	b _0802D088
_0802D058:
	adds r0, r4, #0
	adds r0, #0x10
	adds r1, r5, #0
	adds r1, #0x44
	b _0802D088
_0802D062:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x34
	b _0802D088
_0802D06C:
	adds r0, r4, #0
	adds r0, #8
	adds r1, r5, #0
	subs r1, #0x40
	b _0802D088
_0802D076:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	adds r1, #0x50
	b _0802D088
_0802D080:
	adds r0, r4, #0
	adds r0, #0x4e
	adds r1, r5, #0
	adds r1, #0x48
_0802D088:
	movs r2, #0x25
	bl ParticleSet
	b _0802D096
_0802D090:
	ldr r1, _0802D0A4 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_0802D096:
	ldr r1, _0802D0A4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	b _0802D0AE
	.align 2, 0
_0802D0A4: .4byte gCurrentSprite
_0802D0A8:
	movs r0, #0
	strh r0, [r6]
	adds r1, r6, #0
_0802D0AE:
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x19
	bne _0802D136
	ldr r0, _0802D100 @ =gAtmosphericStabilizersOnline
	ldrh r2, [r0]
	adds r3, r2, #0
	movs r0, #1
	ands r0, r2
	movs r1, #2
	ands r1, r2
	cmp r1, #0
	beq _0802D0CC
	adds r0, #1
_0802D0CC:
	movs r1, #4
	ands r1, r2
	cmp r1, #0
	beq _0802D0DA
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_0802D0DA:
	movs r1, #8
	ands r2, r1
	cmp r2, #0
	beq _0802D0E8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_0802D0E8:
	movs r1, #0x10
	ands r3, r1
	cmp r3, #0
	beq _0802D0F6
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_0802D0F6:
	cmp r0, #1
	bne _0802D104
	movs r1, #1
	b _0802D122
	.align 2, 0
_0802D100: .4byte gAtmosphericStabilizersOnline
_0802D104:
	cmp r0, #2
	bne _0802D10C
	movs r1, #2
	b _0802D122
_0802D10C:
	cmp r0, #3
	bne _0802D114
	movs r1, #3
	b _0802D122
_0802D114:
	cmp r0, #4
	bne _0802D11C
	movs r1, #4
	b _0802D122
_0802D11C:
	cmp r0, #5
	bne _0802D136
	movs r1, #5
_0802D122:
	cmp r0, #0
	beq _0802D136
	adds r0, r1, #0
	bl TrySpawnMessageBanner
	ldr r1, _0802D13C @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
_0802D136:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802D13C: .4byte gPreventMovementTimer

	thumb_func_start AtmosphericStabilizerParasiteInit
AtmosphericStabilizerParasiteInit: @ 0x0802D140
	push {r4, lr}
	ldr r3, _0802D194 @ =gCurrentSprite
	ldrh r1, [r3]
	ldr r0, _0802D198 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #3
	movs r0, #5
	strb r0, [r1]
	adds r1, #0x13
	movs r0, #1
	strb r0, [r1]
	ldr r2, _0802D19C @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldrb r0, [r3, #0x1e]
	adds r1, r3, #0
	cmp r0, #2
	beq _0802D1C4
	cmp r0, #2
	bgt _0802D1A0
	cmp r0, #1
	beq _0802D1AA
	b _0802D208
	.align 2, 0
_0802D194: .4byte gCurrentSprite
_0802D198: .4byte 0x0000FFFB
_0802D19C: .4byte sPrimarySpriteStats
_0802D1A0:
	cmp r0, #3
	beq _0802D1D0
	cmp r0, #4
	beq _0802D1EC
	b _0802D208
_0802D1AA:
	ldr r0, _0802D1BC @ =0x0000FFE0
	strh r0, [r1, #0xa]
	movs r0, #0x20
	strh r0, [r1, #0xc]
	ldr r0, _0802D1C0 @ =0x0000FFE8
	strh r0, [r1, #0xe]
	movs r0, #0x30
	strh r0, [r1, #0x10]
	b _0802D20C
	.align 2, 0
_0802D1BC: .4byte 0x0000FFE0
_0802D1C0: .4byte 0x0000FFE8
_0802D1C4:
	ldr r0, _0802D1CC @ =0x0000FFE0
	strh r0, [r1, #0xa]
	movs r0, #0x20
	b _0802D1F2
	.align 2, 0
_0802D1CC: .4byte 0x0000FFE0
_0802D1D0:
	ldr r0, _0802D1E4 @ =0x0000FFE8
	strh r0, [r1, #0xa]
	movs r0, #0x30
	strh r0, [r1, #0xc]
	ldr r0, _0802D1E8 @ =0x0000FFE0
	strh r0, [r1, #0xe]
	movs r0, #0x20
	strh r0, [r1, #0x10]
	b _0802D20C
	.align 2, 0
_0802D1E4: .4byte 0x0000FFE8
_0802D1E8: .4byte 0x0000FFE0
_0802D1EC:
	ldr r0, _0802D200 @ =0x0000FFE8
	strh r0, [r1, #0xa]
	movs r0, #0x30
_0802D1F2:
	strh r0, [r1, #0xc]
	ldr r0, _0802D204 @ =0x0000FFD0
	strh r0, [r1, #0xe]
	movs r0, #0x18
	strh r0, [r1, #0x10]
	b _0802D20C
	.align 2, 0
_0802D200: .4byte 0x0000FFE8
_0802D204: .4byte 0x0000FFD0
_0802D208:
	movs r0, #0
	strh r0, [r1]
_0802D20C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start AtmosphericStabilizerParasiteIdleInit
AtmosphericStabilizerParasiteIdleInit: @ 0x0802D214
	ldr r0, _0802D230 @ =gCurrentSprite
	ldr r1, _0802D234 @ =0x08327970
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r2, r0, #0
	adds r2, #0x2e
	movs r1, #0x78
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bx lr
	.align 2, 0
_0802D230: .4byte gCurrentSprite
_0802D234: .4byte 0x08327970

	thumb_func_start AtmosphericStabilizerParasiteIdle
AtmosphericStabilizerParasiteIdle: @ 0x0802D238
	push {r4, lr}
	ldr r4, _0802D268 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0802D26C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	strh r1, [r4, #2]
	ldrh r0, [r0, #4]
	strh r0, [r4, #4]
	bl CountPrimarySpritesThatCantAbsorbX
	cmp r0, #4
	ble _0802D270
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
	b _0802D2AA
	.align 2, 0
_0802D268: .4byte gCurrentSprite
_0802D26C: .4byte gSpriteData
_0802D270:
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802D2AA
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802D2B0 @ =0x083279F8
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldrh r0, [r4]
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x2c
	strb r0, [r3]
	ldr r1, _0802D2B4 @ =gWrittenToMosaic_H
	ldr r0, _0802D2B8 @ =0x083BDED6
	adds r0, #0x58
	ldrh r0, [r0]
	strh r0, [r1]
_0802D2AA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802D2B0: .4byte 0x083279F8
_0802D2B4: .4byte gWrittenToMosaic_H
_0802D2B8: .4byte 0x083BDED6

	thumb_func_start AtmosphericStabilizerParasiteSpawnX
AtmosphericStabilizerParasiteSpawnX: @ 0x0802D2BC
	push {r4, lr}
	sub sp, #0x10
	ldr r0, _0802D330 @ =gCurrentSprite
	mov ip, r0
	mov r4, ip
	adds r4, #0x23
	ldrb r1, [r4]
	ldr r2, _0802D334 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	mov r2, ip
	strh r1, [r2, #2]
	ldrh r0, [r0, #4]
	strh r0, [r2, #4]
	mov r0, ip
	adds r0, #0x2e
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	ldr r3, _0802D338 @ =gWrittenToMosaic_H
	ldr r2, _0802D33C @ =0x083BDED6
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3]
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	cmp r2, #0
	bne _0802D328
	mov r0, ip
	ldrh r1, [r0]
	ldr r0, _0802D340 @ =0x0000FFDF
	ands r0, r1
	mov r1, ip
	strh r0, [r1]
	ldrb r3, [r4]
	movs r0, #0x20
	str r0, [sp]
	ldrh r0, [r1, #2]
	str r0, [sp, #4]
	ldrh r0, [r1, #4]
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	bl AtmosphericStabilizerParasiteIdleInit
_0802D328:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802D330: .4byte gCurrentSprite
_0802D334: .4byte gSpriteData
_0802D338: .4byte gWrittenToMosaic_H
_0802D33C: .4byte 0x083BDED6
_0802D340: .4byte 0x0000FFDF

	thumb_func_start AtmosphericStabilizerParasiteDeath
AtmosphericStabilizerParasiteDeath: @ 0x0802D344
	push {lr}
	ldr r1, _0802D390 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r2, [r0]
	ldr r0, _0802D394 @ =0x08327970
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r1, _0802D398 @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x17
	strb r1, [r2]
	ldrb r0, [r0, #0x1d]
	subs r0, #0x2c
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #9
	lsls r1, r0
	lsrs r1, r1, #0x10
	ldr r2, _0802D39C @ =gAtmosphericStabilizersOnline
	ldrh r0, [r2]
	orrs r1, r0
	strh r1, [r2]
	cmp r1, #0x1f
	bne _0802D38C
	movs r0, #0x10
	bl EventCheckAdvance
_0802D38C:
	pop {r0}
	bx r0
	.align 2, 0
_0802D390: .4byte gCurrentSprite
_0802D394: .4byte 0x08327970
_0802D398: .4byte gSpriteData
_0802D39C: .4byte gAtmosphericStabilizersOnline

	thumb_func_start AtmosphericStabilizer
AtmosphericStabilizer: @ 0x0802D3A0
	push {lr}
	ldr r1, _0802D3B8 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	beq _0802D3BC
	bl SpriteUpdateFreezeTimer
	b _0802D464
	.align 2, 0
_0802D3B8: .4byte gCurrentSprite
_0802D3BC:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x17
	beq _0802D3DC
	cmp r0, #0x17
	bgt _0802D3D0
	cmp r0, #0
	beq _0802D3D6
	b _0802D3F4
_0802D3D0:
	cmp r0, #0x18
	beq _0802D3E0
	b _0802D3F4
_0802D3D6:
	bl AtmosphericSbabilizerInit
	b _0802D464
_0802D3DC:
	bl AtmosphericStabilizerBackOnlineInit
_0802D3E0:
	ldr r0, _0802D3F0 @ =gCurrentSprite
	adds r0, #0x26
	movs r1, #1
	strb r1, [r0]
	bl AtmosphericStabilizerBackOnline
	b _0802D464
	.align 2, 0
_0802D3F0: .4byte gCurrentSprite
_0802D3F4:
	ldr r0, _0802D420 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0802D464
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802D42C
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802D424
	ldrh r0, [r2, #4]
	adds r0, #1
	strh r0, [r2, #4]
	b _0802D444
	.align 2, 0
_0802D420: .4byte gFrameCounter8Bit
_0802D424:
	ldrh r0, [r2, #4]
	subs r0, #1
	strh r0, [r2, #4]
	b _0802D444
_0802D42C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802D43E
	ldrh r0, [r2, #2]
	adds r0, #1
	b _0802D442
_0802D43E:
	ldrh r0, [r2, #2]
	subs r0, #1
_0802D442:
	strh r0, [r2, #2]
_0802D444:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802D464
	movs r0, #0x40
	strb r0, [r1]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
_0802D464:
	pop {r0}
	bx r0

	thumb_func_start AtmosphericStabilizerCover
AtmosphericStabilizerCover: @ 0x0802D468
	push {lr}
	ldr r0, _0802D480 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0802D48E
	cmp r0, #2
	bgt _0802D484
	cmp r0, #0
	beq _0802D48A
	b _0802D498
	.align 2, 0
_0802D480: .4byte gCurrentSprite
_0802D484:
	cmp r0, #0x18
	beq _0802D494
	b _0802D498
_0802D48A:
	bl AtmosphericStabilizerCoverInit
_0802D48E:
	bl AtmosphericStabilizerCoverIdle
	b _0802D498
_0802D494:
	bl AtmosphericStabilizerCoverExploding
_0802D498:
	pop {r0}
	bx r0

	thumb_func_start AtmosphericStabilizerParasite
AtmosphericStabilizerParasite: @ 0x0802D49C
	push {r4, lr}
	ldr r4, _0802D4D4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0802D4B6
	movs r0, #0xb0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0802D4B6:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x18
	beq _0802D500
	cmp r0, #0x18
	bgt _0802D4DE
	cmp r0, #1
	beq _0802D4F6
	cmp r0, #1
	bgt _0802D4D8
	cmp r0, #0
	beq _0802D4F2
	b _0802D518
	.align 2, 0
_0802D4D4: .4byte gCurrentSprite
_0802D4D8:
	cmp r0, #2
	beq _0802D4FA
	b _0802D518
_0802D4DE:
	cmp r0, #0x58
	beq _0802D50E
	cmp r0, #0x58
	bgt _0802D4EC
	cmp r0, #0x57
	beq _0802D506
	b _0802D518
_0802D4EC:
	cmp r0, #0x5b
	beq _0802D514
	b _0802D518
_0802D4F2:
	bl AtmosphericStabilizerParasiteInit
_0802D4F6:
	bl AtmosphericStabilizerParasiteIdleInit
_0802D4FA:
	bl AtmosphericStabilizerParasiteIdle
	b _0802D518
_0802D500:
	bl AtmosphericStabilizerParasiteSpawnX
	b _0802D518
_0802D506:
	bl AtmosphericStabilizerParasiteDeath
	bl SpriteDyingInit
_0802D50E:
	bl SpriteDying
	b _0802D518
_0802D514:
	bl XParasiteInit
_0802D518:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ChozoStatueSetCollision
ChozoStatueSetCollision: @ 0x0802D520
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r4, _0802D5A0 @ =gCurrentSprite
	ldrh r5, [r4, #2]
	ldrh r7, [r4, #4]
	ldr r0, _0802D5A4 @ =gCurrentClipdataAffectingAction
	mov r8, r0
	strb r6, [r0]
	movs r0, #0x20
	rsbs r0, r0, #0
	adds r0, r0, r5
	mov sb, r0
	adds r1, r7, #0
	bl ProcessClipdata
	mov r0, r8
	strb r6, [r0]
	movs r0, #0x60
	rsbs r0, r0, #0
	adds r0, r0, r5
	mov sl, r0
	adds r1, r7, #0
	bl ProcessClipdata
	mov r0, r8
	strb r6, [r0]
	subs r5, #0xa0
	adds r0, r5, #0
	adds r1, r7, #0
	bl ProcessClipdata
	adds r4, #0x2a
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0802D5A8
	mov r0, r8
	strb r6, [r0]
	adds r4, r7, #0
	adds r4, #0x40
	mov r0, sb
	adds r1, r4, #0
	bl ProcessClipdata
	mov r0, r8
	strb r6, [r0]
	mov r0, sl
	adds r1, r4, #0
	bl ProcessClipdata
	mov r0, r8
	strb r6, [r0]
	adds r0, r5, #0
	adds r1, r4, #0
	bl ProcessClipdata
	b _0802D5D0
	.align 2, 0
_0802D5A0: .4byte gCurrentSprite
_0802D5A4: .4byte gCurrentClipdataAffectingAction
_0802D5A8:
	mov r0, r8
	strb r6, [r0]
	adds r4, r7, #0
	subs r4, #0x40
	mov r0, sb
	adds r1, r4, #0
	bl ProcessClipdata
	mov r0, r8
	strb r6, [r0]
	mov r0, sl
	adds r1, r4, #0
	bl ProcessClipdata
	mov r0, r8
	strb r6, [r0]
	adds r0, r5, #0
	adds r1, r4, #0
	bl ProcessClipdata
_0802D5D0:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ChozoStatueInit
ChozoStatueInit: @ 0x0802D5E0
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r1, _0802D604 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x26
	movs r5, #1
	strb r5, [r0]
	ldr r0, _0802D608 @ =gEquipment
	ldrb r0, [r0, #0xa]
	adds r3, r5, #0
	ands r3, r0
	adds r4, r1, #0
	cmp r3, #0
	beq _0802D60C
	movs r0, #0
	strh r0, [r4]
	b _0802D6BC
	.align 2, 0
_0802D604: .4byte gCurrentSprite
_0802D608: .4byte gEquipment
_0802D60C:
	ldr r2, _0802D664 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r4]
	movs r6, #0x80
	lsls r6, r6, #8
	adds r1, r6, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802D668 @ =0x0000FF40
	strh r0, [r4, #0xa]
	strh r3, [r4, #0xc]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	bne _0802D670
	ldr r0, _0802D66C @ =0x0000FFE0
	strh r0, [r4, #0xe]
	movs r0, #0x60
	strh r0, [r4, #0x10]
	b _0802D680
	.align 2, 0
_0802D664: .4byte sPrimarySpriteStats
_0802D668: .4byte 0x0000FF40
_0802D66C: .4byte 0x0000FFE0
_0802D670:
	ldr r0, _0802D6C4 @ =0x0000FFA0
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r4]
_0802D680:
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802D6C8 @ =0x08328380
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	ldrh r4, [r4]
	movs r0, #0x40
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #8]
	movs r0, #0x27
	bl SpriteSpawnSecondary
	movs r0, #2
	bl ChozoStatueSetCollision
_0802D6BC:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802D6C4: .4byte 0x0000FFA0
_0802D6C8: .4byte 0x08328380

	thumb_func_start ChozoStatueIdle
ChozoStatueIdle: @ 0x0802D6CC
	bx lr
	.align 2, 0

	thumb_func_start ChozoStatueTransformingInit
ChozoStatueTransformingInit: @ 0x0802D6D0
	push {lr}
	ldr r3, _0802D704 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r2, _0802D708 @ =0x00008020
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r3, #6]
	movs r0, #1
	bl ChozoStatueSetCollision
	movs r0, #0x43
	movs r1, #7
	bl PlayMusic
	pop {r0}
	bx r0
	.align 2, 0
_0802D704: .4byte gCurrentSprite
_0802D708: .4byte 0x00008020

	thumb_func_start ChozoStatueTransforming
ChozoStatueTransforming: @ 0x0802D70C
	push {r4, lr}
	ldr r2, _0802D754 @ =gWrittenToMosaic_H
	ldr r1, _0802D758 @ =0x083BDED6
	ldr r4, _0802D75C @ =gCurrentSprite
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x13
	bhi _0802D760
	ldrh r2, [r4, #6]
	movs r0, #0x56
	movs r1, #0
	bl SpriteLoadGfx
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0802D76E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	movs r0, #0x56
	strb r0, [r4, #0x1d]
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	b _0802D76E
	.align 2, 0
_0802D754: .4byte gWrittenToMosaic_H
_0802D758: .4byte 0x083BDED6
_0802D75C: .4byte gCurrentSprite
_0802D760:
	cmp r0, #0x14
	bne _0802D76E
	movs r0, #0x56
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_0802D76E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start FakeChozoBallInit
FakeChozoBallInit: @ 0x0802D774
	push {r4, lr}
	ldr r3, _0802D7DC @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r2, [r0]
	ldrh r1, [r3]
	ldr r0, _0802D7E0 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	ldr r1, _0802D7E4 @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	adds r1, #2
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802D7E8 @ =0x0000FF4C
	strh r0, [r3, #0xa]
	adds r0, #0x40
	strh r0, [r3, #0xc]
	ldr r1, _0802D7EC @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _0802D7F4
	ldr r0, _0802D7F0 @ =0x0000FFA0
	strh r0, [r3, #0xe]
	adds r0, #0x40
	strh r0, [r3, #0x10]
	b _0802D804
	.align 2, 0
_0802D7DC: .4byte gCurrentSprite
_0802D7E0: .4byte 0x0000FFFB
_0802D7E4: .4byte sSecondarySpriteStats
_0802D7E8: .4byte 0x0000FF4C
_0802D7EC: .4byte gSpriteData
_0802D7F0: .4byte 0x0000FFA0
_0802D7F4:
	movs r0, #0x20
	strh r0, [r3, #0xe]
	movs r0, #0x60
	strh r0, [r3, #0x10]
	ldrh r0, [r3]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r3]
_0802D804:
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0802D81C @ =0x08328390
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802D81C: .4byte 0x08328390

	thumb_func_start FakeChozoBallIdle
FakeChozoBallIdle: @ 0x0802D820
	push {lr}
	ldr r1, _0802D834 @ =gCurrentSprite
	ldrh r0, [r1, #0x14]
	cmp r0, #0
	bne _0802D830
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
_0802D830:
	pop {r0}
	bx r0
	.align 2, 0
_0802D834: .4byte gCurrentSprite

	thumb_func_start FakeChozoBallExposedInit
FakeChozoBallExposedInit: @ 0x0802D838
	push {r4, r5, lr}
	ldr r2, _0802D870 @ =gCurrentSprite
	ldrh r0, [r2, #0x14]
	adds r0, #1
	movs r3, #0
	movs r4, #0
	strh r0, [r2, #0x14]
	ldrh r0, [r2]
	movs r5, #0x80
	lsls r5, r5, #8
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _0802D874 @ =0x083283A0
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	adds r2, #0x24
	movs r0, #0x38
	strb r0, [r2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802D870: .4byte gCurrentSprite
_0802D874: .4byte 0x083283A0

	thumb_func_start FakeChozoBallExposed
FakeChozoBallExposed: @ 0x0802D878
	push {lr}
	ldr r3, _0802D8BC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r1, #8
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802D8B6
	subs r1, #0xa
	movs r0, #0x3a
	strb r0, [r1]
	ldrh r1, [r3]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r3]
	ldr r2, _0802D8C0 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	movs r1, #0x45
	strb r1, [r0]
_0802D8B6:
	pop {r0}
	bx r0
	.align 2, 0
_0802D8BC: .4byte gCurrentSprite
_0802D8C0: .4byte gSpriteData

	thumb_func_start FakeChozoBallTransformation
FakeChozoBallTransformation: @ 0x0802D8C4
	push {lr}
	ldr r3, _0802D8F8 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0802D8FC @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bne _0802D8F4
	ldrh r0, [r1, #6]
	cmp r0, #0x14
	bhi _0802D8F4
	movs r0, #0
	strh r0, [r3]
_0802D8F4:
	pop {r0}
	bx r0
	.align 2, 0
_0802D8F8: .4byte gCurrentSprite
_0802D8FC: .4byte gSpriteData

	thumb_func_start ChozoStatue
ChozoStatue: @ 0x0802D900
	push {lr}
	ldr r0, _0802D920 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0802D934
	cmp r0, #2
	bgt _0802D924
	cmp r0, #0
	beq _0802D92E
	b _0802D942
	.align 2, 0
_0802D920: .4byte gCurrentSprite
_0802D924:
	cmp r0, #0x45
	beq _0802D93A
	cmp r0, #0x46
	beq _0802D93E
	b _0802D942
_0802D92E:
	bl ChozoStatueInit
	b _0802D942
_0802D934:
	bl ChozoStatueIdle
	b _0802D942
_0802D93A:
	bl ChozoStatueTransformingInit
_0802D93E:
	bl ChozoStatueTransforming
_0802D942:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FakeChozoBall
FakeChozoBall: @ 0x0802D948
	push {lr}
	ldr r0, _0802D964 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x37
	beq _0802D97E
	cmp r0, #0x37
	bgt _0802D968
	cmp r0, #0
	beq _0802D972
	cmp r0, #2
	beq _0802D978
	b _0802D98E
	.align 2, 0
_0802D964: .4byte gCurrentSprite
_0802D968:
	cmp r0, #0x38
	beq _0802D984
	cmp r0, #0x3a
	beq _0802D98A
	b _0802D98E
_0802D972:
	bl FakeChozoBallInit
	b _0802D98E
_0802D978:
	bl FakeChozoBallIdle
	b _0802D98E
_0802D97E:
	bl FakeChozoBallExposedInit
	b _0802D98E
_0802D984:
	bl FakeChozoBallExposed
	b _0802D98E
_0802D98A:
	bl FakeChozoBallTransformation
_0802D98E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BeamCoreXTransformation
BeamCoreXTransformation: @ 0x0802D994
	push {lr}
	ldr r3, _0802D9BC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0802D9C8
	ldr r2, _0802D9C0 @ =gWrittenToMosaic_H
	ldr r1, _0802D9C4 @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _0802D9DC
	.align 2, 0
_0802D9BC: .4byte gCurrentSprite
_0802D9C0: .4byte gWrittenToMosaic_H
_0802D9C4: .4byte 0x083BDED6
_0802D9C8:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _0802D9E0 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r3]
	bl ProjectileLoadEyeCoreXGraphics
_0802D9DC:
	pop {r0}
	bx r0
	.align 2, 0
_0802D9E0: .4byte 0x0000FFDF

	thumb_func_start BeamCoreXTransformationInit
BeamCoreXTransformationInit: @ 0x0802D9E4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	movs r5, #0
	ldr r0, _0802DA9C @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x5c
	strh r0, [r1, #2]
	adds r1, #0x24
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	mov r2, ip
	strh r0, [r2, #6]
	ldrh r2, [r2]
	movs r0, #0x20
	orrs r2, r0
	movs r4, #0
	ldr r0, _0802DAA0 @ =0x0000F3FB
	ands r2, r0
	mov r0, ip
	strh r2, [r0]
	ldr r3, _0802DAA4 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	mov r3, ip
	adds r3, #0x21
	movs r0, #2
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x25
	strb r4, [r0]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r0, r1, #0
	orrs r2, r0
	mov r0, ip
	strh r2, [r0]
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802DAA8 @ =0x0000FFE0
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #0x20
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _0802DAAC @ =0x0832AF80
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r5, [r2, #0x16]
	mov r0, ip
	adds r0, #0x30
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	subs r0, #4
	strb r4, [r0]
	ldrb r0, [r2, #0x1d]
	mov r6, ip
	cmp r0, #0x58
	beq _0802DACA
	cmp r0, #0x58
	bgt _0802DAB0
	cmp r0, #0x56
	beq _0802DABA
	cmp r0, #0x57
	beq _0802DAC2
	b _0802DAF0
	.align 2, 0
_0802DA9C: .4byte gCurrentSprite
_0802DAA0: .4byte 0x0000F3FB
_0802DAA4: .4byte sPrimarySpriteStats
_0802DAA8: .4byte 0x0000FFE0
_0802DAAC: .4byte 0x0832AF80
_0802DAB0:
	cmp r0, #0x59
	beq _0802DAD2
	cmp r0, #0xc2
	beq _0802DADA
	b _0802DAF0
_0802DABA:
	movs r5, #0x28
	movs r0, #0x29
	mov r8, r0
	b _0802DAF6
_0802DAC2:
	movs r5, #0x54
	movs r1, #0x55
	mov r8, r1
	b _0802DAF6
_0802DACA:
	movs r5, #0x56
	movs r2, #0x57
	mov r8, r2
	b _0802DAF6
_0802DAD2:
	movs r5, #0x58
	movs r0, #0x59
	mov r8, r0
	b _0802DAF6
_0802DADA:
	movs r5, #0x75
	movs r1, #0x76
	mov r8, r1
	ldr r0, _0802DAEC @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	strb r0, [r3]
	b _0802DAF6
	.align 2, 0
_0802DAEC: .4byte gIoRegisters
_0802DAF0:
	movs r0, #0
	strh r0, [r6]
	b _0802DB52
_0802DAF6:
	adds r4, r6, #0
	ldrb r2, [r4, #0x1f]
	movs r0, #0x23
	adds r0, r0, r4
	mov sb, r0
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r7, #0
	str r7, [sp, #8]
	adds r0, r5, #0
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xff
	bne _0802DB22
	strh r7, [r4]
	b _0802DB52
_0802DB22:
	ldrb r2, [r6, #0x1f]
	mov r1, sb
	ldrb r3, [r1]
	ldrh r0, [r6, #2]
	str r0, [sp]
	ldrh r0, [r6, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	mov r0, r8
	adds r1, r5, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _0802DB46
	strh r7, [r6]
	b _0802DB52
_0802DB46:
	ldr r1, _0802DB60 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	strb r2, [r0, #0x1e]
_0802DB52:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802DB60: .4byte gSpriteData

	thumb_func_start BeamCoreXMovingInit
BeamCoreXMovingInit: @ 0x0802DB64
	ldr r3, _0802DB88 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_0802DB88: .4byte gCurrentSprite

	thumb_func_start BeamCoreXMoving
BeamCoreXMoving: @ 0x0802DB8C
	push {lr}
	sub sp, #8
	ldr r0, _0802DBBC @ =gCurrentSprite
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802DBB6
	ldr r1, _0802DBC0 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0xc0
	str r2, [sp, #4]
	movs r2, #0xa
	movs r3, #0x10
	bl MoveBeamCoreX
_0802DBB6:
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_0802DBBC: .4byte gCurrentSprite
_0802DBC0: .4byte gSamusData

	thumb_func_start BeamCoreXMovingToTargetInit
BeamCoreXMovingToTargetInit: @ 0x0802DBC4
	push {lr}
	ldr r0, _0802DC18 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x5d
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xc
	strb r0, [r1]
	movs r2, #0
	mov r0, ip
	strh r3, [r0, #0x14]
	subs r1, #3
	movs r0, #4
	strb r0, [r1]
	ldr r0, _0802DC1C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x20
	strb r2, [r0]
	adds r0, #0xf
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	subs r0, #0xb
	strb r1, [r0]
	bl MakeXParasitesFlee
	pop {r0}
	bx r0
	.align 2, 0
_0802DC18: .4byte gCurrentSprite
_0802DC1C: .4byte gIoRegisters

	thumb_func_start BeamCoreXMovingToTarget
BeamCoreXMovingToTarget: @ 0x0802DC20
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	ldr r0, _0802DC8C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	ldr r6, _0802DC90 @ =gCurrentSprite
	cmp r0, #0
	bne _0802DC3A
	ldrh r0, [r6]
	movs r1, #4
	eors r0, r1
	strh r0, [r6]
_0802DC3A:
	adds r5, r6, #0
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r4, _0802DC94 @ =gAbilityRestingYPosition
	ldrh r0, [r4]
	ldr r7, _0802DC98 @ =gAbilityRestingXPosition
	ldrh r1, [r7]
	movs r2, #2
	str r2, [sp]
	ldr r2, _0802DC9C @ =0x00000141
	str r2, [sp, #4]
	movs r2, #0x10
	movs r3, #0x18
	bl XParasiteMoveWithSound
	ldrh r2, [r5, #2]
	ldrh r1, [r4]
	adds r0, r1, #6
	cmp r2, r0
	bge _0802DCBE
	subs r0, r1, #6
	cmp r2, r0
	ble _0802DCBE
	ldrh r2, [r5, #4]
	ldrh r1, [r7]
	adds r0, r1, #6
	cmp r2, r0
	bge _0802DCBE
	subs r0, r1, #6
	cmp r2, r0
	ble _0802DCBE
	ldrb r0, [r5, #0x1d]
	cmp r0, #0xc2
	bne _0802DCA0
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x37
	b _0802DCA6
	.align 2, 0
_0802DC8C: .4byte gFrameCounter8Bit
_0802DC90: .4byte gCurrentSprite
_0802DC94: .4byte gAbilityRestingYPosition
_0802DC98: .4byte gAbilityRestingXPosition
_0802DC9C: .4byte 0x00000141
_0802DCA0:
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0x5e
_0802DCA6:
	strb r0, [r1]
	ldr r1, _0802DCC8 @ =gCurrentSprite
	ldrh r2, [r1]
	ldr r0, _0802DCCC @ =0x0000FFFB
	ands r0, r2
	movs r2, #0
	strh r0, [r1]
	adds r0, r1, #0
	adds r0, #0x30
	strb r2, [r0]
	adds r1, #0x31
	strb r2, [r1]
_0802DCBE:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802DCC8: .4byte gCurrentSprite
_0802DCCC: .4byte 0x0000FFFB

	thumb_func_start BeamCoreXRestingAtTarget
BeamCoreXRestingAtTarget: @ 0x0802DCD0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _0802DDB0 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r1, [r0]
	ldr r3, _0802DDB4 @ =0x083031E0
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldr r7, _0802DDB8 @ =0x00007FFF
	mov r8, r7
	cmp r0, r8
	bne _0802DCF8
	ldrh r2, [r3]
	movs r1, #0
_0802DCF8:
	adds r0, r1, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	movs r6, #0
	strh r0, [r4, #2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r3, _0802DDBC @ =0x08303262
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r8
	bne _0802DD20
	ldrh r2, [r3]
	movs r1, #0
_0802DD20:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	ldrh r3, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r3
	cmp r0, #0
	beq _0802DE14
	ldr r1, _0802DDC0 @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x5f
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	strb r0, [r1]
	adds r1, #9
	strb r6, [r1]
	strb r0, [r5]
	subs r1, #1
	strb r6, [r1]
	mov r5, ip
	strb r0, [r5]
	movs r0, #0x80
	orrs r0, r3
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x2b
	strb r6, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x12]
	movs r0, #0x14
	strh r0, [r4, #6]
	strb r6, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
	ldr r0, _0802DDC4 @ =0x0832AFC8
	str r0, [r4, #0x18]
	ldr r2, _0802DDC8 @ =gSamusData
	movs r7, #0x26
	ldrsh r0, [r2, r7]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r1, [r2, #0x18]
	adds r0, r0, r1
	ldrh r1, [r2, #0x16]
	movs r2, #0x1d
	bl ParticleSet
	ldrb r1, [r4, #0x1d]
	cmp r1, #0x57
	beq _0802DDDE
	cmp r1, #0x57
	bgt _0802DDCC
	cmp r1, #0x56
	beq _0802DDD6
	b _0802DDF4
	.align 2, 0
_0802DDB0: .4byte gCurrentSprite
_0802DDB4: .4byte 0x083031E0
_0802DDB8: .4byte 0x00007FFF
_0802DDBC: .4byte 0x08303262
_0802DDC0: .4byte gPreventMovementTimer
_0802DDC4: .4byte 0x0832AFC8
_0802DDC8: .4byte gSamusData
_0802DDCC:
	cmp r1, #0x58
	beq _0802DDE6
	cmp r1, #0x59
	beq _0802DDEE
	b _0802DDF4
_0802DDD6:
	movs r0, #0xf
	bl EventCheckAdvance
	b _0802DDF4
_0802DDDE:
	movs r0, #0x3c
	bl EventCheckAdvance
	b _0802DDF4
_0802DDE6:
	movs r0, #0x4e
	bl EventCheckAdvance
	b _0802DDF4
_0802DDEE:
	movs r0, #0x5b
	bl EventCheckAdvance
_0802DDF4:
	movs r0, #0xc8
	lsls r0, r0, #1
	movs r1, #0x32
	movs r2, #0xa
	bl RefillSamus
	ldr r1, _0802DE10 @ =0x030012F0
	movs r0, #0x30
	strb r0, [r1, #3]
	movs r0, #0x92
	bl SoundPlay
	b _0802DE26
	.align 2, 0
_0802DE10: .4byte 0x030012F0
_0802DE14:
	ldr r0, _0802DE30 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0802DE26
	movs r0, #0xc3
	bl SoundPlay
_0802DE26:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802DE30: .4byte gFrameCounter8Bit

	thumb_func_start BeamCoreXAbsorbed
BeamCoreXAbsorbed: @ 0x0802DE34
	push {r4, lr}
	ldr r4, _0802DE50 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl XParasiteStickToSamus
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _0802DE54
	subs r0, #1
	b _0802DE72
	.align 2, 0
_0802DE50: .4byte gCurrentSprite
_0802DE54:
	ldrh r0, [r4, #0x12]
	cmp r0, #0x50
	bls _0802DE60
	subs r0, #8
	strh r0, [r4, #0x12]
	b _0802DE74
_0802DE60:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x60
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #4
	orrs r0, r1
	strh r0, [r4]
	movs r0, #9
_0802DE72:
	strh r0, [r4, #6]
_0802DE74:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BeamCoreXDisplayingMessage
BeamCoreXDisplayingMessage: @ 0x0802DE7C
	push {lr}
	sub sp, #0xc
	ldr r2, _0802DEAC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r2, #6]
	adds r1, r0, #0
	cmp r1, #0
	beq _0802DEC0
	subs r0, #1
	strh r0, [r2, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #7
	bhi _0802DEB0
	ldrh r2, [r2, #6]
	movs r0, #0x21
	movs r1, #0
	bl SpriteLoadGfx
	b _0802DEDC
	.align 2, 0
_0802DEAC: .4byte gCurrentSprite
_0802DEB0:
	cmp r0, #8
	bne _0802DEDC
	movs r0, #0x21
	movs r1, #0
	movs r2, #2
	bl SpriteLoadPal
	b _0802DEDC
_0802DEC0:
	strh r1, [r2]
	ldr r0, _0802DEE4 @ =gAbilityRestingYPosition
	ldrh r0, [r0]
	str r0, [sp]
	ldr r0, _0802DEE8 @ =gAbilityRestingXPosition
	ldrh r0, [r0]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x21
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SpriteSpawnPrimary
_0802DEDC:
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
_0802DEE4: .4byte gAbilityRestingYPosition
_0802DEE8: .4byte gAbilityRestingXPosition

	thumb_func_start BeamCoreXWaitToFlee
BeamCoreXWaitToFlee: @ 0x0802DEEC
	push {r4, lr}
	ldr r0, _0802DF2C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	ldr r4, _0802DF30 @ =gCurrentSprite
	cmp r0, #0
	bne _0802DF04
	ldrh r0, [r4]
	movs r1, #4
	eors r0, r1
	strh r0, [r4]
_0802DF04:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	movs r0, #0xc0
	movs r1, #0xc0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _0802DF26
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0xb4
	strb r0, [r1]
_0802DF26:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802DF2C: .4byte gFrameCounter8Bit
_0802DF30: .4byte gCurrentSprite

	thumb_func_start BeamCoreXFlee
BeamCoreXFlee: @ 0x0802DF34
	push {r4, r5, r6, lr}
	ldr r0, _0802DFA8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	ldr r5, _0802DFAC @ =gCurrentSprite
	cmp r0, #0
	bne _0802DF4C
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
_0802DF4C:
	movs r0, #0x31
	adds r0, r0, r5
	mov ip, r0
	ldrb r2, [r0]
	ldr r4, _0802DFB0 @ =0x08328480
	lsls r0, r2, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0802DFB4 @ =0x00007FFF
	cmp r1, r0
	bne _0802DF6A
	ldrh r3, [r4]
	movs r2, #0
_0802DF6A:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r1, [r5, #2]
	adds r1, r1, r3
	ldrh r0, [r5, #4]
	adds r0, #8
	strh r0, [r5, #4]
	adds r1, #1
	strh r1, [r5, #2]
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _0802DFA2
	movs r0, #0x66
	bl EventCheckAdvance
	strh r4, [r5]
	movs r0, #0x3c
	movs r1, #0x2e
	movs r2, #0xa
	bl unk_372c
_0802DFA2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802DFA8: .4byte gFrameCounter8Bit
_0802DFAC: .4byte gCurrentSprite
_0802DFB0: .4byte 0x08328480
_0802DFB4: .4byte 0x00007FFF

	thumb_func_start BeamCoreXShellInit
BeamCoreXShellInit: @ 0x0802DFB8
	push {r4, r5, r6, lr}
	ldr r0, _0802E044 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r2, r1, #0
	movs r5, #0
	movs r4, #0
	orrs r2, r0
	mov r0, ip
	adds r0, #0x35
	movs r3, #1
	strb r3, [r0]
	ldr r0, _0802E048 @ =0x0000FFFB
	ands r2, r0
	mov r6, ip
	strh r2, [r6]
	mov r1, ip
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	ldr r1, _0802E04C @ =sSecondarySpriteStats
	ldrb r0, [r6, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6, #0x14]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802E050 @ =0x0000FFC0
	strh r1, [r6, #0xa]
	movs r0, #0x40
	strh r0, [r6, #0xc]
	strh r1, [r6, #0xe]
	strh r0, [r6, #0x10]
	ldr r0, _0802E054 @ =0x0832B0A8
	str r0, [r6, #0x18]
	strb r5, [r6, #0x1c]
	strh r4, [r6, #0x16]
	mov r1, ip
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x24
	strb r3, [r0]
	movs r0, #0x80
	orrs r2, r0
	strh r2, [r6]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r6, #0x12]
	ldr r1, _0802E058 @ =gSamusData
	ldrh r0, [r6, #4]
	mov r2, ip
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0802E05C
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0x80
	strb r0, [r1]
	b _0802E062
	.align 2, 0
_0802E044: .4byte gCurrentSprite
_0802E048: .4byte 0x0000FFFB
_0802E04C: .4byte sSecondarySpriteStats
_0802E050: .4byte 0x0000FFC0
_0802E054: .4byte 0x0832B0A8
_0802E058: .4byte gSamusData
_0802E05C:
	adds r0, r2, #0
	adds r0, #0x2b
	strb r5, [r0]
_0802E062:
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x75
	bne _0802E076
	ldr r0, _0802E07C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
	strb r0, [r1]
_0802E076:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802E07C: .4byte gIoRegisters

	thumb_func_start BeamCoreXShellTransformation
BeamCoreXShellTransformation: @ 0x0802E080
	push {lr}
	ldr r2, _0802E0B0 @ =gSpriteData
	ldr r3, _0802E0B4 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1b
	bne _0802E0AC
	ldrh r1, [r3]
	ldr r0, _0802E0B8 @ =0x00007FFF
	ands r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
_0802E0AC:
	pop {r0}
	bx r0
	.align 2, 0
_0802E0B0: .4byte gSpriteData
_0802E0B4: .4byte gCurrentSprite
_0802E0B8: .4byte 0x00007FFF

	thumb_func_start BeamCoreXShellIdle
BeamCoreXShellIdle: @ 0x0802E0BC
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _0802E120 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #1
	bne _0802E0FE
	movs r0, #0x32
	bl CountPrimarySprite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #5
	bhi _0802E0FE
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	movs r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #2]
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
_0802E0FE:
	ldr r3, _0802E120 @ =gCurrentSprite
	ldrb r2, [r3, #0x1e]
	ldr r1, _0802E124 @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x20
	ldrb r0, [r0]
	adds r2, r0, #0
	cmp r2, #0
	beq _0802E128
	adds r1, r0, #2
	adds r0, r3, #0
	adds r0, #0x20
	strb r1, [r0]
	b _0802E12E
	.align 2, 0
_0802E120: .4byte gCurrentSprite
_0802E124: .4byte gSpriteData
_0802E128:
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
_0802E12E:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BeamCoreXEyeInit
BeamCoreXEyeInit: @ 0x0802E138
	push {r4, lr}
	ldr r0, _0802E1C8 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	movs r4, #0
	movs r3, #0
	orrs r1, r0
	mov r0, ip
	adds r0, #0x35
	movs r2, #3
	strb r2, [r0]
	movs r0, #0x80
	orrs r1, r0
	mov r0, ip
	strh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	mov r1, ip
	strh r0, [r1, #0x12]
	mov r0, ip
	adds r0, #0x22
	strb r2, [r0]
	ldr r1, _0802E1CC @ =sSecondarySpriteStats
	mov r2, ip
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #0x14]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802E1D0 @ =0x0000FFD8
	strh r1, [r2, #0xa]
	movs r0, #0x28
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _0802E1D4 @ =0x0832B0B8
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r3, [r2, #0x16]
	mov r0, ip
	adds r0, #0x25
	strb r4, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	adds r1, #0xb
	movs r0, #0x78
	strb r0, [r1]
	ldr r1, _0802E1D8 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0802E1DC
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #3
	strb r0, [r1]
	b _0802E1E6
	.align 2, 0
_0802E1C8: .4byte gCurrentSprite
_0802E1CC: .4byte sSecondarySpriteStats
_0802E1D0: .4byte 0x0000FFD8
_0802E1D4: .4byte 0x0832B0B8
_0802E1D8: .4byte gSamusData
_0802E1DC:
	adds r0, r2, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
_0802E1E6:
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x76
	bne _0802E1FA
	ldr r0, _0802E200 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
	strb r0, [r1]
_0802E1FA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E200: .4byte gIoRegisters

	thumb_func_start BeamCoreXEyeTransformation
BeamCoreXEyeTransformation: @ 0x0802E204
	push {lr}
	ldr r3, _0802E22C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0802E230 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0802E234
	ldrh r1, [r3]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r3]
	b _0802E244
	.align 2, 0
_0802E22C: .4byte gCurrentSprite
_0802E230: .4byte gSpriteData
_0802E234:
	ldrh r1, [r3]
	ldr r0, _0802E248 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
_0802E244:
	pop {r0}
	bx r0
	.align 2, 0
_0802E248: .4byte 0x0000FFDF

	thumb_func_start BeamCoreXEyeHandleRotation
BeamCoreXEyeHandleRotation: @ 0x0802E24C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	movs r0, #2
	mov ip, r0
	ldr r4, _0802E2C8 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	str r0, [sp]
	ldrb r1, [r4, #0x1e]
	str r1, [sp, #4]
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r3, [r0]
	ldr r0, _0802E2CC @ =gSamusData
	ldrh r1, [r0, #0x18]
	subs r1, #0x48
	lsls r1, r1, #0x10
	ldrh r0, [r0, #0x16]
	mov sb, r0
	ldr r2, _0802E2D0 @ =gSpriteData
	ldr r5, [sp]
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r6, [r0, #2]
	ldrh r0, [r0, #4]
	lsrs r7, r1, #0x10
	lsls r5, r6, #0x10
	mov r8, r5
	mov sl, r4
	cmp r1, r8
	bge _0802E2EA
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	adds r2, r5, #0
	subs r2, #0x40
	mov r4, sb
	lsls r1, r4, #0x10
	asrs r4, r1, #0x10
	mov sb, r0
	cmp r2, r4
	bge _0802E2B0
	adds r0, r5, #0
	adds r0, #0x40
_0802E2B0:
	cmp r1, sb
	ble _0802E2D4
	lsls r2, r6, #0x10
	asrs r1, r2, #0x10
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	movs r4, #0xe0
	adds r5, r2, #0
	cmp r1, #0x3f
	bgt _0802E338
	b _0802E33C
	.align 2, 0
_0802E2C8: .4byte gCurrentSprite
_0802E2CC: .4byte gSamusData
_0802E2D0: .4byte gSpriteData
_0802E2D4:
	lsls r2, r6, #0x10
	asrs r1, r2, #0x10
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	movs r4, #0xa0
	adds r5, r2, #0
	cmp r1, #0x3f
	bgt _0802E338
	movs r4, #0x80
	b _0802E360
_0802E2EA:
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	adds r2, r5, #0
	subs r2, #0x40
	mov r4, sb
	lsls r1, r4, #0x10
	asrs r4, r1, #0x10
	mov sb, r0
	cmp r2, r4
	bge _0802E30C
	adds r0, r5, #0
	adds r0, #0x40
	cmp r0, r4
	ble _0802E30C
	movs r4, #0x40
	mov r5, r8
	b _0802E360
_0802E30C:
	cmp r1, sb
	ble _0802E324
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	lsls r2, r6, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	movs r4, #0x20
	adds r5, r2, #0
	cmp r0, #0x3f
	bgt _0802E338
	b _0802E33C
_0802E324:
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	lsls r2, r6, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	movs r4, #0x60
	adds r5, r2, #0
	cmp r0, #0x3f
	bgt _0802E338
	movs r4, #0x80
_0802E338:
	cmp r4, #0
	bne _0802E360
_0802E33C:
	lsls r0, r3, #0x10
	asrs r1, r0, #0x10
	ldr r2, _0802E350 @ =0xFFFF0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E354
	mov r4, ip
	subs r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E350: .4byte 0xFFFF0000
_0802E354:
	cmp r1, #0x7f
	bgt _0802E35A
	b _0802E470
_0802E35A:
	mov r1, ip
	adds r0, r3, r1
	b _0802E46C
_0802E360:
	cmp r4, #0x20
	bne _0802E38E
	lsls r0, r3, #0x10
	asrs r1, r0, #0x10
	ldr r2, _0802E378 @ =0xFFDF0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E37C
	mov r4, ip
	subs r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E378: .4byte 0xFFDF0000
_0802E37C:
	adds r0, r1, #0
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x7f
	bls _0802E470
	mov r1, ip
	adds r0, r3, r1
	b _0802E46C
_0802E38E:
	cmp r4, #0x40
	bne _0802E3BE
	lsls r0, r3, #0x10
	asrs r1, r0, #0x10
	ldr r2, _0802E3A8 @ =0xFFBF0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E3AC
	mov r4, ip
	subs r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E3A8: .4byte 0xFFBF0000
_0802E3AC:
	adds r0, r1, #0
	subs r0, #0x40
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x7f
	bls _0802E470
	mov r1, ip
	adds r0, r3, r1
	b _0802E46C
_0802E3BE:
	cmp r4, #0x60
	bne _0802E3EE
	lsls r0, r3, #0x10
	asrs r1, r0, #0x10
	ldr r2, _0802E3D8 @ =0xFF9F0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E3DC
	mov r4, ip
	subs r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E3D8: .4byte 0xFF9F0000
_0802E3DC:
	adds r0, r1, #0
	subs r0, #0x60
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x7f
	bls _0802E470
	mov r1, ip
	adds r0, r3, r1
	b _0802E46C
_0802E3EE:
	cmp r4, #0x80
	bne _0802E412
	lsls r0, r3, #0x10
	asrs r1, r0, #0x10
	ldr r2, _0802E408 @ =0xFFFF0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E40C
	mov r4, ip
	adds r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E408: .4byte 0xFFFF0000
_0802E40C:
	cmp r1, #0x80
	ble _0802E470
	b _0802E468
_0802E412:
	cmp r4, #0xa0
	bne _0802E42C
	lsls r0, r3, #0x10
	ldr r2, _0802E428 @ =0xFFDF0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E464
	mov r4, ip
	adds r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E428: .4byte 0xFFDF0000
_0802E42C:
	cmp r4, #0xc0
	bne _0802E448
	lsls r0, r3, #0x10
	ldr r2, _0802E444 @ =0xFFBF0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E464
	mov r4, ip
	adds r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E444: .4byte 0xFFBF0000
_0802E448:
	cmp r4, #0xe0
	bne _0802E470
	lsls r0, r3, #0x10
	ldr r2, _0802E460 @ =0xFF9F0000
	adds r0, r0, r2
	lsrs r0, r0, #0x10
	cmp r0, #0x7e
	bhi _0802E464
	mov r4, ip
	adds r0, r3, r4
	b _0802E46C
	.align 2, 0
_0802E460: .4byte 0xFF9F0000
_0802E464:
	cmp r0, #0x7f
	bls _0802E470
_0802E468:
	mov r1, ip
	subs r0, r3, r1
_0802E46C:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_0802E470:
	mov r0, sl
	adds r0, #0x2e
	strb r3, [r0]
	ldr r4, [sp, #4]
	lsls r2, r4, #3
	subs r0, r2, r4
	lsls r0, r0, #3
	ldr r1, _0802E4B8 @ =gSpriteData
	adds r0, r0, r1
	adds r0, #0x2b
	strb r3, [r0]
	mov r0, sl
	adds r0, #0x2b
	strb r3, [r0]
	movs r0, #0xff
	ands r3, r0
	movs r6, #0x20
	ldr r1, _0802E4BC @ =0x080A4FA4
	lsls r0, r3, #1
	adds r0, r0, r1
	movs r4, #0
	ldrsh r0, [r0, r4]
	adds r4, r1, #0
	cmp r0, #0
	bge _0802E4C0
	rsbs r0, r0, #0
	lsls r1, r0, #5
	cmp r1, #0
	bge _0802E4AC
	adds r1, #0xff
_0802E4AC:
	asrs r0, r5, #0x10
	asrs r1, r1, #8
	subs r0, r0, r1
	mov r5, sl
	strh r0, [r5, #2]
	b _0802E4D2
	.align 2, 0
_0802E4B8: .4byte gSpriteData
_0802E4BC: .4byte 0x080A4FA4
_0802E4C0:
	lsls r1, r0, #5
	cmp r1, #0
	bge _0802E4C8
	adds r1, #0xff
_0802E4C8:
	asrs r0, r5, #0x10
	asrs r1, r1, #8
	adds r0, r0, r1
	mov r1, sl
	strh r0, [r1, #2]
_0802E4D2:
	lsls r0, r3, #0x10
	asrs r0, r0, #0xf
	adds r0, #0x80
	adds r0, r0, r4
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	bge _0802E4FC
	rsbs r0, r0, #0
	adds r1, r0, #0
	muls r1, r6, r1
	cmp r1, #0
	bge _0802E4EE
	adds r1, #0xff
_0802E4EE:
	mov r4, sb
	asrs r0, r4, #0x10
	asrs r1, r1, #8
	subs r0, r0, r1
	mov r5, sl
	strh r0, [r5, #4]
	b _0802E512
_0802E4FC:
	adds r1, r0, #0
	muls r1, r6, r1
	cmp r1, #0
	bge _0802E506
	adds r1, #0xff
_0802E506:
	mov r3, sb
	asrs r0, r3, #0x10
	asrs r1, r1, #8
	adds r0, r0, r1
	mov r4, sl
	strh r0, [r4, #4]
_0802E512:
	mov r5, sl
	ldrh r1, [r5, #0x14]
	cmp r1, #0
	bne _0802E574
	strh r1, [r5]
	ldr r3, [sp, #4]
	subs r0, r2, r3
	lsls r0, r0, #3
	ldr r4, _0802E558 @ =gSpriteData
	adds r0, r0, r4
	strh r1, [r0]
	ldr r5, [sp]
	lsls r4, r5, #3
	subs r4, r4, r5
	lsls r4, r4, #3
	ldr r0, _0802E558 @ =gSpriteData
	adds r4, r4, r0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x5c
	strb r0, [r1]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x2f
	bl ParticleSet
	ldrb r0, [r4, #0x1d]
	cmp r0, #0x58
	beq _0802E562
	cmp r0, #0x58
	bgt _0802E55C
	cmp r0, #0x56
	beq _0802E562
	b _0802E574
	.align 2, 0
_0802E558: .4byte gSpriteData
_0802E55C:
	cmp r0, #0x59
	beq _0802E56C
	b _0802E574
_0802E562:
	movs r0, #0x18
	movs r1, #6
	bl PlayMusic
	b _0802E574
_0802E56C:
	movs r0, #0xa
	movs r1, #0
	bl PlayMusic
_0802E574:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start BeamCoreXEyeClosed
BeamCoreXEyeClosed: @ 0x0802E584
	push {lr}
	bl BeamCoreXEyeHandleRotation
	ldr r2, _0802E5BC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0802E5B8
	ldrh r1, [r2]
	ldr r0, _0802E5C0 @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r2]
	ldr r0, _0802E5C4 @ =0x0832B0C8
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r3, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_0802E5B8:
	pop {r0}
	bx r0
	.align 2, 0
_0802E5BC: .4byte gCurrentSprite
_0802E5C0: .4byte 0x0000FFFB
_0802E5C4: .4byte 0x0832B0C8

	thumb_func_start BeamCoreXEyeOpening
BeamCoreXEyeOpening: @ 0x0802E5C8
	push {lr}
	bl BeamCoreXEyeHandleRotation
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802E5FA
	ldr r1, _0802E600 @ =gCurrentSprite
	ldrh r2, [r1]
	ldr r0, _0802E604 @ =0x00007FFF
	ands r0, r2
	movs r2, #0
	movs r3, #0
	strh r0, [r1]
	ldr r0, _0802E608 @ =0x0832B100
	str r0, [r1, #0x18]
	strb r2, [r1, #0x1c]
	strh r3, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1a
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #0xa0
	strb r0, [r1]
_0802E5FA:
	pop {r0}
	bx r0
	.align 2, 0
_0802E600: .4byte gCurrentSprite
_0802E604: .4byte 0x00007FFF
_0802E608: .4byte 0x0832B100

	thumb_func_start BeamCoreXEyeOpened
BeamCoreXEyeOpened: @ 0x0802E60C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r5, _0802E660 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov r8, r0
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bls _0802E644
	ldrh r0, [r5, #2]
	adds r0, #0x20
	ldrh r1, [r5, #4]
	movs r2, #0x2f
	bl ParticleSet
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
_0802E644:
	bl BeamCoreXEyeHandleRotation
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r0, r1, #0
	cmp r0, #0x6e
	bne _0802E668
	ldr r0, _0802E664 @ =0x0832B110
	str r0, [r5, #0x18]
	movs r0, #0
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	b _0802E6E0
	.align 2, 0
_0802E660: .4byte gCurrentSprite
_0802E664: .4byte 0x0832B110
_0802E668:
	cmp r0, #0x3c
	bne _0802E6A0
	ldr r0, _0802E698 @ =0x0832B160
	str r0, [r5, #0x18]
	movs r4, #0
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	ldr r3, _0802E69C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r3, [r0, #0x1e]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x4d
	bl SpriteSpawnSecondary
	b _0802E6E0
	.align 2, 0
_0802E698: .4byte 0x0832B160
_0802E69C: .4byte gSpriteData
_0802E6A0:
	cmp r0, #0x3b
	bhi _0802E6E0
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0802E6E0
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _0802E6D0
	ldr r0, _0802E6CC @ =gSpriteData
	mov r2, r8
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x20
	movs r0, #2
	strb r0, [r1]
	b _0802E6E0
	.align 2, 0
_0802E6CC: .4byte gSpriteData
_0802E6D0:
	ldr r1, _0802E724 @ =gSpriteData
	mov r3, r8
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x20
	strb r2, [r0]
_0802E6E0:
	ldr r2, _0802E728 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	mov ip, r2
	cmp r1, #0
	beq _0802E6F8
	b _0802E8DE
_0802E6F8:
	ldr r0, _0802E72C @ =0x0832B100
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	mov r0, ip
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #5
	bne _0802E730
	movs r0, #1
	strb r0, [r3]
	mov r5, ip
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5]
	b _0802E734
	.align 2, 0
_0802E724: .4byte gSpriteData
_0802E728: .4byte gCurrentSprite
_0802E72C: .4byte 0x0832B100
_0802E730:
	movs r0, #0x1e
	strb r0, [r3]
_0802E734:
	mov r1, ip
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x1c
	strb r0, [r1]
	ldr r3, _0802E79C @ =gSpriteData
	mov r5, r8
	lsls r4, r5, #3
	subs r1, r4, r5
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r5, r1, #0
	adds r5, #0x2d
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r1, #0x20
	strb r2, [r1]
	mov r0, ip
	ldrh r0, [r0, #2]
	str r0, [sp, #0x10]
	mov r1, ip
	ldrh r1, [r1, #4]
	str r1, [sp, #0x14]
	mov r0, ip
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r2, r1, #0
	adds r0, r1, #0
	subs r0, #0x40
	lsls r0, r0, #0x18
	asrs r0, r0, #0x1f
	mov sb, r0
	movs r0, #0x40
	mov r5, sb
	ands r5, r0
	mov sb, r5
	adds r0, r1, #0
	subs r0, #0x11
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1f
	bls _0802E7AC
	adds r0, r1, #0
	subs r0, #0x31
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1f
	bhi _0802E7A0
	movs r7, #5
	b _0802E7EC
	.align 2, 0
_0802E79C: .4byte gSpriteData
_0802E7A0:
	adds r0, r1, #0
	subs r0, #0x51
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1f
	bhi _0802E7B0
_0802E7AC:
	movs r7, #3
	b _0802E7EC
_0802E7B0:
	adds r0, r1, #0
	subs r0, #0x71
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1f
	bhi _0802E7C0
	movs r7, #1
	b _0802E7EC
_0802E7C0:
	adds r0, r1, #0
	adds r0, #0x6f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1f
	bls _0802E7EA
	adds r0, r1, #0
	adds r0, #0x4f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1f
	bhi _0802E7DC
	movs r7, #4
	b _0802E7EC
_0802E7DC:
	adds r0, r2, #0
	adds r0, #0x2f
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r7, #1
	cmp r0, #0x1f
	bhi _0802E7EC
_0802E7EA:
	movs r7, #2
_0802E7EC:
	mov r1, r8
	subs r0, r4, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #0x1d]
	cmp r0, #0x58
	beq _0802E81A
	cmp r0, #0x58
	bgt _0802E808
	cmp r0, #0x56
	beq _0802E812
	cmp r0, #0x57
	beq _0802E816
	b _0802E8DE
_0802E808:
	cmp r0, #0x59
	beq _0802E81E
	cmp r0, #0xc2
	beq _0802E822
	b _0802E8DE
_0802E812:
	movs r6, #0x4e
	b _0802E824
_0802E816:
	movs r6, #0x4f
	b _0802E824
_0802E81A:
	movs r6, #0x50
	b _0802E824
_0802E81E:
	movs r6, #0x51
	b _0802E824
_0802E822:
	movs r6, #0x74
_0802E824:
	ldr r2, [sp, #0x10]
	str r2, [sp]
	ldr r3, [sp, #0x14]
	str r3, [sp, #4]
	mov r5, sb
	str r5, [sp, #8]
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0xa
	mov r3, r8
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	str r3, [sp, #0xc]
	cmp r3, #0xff
	beq _0802E8DE
	ldr r0, _0802E888 @ =gSpriteData
	mov sl, r0
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	mov r1, sl
	adds r5, r0, r1
	adds r0, r5, #0
	adds r0, #0x2d
	movs r2, #0
	mov r8, r2
	strb r7, [r0]
	adds r0, #1
	mov r1, r8
	strb r1, [r0]
	ldr r2, [sp, #0x10]
	str r2, [sp]
	ldr r0, [sp, #0x14]
	str r0, [sp, #4]
	mov r1, sb
	str r1, [sp, #8]
	adds r0, r6, #0
	movs r1, #1
	movs r2, #0xa
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _0802E88C
	mov r2, r8
	strh r2, [r5]
	b _0802E8DE
	.align 2, 0
_0802E888: .4byte gSpriteData
_0802E88C:
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	mov r3, sl
	adds r4, r0, r3
	adds r0, r4, #0
	adds r0, #0x2d
	strb r7, [r0]
	adds r0, #1
	mov r1, r8
	strb r1, [r0]
	ldr r2, [sp, #0x10]
	str r2, [sp]
	ldr r3, [sp, #0x14]
	str r3, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	adds r0, r6, #0
	movs r1, #2
	movs r2, #0xa
	ldr r3, [sp, #0xc]
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _0802E8CA
	mov r1, r8
	strh r1, [r5]
	strh r1, [r4]
	b _0802E8DE
_0802E8CA:
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	add r0, sl
	adds r1, r0, #0
	adds r1, #0x2d
	strb r7, [r1]
	adds r0, #0x2e
	mov r2, r8
	strb r2, [r0]
_0802E8DE:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BeamCoreXEyeShooting
BeamCoreXEyeShooting: @ 0x0802E8F0
	push {r4, lr}
	ldr r4, _0802E974 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0802E922
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bls _0802E922
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	movs r2, #0x2f
	bl ParticleSet
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
_0802E922:
	ldr r0, _0802E974 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0802E96C
	mov r3, ip
	ldrh r1, [r3]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r3, #0
	movs r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	ldr r0, _0802E978 @ =0x0832B1B0
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r2, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	ldr r2, _0802E97C @ =gSpriteData
	mov r0, ip
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x2d
	strb r3, [r0]
_0802E96C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E974: .4byte gCurrentSprite
_0802E978: .4byte 0x0832B1B0
_0802E97C: .4byte gSpriteData

	thumb_func_start BeamCoreXEyeClosing
BeamCoreXEyeClosing: @ 0x0802E980
	push {lr}
	bl BeamCoreXEyeHandleRotation
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802E9B0
	ldr r3, _0802E9B4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r1, #0xb
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _0802E9B8 @ =0x0832B0B8
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldrh r1, [r3]
	movs r0, #4
	orrs r0, r1
	strh r0, [r3]
_0802E9B0:
	pop {r0}
	bx r0
	.align 2, 0
_0802E9B4: .4byte gCurrentSprite
_0802E9B8: .4byte 0x0832B0B8

	thumb_func_start BeamCoreXGlowingInit
BeamCoreXGlowingInit: @ 0x0802E9BC
	push {r4, r5, r6, lr}
	ldr r0, _0802EA3C @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0802EA40 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x22
	movs r2, #2
	strb r2, [r0]
	adds r0, #0x13
	movs r5, #3
	strb r5, [r0]
	subs r0, #0xe
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802EA44 @ =0x0000FFFC
	mov r6, ip
	strh r1, [r6, #0xa]
	movs r0, #4
	strh r0, [r6, #0xc]
	strh r1, [r6, #0xe]
	strh r0, [r6, #0x10]
	ldr r0, _0802EA48 @ =0x0832AFE0
	str r0, [r6, #0x18]
	strb r3, [r6, #0x1c]
	strh r4, [r6, #0x16]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	subs r0, #1
	strb r2, [r0]
	ldr r2, _0802EA4C @ =gSpriteData
	subs r0, #1
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #0x1d]
	cmp r0, #0x76
	bne _0802EA36
	ldr r0, _0802EA50 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	adds r0, r5, #0
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
_0802EA36:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802EA3C: .4byte gCurrentSprite
_0802EA40: .4byte 0x0000FFFB
_0802EA44: .4byte 0x0000FFFC
_0802EA48: .4byte 0x0832AFE0
_0802EA4C: .4byte gSpriteData
_0802EA50: .4byte gIoRegisters

	thumb_func_start BeamCoreXGlowingIdle
BeamCoreXGlowingIdle: @ 0x0802EA54
	push {lr}
	ldr r3, _0802EA78 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0802EA7C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r2, r0, r2
	ldrh r0, [r2]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0802EA80
	strh r1, [r3]
	b _0802EA9C
	.align 2, 0
_0802EA78: .4byte gCurrentSprite
_0802EA7C: .4byte gSpriteData
_0802EA80:
	ldrh r0, [r2, #2]
	strh r0, [r3, #2]
	ldrh r0, [r2, #4]
	strh r0, [r3, #4]
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0802EA9C
	strh r0, [r3]
_0802EA9C:
	pop {r0}
	bx r0

	thumb_func_start BeamCoreX
BeamCoreX: @ 0x0802EAA0
	push {lr}
	ldr r0, _0802EABC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x1b
	cmp r0, #0x45
	bls _0802EAB0
	b _0802EC18
_0802EAB0:
	lsls r0, r0, #2
	ldr r1, _0802EAC0 @ =_0802EAC4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802EABC: .4byte gCurrentSprite
_0802EAC0: .4byte _0802EAC4
_0802EAC4: @ jump table
	.4byte _0802EBE6 @ case 0
	.4byte _0802EBEA @ case 1
	.4byte _0802EC18 @ case 2
	.4byte _0802EC18 @ case 3
	.4byte _0802EC18 @ case 4
	.4byte _0802EC18 @ case 5
	.4byte _0802EC18 @ case 6
	.4byte _0802EC18 @ case 7
	.4byte _0802EC18 @ case 8
	.4byte _0802EC18 @ case 9
	.4byte _0802EC18 @ case 10
	.4byte _0802EC18 @ case 11
	.4byte _0802EC18 @ case 12
	.4byte _0802EC18 @ case 13
	.4byte _0802EC18 @ case 14
	.4byte _0802EC18 @ case 15
	.4byte _0802EC18 @ case 16
	.4byte _0802EC18 @ case 17
	.4byte _0802EC18 @ case 18
	.4byte _0802EC18 @ case 19
	.4byte _0802EC18 @ case 20
	.4byte _0802EC18 @ case 21
	.4byte _0802EC18 @ case 22
	.4byte _0802EC18 @ case 23
	.4byte _0802EC18 @ case 24
	.4byte _0802EC18 @ case 25
	.4byte _0802EC18 @ case 26
	.4byte _0802EC18 @ case 27
	.4byte _0802EC0E @ case 28
	.4byte _0802EC14 @ case 29
	.4byte _0802EC18 @ case 30
	.4byte _0802EC18 @ case 31
	.4byte _0802EC18 @ case 32
	.4byte _0802EC18 @ case 33
	.4byte _0802EC18 @ case 34
	.4byte _0802EC18 @ case 35
	.4byte _0802EC18 @ case 36
	.4byte _0802EC18 @ case 37
	.4byte _0802EC18 @ case 38
	.4byte _0802EC18 @ case 39
	.4byte _0802EC18 @ case 40
	.4byte _0802EC18 @ case 41
	.4byte _0802EC18 @ case 42
	.4byte _0802EC18 @ case 43
	.4byte _0802EC18 @ case 44
	.4byte _0802EC18 @ case 45
	.4byte _0802EC18 @ case 46
	.4byte _0802EC18 @ case 47
	.4byte _0802EC18 @ case 48
	.4byte _0802EC18 @ case 49
	.4byte _0802EC18 @ case 50
	.4byte _0802EC18 @ case 51
	.4byte _0802EC18 @ case 52
	.4byte _0802EC18 @ case 53
	.4byte _0802EC18 @ case 54
	.4byte _0802EC18 @ case 55
	.4byte _0802EC18 @ case 56
	.4byte _0802EC18 @ case 57
	.4byte _0802EC18 @ case 58
	.4byte _0802EC18 @ case 59
	.4byte _0802EC18 @ case 60
	.4byte _0802EC18 @ case 61
	.4byte _0802EBDC @ case 62
	.4byte _0802EBE0 @ case 63
	.4byte _0802EC18 @ case 64
	.4byte _0802EBF0 @ case 65
	.4byte _0802EBF6 @ case 66
	.4byte _0802EBFC @ case 67
	.4byte _0802EC02 @ case 68
	.4byte _0802EC08 @ case 69
_0802EBDC:
	bl BeamCoreXTransformationInit
_0802EBE0:
	bl BeamCoreXTransformation
	b _0802EC18
_0802EBE6:
	bl BeamCoreXMovingInit
_0802EBEA:
	bl BeamCoreXMoving
	b _0802EC18
_0802EBF0:
	bl BeamCoreXMovingToTargetInit
	b _0802EC18
_0802EBF6:
	bl BeamCoreXMovingToTarget
	b _0802EC18
_0802EBFC:
	bl BeamCoreXRestingAtTarget
	b _0802EC18
_0802EC02:
	bl BeamCoreXAbsorbed
	b _0802EC18
_0802EC08:
	bl BeamCoreXDisplayingMessage
	b _0802EC18
_0802EC0E:
	bl BeamCoreXWaitToFlee
	b _0802EC18
_0802EC14:
	bl BeamCoreXFlee
_0802EC18:
	pop {r0}
	bx r0

	thumb_func_start BeamCoreXShell
BeamCoreXShell: @ 0x0802EC1C
	push {lr}
	ldr r2, _0802EC4C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r3, _0802EC50 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r1, [r0, #2]
	strh r1, [r2, #2]
	ldrh r1, [r0, #4]
	strh r1, [r2, #4]
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0802EC54
	ldrh r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	b _0802EC5A
	.align 2, 0
_0802EC4C: .4byte gCurrentSprite
_0802EC50: .4byte gSpriteData
_0802EC54:
	ldrh r1, [r2]
	ldr r0, _0802EC70 @ =0x0000FFDF
	ands r0, r1
_0802EC5A:
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #1
	beq _0802EC80
	cmp r0, #1
	bgt _0802EC74
	cmp r0, #0
	beq _0802EC7A
	b _0802EC8A
	.align 2, 0
_0802EC70: .4byte 0x0000FFDF
_0802EC74:
	cmp r0, #2
	beq _0802EC86
	b _0802EC8A
_0802EC7A:
	bl BeamCoreXShellInit
	b _0802EC8A
_0802EC80:
	bl BeamCoreXShellTransformation
	b _0802EC8A
_0802EC86:
	bl BeamCoreXShellIdle
_0802EC8A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BeamCoreXEye
BeamCoreXEye: @ 0x0802EC90
	push {lr}
	ldr r0, _0802ECB0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bhi _0802ED5A
	lsls r0, r0, #2
	ldr r1, _0802ECB4 @ =_0802ECB8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802ECB0: .4byte gCurrentSprite
_0802ECB4: .4byte _0802ECB8
_0802ECB8: @ jump table
	.4byte _0802ED34 @ case 0
	.4byte _0802ED38 @ case 1
	.4byte _0802ED3E @ case 2
	.4byte _0802ED5A @ case 3
	.4byte _0802ED5A @ case 4
	.4byte _0802ED5A @ case 5
	.4byte _0802ED5A @ case 6
	.4byte _0802ED5A @ case 7
	.4byte _0802ED5A @ case 8
	.4byte _0802ED5A @ case 9
	.4byte _0802ED5A @ case 10
	.4byte _0802ED5A @ case 11
	.4byte _0802ED5A @ case 12
	.4byte _0802ED5A @ case 13
	.4byte _0802ED5A @ case 14
	.4byte _0802ED5A @ case 15
	.4byte _0802ED5A @ case 16
	.4byte _0802ED5A @ case 17
	.4byte _0802ED5A @ case 18
	.4byte _0802ED5A @ case 19
	.4byte _0802ED5A @ case 20
	.4byte _0802ED5A @ case 21
	.4byte _0802ED5A @ case 22
	.4byte _0802ED5A @ case 23
	.4byte _0802ED44 @ case 24
	.4byte _0802ED5A @ case 25
	.4byte _0802ED4A @ case 26
	.4byte _0802ED5A @ case 27
	.4byte _0802ED50 @ case 28
	.4byte _0802ED5A @ case 29
	.4byte _0802ED56 @ case 30
_0802ED34:
	bl BeamCoreXEyeInit
_0802ED38:
	bl BeamCoreXEyeTransformation
	b _0802ED5A
_0802ED3E:
	bl BeamCoreXEyeClosed
	b _0802ED5A
_0802ED44:
	bl BeamCoreXEyeOpening
	b _0802ED5A
_0802ED4A:
	bl BeamCoreXEyeOpened
	b _0802ED5A
_0802ED50:
	bl BeamCoreXEyeShooting
	b _0802ED5A
_0802ED56:
	bl BeamCoreXEyeClosing
_0802ED5A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BeamCoreXGlowing
BeamCoreXGlowing: @ 0x0802ED60
	push {lr}
	ldr r0, _0802ED7C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802ED80
	cmp r0, #2
	beq _0802ED84
	b _0802ED88
	.align 2, 0
_0802ED7C: .4byte gCurrentSprite
_0802ED80:
	bl BeamCoreXGlowingInit
_0802ED84:
	bl BeamCoreXGlowingIdle
_0802ED88:
	pop {r0}
	bx r0

	thumb_func_start CoreXChargeBeamInit
CoreXChargeBeamInit: @ 0x0802ED8C
	push {r4, lr}
	ldr r2, _0802EDD8 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x25
	movs r1, #0
	movs r0, #4
	strb r0, [r3]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802EDDC @ =0x0000FFF4
	strh r1, [r2, #0xa]
	movs r0, #0xc
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldrb r0, [r2, #0x1e]
	adds r4, r2, #0
	cmp r0, #0
	beq _0802EE34
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _0802EE28
	lsls r0, r0, #2
	ldr r1, _0802EDE0 @ =_0802EDE4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802EDD8: .4byte gCurrentSprite
_0802EDDC: .4byte 0x0000FFF4
_0802EDE0: .4byte _0802EDE4
_0802EDE4: @ jump table
	.4byte _0802EE28 @ case 0
	.4byte _0802EE04 @ case 1
	.4byte _0802EDF8 @ case 2
	.4byte _0802EE1C @ case 3
	.4byte _0802EE10 @ case 4
_0802EDF8:
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
_0802EE04:
	ldr r0, _0802EE0C @ =0x0858D9E8
	str r0, [r4, #0x18]
	b _0802EEBA
	.align 2, 0
_0802EE0C: .4byte 0x0858D9E8
_0802EE10:
	ldrh r1, [r4]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r4]
_0802EE1C:
	ldr r0, _0802EE24 @ =0x0858D9F8
	str r0, [r4, #0x18]
	b _0802EEBA
	.align 2, 0
_0802EE24: .4byte 0x0858D9F8
_0802EE28:
	ldr r0, _0802EE30 @ =0x0858D9D8
	str r0, [r4, #0x18]
	b _0802EEBA
	.align 2, 0
_0802EE30: .4byte 0x0858D9D8
_0802EE34:
	movs r0, #0xca
	bl SoundPlay
	ldrh r0, [r4]
	ldr r1, _0802EE58 @ =0x0000FFFB
	ands r1, r0
	strh r1, [r4]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _0802EEB4
	lsls r0, r0, #2
	ldr r1, _0802EE5C @ =_0802EE60
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802EE58: .4byte 0x0000FFFB
_0802EE5C: .4byte _0802EE60
_0802EE60: @ jump table
	.4byte _0802EEB4 @ case 0
	.4byte _0802EE84 @ case 1
	.4byte _0802EE74 @ case 2
	.4byte _0802EEA4 @ case 3
	.4byte _0802EE94 @ case 4
_0802EE74:
	ldr r0, _0802EE8C @ =gCurrentSprite
	ldrh r2, [r0]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r1, r2
	strh r1, [r0]
	adds r4, r0, #0
_0802EE84:
	ldr r0, _0802EE90 @ =0x0858D9A8
	str r0, [r4, #0x18]
	b _0802EEBA
	.align 2, 0
_0802EE8C: .4byte gCurrentSprite
_0802EE90: .4byte 0x0858D9A8
_0802EE94:
	ldr r0, _0802EEAC @ =gCurrentSprite
	ldrh r2, [r0]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r1, r2
	strh r1, [r0]
	adds r4, r0, #0
_0802EEA4:
	ldr r0, _0802EEB0 @ =0x0858D9C0
	str r0, [r4, #0x18]
	b _0802EEBA
	.align 2, 0
_0802EEAC: .4byte gCurrentSprite
_0802EEB0: .4byte 0x0858D9C0
_0802EEB4:
	ldr r1, _0802EEC0 @ =gCurrentSprite
	ldr r0, _0802EEC4 @ =0x0858D990
	str r0, [r1, #0x18]
_0802EEBA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802EEC0: .4byte gCurrentSprite
_0802EEC4: .4byte 0x0858D990

	thumb_func_start CoreXChargeBeam
CoreXChargeBeam: @ 0x0802EEC8
	push {r4, lr}
	ldr r3, _0802EF4C @ =gCurrentSprite
	ldrb r0, [r3, #0x1e]
	cmp r0, #0
	beq _0802EF6E
	ldrh r4, [r3]
	movs r0, #4
	ands r0, r4
	cmp r0, #0
	beq _0802EEFA
	ldr r2, _0802EF50 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x36
	bls _0802EEFA
	ldr r0, _0802EF54 @ =0x0000FFFB
	ands r0, r4
	strh r0, [r3]
_0802EEFA:
	ldr r1, _0802EF58 @ =gCurrentClipdataAffectingAction
	movs r0, #6
	strb r0, [r1]
	ldr r4, _0802EF4C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802EF5C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802EF60
	ldrh r1, [r4]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0802EF3A
	ldr r2, _0802EF50 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x36
	bhi _0802EF3A
	movs r0, #0x37
	strb r0, [r1]
_0802EF3A:
	ldr r4, _0802EF4C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #4
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	b _0802EFC4
	.align 2, 0
_0802EF4C: .4byte gCurrentSprite
_0802EF50: .4byte gSpriteData
_0802EF54: .4byte 0x0000FFFB
_0802EF58: .4byte gCurrentClipdataAffectingAction
_0802EF5C: .4byte gPreviousCollisionCheck
_0802EF60:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	bhi _0802EF6E
	bl unk_12a88
_0802EF6E:
	ldr r0, _0802EF8C @ =gCurrentSprite
	adds r4, r0, #0
	adds r4, #0x24
	ldrb r1, [r4]
	adds r2, r0, #0
	cmp r1, #2
	beq _0802EFAE
	cmp r1, #2
	bgt _0802EF90
	cmp r1, #0
	beq _0802EF9A
	cmp r1, #1
	beq _0802EFA0
	b _0802EFC0
	.align 2, 0
_0802EF8C: .4byte gCurrentSprite
_0802EF90:
	cmp r1, #3
	beq _0802EFB2
	cmp r1, #0x37
	beq _0802EFBA
	b _0802EFC0
_0802EF9A:
	bl CoreXChargeBeamInit
	b _0802EFA6
_0802EFA0:
	movs r0, #0x10
	bl MoveEyeCoreXBeam
_0802EFA6:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	b _0802EFC4
_0802EFAE:
	movs r0, #3
	strb r0, [r4]
_0802EFB2:
	movs r0, #0x18
	bl MoveEyeCoreXBeam
	b _0802EFC4
_0802EFBA:
	movs r0, #0x38
	strb r0, [r4]
	b _0802EFC4
_0802EFC0:
	movs r0, #0
	strh r0, [r2]
_0802EFC4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start CoreXWideBeamInit
CoreXWideBeamInit: @ 0x0802EFCC
	push {lr}
	movs r0, #0xc9
	bl SoundPlay
	ldr r2, _0802F020 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x25
	movs r1, #0
	movs r0, #4
	strb r0, [r3]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0802F024 @ =0x0000FFF0
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldrh r1, [r2]
	adds r0, #0xb
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _0802F088
	lsls r0, r0, #2
	ldr r1, _0802F028 @ =_0802F02C
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r2, #0
	mov pc, r0
	.align 2, 0
_0802F020: .4byte gCurrentSprite
_0802F024: .4byte 0x0000FFF0
_0802F028: .4byte _0802F02C
_0802F02C: @ jump table
	.4byte _0802F088 @ case 0
	.4byte _0802F05C @ case 1
	.4byte _0802F040 @ case 2
	.4byte _0802F07C @ case 3
	.4byte _0802F06C @ case 4
_0802F040:
	ldr r1, _0802F054 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r1]
	ldr r0, _0802F058 @ =0x0858DBFC
	b _0802F08C
	.align 2, 0
_0802F054: .4byte gCurrentSprite
_0802F058: .4byte 0x0858DBFC
_0802F05C:
	ldr r1, _0802F064 @ =gCurrentSprite
	ldr r0, _0802F068 @ =0x0858DBFC
	b _0802F08C
	.align 2, 0
_0802F064: .4byte gCurrentSprite
_0802F068: .4byte 0x0858DBFC
_0802F06C:
	ldr r0, _0802F080 @ =gCurrentSprite
	ldrh r2, [r0]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r1, r2
	strh r1, [r0]
	adds r1, r0, #0
_0802F07C:
	ldr r0, _0802F084 @ =0x0858DC1C
	b _0802F08C
	.align 2, 0
_0802F080: .4byte gCurrentSprite
_0802F084: .4byte 0x0858DC1C
_0802F088:
	ldr r1, _0802F094 @ =gCurrentSprite
	ldr r0, _0802F098 @ =0x0858DBDC
_0802F08C:
	str r0, [r1, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0802F094: .4byte gCurrentSprite
_0802F098: .4byte 0x0858DBDC

	thumb_func_start CoreXWideBeam
CoreXWideBeam: @ 0x0802F09C
	push {r4, lr}
	ldr r1, _0802F0DC @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	beq _0802F0B4
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #8
	bhi _0802F0B4
	bl unk_12a88
_0802F0B4:
	ldr r1, _0802F0E0 @ =gCurrentClipdataAffectingAction
	movs r0, #6
	strb r0, [r1]
	ldr r4, _0802F0DC @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802F0E4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802F0E8
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #5
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	b _0802F118
	.align 2, 0
_0802F0DC: .4byte gCurrentSprite
_0802F0E0: .4byte gCurrentClipdataAffectingAction
_0802F0E4: .4byte gPreviousCollisionCheck
_0802F0E8:
	adds r4, #0x24
	ldrb r0, [r4]
	cmp r0, #0
	beq _0802F0FE
	cmp r0, #1
	beq _0802F104
	cmp r0, #8
	bhi _0802F112
	adds r0, #1
	strb r0, [r4]
	b _0802F112
_0802F0FE:
	bl CoreXWideBeamInit
	b _0802F10A
_0802F104:
	movs r0, #0x10
	bl MoveEyeCoreXBeam
_0802F10A:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	b _0802F118
_0802F112:
	movs r0, #0x18
	bl MoveEyeCoreXBeam
_0802F118:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start CoreXPlasmaBeaminit
CoreXPlasmaBeaminit: @ 0x0802F120
	push {lr}
	movs r0, #0xcb
	bl SoundPlay
	ldr r2, _0802F174 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x25
	movs r1, #0
	movs r0, #2
	strb r0, [r3]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802F178 @ =0x0000FFF4
	strh r1, [r2, #0xa]
	movs r0, #0xc
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldrh r1, [r2]
	ldr r0, _0802F17C @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _0802F1E0
	lsls r0, r0, #2
	ldr r1, _0802F180 @ =_0802F184
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r2, #0
	mov pc, r0
	.align 2, 0
_0802F174: .4byte gCurrentSprite
_0802F178: .4byte 0x0000FFF4
_0802F17C: .4byte 0x0000FFFB
_0802F180: .4byte _0802F184
_0802F184: @ jump table
	.4byte _0802F1E0 @ case 0
	.4byte _0802F1B4 @ case 1
	.4byte _0802F198 @ case 2
	.4byte _0802F1D4 @ case 3
	.4byte _0802F1C4 @ case 4
_0802F198:
	ldr r1, _0802F1AC @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r1]
	ldr r0, _0802F1B0 @ =0x0858DE0C
	b _0802F1E4
	.align 2, 0
_0802F1AC: .4byte gCurrentSprite
_0802F1B0: .4byte 0x0858DE0C
_0802F1B4:
	ldr r1, _0802F1BC @ =gCurrentSprite
	ldr r0, _0802F1C0 @ =0x0858DE0C
	b _0802F1E4
	.align 2, 0
_0802F1BC: .4byte gCurrentSprite
_0802F1C0: .4byte 0x0858DE0C
_0802F1C4:
	ldr r0, _0802F1D8 @ =gCurrentSprite
	ldrh r2, [r0]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r1, r2
	strh r1, [r0]
	adds r1, r0, #0
_0802F1D4:
	ldr r0, _0802F1DC @ =0x0858DE24
	b _0802F1E4
	.align 2, 0
_0802F1D8: .4byte gCurrentSprite
_0802F1DC: .4byte 0x0858DE24
_0802F1E0:
	ldr r1, _0802F1EC @ =gCurrentSprite
	ldr r0, _0802F1F0 @ =0x0858DDF4
_0802F1E4:
	str r0, [r1, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0802F1EC: .4byte gCurrentSprite
_0802F1F0: .4byte 0x0858DDF4

	thumb_func_start CoreXPlasmaBeam
CoreXPlasmaBeam: @ 0x0802F1F4
	push {r4, lr}
	ldr r1, _0802F234 @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	beq _0802F20C
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #8
	bhi _0802F20C
	bl unk_12a88
_0802F20C:
	ldr r1, _0802F238 @ =gCurrentClipdataAffectingAction
	movs r0, #6
	strb r0, [r1]
	ldr r4, _0802F234 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802F23C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802F240
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #6
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	b _0802F270
	.align 2, 0
_0802F234: .4byte gCurrentSprite
_0802F238: .4byte gCurrentClipdataAffectingAction
_0802F23C: .4byte gPreviousCollisionCheck
_0802F240:
	adds r4, #0x24
	ldrb r0, [r4]
	cmp r0, #0
	beq _0802F256
	cmp r0, #1
	beq _0802F25C
	cmp r0, #8
	bhi _0802F26A
	adds r0, #1
	strb r0, [r4]
	b _0802F26A
_0802F256:
	bl CoreXPlasmaBeaminit
	b _0802F262
_0802F25C:
	movs r0, #0x10
	bl MoveEyeCoreXBeam
_0802F262:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	b _0802F270
_0802F26A:
	movs r0, #0x18
	bl MoveEyeCoreXBeam
_0802F270:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start CoreXWaveIceBeamInit
CoreXWaveIceBeamInit: @ 0x0802F278
	push {lr}
	ldr r0, _0802F28C @ =gCurrentSprite
	ldrb r0, [r0, #0x1d]
	cmp r0, #0x74
	bne _0802F290
	movs r0, #0xcd
	bl SoundPlay
	b _0802F296
	.align 2, 0
_0802F28C: .4byte gCurrentSprite
_0802F290:
	movs r0, #0xcc
	bl SoundPlay
_0802F296:
	ldr r0, _0802F304 @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _0802F308 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	adds r1, #1
	movs r0, #1
	strb r0, [r1]
	adds r1, #3
	movs r0, #2
	strb r0, [r1]
	mov r1, ip
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0802F30C @ =0x0000FFF0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldrh r1, [r2]
	adds r0, #0xb
	ands r0, r1
	strh r0, [r2]
	mov r0, ip
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _0802F388
	lsls r0, r0, #2
	ldr r1, _0802F310 @ =_0802F314
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802F304: .4byte gCurrentSprite
_0802F308: .4byte gIoRegisters
_0802F30C: .4byte 0x0000FFF0
_0802F310: .4byte _0802F314
_0802F314: @ jump table
	.4byte _0802F388 @ case 0
	.4byte _0802F34C @ case 1
	.4byte _0802F328 @ case 2
	.4byte _0802F370 @ case 3
	.4byte _0802F364 @ case 4
_0802F328:
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	orrs r1, r0
	strh r1, [r2]
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x74
	bne _0802F344
	ldr r0, _0802F340 @ =0x0858E1E8
	b _0802F39A
	.align 2, 0
_0802F340: .4byte 0x0858E1E8
_0802F344:
	ldr r0, _0802F348 @ =0x0858DF74
	b _0802F39A
	.align 2, 0
_0802F348: .4byte 0x0858DF74
_0802F34C:
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x74
	bne _0802F35C
	ldr r0, _0802F358 @ =0x0858E1E8
	b _0802F39A
	.align 2, 0
_0802F358: .4byte 0x0858E1E8
_0802F35C:
	ldr r0, _0802F360 @ =0x0858DF74
	b _0802F39A
	.align 2, 0
_0802F360: .4byte 0x0858DF74
_0802F364:
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
_0802F370:
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x74
	bne _0802F380
	ldr r0, _0802F37C @ =0x0858E1F8
	b _0802F39A
	.align 2, 0
_0802F37C: .4byte 0x0858E1F8
_0802F380:
	ldr r0, _0802F384 @ =0x0858DF84
	b _0802F39A
	.align 2, 0
_0802F384: .4byte 0x0858DF84
_0802F388:
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x74
	bne _0802F398
	ldr r0, _0802F394 @ =0x0858E1D8
	b _0802F39A
	.align 2, 0
_0802F394: .4byte 0x0858E1D8
_0802F398:
	ldr r0, _0802F3A0 @ =0x0858DF64
_0802F39A:
	str r0, [r2, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0802F3A0: .4byte 0x0858DF64

	thumb_func_start CoreXWaveIceBeam
CoreXWaveIceBeam: @ 0x0802F3A4
	push {r4, lr}
	ldr r4, _0802F3D4 @ =gCurrentSprite
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _0802F3B2
	bl unk_12b54
_0802F3B2:
	ldr r1, _0802F3D8 @ =gCurrentClipdataAffectingAction
	movs r0, #6
	strb r0, [r1]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	adds r4, #0x24
	ldrb r0, [r4]
	cmp r0, #0
	beq _0802F3DC
	cmp r0, #1
	beq _0802F3E2
	movs r0, #0x18
	bl MoveEyeCoreXBeam
	b _0802F3EE
	.align 2, 0
_0802F3D4: .4byte gCurrentSprite
_0802F3D8: .4byte gCurrentClipdataAffectingAction
_0802F3DC:
	bl CoreXWaveIceBeamInit
	b _0802F3E8
_0802F3E2:
	movs r0, #0x10
	bl MoveEyeCoreXBeam
_0802F3E8:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_0802F3EE:
	ldr r1, _0802F400 @ =gCurrentSprite
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F400: .4byte gCurrentSprite

	thumb_func_start ToxicGasInit
ToxicGasInit: @ 0x0802F404
	push {r4, lr}
	ldr r3, _0802F484 @ =gCurrentSprite
	ldr r2, _0802F488 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	movs r1, #0
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	ldr r0, _0802F48C @ =0x08336828
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	movs r1, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802F490 @ =0x0000FFD0
	strh r1, [r3, #0xa]
	movs r0, #0xb0
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r0, [r3]
	movs r4, #0x81
	lsls r4, r4, #7
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	ldr r0, _0802F494 @ =0x000001FF
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x21
	movs r0, #1
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F484: .4byte gCurrentSprite
_0802F488: .4byte sPrimarySpriteStats
_0802F48C: .4byte 0x08336828
_0802F490: .4byte 0x0000FFD0
_0802F494: .4byte 0x000001FF

	thumb_func_start ToxicGasIdle
ToxicGasIdle: @ 0x0802F498
	push {r4, lr}
	sub sp, #0xc
	ldr r2, _0802F4C8 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
	adds r4, r2, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	adds r3, r2, #0
	cmp r0, #0
	beq _0802F4CC
	ldrh r0, [r3, #0x12]
	adds r0, #2
	strh r0, [r3, #0x12]
	lsls r0, r0, #0x10
	movs r1, #0xff
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _0802F4E0
	ldrb r0, [r4]
	subs r0, #1
	b _0802F4DE
	.align 2, 0
_0802F4C8: .4byte gCurrentSprite
_0802F4CC:
	ldrh r0, [r3, #0x12]
	subs r0, #2
	strh r0, [r3, #0x12]
	lsls r0, r0, #0x10
	ldr r1, _0802F524 @ =0x01CB0000
	cmp r0, r1
	bhi _0802F4E0
	ldrb r0, [r4]
	adds r0, #1
_0802F4DE:
	strb r0, [r4]
_0802F4E0:
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #1
	bne _0802F51C
	ldrh r4, [r3, #2]
	adds r4, #0x40
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldrh r0, [r3, #4]
	adds r0, #0x40
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r3, #0x1e]
	ldrb r2, [r3, #0x1f]
	adds r3, #0x23
	ldrb r3, [r3]
	str r4, [sp]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x2a
	bl SpriteSpawnSecondary
	movs r0, #0xad
	lsls r0, r0, #1
	bl SoundPlay
_0802F51C:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F524: .4byte 0x01CB0000

	thumb_func_start ToxicGas
ToxicGas: @ 0x0802F528
	push {lr}
	ldr r0, _0802F548 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802F540
	bl ToxicGasInit
_0802F540:
	bl ToxicGasIdle
	pop {r0}
	bx r0
	.align 2, 0
_0802F548: .4byte gCurrentSprite

	thumb_func_start ToxicGasExplosion
ToxicGasExplosion: @ 0x0802F54C
	push {r4, r5, r6, lr}
	ldr r3, _0802F5C8 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r4, [r0]
	adds r6, r3, #0
	adds r6, #0x24
	ldrb r5, [r6]
	cmp r5, #0
	bne _0802F5DC
	ldrh r1, [r3]
	ldr r0, _0802F5CC @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r3]
	adds r2, r3, #0
	adds r2, #0x21
	movs r0, #1
	strb r0, [r2]
	adds r2, #1
	movs r0, #3
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	movs r2, #2
	strb r2, [r0]
	ldr r0, _0802F5D0 @ =0x083367D0
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r5, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x40
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0802F5D4 @ =0x0000FF80
	strh r1, [r3, #0xa]
	movs r0, #0x80
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	strb r2, [r6]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	ldr r1, _0802F5D8 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0]
	b _0802F612
	.align 2, 0
_0802F5C8: .4byte gCurrentSprite
_0802F5CC: .4byte 0x0000FFFB
_0802F5D0: .4byte 0x083367D0
_0802F5D4: .4byte 0x0000FF80
_0802F5D8: .4byte gSpriteData
_0802F5DC:
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802F5EA
	subs r0, #1
	b _0802F5F0
_0802F5EA:
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
_0802F5F0:
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802F612
	ldr r1, _0802F618 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	ldr r0, _0802F61C @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrh r2, [r1]
	ldr r0, _0802F620 @ =0x00007FFF
	ands r0, r2
	strh r0, [r1]
_0802F612:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802F618: .4byte gCurrentSprite
_0802F61C: .4byte gSpriteData
_0802F620: .4byte 0x00007FFF

	thumb_func_start KagoSetCollision
KagoSetCollision: @ 0x0802F624
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r0, _0802F678 @ =gCurrentSprite
	ldrh r1, [r0, #2]
	ldrh r5, [r0, #4]
	adds r6, r1, #0
	subs r6, #0x60
	adds r1, r5, #0
	adds r1, #0x60
	adds r0, r6, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r4, _0802F67C @ =gPreviousCollisionCheck
	ldrb r0, [r4]
	cmp r0, #0x11
	bne _0802F670
	adds r1, r5, #0
	subs r1, #0x60
	adds r0, r6, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r4]
	cmp r0, #0x11
	bne _0802F670
	ldr r4, _0802F680 @ =gCurrentClipdataAffectingAction
	strb r7, [r4]
	adds r1, r5, #0
	adds r1, #0x20
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	subs r1, #0x20
	adds r0, r6, #0
	bl ProcessClipdata
_0802F670:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802F678: .4byte gCurrentSprite
_0802F67C: .4byte gPreviousCollisionCheck
_0802F680: .4byte gCurrentClipdataAffectingAction

	thumb_func_start KagoPlaySound
KagoPlaySound: @ 0x0802F684
	push {r4, lr}
	ldr r4, _0802F6A4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802F6AC
	ldr r0, _0802F6A8 @ =0x0000016B
	bl CheckPlayNotAlreadyPlayingSound
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0x28
	b _0802F714
	.align 2, 0
_0802F6A4: .4byte gCurrentSprite
_0802F6A8: .4byte 0x0000016B
_0802F6AC:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #4
	bne _0802F6C8
	ldr r0, _0802F6C4 @ =0x0000016D
	bl CheckPlayNotAlreadyPlayingSound
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0x48
	b _0802F714
	.align 2, 0
_0802F6C4: .4byte 0x0000016D
_0802F6C8:
	cmp r0, #3
	bne _0802F6DC
	movs r0, #0xb7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0x38
	b _0802F714
_0802F6DC:
	cmp r0, #2
	bne _0802F6F4
	ldr r0, _0802F6F0 @ =0x0000016F
	bl CheckPlayNotAlreadyPlayingSound
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0x1e
	b _0802F714
	.align 2, 0
_0802F6F0: .4byte 0x0000016F
_0802F6F4:
	cmp r0, #1
	bne _0802F708
	movs r0, #0xb8
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0x12
	b _0802F714
_0802F708:
	ldr r0, _0802F71C @ =0x00000171
	bl CheckPlayNotAlreadyPlayingSound
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0xc
_0802F714:
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F71C: .4byte 0x00000171

	thumb_func_start KagoTurningIntoX
KagoTurningIntoX: @ 0x0802F720
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _0802F760 @ =gCurrentSprite
	ldrb r1, [r4, #0x1d]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	adds r0, #0x5c
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0xc
	str r0, [sp, #8]
	movs r0, #0x40
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r4, #2]
	subs r0, #0x1c
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0xc
	strh r0, [r4, #4]
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F760: .4byte gCurrentSprite

	thumb_func_start KagoInit
KagoInit: @ 0x0802F764
	push {r4, r5, r6, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0802F798 @ =gCurrentSprite
	adds r4, r2, #0
	adds r4, #0x34
	ldrb r3, [r4]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0802F7A0
	movs r0, #8
	movs r1, #0
	orrs r0, r3
	strb r0, [r4]
	adds r3, r2, #0
	adds r3, #0x25
	movs r0, #1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x28
	strb r1, [r0]
	movs r0, #0x10
	strh r0, [r2, #0xc]
	ldr r0, _0802F79C @ =0x08337B24
	b _0802F7C0
	.align 2, 0
_0802F798: .4byte gCurrentSprite
_0802F79C: .4byte 0x08337B24
_0802F7A0:
	movs r0, #0xf7
	ands r0, r3
	strb r0, [r4]
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0xd
	strb r0, [r1]
	adds r1, #0x10
	movs r0, #1
	strb r0, [r1]
	subs r1, #0xd
	movs r0, #0x38
	strb r0, [r1]
	movs r0, #0xc0
	strh r0, [r2, #0xc]
	ldr r0, _0802F830 @ =0x08337B4C
_0802F7C0:
	str r0, [r2, #0x18]
	ldr r6, _0802F834 @ =gCurrentSprite
	ldr r2, _0802F838 @ =sPrimarySpriteStats
	ldrb r1, [r6, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r4, #0
	movs r5, #0
	strh r0, [r6, #0x14]
	adds r1, r6, #0
	adds r1, #0x2e
	movs r0, #4
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	bl KagoPlaySound
	adds r1, r6, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	strb r4, [r6, #0x1c]
	strh r5, [r6, #0x16]
	adds r1, #5
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #2
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0802F83C @ =0x0000FF88
	strh r0, [r6, #0xa]
	adds r0, #0x48
	strh r0, [r6, #0xe]
	movs r0, #0x30
	strh r0, [r6, #0x10]
	adds r2, r6, #0
	adds r2, #0x24
	ldrb r0, [r2]
	cmp r0, #0x59
	bne _0802F840
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	strh r0, [r6, #6]
	movs r0, #0xb6
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0802F864
	.align 2, 0
_0802F830: .4byte 0x08337B4C
_0802F834: .4byte gCurrentSprite
_0802F838: .4byte sPrimarySpriteStats
_0802F83C: .4byte 0x0000FF88
_0802F840:
	ldrh r0, [r6, #4]
	adds r0, #0x20
	strh r0, [r6, #4]
	adds r0, r6, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0802F85A
	strb r3, [r2]
	b _0802F864
_0802F85A:
	movs r0, #0x18
	strb r0, [r2]
	ldrh r0, [r6, #2]
	subs r0, #0xc0
	strh r0, [r6, #2]
_0802F864:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KagoSpawningFromX
KagoSpawningFromX: @ 0x0802F86C
	push {r4, lr}
	ldr r4, _0802F8A4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #6]
	subs r3, r0, #1
	strh r3, [r4, #6]
	lsls r0, r3, #0x10
	cmp r0, #0
	beq _0802F8B0
	ldr r2, _0802F8A8 @ =gWrittenToMosaic_H
	ldr r1, _0802F8AC @ =0x083BDED6
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x17
	bhi _0802F8C4
	ldrh r0, [r4, #2]
	subs r0, #8
	strh r0, [r4, #2]
	b _0802F8C4
	.align 2, 0
_0802F8A4: .4byte gCurrentSprite
_0802F8A8: .4byte gWrittenToMosaic_H
_0802F8AC: .4byte 0x083BDED6
_0802F8B0:
	ldrh r1, [r4]
	ldr r0, _0802F8CC @ =0x00007FFF
	ands r0, r1
	ldr r1, _0802F8D0 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_0802F8C4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F8CC: .4byte 0x00007FFF
_0802F8D0: .4byte 0x0000FFDF

	thumb_func_start KagoIdleShort
KagoIdleShort: @ 0x0802F8D4
	push {lr}
	ldr r1, _0802F8F0 @ =gCurrentSprite
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802F8EA
	bl KagoPlaySound
_0802F8EA:
	pop {r0}
	bx r0
	.align 2, 0
_0802F8F0: .4byte gCurrentSprite

	thumb_func_start KagoIdleTall
KagoIdleTall: @ 0x0802F8F4
	push {lr}
	ldr r1, _0802F910 @ =gCurrentSprite
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802F90A
	bl KagoPlaySound
_0802F90A:
	pop {r0}
	bx r0
	.align 2, 0
_0802F910: .4byte gCurrentSprite

	thumb_func_start KagoDyingInit
KagoDyingInit: @ 0x0802F914
	push {r4, lr}
	ldr r4, _0802F950 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802F928
	movs r0, #1
	bl KagoSetCollision
_0802F928:
	ldrh r1, [r4]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x58
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x2c
	strb r0, [r1]
	movs r0, #0xa1
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	bl SpriteDying
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F950: .4byte gCurrentSprite

	thumb_func_start KagoInsectExplodingInit
KagoInsectExplodingInit: @ 0x0802F954
	push {lr}
	ldr r0, _0802F97C @ =gCurrentSprite
	ldr r1, _0802F980 @ =0x08337DC4
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	movs r3, #0
	strh r1, [r0, #0x16]
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x38
	strb r1, [r2]
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #0xb9
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_0802F97C: .4byte gCurrentSprite
_0802F980: .4byte 0x08337DC4

	thumb_func_start KagoInsectExploding
KagoInsectExploding: @ 0x0802F984
	push {r4, lr}
	ldr r4, _0802F9A4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802F99C
	movs r0, #0
	strh r0, [r4]
_0802F99C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F9A4: .4byte gCurrentSprite

	thumb_func_start KagoInsectInit
KagoInsectInit: @ 0x0802F9A8
	push {r4, r5, lr}
	ldr r3, _0802FA24 @ =gCurrentSprite
	ldrh r1, [r3]
	ldr r0, _0802FA28 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	movs r2, #0
	strh r0, [r3]
	ldr r1, _0802FA2C @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #4
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x35
	movs r5, #1
	strb r5, [r0]
	ldr r0, _0802FA30 @ =0x08337DA4
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r2, [r3, #0x16]
	adds r1, #2
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #8
	strb r0, [r1]
	ldr r0, _0802FA34 @ =0x0000FFD8
	strh r0, [r3, #0xa]
	adds r0, #0x20
	strh r0, [r3, #0xc]
	subs r0, #0xc
	strh r0, [r3, #0xe]
	movs r0, #0x14
	strh r0, [r3, #0x10]
	subs r1, #5
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802FA38 @ =gFrameCounter8Bit
	ldrb r2, [r0]
	lsls r2, r2, #0x18
	lsrs r0, r2, #0x1a
	adds r0, #5
	adds r1, #0xc
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r4, [r0]
	lsrs r2, r2, #0x18
	cmp r2, #7
	bls _0802FA3C
	subs r0, #2
	strb r5, [r0]
	b _0802FA42
	.align 2, 0
_0802FA24: .4byte gCurrentSprite
_0802FA28: .4byte 0x0000FFFB
_0802FA2C: .4byte sSecondarySpriteStats
_0802FA30: .4byte 0x08337DA4
_0802FA34: .4byte 0x0000FFD8
_0802FA38: .4byte gSpriteRandomNumber
_0802FA3C:
	adds r0, r3, #0
	adds r0, #0x2f
	strb r4, [r0]
_0802FA42:
	bl SpriteChooseRandomXFlip
	ldr r1, _0802FA60 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r1]
	movs r0, #0x14
	strh r0, [r1, #6]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802FA60: .4byte gCurrentSprite

	thumb_func_start KagoInsectJumpWarningInit
KagoInsectJumpWarningInit: @ 0x0802FA64
	ldr r1, _0802FA7C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0802FA80 @ =0x08337D84
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0802FA7C: .4byte gCurrentSprite
_0802FA80: .4byte 0x08337D84

	thumb_func_start KagoInsectJumpingInit
KagoInsectJumpingInit: @ 0x0802FA84
	push {r4, lr}
	ldr r3, _0802FAC0 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0802FAC4 @ =0x08337DA4
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	movs r4, #0
	strh r2, [r3, #0x16]
	adds r1, #0xc
	movs r0, #5
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r4, [r0]
	ldr r0, _0802FAC8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0802FACC
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	b _0802FAD2
	.align 2, 0
_0802FAC0: .4byte gCurrentSprite
_0802FAC4: .4byte 0x08337DA4
_0802FAC8: .4byte gSpriteRandomNumber
_0802FACC:
	adds r0, r3, #0
	adds r0, #0x2f
	strb r4, [r0]
_0802FAD2:
	adds r2, r3, #0
	ldr r1, _0802FAF4 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0802FAF8
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802FB0C
	adds r1, r2, #0
	adds r1, #0x30
	movs r0, #0
	strb r0, [r1]
	b _0802FB0C
	.align 2, 0
_0802FAF4: .4byte gSamusData
_0802FAF8:
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	bne _0802FB0C
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
_0802FB0C:
	ldr r0, _0802FB18 @ =0x00000173
	bl CheckPlayNotAlreadyPlayingSound
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802FB18: .4byte 0x00000173

	thumb_func_start KagoInsectFallingInit
KagoInsectFallingInit: @ 0x0802FB1C
	ldr r0, _0802FB38 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x16
	strb r1, [r2]
	ldr r1, _0802FB3C @ =0x08337DA4
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	movs r1, #0
	strh r3, [r0, #0x16]
	adds r0, #0x31
	strb r1, [r0]
	bx lr
	.align 2, 0
_0802FB38: .4byte gCurrentSprite
_0802FB3C: .4byte 0x08337DA4

	thumb_func_start KagoInsectJumpWarning
KagoInsectJumpWarning: @ 0x0802FB40
	push {r4, r5, lr}
	ldr r4, _0802FB54 @ =gCurrentSprite
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _0802FB58
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _0802FB98
	.align 2, 0
_0802FB54: .4byte gCurrentSprite
_0802FB58:
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0802FB88 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802FB8C
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802FB8C
	bl KagoInsectFallingInit
	b _0802FB98
	.align 2, 0
_0802FB88: .4byte gPreviousCollisionCheck
_0802FB8C:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0802FB98
	bl KagoInsectJumpingInit
_0802FB98:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KagoInsectJumping
KagoInsectJumping: @ 0x0802FBA0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _0802FBB8 @ =gCurrentSprite
	ldrh r1, [r0, #0x14]
	adds r3, r0, #0
	cmp r1, #0
	bne _0802FBBC
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _0802FDBA
	.align 2, 0
_0802FBB8: .4byte gCurrentSprite
_0802FBBC:
	movs r7, #0
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r5, [r0]
	adds r4, r5, #0
	cmp r4, #0
	bne _0802FC10
	adds r0, #1
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _0802FBE8
	ldrh r0, [r3]
	movs r1, #0x40
	eors r0, r1
	movs r1, #0
	strh r0, [r3]
	ldr r0, _0802FBE4 @ =0x08337DB4
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	b _0802FBF2
	.align 2, 0
_0802FBE4: .4byte 0x08337DB4
_0802FBE8:
	cmp r0, #0x16
	bne _0802FBF4
	ldr r0, _0802FC08 @ =0x08337DA4
	str r0, [r3, #0x18]
	strb r7, [r3, #0x1c]
_0802FBF2:
	strh r7, [r3, #0x16]
_0802FBF4:
	ldr r1, _0802FC0C @ =0x08336878
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	b _0802FCD4
	.align 2, 0
_0802FC08: .4byte 0x08337DA4
_0802FC0C: .4byte 0x08336878
_0802FC10:
	ldr r1, _0802FC58 @ =0x08336864
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802FC7E
	ldrh r0, [r3, #2]
	subs r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r3, r2]
	ldrh r2, [r3, #4]
	adds r1, r1, r2
	adds r1, #4
	str r3, [sp]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802FC5C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	ldr r3, [sp]
	cmp r0, #0x11
	bne _0802FC64
	ldrh r0, [r3, #4]
	subs r0, #4
	movs r2, #0
	strh r0, [r3, #4]
	ldrh r1, [r3]
	ldr r0, _0802FC60 @ =0x0000FFBF
	ands r0, r1
	b _0802FCAA
	.align 2, 0
_0802FC58: .4byte 0x08336864
_0802FC5C: .4byte gPreviousCollisionCheck
_0802FC60: .4byte 0x0000FFBF
_0802FC64:
	lsls r0, r6, #0x10
	cmp r0, #0
	ble _0802FC78
	ldr r1, _0802FC74 @ =0x0000FFFD
	adds r0, r4, r1
	ldrh r2, [r3, #4]
	adds r0, r0, r2
	b _0802FCD2
	.align 2, 0
_0802FC74: .4byte 0x0000FFFD
_0802FC78:
	ldrh r0, [r3, #4]
	adds r0, r0, r5
	b _0802FCD2
_0802FC7E:
	ldrh r0, [r3, #2]
	subs r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r3, r2]
	ldrh r2, [r3, #4]
	adds r1, r1, r2
	subs r1, #4
	str r3, [sp]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0802FCB8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	ldr r3, [sp]
	cmp r0, #0x11
	bne _0802FCC0
	ldrh r0, [r3, #4]
	adds r0, #4
	movs r2, #0
	strh r0, [r3, #4]
	ldrh r0, [r3]
	movs r1, #0x40
	orrs r0, r1
_0802FCAA:
	strh r0, [r3]
	ldr r0, _0802FCBC @ =0x08337DB4
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r7, [r3, #0x16]
	b _0802FCD4
	.align 2, 0
_0802FCB8: .4byte gPreviousCollisionCheck
_0802FCBC: .4byte 0x08337DB4
_0802FCC0:
	lsls r0, r6, #0x10
	cmp r0, #0
	ble _0802FCCE
	subs r1, r4, #3
	ldrh r0, [r3, #4]
	subs r0, r0, r1
	b _0802FCD2
_0802FCCE:
	ldrh r0, [r3, #4]
	subs r0, r0, r5
_0802FCD2:
	strh r0, [r3, #4]
_0802FCD4:
	adds r4, r3, #0
	ldrh r0, [r4, #2]
	adds r0, r0, r6
	strh r0, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0x26
	bhi _0802FCEA
	adds r0, #1
	strb r0, [r1]
_0802FCEA:
	lsls r0, r6, #0x10
	cmp r0, #0
	ble _0802FD54
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _0802FD0C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802FD10
	strh r1, [r4, #2]
	bl KagoInsectJumpWarningInit
	b _0802FDBA
	.align 2, 0
_0802FD0C: .4byte gPreviousVerticalCollisionCheck
_0802FD10:
	cmp r7, #0
	bne _0802FDBA
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802FD46
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802FD42
	movs r7, #1
_0802FD42:
	cmp r7, #0
	beq _0802FDBA
_0802FD46:
	ldr r0, _0802FD50 @ =gCurrentSprite
	strh r1, [r0, #2]
	bl KagoInsectJumpWarningInit
	b _0802FDBA
	.align 2, 0
_0802FD50: .4byte gCurrentSprite
_0802FD54:
	movs r7, #0
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	str r3, [sp]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r4, _0802FDA8 @ =gPreviousCollisionCheck
	ldrb r0, [r4]
	ldr r3, [sp]
	cmp r0, #0x11
	beq _0802FD96
	movs r1, #0xa
	ldrsh r0, [r3, r1]
	ldrh r2, [r3, #2]
	adds r0, r0, r2
	movs r2, #0xe
	ldrsh r1, [r3, r2]
	ldrh r3, [r3, #4]
	adds r1, r1, r3
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r4]
	cmp r0, #0x11
	bne _0802FD92
	movs r7, #1
_0802FD92:
	cmp r7, #0
	beq _0802FDBA
_0802FD96:
	ldr r2, _0802FDAC @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0802FDB0
	ldrh r0, [r2, #4]
	subs r0, #4
	b _0802FDB4
	.align 2, 0
_0802FDA8: .4byte gPreviousCollisionCheck
_0802FDAC: .4byte gCurrentSprite
_0802FDB0:
	ldrh r0, [r2, #4]
	adds r0, #4
_0802FDB4:
	strh r0, [r2, #4]
	bl KagoInsectFallingInit
_0802FDBA:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KagoInsectFalling
KagoInsectFalling: @ 0x0802FDC4
	push {r4, r5, r6, r7, lr}
	ldr r4, _0802FDD8 @ =gCurrentSprite
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _0802FDDC
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _0802FE74
	.align 2, 0
_0802FDD8: .4byte gCurrentSprite
_0802FDDC:
	movs r6, #0
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _0802FE2C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802FE22
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _0802FE22
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _0802FE1E
	movs r6, #1
_0802FE1E:
	cmp r6, #0
	beq _0802FE34
_0802FE22:
	ldr r0, _0802FE30 @ =gCurrentSprite
	strh r1, [r0, #2]
	bl KagoInsectJumpWarningInit
	b _0802FE74
	.align 2, 0
_0802FE2C: .4byte gPreviousVerticalCollisionCheck
_0802FE30: .4byte gCurrentSprite
_0802FE34:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _0802FE60 @ =sSpritesFallingSpeedQuickAcceleration
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0802FE64 @ =0x00007FFF
	cmp r1, r0
	bne _0802FE68
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _0802FE74
	.align 2, 0
_0802FE60: .4byte sSpritesFallingSpeedQuickAcceleration
_0802FE64: .4byte 0x00007FFF
_0802FE68:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_0802FE74:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Kago
Kago: @ 0x0802FE7C
	push {lr}
	ldr r2, _0802FEAC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802FEB4
	ldr r0, _0802FEB0 @ =0x0000FF88
	strh r0, [r2, #0xa]
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #1
	bne _0802FEFA
	movs r0, #0xb5
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0802FEFA
	.align 2, 0
_0802FEAC: .4byte gCurrentSprite
_0802FEB0: .4byte 0x0000FF88
_0802FEB4:
	ldr r0, _0802FED4 @ =0x0000FF78
	strh r0, [r2, #0xa]
	adds r3, r2, #0
	adds r3, #0x31
	ldrb r0, [r3]
	cmp r0, #0
	beq _0802FEDC
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802FEFA
	ldr r0, _0802FED8 @ =0x08337B4C
	str r0, [r2, #0x18]
	b _0802FEFA
	.align 2, 0
_0802FED4: .4byte 0x0000FF78
_0802FED8: .4byte 0x08337B4C
_0802FEDC:
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #1
	bne _0802FEFA
	ldr r1, [r2, #0x18]
	ldr r0, _0802FF58 @ =0x08337B4C
	cmp r1, r0
	bne _0802FEFA
	ldr r0, _0802FF5C @ =0x08337CA4
	str r0, [r2, #0x18]
	movs r0, #0x3c
	strb r0, [r3]
_0802FEFA:
	ldr r1, _0802FF60 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802FF68
	ldr r0, _0802FF64 @ =0x0000FF88
	strh r0, [r1, #0xa]
	adds r2, r1, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0
	bne _0802FF28
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x18
	bne _0802FF28
	movs r0, #1
	strb r0, [r2]
	movs r0, #2
	bl KagoSetCollision
_0802FF28:
	bl SpriteUpdateFreezeTimer
	ldr r1, _0802FF60 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r2, [r0]
	cmp r2, #0
	bne _0802FFE6
	adds r3, r1, #0
	adds r3, #0x30
	ldrb r0, [r3]
	cmp r0, #0
	beq _0802FFE6
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x18
	bne _0802FFE6
	strb r2, [r3]
	movs r0, #1
	bl KagoSetCollision
	b _0802FFE6
	.align 2, 0
_0802FF58: .4byte 0x08337B4C
_0802FF5C: .4byte 0x08337CA4
_0802FF60: .4byte gCurrentSprite
_0802FF64: .4byte 0x0000FF88
_0802FF68:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x57
	beq _0802FFAE
	cmp r0, #0x57
	bgt _0802FF8A
	cmp r0, #2
	beq _0802FFA2
	cmp r0, #2
	bgt _0802FF84
	cmp r0, #0
	beq _0802FF9C
	b _0802FFCC
_0802FF84:
	cmp r0, #0x18
	beq _0802FFA8
	b _0802FFCC
_0802FF8A:
	cmp r0, #0x59
	beq _0802FFBA
	cmp r0, #0x59
	blt _0802FFB4
	cmp r0, #0x5a
	beq _0802FFBE
	cmp r0, #0x5b
	beq _0802FFC4
	b _0802FFCC
_0802FF9C:
	bl KagoInit
	b _0802FFCC
_0802FFA2:
	bl KagoIdleShort
	b _0802FFCC
_0802FFA8:
	bl KagoIdleTall
	b _0802FFCC
_0802FFAE:
	bl KagoDyingInit
	b _0802FFCC
_0802FFB4:
	bl SpriteDying
	b _0802FFCC
_0802FFBA:
	bl KagoInit
_0802FFBE:
	bl KagoSpawningFromX
	b _0802FFCC
_0802FFC4:
	bl KagoTurningIntoX
	bl XParasiteInit
_0802FFCC:
	ldr r2, _0802FFEC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0802FFE6
	ldrh r0, [r2, #2]
	subs r0, #0x1e
	ldrh r1, [r2, #4]
	bl unk_120ac
_0802FFE6:
	pop {r0}
	bx r0
	.align 2, 0
_0802FFEC: .4byte gCurrentSprite

	thumb_func_start KagoInsect
KagoInsect: @ 0x0802FFF0
	push {lr}
	ldr r0, _08030008 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x38
	bls _0802FFFE
	b _08030114
_0802FFFE:
	lsls r0, r0, #2
	ldr r1, _0803000C @ =_08030010
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08030008: .4byte gCurrentSprite
_0803000C: .4byte _08030010
_08030010: @ jump table
	.4byte _080300F4 @ case 0
	.4byte _08030114 @ case 1
	.4byte _080300FA @ case 2
	.4byte _08030114 @ case 3
	.4byte _08030114 @ case 4
	.4byte _08030114 @ case 5
	.4byte _08030114 @ case 6
	.4byte _08030114 @ case 7
	.4byte _08030114 @ case 8
	.4byte _08030114 @ case 9
	.4byte _08030114 @ case 10
	.4byte _08030114 @ case 11
	.4byte _08030114 @ case 12
	.4byte _08030114 @ case 13
	.4byte _08030114 @ case 14
	.4byte _08030114 @ case 15
	.4byte _08030114 @ case 16
	.4byte _08030114 @ case 17
	.4byte _08030114 @ case 18
	.4byte _08030114 @ case 19
	.4byte _08030114 @ case 20
	.4byte _08030114 @ case 21
	.4byte _08030106 @ case 22
	.4byte _08030114 @ case 23
	.4byte _08030100 @ case 24
	.4byte _08030114 @ case 25
	.4byte _08030114 @ case 26
	.4byte _08030114 @ case 27
	.4byte _08030114 @ case 28
	.4byte _08030114 @ case 29
	.4byte _08030114 @ case 30
	.4byte _08030114 @ case 31
	.4byte _08030114 @ case 32
	.4byte _08030114 @ case 33
	.4byte _08030114 @ case 34
	.4byte _08030114 @ case 35
	.4byte _08030114 @ case 36
	.4byte _08030114 @ case 37
	.4byte _08030114 @ case 38
	.4byte _08030114 @ case 39
	.4byte _08030114 @ case 40
	.4byte _08030114 @ case 41
	.4byte _08030114 @ case 42
	.4byte _08030114 @ case 43
	.4byte _08030114 @ case 44
	.4byte _08030114 @ case 45
	.4byte _08030114 @ case 46
	.4byte _08030114 @ case 47
	.4byte _08030114 @ case 48
	.4byte _08030114 @ case 49
	.4byte _08030114 @ case 50
	.4byte _08030114 @ case 51
	.4byte _08030114 @ case 52
	.4byte _08030114 @ case 53
	.4byte _08030114 @ case 54
	.4byte _0803010C @ case 55
	.4byte _08030110 @ case 56
_080300F4:
	bl KagoInsectInit
	b _08030114
_080300FA:
	bl KagoInsectJumpWarning
	b _08030114
_08030100:
	bl KagoInsectJumping
	b _08030114
_08030106:
	bl KagoInsectFalling
	b _08030114
_0803010C:
	bl KagoInsectExplodingInit
_08030110:
	bl KagoInsectExploding
_08030114:
	ldr r1, _0803013C @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r2
	cmp r0, #0
	beq _08030138
	ldrh r0, [r1, #6]
	cmp r0, #0
	beq _08030138
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08030138
	ldr r0, _08030140 @ =0x00007FFF
	ands r0, r2
	strh r0, [r1]
_08030138:
	pop {r0}
	bx r0
	.align 2, 0
_0803013C: .4byte gCurrentSprite
_08030140: .4byte 0x00007FFF

	thumb_func_start ShakeTriggerStartScreenShake
ShakeTriggerStartScreenShake: @ 0x08030144
	push {lr}
	movs r2, #0
	ldr r1, _08030164 @ =gCurrentSprite
	ldrb r0, [r1, #0x1c]
	cmp r0, #2
	bne _08030226
	movs r2, #1
	ldrh r0, [r1, #0x16]
	subs r0, #2
	cmp r0, #0x2d
	bhi _08030224
	lsls r0, r0, #2
	ldr r1, _08030168 @ =_0803016C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08030164: .4byte gCurrentSprite
_08030168: .4byte _0803016C
_0803016C: @ jump table
	.4byte _08030226 @ case 0
	.4byte _08030224 @ case 1
	.4byte _08030224 @ case 2
	.4byte _08030226 @ case 3
	.4byte _08030224 @ case 4
	.4byte _08030224 @ case 5
	.4byte _08030226 @ case 6
	.4byte _08030224 @ case 7
	.4byte _08030224 @ case 8
	.4byte _08030226 @ case 9
	.4byte _08030224 @ case 10
	.4byte _08030224 @ case 11
	.4byte _08030226 @ case 12
	.4byte _08030224 @ case 13
	.4byte _08030224 @ case 14
	.4byte _08030226 @ case 15
	.4byte _08030224 @ case 16
	.4byte _08030224 @ case 17
	.4byte _08030226 @ case 18
	.4byte _08030224 @ case 19
	.4byte _08030224 @ case 20
	.4byte _08030226 @ case 21
	.4byte _08030224 @ case 22
	.4byte _08030224 @ case 23
	.4byte _08030226 @ case 24
	.4byte _08030224 @ case 25
	.4byte _08030224 @ case 26
	.4byte _08030226 @ case 27
	.4byte _08030224 @ case 28
	.4byte _08030224 @ case 29
	.4byte _08030226 @ case 30
	.4byte _08030224 @ case 31
	.4byte _08030224 @ case 32
	.4byte _08030226 @ case 33
	.4byte _08030224 @ case 34
	.4byte _08030224 @ case 35
	.4byte _08030226 @ case 36
	.4byte _08030224 @ case 37
	.4byte _08030224 @ case 38
	.4byte _08030226 @ case 39
	.4byte _08030224 @ case 40
	.4byte _08030224 @ case 41
	.4byte _08030226 @ case 42
	.4byte _08030224 @ case 43
	.4byte _08030224 @ case 44
	.4byte _08030226 @ case 45
_08030224:
	movs r2, #0
_08030226:
	cmp r2, #0
	beq _0803023A
	movs r0, #0x14
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x14
	movs r1, #0x81
	bl ScreenShakeStartVertical
_0803023A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start PreBoxCeilingDebrisCheckSamusInRange
PreBoxCeilingDebrisCheckSamusInRange: @ 0x08030240
	push {r4, r5, r6, lr}
	ldr r3, _08030274 @ =gSamusData
	ldrh r2, [r3, #0x18]
	subs r2, #4
	lsls r2, r2, #0x10
	lsrs r6, r2, #0x10
	ldrh r3, [r3, #0x16]
	ldr r2, _08030278 @ =gCurrentSprite
	ldrh r4, [r2, #2]
	ldrh r2, [r2, #4]
	lsls r0, r0, #0x16
	lsrs r5, r0, #0x10
	lsls r1, r1, #0x16
	lsrs r0, r1, #0x10
	cmp r2, r3
	bhs _0803027C
	adds r0, r2, r0
	cmp r3, r0
	bge _0803027C
	cmp r4, r6
	bhs _0803027C
	adds r0, r4, r5
	cmp r6, r0
	bge _0803027C
	movs r0, #1
	b _0803027E
	.align 2, 0
_08030274: .4byte gSamusData
_08030278: .4byte gCurrentSprite
_0803027C:
	movs r0, #0
_0803027E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start ShakeTrigger
ShakeTrigger: @ 0x08030284
	push {r4, r5, lr}
	ldr r1, _080302AC @ =gCurrentSprite
	ldrb r4, [r1, #0x1e]
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0x1c
	bls _080302A0
	b _08030560
_080302A0:
	lsls r0, r0, #2
	ldr r1, _080302B0 @ =_080302B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080302AC: .4byte gCurrentSprite
_080302B0: .4byte _080302B4
_080302B4: @ jump table
	.4byte _08030328 @ case 0
	.4byte _08030560 @ case 1
	.4byte _080303CC @ case 2
	.4byte _08030560 @ case 3
	.4byte _08030560 @ case 4
	.4byte _08030560 @ case 5
	.4byte _08030560 @ case 6
	.4byte _08030560 @ case 7
	.4byte _08030560 @ case 8
	.4byte _08030560 @ case 9
	.4byte _08030560 @ case 10
	.4byte _08030560 @ case 11
	.4byte _08030560 @ case 12
	.4byte _08030560 @ case 13
	.4byte _08030560 @ case 14
	.4byte _08030560 @ case 15
	.4byte _08030560 @ case 16
	.4byte _08030560 @ case 17
	.4byte _08030560 @ case 18
	.4byte _08030560 @ case 19
	.4byte _08030560 @ case 20
	.4byte _08030560 @ case 21
	.4byte _08030560 @ case 22
	.4byte _08030560 @ case 23
	.4byte _080304C8 @ case 24
	.4byte _08030560 @ case 25
	.4byte _08030520 @ case 26
	.4byte _08030560 @ case 27
	.4byte _0803055C @ case 28
_08030328:
	bl EventCheckOn_EnteredSuperMissileDataRoom
	cmp r0, #0
	beq _08030334
	movs r4, #0
	b _0803036E
_08030334:
	bl EventCheckOn_BombsDownloaded
	cmp r0, #0
	beq _08030340
	movs r4, #1
	b _0803036E
_08030340:
	bl EventCheckOn_WaveBeamRecovered
	cmp r0, #0
	beq _0803034C
	movs r4, #2
	b _0803036E
_0803034C:
	bl EventCheckOn_RestrictedLabExplosion
	cmp r0, #0
	beq _08030358
	movs r4, #3
	b _0803036E
_08030358:
	bl EventCheckOn_RestrictedZoneWarning
	adds r1, r0, #0
	cmp r1, #0
	bne _0803036C
	ldr r0, _08030368 @ =gCurrentSprite
	strh r1, [r0]
	b _08030560
	.align 2, 0
_08030368: .4byte gCurrentSprite
_0803036C:
	movs r4, #4
_0803036E:
	ldr r3, _080303BC @ =gCurrentSprite
	movs r2, #0
	strb r4, [r3, #0x1e]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r4, #0
	ldr r1, _080303C0 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldr r0, _080303C4 @ =0x08337E0C
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _080303C8 @ =gDebugFlag
	ldrb r0, [r0]
	cmp r0, #0
	beq _080303B2
	b _08030560
_080303B2:
	ldrh r0, [r3]
	movs r1, #4
	orrs r0, r1
	strh r0, [r3]
	b _08030560
	.align 2, 0
_080303BC: .4byte gCurrentSprite
_080303C0: .4byte 0x0000FFFC
_080303C4: .4byte 0x08337E0C
_080303C8: .4byte gDebugFlag
_080303CC:
	cmp r4, #0
	bne _08030404
	bl EventCheckOn_SuperMissileDownloaded
	cmp r0, #0
	bne _080303DA
	b _08030560
_080303DA:
	ldr r5, _080303FC @ =gCurrentSprite
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x14
	strb r0, [r1]
	movs r0, #0x8b
	lsls r0, r0, #2
	bl unk_3b1c
	ldr r0, _08030400 @ =0x08337DF4
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	b _08030560
	.align 2, 0
_080303FC: .4byte gCurrentSprite
_08030400: .4byte 0x08337DF4
_08030404:
	cmp r4, #1
	bne _08030430
	bl EventCheckOn_BombsQuake
	cmp r0, #0
	bne _08030412
	b _08030560
_08030412:
	ldr r3, _08030428 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #8
	strb r0, [r1]
	ldr r0, _0803042C @ =0x08337DF4
	b _08030484
	.align 2, 0
_08030428: .4byte gCurrentSprite
_0803042C: .4byte 0x08337DF4
_08030430:
	cmp r4, #4
	bne _0803045C
	bl EventCheckOn_TriggeredBox2Rumble
	cmp r0, #0
	bne _0803043E
	b _08030560
_0803043E:
	ldr r3, _08030454 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #8
	strb r0, [r1]
	ldr r0, _08030458 @ =0x08337DF4
	b _08030484
	.align 2, 0
_08030454: .4byte gCurrentSprite
_08030458: .4byte 0x08337DF4
_0803045C:
	cmp r4, #2
	bne _08030494
	bl EventCheckOn_RestrictedLabExplosion
	cmp r0, #0
	bne _0803046A
	b _08030560
_0803046A:
	ldr r3, _0803048C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x14
	strb r0, [r1]
	ldr r0, _08030490 @ =0x08337E1C
_08030484:
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	b _08030560
	.align 2, 0
_0803048C: .4byte gCurrentSprite
_08030490: .4byte 0x08337E1C
_08030494:
	cmp r4, #3
	bne _08030560
	bl EventCheckOn_RestrictedLabExplosion
	cmp r0, #0
	beq _08030560
	ldr r1, _080304BC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _080304C0 @ =0x08337E1C
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _080304C4 @ =0x00000239
	bl SoundPlay
	b _08030560
	.align 2, 0
_080304BC: .4byte gCurrentSprite
_080304C0: .4byte 0x08337E1C
_080304C4: .4byte 0x00000239
_080304C8:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08030560
	subs r1, #0xa
	movs r0, #0x4e
	strb r0, [r1]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	cmp r4, #0
	bne _08030500
	ldr r0, _080304FC @ =0x0000022D
	bl SoundPlay
	b _08030560
	.align 2, 0
_080304FC: .4byte 0x0000022D
_08030500:
	cmp r4, #1
	bne _08030510
	ldr r0, _0803050C @ =0x0000022B
	bl unk_3b1c
	b _08030560
	.align 2, 0
_0803050C: .4byte 0x0000022B
_08030510:
	cmp r4, #4
	bne _08030560
	ldr r0, _0803051C @ =0x00000237
	bl unk_3b1c
	b _08030560
	.align 2, 0
_0803051C: .4byte 0x00000237
_08030520:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08030530
	subs r0, #1
	strb r0, [r1]
	b _08030560
_08030530:
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803055C
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08030560
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	movs r0, #0x27
	movs r1, #0xa
	bl PlayMusic
	movs r0, #0x8e
	lsls r0, r0, #2
	bl SoundPlay
	b _08030560
_0803055C:
	bl ShakeTriggerStartScreenShake
_08030560:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start PreBoxCeilingDebris
PreBoxCeilingDebris: @ 0x08030568
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r4, _08030590 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x26
	movs r1, #1
	strb r1, [r0]
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #2
	beq _0803060C
	cmp r0, #2
	bgt _08030594
	cmp r0, #0
	beq _0803059E
	b _08030808
	.align 2, 0
_08030590: .4byte gCurrentSprite
_08030594:
	cmp r0, #0x18
	beq _08030644
	cmp r0, #0x1a
	beq _08030668
	b _08030808
_0803059E:
	bl EventCheckOn_SuperMissileDownloaded
	cmp r0, #0
	bne _080305A8
	b _080306B8
_080305A8:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	movs r2, #0
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	strh r0, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x21
	movs r1, #1
	strb r1, [r0]
	adds r0, #4
	strb r2, [r0]
	movs r0, #2
	strb r0, [r5]
	adds r0, r4, #0
	adds r0, #0x27
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0x70
	strb r0, [r1]
	ldr r1, _08030600 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08030604 @ =0x08337E0C
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r0, _08030608 @ =gDebugFlag
	ldrb r0, [r0]
	cmp r0, #0
	beq _080305F6
	b _08030808
_080305F6:
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	b _08030808
	.align 2, 0
_08030600: .4byte 0x0000FFFC
_08030604: .4byte 0x08337E0C
_08030608: .4byte gDebugFlag
_0803060C:
	movs r0, #6
	movs r1, #6
	bl PreBoxCeilingDebrisCheckSamusInRange
	cmp r0, #0
	bne _0803061A
	b _08030808
_0803061A:
	bl EventCheckOn_BoxRumble
	cmp r0, #0
	bne _08030624
	b _08030808
_08030624:
	movs r0, #0x18
	strb r0, [r5]
	ldr r0, _08030640 @ =0x08337DF4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	movs r1, #0
	strh r1, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	b _08030808
	.align 2, 0
_08030640: .4byte 0x08337DF4
_08030644:
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r1, r0, #1
	strb r1, [r2]
	movs r3, #0xff
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _08030658
	b _08030808
_08030658:
	movs r0, #0x1a
	strb r0, [r5]
	orrs r1, r3
	strb r1, [r2]
	movs r0, #0xd2
	lsls r0, r0, #1
	strh r0, [r4, #6]
	b _08030808
_08030668:
	movs r0, #0x2e
	adds r0, r0, r4
	mov sb, r0
	ldrb r0, [r0]
	adds r0, #1
	mov r1, sb
	strb r0, [r1]
	ldr r0, _080306C0 @ =gXParasiteTargetXPosition
	ldrb r0, [r0]
	movs r1, #0xf
	mov sl, r1
	ands r1, r0
	mov sl, r1
	ldr r0, _080306C4 @ =gXParasiteTargetYPosition
	ldrb r0, [r0]
	movs r1, #0x1f
	mov r8, r1
	ands r1, r0
	mov r8, r1
	ldr r0, _080306C8 @ =gFrameCounter8Bit
	ldrb r5, [r0]
	cmp r5, #7
	bhi _0803069E
	adds r0, r5, #0
	adds r0, #8
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0803069E:
	ldrh r7, [r4, #2]
	ldrh r6, [r4, #4]
	adds r0, r6, #4
	strh r0, [r4, #4]
	adds r0, r7, #0
	adds r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080306CC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080306D0
_080306B8:
	movs r0, #0
	strh r0, [r4]
	b _08030808
	.align 2, 0
_080306C0: .4byte gXParasiteTargetXPosition
_080306C4: .4byte gXParasiteTargetYPosition
_080306C8: .4byte gSpriteRandomNumber
_080306CC: .4byte gPreviousCollisionCheck
_080306D0:
	mov r0, sb
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	beq _080306DE
	b _08030808
_080306DE:
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _08030718 @ =0x0000022E
	bl unk_3b1c
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080306F8
	b _08030808
_080306F8:
	adds r0, r5, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0803071C
	adds r2, r5, #0
	subs r2, #0x6c
	adds r2, r7, r2
	lsls r3, r5, #5
	adds r3, #0x14
	adds r3, r6, r3
	movs r0, #0
	movs r1, #5
	bl SpriteDebrisInit
	b _08030730
	.align 2, 0
_08030718: .4byte 0x0000022E
_0803071C:
	adds r2, r5, #0
	subs r2, #0x64
	adds r2, r7, r2
	lsls r3, r5, #4
	adds r3, #0x1a
	adds r3, r6, r3
	movs r0, #0
	movs r1, #7
	bl SpriteDebrisInit
_08030730:
	ldr r0, _08030750 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #7
	bls _08030754
	adds r2, r5, #0
	subs r2, #0x50
	adds r2, r7, r2
	lsls r3, r5, #1
	adds r3, #0x12
	subs r3, r6, r3
	movs r0, #0
	movs r1, #8
	bl SpriteDebrisInit
	b _0803077C
	.align 2, 0
_08030750: .4byte gSpriteRandomNumber
_08030754:
	adds r2, r5, #0
	subs r2, #0x5a
	adds r2, r7, r2
	lsls r3, r5, #2
	adds r3, #0x12
	subs r3, r6, r3
	movs r0, #0
	movs r1, #6
	bl SpriteDebrisInit
	mov r2, r8
	subs r2, #0x78
	adds r2, r7, r2
	mov r0, sl
	lsls r3, r0, #3
	subs r3, r6, r3
	movs r0, #0
	movs r1, #5
	bl SpriteDebrisInit
_0803077C:
	ldr r0, _080307A8 @ =gCurrentSprite
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08030808
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _080307AC
	mov r2, r8
	subs r2, #0x78
	adds r2, r7, r2
	mov r1, sl
	lsls r3, r1, #6
	subs r3, r6, r3
	movs r0, #0
	movs r1, #6
	bl SpriteDebrisInit
	b _080307C0
	.align 2, 0
_080307A8: .4byte gCurrentSprite
_080307AC:
	mov r2, r8
	subs r2, #0x50
	adds r2, r7, r2
	mov r0, sl
	lsls r3, r0, #4
	subs r3, r6, r3
	movs r0, #0
	movs r1, #8
	bl SpriteDebrisInit
_080307C0:
	ldr r0, _080307F0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xb
	bls _080307F4
	mov r2, r8
	subs r2, #0x58
	adds r2, r7, r2
	mov r1, sl
	lsls r3, r1, #2
	adds r3, r6, r3
	movs r0, #0
	movs r1, #5
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0x64
	adds r2, r7, r2
	lsls r3, r5, #3
	subs r3, r6, r3
	movs r0, #0
	movs r1, #6
	bl SpriteDebrisInit
	b _08030808
	.align 2, 0
_080307F0: .4byte gSpriteRandomNumber
_080307F4:
	mov r2, r8
	subs r2, #0x6e
	adds r2, r7, r2
	mov r0, sl
	lsls r3, r0, #1
	adds r3, r6, r3
	movs r0, #0
	movs r1, #7
	bl SpriteDebrisInit
_08030808:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GateSetCollision
GateSetCollision: @ 0x08030818
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08030860 @ =gCurrentSprite
	ldrh r7, [r0, #2]
	ldrh r6, [r0, #4]
	ldr r5, _08030864 @ =gCurrentClipdataAffectingAction
	strb r4, [r5]
	adds r0, r7, #0
	subs r0, #0x20
	adds r1, r6, #0
	bl ProcessClipdata
	strb r4, [r5]
	adds r0, r7, #0
	subs r0, #0x60
	adds r1, r6, #0
	bl ProcessClipdata
	strb r4, [r5]
	adds r0, r7, #0
	subs r0, #0xa0
	adds r1, r6, #0
	bl ProcessClipdata
	strb r4, [r5]
	adds r0, r7, #0
	subs r0, #0xe0
	adds r1, r6, #0
	bl ProcessClipdata
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030860: .4byte gCurrentSprite
_08030864: .4byte gCurrentClipdataAffectingAction

	thumb_func_start GateInit
GateInit: @ 0x08030868
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r0, _080308D8 @ =gCurrentSprite
	mov ip, r0
	ldr r2, _080308DC @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1, #0x14]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r1]
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x27
	movs r0, #0x40
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080308E0 @ =0x0000FFFC
	mov r4, ip
	strh r0, [r4, #0xa]
	strh r3, [r4, #0xc]
	strh r0, [r4, #0xe]
	movs r0, #4
	strh r0, [r4, #0x10]
	subs r1, #5
	movs r0, #2
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	mov r0, ip
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0x12
	beq _080308F8
	cmp r0, #0x12
	bgt _080308E4
	cmp r0, #0x11
	beq _080308EE
	b _08030924
	.align 2, 0
_080308D8: .4byte gCurrentSprite
_080308DC: .4byte sPrimarySpriteStats
_080308E0: .4byte 0x0000FFFC
_080308E4:
	cmp r0, #0x13
	beq _08030904
	cmp r0, #0x14
	beq _08030914
	b _08030924
_080308EE:
	movs r5, #1
	ldr r0, _080308F4 @ =0x08339084
	b _08030908
	.align 2, 0
_080308F4: .4byte 0x08339084
_080308F8:
	movs r5, #2
	ldr r0, _08030900 @ =0x08339084
	b _08030918
	.align 2, 0
_08030900: .4byte 0x08339084
_08030904:
	movs r5, #3
	ldr r0, _08030910 @ =0x083391F4
_08030908:
	mov r1, ip
	str r0, [r1, #0x18]
	b _0803095E
	.align 2, 0
_08030910: .4byte 0x083391F4
_08030914:
	movs r5, #4
	ldr r0, _08030920 @ =0x083391F4
_08030918:
	mov r4, ip
	str r0, [r4, #0x18]
	b _0803095E
	.align 2, 0
_08030920: .4byte 0x083391F4
_08030924:
	movs r5, #5
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _08030948
	ldr r2, _08030940 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _08030944 @ =0x08338F84
	str r0, [r2, #0x18]
	b _08030990
	.align 2, 0
_08030940: .4byte gCurrentSprite
_08030944: .4byte 0x08338F84
_08030948:
	ldr r2, _08030998 @ =gCurrentSprite
	ldr r0, _0803099C @ =0x08339084
	str r0, [r2, #0x18]
	adds r3, r2, #0
	adds r3, #0x34
	ldrb r1, [r3]
	movs r0, #1
	orrs r0, r1
	strb r0, [r3]
	movs r0, #0xd2
	strh r0, [r2, #6]
_0803095E:
	movs r0, #2
	bl GateSetCollision
	cmp r5, #4
	bhi _08030990
	ldr r4, _08030998 @ =gCurrentSprite
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r6, #0
	str r6, [sp, #8]
	movs r0, #0xf
	adds r1, r5, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xff
	bne _08030990
	strh r6, [r4]
_08030990:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08030998: .4byte gCurrentSprite
_0803099C: .4byte 0x08339084

	thumb_func_start GateClosed
GateClosed: @ 0x080309A0
	push {r4, lr}
	ldr r4, _080309D4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0x14
	bgt _080309B2
	cmp r0, #0x11
	bge _080309CE
_080309B2:
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _080309CE
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080309CE
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_080309CE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080309D4: .4byte gCurrentSprite

	thumb_func_start GateOpeningInit
GateOpeningInit: @ 0x080309D8
	push {lr}
	movs r0, #1
	bl GateSetCollision
	ldr r3, _08030A0C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0x11
	blt _08030A2C
	cmp r0, #0x12
	bgt _08030A14
	ldr r0, _08030A10 @ =0x0833900C
	str r0, [r3, #0x18]
	movs r0, #0x8a
	lsls r0, r0, #1
	bl SoundPlay
	b _08030A3A
	.align 2, 0
_08030A0C: .4byte gCurrentSprite
_08030A10: .4byte 0x0833900C
_08030A14:
	cmp r0, #0x14
	bgt _08030A2C
	ldr r0, _08030A24 @ =0x0833917C
	str r0, [r3, #0x18]
	ldr r0, _08030A28 @ =0x00000115
	bl SoundPlay
	b _08030A3A
	.align 2, 0
_08030A24: .4byte 0x0833917C
_08030A28: .4byte 0x00000115
_08030A2C:
	ldr r0, _08030A40 @ =gCurrentSprite
	ldr r1, _08030A44 @ =0x0833900C
	str r1, [r0, #0x18]
	movs r0, #0x8a
	lsls r0, r0, #1
	bl SoundPlay
_08030A3A:
	pop {r0}
	bx r0
	.align 2, 0
_08030A40: .4byte gCurrentSprite
_08030A44: .4byte 0x0833900C

	thumb_func_start GateOpening
GateOpening: @ 0x08030A48
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08030A84
	ldr r1, _08030A78 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	adds r0, r1, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0x11
	blt _08030A80
	cmp r0, #0x12
	ble _08030A80
	cmp r0, #0x14
	bgt _08030A80
	ldr r0, _08030A7C @ =0x083390F4
	b _08030A82
	.align 2, 0
_08030A78: .4byte gCurrentSprite
_08030A7C: .4byte 0x083390F4
_08030A80:
	ldr r0, _08030A88 @ =0x08338F84
_08030A82:
	str r0, [r1, #0x18]
_08030A84:
	pop {r0}
	bx r0
	.align 2, 0
_08030A88: .4byte 0x08338F84

	thumb_func_start GateSwitchInit
GateSwitchInit: @ 0x08030A8C
	push {r4, lr}
	ldr r0, _08030AF4 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08030AF8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldr r1, _08030AFC @ =sSecondarySpriteStats
	mov r4, ip
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r1, ip
	adds r1, #0x25
	movs r0, #1
	strb r0, [r1]
	adds r1, #2
	movs r0, #0x40
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x28
	strb r0, [r1]
	movs r0, #0xff
	lsls r0, r0, #8
	strh r0, [r4, #0xa]
	adds r0, #0x40
	strh r0, [r4, #0xc]
	subs r1, #5
	movs r0, #2
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldrb r0, [r4, #0x1e]
	mov r1, ip
	cmp r0, #2
	beq _08030B20
	cmp r0, #2
	bgt _08030B00
	cmp r0, #1
	beq _08030B0A
	b _08030B34
	.align 2, 0
_08030AF4: .4byte gCurrentSprite
_08030AF8: .4byte 0x0000FFFB
_08030AFC: .4byte sSecondarySpriteStats
_08030B00:
	cmp r0, #3
	beq _08030B0A
	cmp r0, #4
	beq _08030B20
	b _08030B34
_08030B0A:
	ldr r0, _08030B18 @ =0x0000FF6C
	strh r0, [r1, #0xe]
	adds r0, #0x20
	strh r0, [r1, #0x10]
	ldr r0, _08030B1C @ =0x0833928C
	str r0, [r1, #0x18]
	b _08030B38
	.align 2, 0
_08030B18: .4byte 0x0000FF6C
_08030B1C: .4byte 0x0833928C
_08030B20:
	movs r0, #0x74
	strh r0, [r1, #0xe]
	movs r0, #0x94
	strh r0, [r1, #0x10]
	ldr r0, _08030B30 @ =0x083392C4
	str r0, [r1, #0x18]
	b _08030B38
	.align 2, 0
_08030B30: .4byte 0x083392C4
_08030B34:
	movs r0, #0
	strh r0, [r1]
_08030B38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GateSwitchIdle
GateSwitchIdle: @ 0x08030B40
	push {lr}
	ldr r0, _08030B70 @ =gCurrentSprite
	ldrh r3, [r0, #0x14]
	adds r2, r0, #0
	cmp r3, #0
	bne _08030B98
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	strb r3, [r2, #0x1c]
	movs r0, #0
	strh r3, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x25
	strb r0, [r1]
	ldrb r0, [r2, #0x1e]
	cmp r0, #2
	beq _08030B88
	cmp r0, #2
	bgt _08030B74
	cmp r0, #1
	beq _08030B7E
	b _08030B94
	.align 2, 0
_08030B70: .4byte gCurrentSprite
_08030B74:
	cmp r0, #3
	beq _08030B7E
	cmp r0, #4
	beq _08030B88
	b _08030B94
_08030B7E:
	ldr r0, _08030B84 @ =0x083392AC
	str r0, [r2, #0x18]
	b _08030B98
	.align 2, 0
_08030B84: .4byte 0x083392AC
_08030B88:
	ldr r0, _08030B90 @ =0x083392E4
	str r0, [r2, #0x18]
	b _08030B98
	.align 2, 0
_08030B90: .4byte 0x083392E4
_08030B94:
	movs r0, #0
	strh r0, [r2]
_08030B98:
	pop {r0}
	bx r0

	thumb_func_start GateSwitchPressing
GateSwitchPressing: @ 0x08030B9C
	push {r4, r5, lr}
	ldr r4, _08030BE4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r5, #0
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08030C1E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	ldr r2, _08030BE8 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	movs r1, #0x17
	strb r1, [r0]
	ldrb r1, [r4, #0x1e]
	cmp r1, #2
	beq _08030C08
	cmp r1, #2
	bgt _08030BEC
	cmp r1, #1
	beq _08030BF6
	b _08030C18
	.align 2, 0
_08030BE4: .4byte gCurrentSprite
_08030BE8: .4byte gSpriteData
_08030BEC:
	cmp r1, #3
	beq _08030BF6
	cmp r1, #4
	beq _08030C08
	b _08030C18
_08030BF6:
	ldr r1, _08030C00 @ =gCurrentSprite
	ldr r0, _08030C04 @ =0x083392FC
	str r0, [r1, #0x18]
	b _08030C1E
	.align 2, 0
_08030C00: .4byte gCurrentSprite
_08030C04: .4byte 0x083392FC
_08030C08:
	ldr r1, _08030C10 @ =gCurrentSprite
	ldr r0, _08030C14 @ =0x0833930C
	str r0, [r1, #0x18]
	b _08030C1E
	.align 2, 0
_08030C10: .4byte gCurrentSprite
_08030C14: .4byte 0x0833930C
_08030C18:
	ldr r1, _08030C24 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08030C1E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08030C24: .4byte gCurrentSprite

	thumb_func_start GateSwitchPressed
GateSwitchPressed: @ 0x08030C28
	ldr r0, _08030C34 @ =gCurrentSprite
	adds r0, #0x26
	movs r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_08030C34: .4byte gCurrentSprite

	thumb_func_start Gate
Gate: @ 0x08030C38
	push {lr}
	ldr r0, _08030C58 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08030C6C
	cmp r0, #2
	bgt _08030C5C
	cmp r0, #0
	beq _08030C66
	b _08030C7C
	.align 2, 0
_08030C58: .4byte gCurrentSprite
_08030C5C:
	cmp r0, #0x17
	beq _08030C72
	cmp r0, #0x18
	beq _08030C78
	b _08030C7C
_08030C66:
	bl GateInit
	b _08030C7C
_08030C6C:
	bl GateClosed
	b _08030C7C
_08030C72:
	bl GateOpeningInit
	b _08030C7C
_08030C78:
	bl GateOpening
_08030C7C:
	pop {r0}
	bx r0

	thumb_func_start GateSwitch
GateSwitch: @ 0x08030C80
	push {lr}
	ldr r0, _08030C98 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08030CAC
	cmp r0, #2
	bgt _08030C9C
	cmp r0, #0
	beq _08030CA6
	b _08030CBC
	.align 2, 0
_08030C98: .4byte gCurrentSprite
_08030C9C:
	cmp r0, #0x18
	beq _08030CB2
	cmp r0, #0x1a
	beq _08030CB8
	b _08030CBC
_08030CA6:
	bl GateSwitchInit
	b _08030CBC
_08030CAC:
	bl GateSwitchIdle
	b _08030CBC
_08030CB2:
	bl GateSwitchPressing
	b _08030CBC
_08030CB8:
	bl GateSwitchPressed
_08030CBC:
	pop {r0}
	bx r0

	thumb_func_start ElectricWaterDamageInit
ElectricWaterDamageInit: @ 0x08030CC0
	push {r4, lr}
	ldr r0, _08030D14 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	movs r0, #4
	movs r2, #0
	movs r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08030D18 @ =0x0000FF80
	mov r4, ip
	strh r0, [r4, #0xa]
	movs r1, #0x20
	strh r1, [r4, #0xc]
	adds r0, #0x60
	strh r0, [r4, #0xe]
	strh r1, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08030D1C @ =0x0833AB94
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08030D14: .4byte gCurrentSprite
_08030D18: .4byte 0x0000FF80
_08030D1C: .4byte 0x0833AB94

	thumb_func_start ElectricWaterDamageIdle
ElectricWaterDamageIdle: @ 0x08030D20
	push {lr}
	ldr r2, _08030D44 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08030D48 @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _08030D40
	subs r1, #2
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0
	strb r0, [r1]
_08030D40:
	pop {r0}
	bx r0
	.align 2, 0
_08030D44: .4byte gCurrentSprite
_08030D48: .4byte 0x03001346

	thumb_func_start ElectricWaterDamageDamagingSamus
ElectricWaterDamageDamagingSamus: @ 0x08030D4C
	push {lr}
	ldr r2, _08030D78 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08030D7C @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	ldr r1, _08030D80 @ =gSamusData
	ldrh r0, [r1, #0x18]
	strh r0, [r2, #2]
	ldrh r0, [r1, #0x16]
	strh r0, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _08030D84
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0xb
	b _08030D8A
	.align 2, 0
_08030D78: .4byte gCurrentSprite
_08030D7C: .4byte 0x0000FFFB
_08030D80: .4byte gSamusData
_08030D84:
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0
_08030D8A:
	strb r0, [r1]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, _08030DB8 @ =0x03001346
	ldrb r3, [r0]
	cmp r3, #0
	bne _08030DB4
	subs r1, #0xa
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _08030DBC @ =0x0833AC04
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	movs r1, #0
	strh r3, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x25
	strb r1, [r0]
_08030DB4:
	pop {r0}
	bx r0
	.align 2, 0
_08030DB8: .4byte 0x03001346
_08030DBC: .4byte 0x0833AC04

	thumb_func_start ElectricWaterDamageStopping
ElectricWaterDamageStopping: @ 0x08030DC0
	push {r4, r5, lr}
	ldr r4, _08030E08 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r1, _08030E0C @ =gSamusData
	ldrh r0, [r1, #0x18]
	movs r5, #0
	strh r0, [r4, #2]
	ldrh r0, [r1, #0x16]
	strh r0, [r4, #4]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08030E00
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	ldr r0, _08030E10 @ =0x0833AB94
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x25
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
_08030E00:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08030E08: .4byte gCurrentSprite
_08030E0C: .4byte gSamusData
_08030E10: .4byte 0x0833AB94

	thumb_func_start ElectricWireInit
ElectricWireInit: @ 0x08030E14
	push {r4, r5, r6, r7, lr}
	ldr r4, _08030E7C @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x25
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	adds r2, #2
	movs r0, #8
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x28
	movs r7, #0x30
	strb r7, [r0]
	adds r2, #2
	movs r0, #0x18
	strb r0, [r2]
	movs r5, #0
	ldr r6, _08030E80 @ =0x0000FFD0
	strh r6, [r4, #0xa]
	movs r0, #0x60
	strh r0, [r4, #0xc]
	strb r5, [r4, #0x1c]
	strh r1, [r4, #0x16]
	ldr r0, _08030E84 @ =0x0833AC54
	str r0, [r4, #0x18]
	ldr r0, _08030E88 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x21
	strb r0, [r1]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x80
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08030E8C @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08030E90
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r4]
	strh r6, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	b _08030E96
	.align 2, 0
_08030E7C: .4byte gCurrentSprite
_08030E80: .4byte 0x0000FFD0
_08030E84: .4byte 0x0833AC54
_08030E88: .4byte gIoRegisters
_08030E8C: .4byte gPreviousCollisionCheck
_08030E90:
	ldr r0, _08030EAC @ =0x0000FFE0
	strh r0, [r4, #0xe]
	strh r7, [r4, #0x10]
_08030E96:
	bl EventCheckAfter_WaterLowered
	cmp r0, #0
	beq _08030EB8
	ldr r0, _08030EB0 @ =0x00000117
	bl SoundPlay
	ldr r0, _08030EB4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x18
	b _08030EBE
	.align 2, 0
_08030EAC: .4byte 0x0000FFE0
_08030EB0: .4byte 0x00000117
_08030EB4: .4byte gCurrentSprite
_08030EB8:
	ldr r0, _08030EC8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
_08030EBE:
	strb r1, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030EC8: .4byte gCurrentSprite

	thumb_func_start ElectricWireIdle
ElectricWireIdle: @ 0x08030ECC
	push {r4, lr}
	ldr r0, _08030EF4 @ =gWaterLowered
	ldrb r0, [r0]
	cmp r0, #0
	beq _08030EEC
	ldr r4, _08030EF8 @ =gCurrentSprite
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	bne _08030EEC
	ldr r0, _08030EFC @ =0x00000117
	bl SoundPlay
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_08030EEC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08030EF4: .4byte gWaterLowered
_08030EF8: .4byte gCurrentSprite
_08030EFC: .4byte 0x00000117

	thumb_func_start ElectricWaterInit
ElectricWaterInit: @ 0x08030F00
	push {r4, lr}
	ldr r0, _08030F6C @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #4]
	adds r0, #0x20
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1, #4]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x80
	strb r0, [r1]
	ldr r0, _08030F70 @ =0x0000FFC0
	mov r1, ip
	strh r0, [r1, #0xa]
	strh r4, [r1, #0xc]
	ldr r0, _08030F74 @ =0x0000FE20
	strh r0, [r1, #0xe]
	movs r0, #0xf0
	lsls r0, r0, #1
	strh r0, [r1, #0x10]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	strb r3, [r0, #0x1c]
	strh r4, [r0, #0x16]
	ldr r0, _08030F78 @ =0x0833ADCC
	mov r1, ip
	str r0, [r1, #0x18]
	movs r0, #0x8b
	lsls r0, r0, #1
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08030F6C: .4byte gCurrentSprite
_08030F70: .4byte 0x0000FFC0
_08030F74: .4byte 0x0000FE20
_08030F78: .4byte 0x0833ADCC

	thumb_func_start ElectricWaterIdle
ElectricWaterIdle: @ 0x08030F7C
	ldr r1, _08030F88 @ =gCurrentSprite
	ldr r0, _08030F8C @ =gEffectYPosition
	ldrh r0, [r0]
	adds r0, #0x20
	strh r0, [r1, #2]
	bx lr
	.align 2, 0
_08030F88: .4byte gCurrentSprite
_08030F8C: .4byte gEffectYPosition

	thumb_func_start ElectricWaterDamage
ElectricWaterDamage: @ 0x08030F90
	push {lr}
	ldr r0, _08030FA8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08030FBC
	cmp r0, #2
	bgt _08030FAC
	cmp r0, #0
	beq _08030FB6
	b _08030FCC
	.align 2, 0
_08030FA8: .4byte gCurrentSprite
_08030FAC:
	cmp r0, #0x18
	beq _08030FC2
	cmp r0, #0x1a
	beq _08030FC8
	b _08030FCC
_08030FB6:
	bl ElectricWaterDamageInit
	b _08030FCC
_08030FBC:
	bl ElectricWaterDamageIdle
	b _08030FCC
_08030FC2:
	bl ElectricWaterDamageDamagingSamus
	b _08030FCC
_08030FC8:
	bl ElectricWaterDamageStopping
_08030FCC:
	ldr r0, _08030FE0 @ =gWaterLowered
	ldrb r0, [r0]
	cmp r0, #0
	beq _08030FDA
	ldr r1, _08030FE4 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08030FDA:
	pop {r0}
	bx r0
	.align 2, 0
_08030FE0: .4byte gWaterLowered
_08030FE4: .4byte gCurrentSprite

	thumb_func_start ElectricWire
ElectricWire: @ 0x08030FE8
	push {lr}
	ldr r0, _08030FFC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031000
	cmp r0, #2
	beq _08031006
	b _0803100A
	.align 2, 0
_08030FFC: .4byte gCurrentSprite
_08031000:
	bl ElectricWireInit
	b _0803100A
_08031006:
	bl ElectricWireIdle
_0803100A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ElectricWater
ElectricWater: @ 0x08031010
	push {lr}
	ldr r0, _0803102C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031030
	cmp r0, #2
	beq _08031034
	b _08031038
	.align 2, 0
_0803102C: .4byte gCurrentSprite
_08031030:
	bl ElectricWaterInit
_08031034:
	bl ElectricWaterIdle
_08031038:
	ldr r0, _0803104C @ =gWaterLowered
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031046
	ldr r1, _08031050 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08031046:
	pop {r0}
	bx r0
	.align 2, 0
_0803104C: .4byte gWaterLowered
_08031050: .4byte gCurrentSprite

	thumb_func_start ZoroCheckCollidingWithAir
ZoroCheckCollidingWithAir: @ 0x08031054
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _08031088 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _080310B4
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08031090
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803108C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08031104
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _080310F8
	.align 2, 0
_08031088: .4byte gCurrentSprite
_0803108C: .4byte gPreviousCollisionCheck
_08031090:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080310B0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08031104
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _080310F8
	.align 2, 0
_080310B0: .4byte gPreviousCollisionCheck
_080310B4:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080310E0
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080310DC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08031104
	ldrh r0, [r4, #2]
	subs r0, #4
	b _080310F4
	.align 2, 0
_080310DC: .4byte gPreviousCollisionCheck
_080310E0:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803110C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08031104
	ldrh r0, [r4, #2]
_080310F4:
	ldrh r1, [r4, #4]
	adds r1, #0x20
_080310F8:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08031104
	movs r6, #1
_08031104:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0803110C: .4byte gPreviousCollisionCheck

	thumb_func_start ZoroSetHitboxAndDrawDistance
ZoroSetHitboxAndDrawDistance: @ 0x08031110
	push {lr}
	ldr r1, _08031138 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	beq _08031150
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08031140
	ldr r0, _0803113C @ =0x0000FFC4
	strh r0, [r2, #0xa]
	movs r1, #0x3c
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _0803117C
	.align 2, 0
_08031138: .4byte gCurrentSprite
_0803113C: .4byte 0x0000FFC4
_08031140:
	ldr r0, _0803114C @ =0x0000FFC4
	strh r0, [r2, #0xa]
	movs r1, #0x3c
	strh r1, [r2, #0xc]
	adds r0, #0x2c
	b _08031166
	.align 2, 0
_0803114C: .4byte 0x0000FFC4
_08031150:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08031170
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r1, #0x3c
	strh r1, [r2, #0xc]
	ldr r0, _0803116C @ =0x0000FFC4
_08031166:
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	b _0803117E
	.align 2, 0
_0803116C: .4byte 0x0000FFC4
_08031170:
	ldr r0, _08031194 @ =0x0000FFC4
	strh r0, [r2, #0xa]
	movs r1, #0x10
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	movs r0, #0x3c
_0803117C:
	strh r0, [r2, #0x10]
_0803117E:
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08031194: .4byte 0x0000FFC4

	thumb_func_start ZoroSetCrawlingOam
ZoroSetCrawlingOam: @ 0x08031198
	push {lr}
	ldr r0, _080311AC @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _080311B4
	ldr r0, _080311B0 @ =0x0833C09C
	b _080311B6
	.align 2, 0
_080311AC: .4byte gCurrentSprite
_080311B0: .4byte 0x0833C09C
_080311B4:
	ldr r0, _080311C4 @ =0x0833C034
_080311B6:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_080311C4: .4byte 0x0833C034

	thumb_func_start ZoroSetTurningOam
ZoroSetTurningOam: @ 0x080311C8
	push {lr}
	ldr r0, _080311DC @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _080311E4
	ldr r0, _080311E0 @ =0x0833C0D4
	b _080311E6
	.align 2, 0
_080311DC: .4byte gCurrentSprite
_080311E0: .4byte 0x0833C0D4
_080311E4:
	ldr r0, _080311F4 @ =0x0833C06C
_080311E6:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_080311F4: .4byte 0x0833C06C

	thumb_func_start ZoroSetTurningAroundSecondPartOam
ZoroSetTurningAroundSecondPartOam: @ 0x080311F8
	push {lr}
	ldr r0, _08031218 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _08031220
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	ldr r0, _0803121C @ =0x0833C0EC
	b _0803122A
	.align 2, 0
_08031218: .4byte gCurrentSprite
_0803121C: .4byte 0x0833C0EC
_08031220:
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
	ldr r0, _08031238 @ =0x0833C084
_0803122A:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08031238: .4byte 0x0833C084

	thumb_func_start ZoroSetDeathPosition
ZoroSetDeathPosition: @ 0x0803123C
	push {lr}
	ldr r2, _0803125C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031268
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08031260
	ldrh r0, [r2, #4]
	subs r0, #0x20
	strh r0, [r2, #4]
	b _08031280
	.align 2, 0
_0803125C: .4byte gCurrentSprite
_08031260:
	ldrh r0, [r2, #4]
	adds r0, #0x20
	strh r0, [r2, #4]
	b _08031280
_08031268:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803127A
	ldrh r0, [r2, #2]
	adds r0, #0x20
	b _0803127E
_0803127A:
	ldrh r0, [r2, #2]
	subs r0, #0x20
_0803127E:
	strh r0, [r2, #2]
_08031280:
	pop {r0}
	bx r0

	thumb_func_start ZoroInit
ZoroInit: @ 0x08031284
	push {r4, r5, r6, r7, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _080312B0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080312B4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _080312B4
	strh r0, [r2]
	b _080313F6
	.align 2, 0
_080312B0: .4byte gCurrentSprite
_080312B4:
	ldr r0, _080312CC @ =gCurrentSprite
	adds r4, r0, #0
	adds r4, #0x24
	ldrb r1, [r4]
	adds r7, r0, #0
	cmp r1, #0x59
	bne _080312D0
	movs r0, #0x5a
	strb r0, [r4]
	movs r0, #0x2c
	strh r0, [r7, #6]
	b _080313D6
	.align 2, 0
_080312CC: .4byte gCurrentSprite
_080312D0:
	bl SpriteUtilChooseRandomXDirection
	movs r0, #2
	strb r0, [r4]
	ldrh r0, [r7, #2]
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08031308 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	movs r6, #0xf0
	adds r4, r6, #0
	ands r4, r0
	cmp r4, #0
	beq _0803130C
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	ldrh r1, [r7]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080313D6
	movs r0, #0x40
	b _08031384
	.align 2, 0
_08031308: .4byte gPreviousCollisionCheck
_0803130C:
	ldrh r0, [r7, #2]
	subs r0, #0x44
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08031348
	adds r0, r7, #0
	adds r0, #0x2d
	strb r4, [r0]
	ldrh r1, [r7]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r2, #0
	orrs r1, r0
	strh r1, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x40
	strh r0, [r7, #2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080313D6
	movs r0, #0x40
	b _080313D2
_08031348:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803138A
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	subs r0, #0x20
	strh r0, [r7, #4]
	ldrh r1, [r7]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080313D6
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_08031384:
	orrs r0, r1
	strh r0, [r7]
	b _080313D6
_0803138A:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	adds r2, r6, #0
	ands r2, r0
	cmp r2, #0
	bne _080313A4
	strh r2, [r7]
	b _080313F6
_080313A4:
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r7]
	movs r0, #0x40
	movs r2, #0
	orrs r1, r0
	strh r1, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	adds r0, #0x20
	strh r0, [r7, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080313D6
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_080313D2:
	orrs r1, r0
	strh r1, [r7]
_080313D6:
	adds r1, r7, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl ZoroSetCrawlingOam
	bl ZoroSetHitboxAndDrawDistance
	ldr r2, _080313FC @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r7, #0x14]
_080313F6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080313FC: .4byte sPrimarySpriteStats

	thumb_func_start ZoroCrawlingInit
ZoroCrawlingInit: @ 0x08031400
	push {lr}
	bl ZoroSetCrawlingOam
	ldr r2, _08031424 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r2]
	ands r0, r1
	cmp r0, #0
	beq _08031420
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08031420:
	pop {r0}
	bx r0
	.align 2, 0
_08031424: .4byte gCurrentSprite

	thumb_func_start ZoroRedGetSpeed
ZoroRedGetSpeed: @ 0x08031428
	push {lr}
	ldr r2, _0803145C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	rsbs r0, r0, #0
	lsrs r3, r0, #0x1f
	ldr r0, _08031460 @ =sPrimarySpriteStats
	ldr r1, _08031464 @ =0x000004EC
	adds r0, r0, r1
	ldrh r0, [r0]
	ldrh r1, [r2, #0x14]
	lsrs r0, r0, #1
	cmp r1, r0
	bhs _080314D0
	ldrh r0, [r2, #0x16]
	cmp r0, #5
	bhi _080314C0
	lsls r0, r0, #2
	ldr r1, _08031468 @ =_0803146C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803145C: .4byte gCurrentSprite
_08031460: .4byte sPrimarySpriteStats
_08031464: .4byte 0x000004EC
_08031468: .4byte _0803146C
_0803146C: @ jump table
	.4byte _080314AC @ case 0
	.4byte _08031484 @ case 1
	.4byte _08031484 @ case 2
	.4byte _0803148C @ case 3
	.4byte _08031488 @ case 4
	.4byte _08031488 @ case 5
_08031484:
	movs r1, #1
	b _080314C4
_08031488:
	movs r1, #2
	b _080314C4
_0803148C:
	ldr r0, _080314A4 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _0803149E
	cmp r3, #0
	beq _0803149E
	ldr r0, _080314A8 @ =0x00000169
	bl CheckPlayNotAlreadyPlayingSound
_0803149E:
	movs r1, #4
	b _080314C2
	.align 2, 0
_080314A4: .4byte gCurrentSprite
_080314A8: .4byte 0x00000169
_080314AC:
	ldr r0, _080314CC @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _080314C0
	cmp r3, #0
	beq _080314C0
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080314C0:
	movs r1, #0
_080314C2:
	ldr r2, _080314CC @ =gCurrentSprite
_080314C4:
	ldrb r0, [r2, #0x1c]
	adds r0, #1
	strb r0, [r2, #0x1c]
	b _0803152C
	.align 2, 0
_080314CC: .4byte gCurrentSprite
_080314D0:
	ldrh r0, [r2, #0x16]
	cmp r0, #5
	bhi _0803152A
	lsls r0, r0, #2
	ldr r1, _080314E0 @ =_080314E4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080314E0: .4byte _080314E4
_080314E4: @ jump table
	.4byte _08031518 @ case 0
	.4byte _080314FC @ case 1
	.4byte _080314FC @ case 2
	.4byte _08031500 @ case 3
	.4byte _080314FC @ case 4
	.4byte _080314FC @ case 5
_080314FC:
	movs r1, #1
	b _0803152C
_08031500:
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _08031510
	cmp r3, #0
	beq _08031510
	ldr r0, _08031514 @ =0x00000169
	bl CheckPlayNotAlreadyPlayingSound
_08031510:
	movs r1, #2
	b _0803152C
	.align 2, 0
_08031514: .4byte 0x00000169
_08031518:
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _0803152A
	cmp r3, #0
	beq _0803152A
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803152A:
	movs r1, #0
_0803152C:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ZoroBlueGetSpeed
ZoroBlueGetSpeed: @ 0x08031534
	push {r4, r5, r6, r7, lr}
	ldr r4, _08031574 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	rsbs r0, r0, #0
	lsrs r6, r0, #0x1f
	ldr r0, _08031578 @ =sPrimarySpriteStats
	ldr r1, _0803157C @ =0x0000056A
	adds r0, r0, r1
	ldrh r5, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	ldrh r1, [r4, #0x14]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r7, r4, #0
	cmp r1, r0
	bhs _080315E8
	ldrh r0, [r7, #0x16]
	cmp r0, #5
	bhi _080315D8
	lsls r0, r0, #2
	ldr r1, _08031580 @ =_08031584
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08031574: .4byte gCurrentSprite
_08031578: .4byte sPrimarySpriteStats
_0803157C: .4byte 0x0000056A
_08031580: .4byte _08031584
_08031584: @ jump table
	.4byte _080315C4 @ case 0
	.4byte _0803159C @ case 1
	.4byte _0803159C @ case 2
	.4byte _080315A4 @ case 3
	.4byte _080315A0 @ case 4
	.4byte _080315A0 @ case 5
_0803159C:
	movs r1, #2
	b _080315DC
_080315A0:
	movs r1, #4
	b _080315DC
_080315A4:
	ldr r0, _080315BC @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _080315B6
	cmp r6, #0
	beq _080315B6
	ldr r0, _080315C0 @ =0x00000169
	bl CheckPlayNotAlreadyPlayingSound
_080315B6:
	movs r1, #6
	b _080315DA
	.align 2, 0
_080315BC: .4byte gCurrentSprite
_080315C0: .4byte 0x00000169
_080315C4:
	ldr r0, _080315E4 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _080315D8
	cmp r6, #0
	beq _080315D8
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080315D8:
	movs r1, #0
_080315DA:
	ldr r7, _080315E4 @ =gCurrentSprite
_080315DC:
	ldrb r0, [r7, #0x1c]
	adds r0, #2
	strb r0, [r7, #0x1c]
	b _080316CC
	.align 2, 0
_080315E4: .4byte gCurrentSprite
_080315E8:
	ldrh r4, [r7, #0x14]
	lsls r0, r5, #1
	movs r1, #3
	bl __divsi3
	cmp r4, r0
	bge _08031670
	ldrh r0, [r7, #0x16]
	cmp r0, #5
	bhi _08031660
	lsls r0, r0, #2
	ldr r1, _08031608 @ =_0803160C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08031608: .4byte _0803160C
_0803160C: @ jump table
	.4byte _0803164C @ case 0
	.4byte _08031624 @ case 1
	.4byte _08031624 @ case 2
	.4byte _0803162C @ case 3
	.4byte _08031628 @ case 4
	.4byte _08031628 @ case 5
_08031624:
	movs r1, #1
	b _08031664
_08031628:
	movs r1, #2
	b _08031664
_0803162C:
	ldr r0, _08031644 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _0803163E
	cmp r6, #0
	beq _0803163E
	ldr r0, _08031648 @ =0x00000169
	bl CheckPlayNotAlreadyPlayingSound
_0803163E:
	movs r1, #4
	b _08031662
	.align 2, 0
_08031644: .4byte gCurrentSprite
_08031648: .4byte 0x00000169
_0803164C:
	ldr r0, _0803166C @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _08031660
	cmp r6, #0
	beq _08031660
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08031660:
	movs r1, #0
_08031662:
	ldr r7, _0803166C @ =gCurrentSprite
_08031664:
	ldrb r0, [r7, #0x1c]
	adds r0, #1
	strb r0, [r7, #0x1c]
	b _080316CC
	.align 2, 0
_0803166C: .4byte gCurrentSprite
_08031670:
	ldrh r0, [r7, #0x16]
	cmp r0, #5
	bhi _080316CA
	lsls r0, r0, #2
	ldr r1, _08031680 @ =_08031684
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08031680: .4byte _08031684
_08031684: @ jump table
	.4byte _080316B8 @ case 0
	.4byte _0803169C @ case 1
	.4byte _0803169C @ case 2
	.4byte _080316A0 @ case 3
	.4byte _0803169C @ case 4
	.4byte _0803169C @ case 5
_0803169C:
	movs r1, #1
	b _080316CC
_080316A0:
	ldrb r0, [r7, #0x1c]
	cmp r0, #1
	bne _080316B0
	cmp r6, #0
	beq _080316B0
	ldr r0, _080316B4 @ =0x00000169
	bl CheckPlayNotAlreadyPlayingSound
_080316B0:
	movs r1, #2
	b _080316CC
	.align 2, 0
_080316B4: .4byte 0x00000169
_080316B8:
	ldrb r0, [r7, #0x1c]
	cmp r0, #1
	bne _080316CA
	cmp r6, #0
	beq _080316CA
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080316CA:
	movs r1, #0
_080316CC:
	adds r0, r1, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start ZoroCrawl
ZoroCrawl: @ 0x080316D4
	push {r4, r5, r6, r7, lr}
	ldr r0, _080316E4 @ =gCurrentSprite
	ldrb r0, [r0, #0x1d]
	cmp r0, #0x63
	bne _080316E8
	bl ZoroBlueGetSpeed
	b _080316EC
	.align 2, 0
_080316E4: .4byte gCurrentSprite
_080316E8:
	bl ZoroRedGetSpeed
_080316EC:
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	bl ZoroCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031708
	ldr r0, _08031704 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _080318FA
	.align 2, 0
_08031704: .4byte gCurrentSprite
_08031708:
	ldr r4, _0803174C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031800
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803177C
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08031754
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08031750 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08031740
	b _080318F4
_08031740:
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #4
	b _080317A6
	.align 2, 0
_0803174C: .4byte gCurrentSprite
_08031750: .4byte gPreviousCollisionCheck
_08031754:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08031778 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803176C
	b _080318F4
_0803176C:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #4
	b _080317E4
	.align 2, 0
_08031778: .4byte gPreviousCollisionCheck
_0803177C:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080317C4
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _080317C0 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _080317A0
	b _080318F4
_080317A0:
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
_080317A6:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080317B6
	b _080318F4
_080317B6:
	ldrh r0, [r4, #2]
	adds r0, r5, r0
	strh r0, [r4, #2]
	b _080318EE
	.align 2, 0
_080317C0: .4byte gPreviousCollisionCheck
_080317C4:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _080317FC @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _080317DE
	b _080318F4
_080317DE:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
_080317E4:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080317F4
	b _080318F4
_080317F4:
	ldrh r0, [r4, #2]
	subs r0, r0, r5
	strh r0, [r4, #2]
	b _080318EE
	.align 2, 0
_080317FC: .4byte gPreviousCollisionCheck
_08031800:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803187C
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803184C
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08031848 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r7, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080318F4
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _080318F4
	ldrh r0, [r4, #4]
	adds r0, r5, r0
	b _080318EC
	.align 2, 0
_08031848: .4byte gPreviousCollisionCheck
_0803184C:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08031878 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r7, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080318F4
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	b _080318E2
	.align 2, 0
_08031878: .4byte gPreviousCollisionCheck
_0803187C:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080318BC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _080318B8 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _080318F4
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _080318F4
	ldrh r0, [r4, #4]
	adds r0, r5, r0
	b _080318EC
	.align 2, 0
_080318B8: .4byte gPreviousCollisionCheck
_080318BC:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08031904 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _080318F4
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
_080318E2:
	ands r0, r1
	cmp r0, #0
	bne _080318F4
	ldrh r0, [r4, #4]
	subs r0, r0, r5
_080318EC:
	strh r0, [r4, #4]
_080318EE:
	movs r0, #0
	cmp r0, #0
	beq _080318FC
_080318F4:
	ldr r0, _08031908 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
_080318FA:
	strb r1, [r0]
_080318FC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08031904: .4byte gPreviousCollisionCheck
_08031908: .4byte gCurrentSprite

	thumb_func_start ZoroTurningInit
ZoroTurningInit: @ 0x0803190C
	push {lr}
	ldr r0, _08031920 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #4
	strb r1, [r0]
	bl ZoroSetTurningOam
	pop {r0}
	bx r0
	.align 2, 0
_08031920: .4byte gCurrentSprite

	thumb_func_start ZoroTurningAround
ZoroTurningAround: @ 0x08031924
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803193A
	ldr r0, _08031940 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #5
	strb r1, [r0]
	bl ZoroSetTurningAroundSecondPartOam
_0803193A:
	pop {r0}
	bx r0
	.align 2, 0
_08031940: .4byte gCurrentSprite

	thumb_func_start ZoroTurningAroundSecondPart
ZoroTurningAroundSecondPart: @ 0x08031944
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08031956
	ldr r0, _0803195C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_08031956:
	pop {r0}
	bx r0
	.align 2, 0
_0803195C: .4byte gCurrentSprite

	thumb_func_start ZoroFallingInit
ZoroFallingInit: @ 0x08031960
	push {lr}
	ldr r1, _0803197C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bl ZoroSetCrawlingOam
	pop {r0}
	bx r0
	.align 2, 0
_0803197C: .4byte gCurrentSprite

	thumb_func_start ZoroFalling
ZoroFalling: @ 0x08031980
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _080319A8 @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _080319AC
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080319B8
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _080319B8
	.align 2, 0
_080319A8: .4byte gCurrentSprite
_080319AC:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080319C0
_080319B8:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_080319C0:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08031A0C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031A34
	ldr r4, _08031A10 @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _080319E6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080319E6:
	ldrh r0, [r4]
	ldr r1, _08031A14 @ =0x0000FEFF
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strb r0, [r2]
	bl ZoroSetHitboxAndDrawDistance
	cmp r5, #0
	beq _08031A20
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08031A18
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _08031A1C
	.align 2, 0
_08031A0C: .4byte gPreviousVerticalCollisionCheck
_08031A10: .4byte gCurrentSprite
_08031A14: .4byte 0x0000FEFF
_08031A18:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_08031A1C:
	subs r0, r0, r1
	strh r0, [r4, #4]
_08031A20:
	ldr r0, _08031A30 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bl ZoroSetCrawlingOam
	b _08031A78
	.align 2, 0
_08031A30: .4byte gCurrentSprite
_08031A34:
	ldr r3, _08031A60 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08031A64 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08031A68 @ =0x00007FFF
	cmp r1, r0
	bne _08031A6C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08031A76
	.align 2, 0
_08031A60: .4byte gCurrentSprite
_08031A64: .4byte sSpritesFallingSpeed
_08031A68: .4byte 0x00007FFF
_08031A6C:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_08031A76:
	strh r0, [r3, #2]
_08031A78:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Zoro
Zoro: @ 0x08031A80
	push {lr}
	ldr r1, _08031AA0 @ =gCurrentSprite
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x63
	bne _08031AA8
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08031ABC
	ldr r0, _08031AA4 @ =0x000001A5
	bl CheckPlayNotAlreadyPlayingSound
	b _08031ABC
	.align 2, 0
_08031AA0: .4byte gCurrentSprite
_08031AA4: .4byte 0x000001A5
_08031AA8:
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08031ABC
	ldr r0, _08031AD0 @ =0x00000167
	bl CheckPlayNotAlreadyPlayingSound
_08031ABC:
	ldr r1, _08031AD4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031AD8
	bl SpriteUpdateFreezeTimer
	b _08031CAA
	.align 2, 0
_08031AD0: .4byte 0x00000167
_08031AD4: .4byte gCurrentSprite
_08031AD8:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08031AE4
	b _08031CAA
_08031AE4:
	lsls r0, r0, #2
	ldr r1, _08031AF0 @ =_08031AF4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08031AF0: .4byte _08031AF4
_08031AF4: @ jump table
	.4byte _08031C64 @ case 0
	.4byte _08031C6A @ case 1
	.4byte _08031C6E @ case 2
	.4byte _08031C74 @ case 3
	.4byte _08031C78 @ case 4
	.4byte _08031C7E @ case 5
	.4byte _08031CAA @ case 6
	.4byte _08031CAA @ case 7
	.4byte _08031CAA @ case 8
	.4byte _08031CAA @ case 9
	.4byte _08031CAA @ case 10
	.4byte _08031CAA @ case 11
	.4byte _08031CAA @ case 12
	.4byte _08031CAA @ case 13
	.4byte _08031CAA @ case 14
	.4byte _08031CAA @ case 15
	.4byte _08031CAA @ case 16
	.4byte _08031CAA @ case 17
	.4byte _08031CAA @ case 18
	.4byte _08031CAA @ case 19
	.4byte _08031CAA @ case 20
	.4byte _08031C84 @ case 21
	.4byte _08031C88 @ case 22
	.4byte _08031CAA @ case 23
	.4byte _08031CAA @ case 24
	.4byte _08031CAA @ case 25
	.4byte _08031CAA @ case 26
	.4byte _08031CAA @ case 27
	.4byte _08031CAA @ case 28
	.4byte _08031CAA @ case 29
	.4byte _08031CAA @ case 30
	.4byte _08031CAA @ case 31
	.4byte _08031CAA @ case 32
	.4byte _08031CAA @ case 33
	.4byte _08031CAA @ case 34
	.4byte _08031CAA @ case 35
	.4byte _08031CAA @ case 36
	.4byte _08031CAA @ case 37
	.4byte _08031CAA @ case 38
	.4byte _08031CAA @ case 39
	.4byte _08031CAA @ case 40
	.4byte _08031CAA @ case 41
	.4byte _08031CAA @ case 42
	.4byte _08031CAA @ case 43
	.4byte _08031CAA @ case 44
	.4byte _08031CAA @ case 45
	.4byte _08031CAA @ case 46
	.4byte _08031CAA @ case 47
	.4byte _08031CAA @ case 48
	.4byte _08031CAA @ case 49
	.4byte _08031CAA @ case 50
	.4byte _08031CAA @ case 51
	.4byte _08031CAA @ case 52
	.4byte _08031CAA @ case 53
	.4byte _08031CAA @ case 54
	.4byte _08031CAA @ case 55
	.4byte _08031CAA @ case 56
	.4byte _08031CAA @ case 57
	.4byte _08031CAA @ case 58
	.4byte _08031CAA @ case 59
	.4byte _08031CAA @ case 60
	.4byte _08031CAA @ case 61
	.4byte _08031CAA @ case 62
	.4byte _08031CAA @ case 63
	.4byte _08031CAA @ case 64
	.4byte _08031CAA @ case 65
	.4byte _08031CAA @ case 66
	.4byte _08031CAA @ case 67
	.4byte _08031CAA @ case 68
	.4byte _08031CAA @ case 69
	.4byte _08031CAA @ case 70
	.4byte _08031CAA @ case 71
	.4byte _08031CAA @ case 72
	.4byte _08031CAA @ case 73
	.4byte _08031CAA @ case 74
	.4byte _08031CAA @ case 75
	.4byte _08031CAA @ case 76
	.4byte _08031CAA @ case 77
	.4byte _08031CAA @ case 78
	.4byte _08031CAA @ case 79
	.4byte _08031CAA @ case 80
	.4byte _08031CAA @ case 81
	.4byte _08031CAA @ case 82
	.4byte _08031CAA @ case 83
	.4byte _08031CAA @ case 84
	.4byte _08031CAA @ case 85
	.4byte _08031CAA @ case 86
	.4byte _08031C8E @ case 87
	.4byte _08031C92 @ case 88
	.4byte _08031C98 @ case 89
	.4byte _08031C9C @ case 90
	.4byte _08031CA2 @ case 91
_08031C64:
	bl ZoroInit
	b _08031CAA
_08031C6A:
	bl ZoroCrawlingInit
_08031C6E:
	bl ZoroCrawl
	b _08031CAA
_08031C74:
	bl ZoroTurningInit
_08031C78:
	bl ZoroTurningAround
	b _08031CAA
_08031C7E:
	bl ZoroTurningAroundSecondPart
	b _08031CAA
_08031C84:
	bl ZoroFallingInit
_08031C88:
	bl ZoroFalling
	b _08031CAA
_08031C8E:
	bl SpriteDyingInit
_08031C92:
	bl SpriteDying
	b _08031CAA
_08031C98:
	bl ZoroInit
_08031C9C:
	bl SpriteSpawningFromX
	b _08031CAA
_08031CA2:
	bl ZoroSetDeathPosition
	bl XParasiteInit
_08031CAA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterGroundCheckInSpittingrange
KihunterGroundCheckInSpittingrange: @ 0x08031CB0
	push {r4, r5, lr}
	movs r5, #0
	ldr r4, _08031CC8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _08031CCC
	movs r0, #0
	b _08031CFE
	.align 2, 0
_08031CC8: .4byte gCurrentSprite
_08031CCC:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08031CFC
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08031CFC
	movs r1, #0xb4
	lsls r1, r1, #1
	movs r0, #0x78
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08031CF6
	cmp r2, #8
	bne _08031CFC
	b _08031CFA
_08031CF6:
	cmp r2, #4
	bne _08031CFC
_08031CFA:
	movs r5, #1
_08031CFC:
	adds r0, r5, #0
_08031CFE:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start KihunterGroundDetectSamus
KihunterGroundDetectSamus: @ 0x08031D04
	push {r4, r5, lr}
	movs r5, #0
	ldr r4, _08031D1C @ =gCurrentSprite
	ldrh r2, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _08031D20
	movs r0, #0
	b _08031DB0
	.align 2, 0
_08031D1C: .4byte gCurrentSprite
_08031D20:
	movs r3, #0xf0
	movs r1, #0xfa
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r2
	cmp r0, #0
	beq _08031D3A
	adds r1, #0xc8
	adds r3, #0xc8
	ldr r0, _08031D60 @ =0x0000FBFF
	ands r0, r2
	strh r0, [r4]
_08031D3A:
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08031DAE
	adds r0, r3, #0
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08031D72
	cmp r2, #8
	bne _08031D64
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	adds r1, #0x48
	b _08031D7E
	.align 2, 0
_08031D60: .4byte 0x0000FBFF
_08031D64:
	cmp r2, #4
	bne _08031DAE
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	subs r1, #0x48
	b _08031DA0
_08031D72:
	cmp r2, #4
	bne _08031D94
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	subs r1, #0x48
_08031D7E:
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08031D90 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08031DAE
	movs r5, #1
	b _08031DAE
	.align 2, 0
_08031D90: .4byte gPreviousCollisionCheck
_08031D94:
	cmp r2, #8
	bne _08031DAE
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	adds r1, #0x48
_08031DA0:
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08031DB8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08031DAE
	movs r5, #2
_08031DAE:
	adds r0, r5, #0
_08031DB0:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08031DB8: .4byte gPreviousCollisionCheck

	thumb_func_start KihunterTurningIntoX
KihunterTurningIntoX: @ 0x08031DBC
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _08031E00 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08031E04
	ldrb r1, [r4, #0x1d]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x1c
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x18
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x18
	b _08031E32
	.align 2, 0
_08031E00: .4byte gCurrentSprite
_08031E04:
	ldrb r1, [r4, #0x1d]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x1c
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0x18
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x18
_08031E32:
	strh r0, [r4, #4]
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start KihunterGroundInit
KihunterGroundInit: @ 0x08031E3C
	push {r4, lr}
	bl TrySetAbsorbXFlag
	ldr r4, _08031E60 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08031E64
	movs r0, #0
	strh r0, [r4]
	b _08031EDC
	.align 2, 0
_08031E60: .4byte gCurrentSprite
_08031E64:
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _08031ECC @ =0x0000FFA0
	strh r0, [r4, #0xa]
	strh r2, [r4, #0xc]
	adds r0, #0x38
	strh r0, [r4, #0xe]
	movs r0, #0x28
	strh r0, [r4, #0x10]
	ldr r0, _08031ED0 @ =0x0833E5B4
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _08031EAC
	ldr r2, _08031ED4 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
_08031EAC:
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	bl MakeSpriteFaceSamusXFlip
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08031ED8
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _08031EDC
	.align 2, 0
_08031ECC: .4byte 0x0000FFA0
_08031ED0: .4byte 0x0833E5B4
_08031ED4: .4byte sPrimarySpriteStats
_08031ED8:
	movs r0, #1
	strb r0, [r1]
_08031EDC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterGroundJumpWarningInit
KihunterGroundJumpWarningInit: @ 0x08031EE4
	push {lr}
	ldr r3, _08031F1C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, _08031F20 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08031F28
	adds r0, r3, #0
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	ldr r0, _08031F24 @ =0x0833E554
	b _08031F30
	.align 2, 0
_08031F1C: .4byte gCurrentSprite
_08031F20: .4byte gSpriteRandomNumber
_08031F24: .4byte 0x0833E554
_08031F28:
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	ldr r0, _08031F38 @ =0x0833E57C
_08031F30:
	str r0, [r3, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_08031F38: .4byte 0x0833E57C

	thumb_func_start KihhunterGroundJumpInit
KihhunterGroundJumpInit: @ 0x08031F3C
	push {lr}
	ldr r3, _08031F68 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r0, #0
	strh r2, [r3, #0x16]
	adds r1, #0xd
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _08031F70
	ldrh r0, [r3, #2]
	subs r0, #0x30
	strh r0, [r3, #2]
	ldr r0, _08031F6C @ =0x0833E70C
	b _08031F78
	.align 2, 0
_08031F68: .4byte gCurrentSprite
_08031F6C: .4byte 0x0833E70C
_08031F70:
	ldrh r0, [r3, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	ldr r0, _08031F84 @ =0x0833E6FC
_08031F78:
	str r0, [r3, #0x18]
	ldr r0, _08031F88 @ =0x00000175
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_08031F84: .4byte 0x0833E6FC
_08031F88: .4byte 0x00000175

	thumb_func_start KihunterGroundLandingInit
KihunterGroundLandingInit: @ 0x08031F8C
	ldr r1, _08031FA4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _08031FA8 @ =0x0833E5A4
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_08031FA4: .4byte gCurrentSprite
_08031FA8: .4byte 0x0833E5A4

	thumb_func_start KihunterIdleInit
KihunterIdleInit: @ 0x08031FAC
	ldr r1, _08031FC4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #8
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _08031FC8 @ =0x0833E5B4
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_08031FC4: .4byte gCurrentSprite
_08031FC8: .4byte 0x0833E5B4

	thumb_func_start KihunterFallingInit
KihunterFallingInit: @ 0x08031FCC
	ldr r3, _08031FE8 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	ldr r0, _08031FEC @ =0x0833E70C
	str r0, [r3, #0x18]
	bx lr
	.align 2, 0
_08031FE8: .4byte gCurrentSprite
_08031FEC: .4byte 0x0833E70C

	thumb_func_start KihunterGroundTurningAroundInit
KihunterGroundTurningAroundInit: @ 0x08031FF0
	ldr r3, _0803200C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #4
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r0, #0
	strh r2, [r3, #0x16]
	adds r1, #0xb
	strb r0, [r1]
	ldr r0, _08032010 @ =0x0833E5EC
	str r0, [r3, #0x18]
	bx lr
	.align 2, 0
_0803200C: .4byte gCurrentSprite
_08032010: .4byte 0x0833E5EC

	thumb_func_start KihunterGroundSpittingInit
KihunterGroundSpittingInit: @ 0x08032014
	push {lr}
	ldr r3, _08032040 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r1]
	ldr r0, _08032044 @ =0x0833E684
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _08032048 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0803204C
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	b _08032054
	.align 2, 0
_08032040: .4byte gCurrentSprite
_08032044: .4byte 0x0833E684
_08032048: .4byte gSpriteRandomNumber
_0803204C:
	adds r1, r3, #0
	adds r1, #0x30
	movs r0, #2
	strb r0, [r1]
_08032054:
	pop {r0}
	bx r0

	thumb_func_start kihunterGroundJumpWarning
kihunterGroundJumpWarning: @ 0x08032058
	push {r4, r5, lr}
	ldr r4, _0803208C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08032090 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08032094
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08032094
	bl KihunterFallingInit
	b _080320A0
	.align 2, 0
_0803208C: .4byte gCurrentSprite
_08032090: .4byte gPreviousCollisionCheck
_08032094:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080320A0
	bl KihhunterGroundJumpInit
_080320A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterGroundJumping
KihunterGroundJumping: @ 0x080320A8
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r2, _080320BC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _080320C4
	ldr r1, _080320C0 @ =0x0833C266
	b _080320C6
	.align 2, 0
_080320BC: .4byte gCurrentSprite
_080320C0: .4byte 0x0833C266
_080320C4:
	ldr r1, _08032108 @ =0x0833C252
_080320C6:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r4, _0803210C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803211A
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08032110 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08032114
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	subs r0, #4
	b _08032148
	.align 2, 0
_08032108: .4byte 0x0833C252
_0803210C: .4byte gCurrentSprite
_08032110: .4byte gPreviousCollisionCheck
_08032114:
	ldrh r0, [r4, #4]
	adds r0, #2
	b _08032148
_0803211A:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08032140 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08032144
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldrh r0, [r4, #4]
	adds r0, #4
	b _08032148
	.align 2, 0
_08032140: .4byte gPreviousCollisionCheck
_08032144:
	ldrh r0, [r4, #4]
	subs r0, #2
_08032148:
	strh r0, [r4, #4]
	ldr r4, _08032180 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0x26
	bhi _08032160
	adds r0, #1
	strb r0, [r1]
_08032160:
	lsls r0, r5, #0x10
	cmp r0, #0
	ble _080321CC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _08032184 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _08032188
	strh r1, [r4, #2]
	bl KihunterGroundLandingInit
	b _0803222E
	.align 2, 0
_08032180: .4byte gCurrentSprite
_08032184: .4byte gPreviousVerticalCollisionCheck
_08032188:
	cmp r6, #0
	bne _0803222E
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _080321BE
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _080321BA
	movs r6, #1
_080321BA:
	cmp r6, #0
	beq _0803222E
_080321BE:
	ldr r0, _080321C8 @ =gCurrentSprite
	strh r1, [r0, #2]
	bl KihunterGroundLandingInit
	b _0803222E
	.align 2, 0
_080321C8: .4byte gCurrentSprite
_080321CC:
	movs r6, #0
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803221C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803220A
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _08032206
	movs r6, #1
_08032206:
	cmp r6, #0
	beq _0803222E
_0803220A:
	ldr r2, _08032220 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032224
	ldrh r0, [r2, #4]
	subs r0, #4
	b _08032228
	.align 2, 0
_0803221C: .4byte gPreviousCollisionCheck
_08032220: .4byte gCurrentSprite
_08032224:
	ldrh r0, [r2, #4]
	adds r0, #4
_08032228:
	strh r0, [r2, #4]
	bl KihunterFallingInit
_0803222E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start KihunterGroundLanding
KihunterGroundLanding: @ 0x08032234
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08032284
	bl KihunterGroundCheckInSpittingrange
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803224E
	bl KihunterGroundSpittingInit
	b _08032284
_0803224E:
	bl KihunterGroundDetectSamus
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08032260
	bl KihhunterGroundJumpInit
	b _08032284
_08032260:
	cmp r0, #2
	bne _0803226A
	bl KihunterGroundTurningAroundInit
	b _08032284
_0803226A:
	ldr r0, _0803227C @ =gCurrentSprite
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #2
	bls _08032280
	bl KihunterIdleInit
	b _08032284
	.align 2, 0
_0803227C: .4byte gCurrentSprite
_08032280:
	bl KihunterGroundJumpWarningInit
_08032284:
	pop {r0}
	bx r0

	thumb_func_start KihunterGroundFalling
KihunterGroundFalling: @ 0x08032288
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r4, _080322DC @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _080322E0 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _080322D2
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _080322D2
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _080322CE
	movs r6, #1
_080322CE:
	cmp r6, #0
	beq _080322E4
_080322D2:
	ldr r0, _080322DC @ =gCurrentSprite
	strh r1, [r0, #2]
	bl KihunterGroundLandingInit
	b _08032324
	.align 2, 0
_080322DC: .4byte gCurrentSprite
_080322E0: .4byte gPreviousVerticalCollisionCheck
_080322E4:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08032310 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08032314 @ =0x00007FFF
	cmp r1, r0
	bne _08032318
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _08032324
	.align 2, 0
_08032310: .4byte sSpritesFallingSpeed
_08032314: .4byte 0x00007FFF
_08032318:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_08032324:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterGroundIdle
KihunterGroundIdle: @ 0x0803232C
	push {r4, r5, lr}
	ldr r4, _08032360 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08032364 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08032368
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r4, [r4, #4]
	adds r1, r1, r4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08032368
	bl KihunterFallingInit
	b _080323A0
	.align 2, 0
_08032360: .4byte gCurrentSprite
_08032364: .4byte gPreviousCollisionCheck
_08032368:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080323A0
	bl KihunterGroundDetectSamus
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08032382
	bl KihunterGroundJumpWarningInit
	b _080323A0
_08032382:
	cmp r0, #2
	beq _08032390
	ldr r0, _08032398 @ =gCurrentSprite
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #2
	bls _0803239C
_08032390:
	bl KihunterGroundTurningAroundInit
	b _080323A0
	.align 2, 0
_08032398: .4byte gCurrentSprite
_0803239C:
	bl KihunterGroundJumpWarningInit
_080323A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterGroundTurningAround
KihunterGroundTurningAround: @ 0x080323A8
	push {r4, lr}
	ldr r4, _080323E4 @ =gCurrentSprite
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	beq _080323B8
	ldrh r0, [r4, #2]
	subs r0, #4
	strh r0, [r4, #2]
_080323B8:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080323DC
	ldrh r1, [r4]
	movs r0, #0x40
	eors r1, r0
	movs r2, #0
	movs r3, #0
	strh r1, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #5
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r0, _080323E8 @ =0x0833E604
	str r0, [r4, #0x18]
_080323DC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080323E4: .4byte gCurrentSprite
_080323E8: .4byte 0x0833E604

	thumb_func_start KihunterGroundTurningAroundSecondPart
KihunterGroundTurningAroundSecondPart: @ 0x080323EC
	push {r4, lr}
	ldr r4, _08032428 @ =gCurrentSprite
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	beq _080323FC
	ldrh r0, [r4, #2]
	adds r0, #4
	strh r0, [r4, #2]
_080323FC:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032430
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	adds r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803242C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08032450
	ldrh r0, [r4, #4]
	subs r0, #4
	b _0803244E
	.align 2, 0
_08032428: .4byte gCurrentSprite
_0803242C: .4byte gPreviousCollisionCheck
_08032430:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08032464 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08032450
	ldrh r0, [r4, #4]
	adds r0, #4
_0803244E:
	strh r0, [r4, #4]
_08032450:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803245C
	bl KihunterIdleInit
_0803245C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08032464: .4byte gPreviousCollisionCheck

	thumb_func_start KihunterGroundSpitting
KihunterGroundSpitting: @ 0x08032468
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r0, _080324B0 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #0x16]
	cmp r0, #0xb
	bne _080324DC
	mov r1, ip
	ldrb r0, [r1, #0x1c]
	cmp r0, #3
	bne _080324DC
	ldrh r1, [r1]
	movs r5, #0x40
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _080324B4
	mov r4, ip
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x58
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x60
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x11
	bl SpriteSpawnSecondary
	b _080324D4
	.align 2, 0
_080324B0: .4byte gCurrentSprite
_080324B4:
	mov r5, ip
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	subs r0, #0x58
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x60
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x11
	bl SpriteSpawnSecondary
_080324D4:
	movs r0, #0xbc
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080324DC:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080324F8
	ldr r1, _08032500 @ =gCurrentSprite
	adds r1, #0x30
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080324F8
	bl KihunterGroundJumpWarningInit
_080324F8:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08032500: .4byte gCurrentSprite

	thumb_func_start KihunterFlyingXMovement
KihunterFlyingXMovement: @ 0x08032504
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r6, r5, #0
	ldr r4, _08032534 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803253C
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08032538 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08032550
	ldrh r0, [r4, #4]
	adds r0, r5, r0
	b _0803255C
	.align 2, 0
_08032534: .4byte gCurrentSprite
_08032538: .4byte gPreviousCollisionCheck
_0803253C:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08032554 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08032558
_08032550:
	movs r0, #1
	b _08032560
	.align 2, 0
_08032554: .4byte gPreviousCollisionCheck
_08032558:
	ldrh r0, [r4, #4]
	subs r0, r0, r6
_0803255C:
	strh r0, [r4, #4]
	movs r0, #0
_08032560:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start KihunterFlyingInit
KihunterFlyingInit: @ 0x08032568
	push {r4, r5, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r4, _0803258C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08032590
	movs r0, #0
	strh r0, [r4]
	b _08032646
	.align 2, 0
_0803258C: .4byte gCurrentSprite
_08032590:
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _080325FC @ =0x0000FFA0
	strh r0, [r4, #0xa]
	strh r2, [r4, #0xc]
	adds r0, #0x38
	strh r0, [r4, #0xe]
	movs r0, #0x28
	strh r0, [r4, #0x10]
	ldr r0, _08032600 @ =0x0833E454
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	ldr r2, _08032604 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	bl MakeSpriteFaceSamusXFlip
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803260C
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	ldrh r1, [r4]
	ldr r0, _08032608 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	b _08032610
	.align 2, 0
_080325FC: .4byte 0x0000FFA0
_08032600: .4byte 0x0833E454
_08032604: .4byte sPrimarySpriteStats
_08032608: .4byte 0x0000FFFB
_0803260C:
	movs r0, #1
	strb r0, [r1]
_08032610:
	ldr r5, _08032650 @ =gCurrentSprite
	ldrh r0, [r5, #2]
	strh r0, [r5, #8]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	ldrh r4, [r5]
	movs r0, #0x40
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #8]
	movs r0, #0x10
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _08032646
	movs r0, #0
	strh r0, [r5]
_08032646:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08032650: .4byte gCurrentSprite

	thumb_func_start KihunterFlyingIdleInit
KihunterFlyingIdleInit: @ 0x08032654
	ldr r3, _08032678 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	ldr r0, _0803267C @ =0x0833E454
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_08032678: .4byte gCurrentSprite
_0803267C: .4byte 0x0833E454

	thumb_func_start KihunterFlyingTurningAroundInit
KihunterFlyingTurningAroundInit: @ 0x08032680
	ldr r1, _08032698 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #4
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803269C @ =0x0833E5EC
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_08032698: .4byte gCurrentSprite
_0803269C: .4byte 0x0833E5EC

	thumb_func_start KihunterFlyingIdle
KihunterFlyingIdle: @ 0x080326A0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r3, _080326D8 @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _080326DC @ =0x0833C27A
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _080326E0 @ =0x00007FFF
	cmp r1, r0
	bne _080326C4
	ldrh r4, [r5]
	movs r2, #0
_080326C4:
	adds r0, r2, #1
	strb r0, [r6]
	lsls r0, r4, #0x10
	cmp r0, #0
	ble _080326E4
	ldrh r0, [r3, #2]
	ldrh r1, [r3, #4]
	bl SpriteUtilCheckCollisionAtPosition
	b _080326EE
	.align 2, 0
_080326D8: .4byte gCurrentSprite
_080326DC: .4byte 0x0833C27A
_080326E0: .4byte 0x00007FFF
_080326E4:
	ldrh r0, [r3, #2]
	subs r0, #0x60
	ldrh r1, [r3, #4]
	bl SpriteUtilCheckCollisionAtPosition
_080326EE:
	ldr r0, _08032714 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _080326FE
	ldr r1, _08032718 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	adds r0, r0, r4
	strh r0, [r1, #2]
_080326FE:
	movs r0, #2
	bl KihunterFlyingXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803271C
	ldr r0, _08032718 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
	strb r1, [r0]
	b _080327A8
	.align 2, 0
_08032714: .4byte gPreviousCollisionCheck
_08032718: .4byte gCurrentSprite
_0803271C:
	ldr r6, _08032780 @ =gCurrentSprite
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x2f
	bne _080327A8
	movs r0, #0x2e
	adds r0, r0, r6
	mov r8, r0
	ldrb r0, [r0]
	adds r0, #1
	mov r1, r8
	strb r0, [r1]
	ldr r7, _08032784 @ =gSamusData
	ldrh r5, [r7, #0x18]
	ldrh r4, [r6, #2]
	subs r4, #0x60
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #0xf0
	lsls r1, r1, #2
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r5, r4
	bhs _08032758
	movs r0, #0
_08032758:
	cmp r0, #0
	beq _080327A8
	ldrh r1, [r6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032788
	ldrh r0, [r6, #4]
	ldrh r7, [r7, #0x16]
	cmp r0, r7
	bls _080327A0
	mov r7, r8
	ldrb r0, [r7]
	cmp r0, #1
	bls _080327A8
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #3
	b _080327A6
	.align 2, 0
_08032780: .4byte gCurrentSprite
_08032784: .4byte gSamusData
_08032788:
	ldrh r0, [r6, #4]
	ldrh r7, [r7, #0x16]
	cmp r0, r7
	bhs _080327A0
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #1
	bls _080327A8
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #3
	b _080327A6
_080327A0:
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0x29
_080327A6:
	strb r0, [r1]
_080327A8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterTurningAround
KihunterTurningAround: @ 0x080327B4
	push {r4, lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080327DC
	ldr r2, _080327E4 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	eors r1, r0
	movs r3, #0
	movs r4, #0
	strh r1, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #5
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r0, _080327E8 @ =0x0833E604
	str r0, [r2, #0x18]
_080327DC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080327E4: .4byte gCurrentSprite
_080327E8: .4byte 0x0833E604

	thumb_func_start KihunterFlyingTurningAroundSecondPart
KihunterFlyingTurningAroundSecondPart: @ 0x080327EC
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080327FA
	bl KihunterFlyingIdleInit
_080327FA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterFlyingUpdateSwipeAnimation
KihunterFlyingUpdateSwipeAnimation: @ 0x08032800
	push {r4, lr}
	ldr r4, _08032830 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x25
	ldrb r0, [r0]
	cmp r0, #3
	beq _0803287E
	movs r0, #0xa0
	movs r1, #0x80
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803284E
	ldr r0, [r4, #0x18]
	ldr r1, _08032834 @ =0x0833E50C
	cmp r0, r1
	beq _08032838
	str r1, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	b _0803287E
	.align 2, 0
_08032830: .4byte gCurrentSprite
_08032834: .4byte 0x0833E50C
_08032838:
	ldrh r0, [r4, #0x16]
	cmp r0, #2
	bne _0803287E
	ldrb r0, [r4, #0x1c]
	cmp r0, #4
	bne _0803287E
	movs r0, #0xbb
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0803287E
_0803284E:
	ldr r1, [r4, #0x18]
	ldr r0, _08032884 @ =0x0833E50C
	cmp r1, r0
	bne _0803287E
	ldrh r0, [r4, #0x16]
	cmp r0, #2
	bne _0803286A
	ldrb r0, [r4, #0x1c]
	cmp r0, #4
	bne _0803286A
	movs r0, #0xbb
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803286A:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803287E
	ldr r0, _08032888 @ =gCurrentSprite
	ldr r1, _0803288C @ =0x0833E454
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
_0803287E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08032884: .4byte 0x0833E50C
_08032888: .4byte gCurrentSprite
_0803288C: .4byte 0x0833E454

	thumb_func_start KihunterFlyingSwoopingDownInit
KihunterFlyingSwoopingDownInit: @ 0x08032890
	push {r4, lr}
	ldr r3, _080328EC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r4, [r0]
	subs r1, #0xa
	movs r0, #0x2a
	strb r0, [r1]
	ldr r2, _080328F0 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r2, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r3, #2]
	subs r0, r0, r1
	movs r1, #0xb4
	lsls r1, r1, #1
	cmp r0, r1
	bgt _080328D2
	ldr r0, _080328F4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xa
	bls _08032900
_080328D2:
	ldr r0, _080328F8 @ =0x0833E4A4
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #3
	strb r0, [r1]
	ldr r0, _080328FC @ =0x00000177
	bl CheckPlayNotAlreadyPlayingSound
	b _08032906
	.align 2, 0
_080328EC: .4byte gCurrentSprite
_080328F0: .4byte gSamusData
_080328F4: .4byte gSpriteRandomNumber
_080328F8: .4byte 0x0833E4A4
_080328FC: .4byte 0x00000177
_08032900:
	ldr r0, _0803290C @ =0x00000179
	bl CheckPlayNotAlreadyPlayingSound
_08032906:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803290C: .4byte 0x00000179

	thumb_func_start KihunterFlyingSwoopingDown
KihunterFlyingSwoopingDown: @ 0x08032910
	push {r4, r5, r6, lr}
	bl KihunterFlyingUpdateSwipeAnimation
	ldr r4, _08032958 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x10
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803295C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08032960
	movs r0, #6
	bl KihunterFlyingXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803293E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2d
	strb r0, [r1]
_0803293E:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080329EC
	subs r1, #0xa
	movs r0, #0x2d
	strb r0, [r1]
	b _080329EC
	.align 2, 0
_08032958: .4byte gCurrentSprite
_0803295C: .4byte gPreviousCollisionCheck
_08032960:
	adds r0, r4, #0
	adds r0, #0x25
	ldrb r0, [r0]
	cmp r0, #3
	bne _08032978
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #2
	cmp r0, #4
	bls _08032986
	b _08032984
_08032978:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #1
	cmp r0, #8
	bls _08032986
_08032984:
	movs r0, #8
_08032986:
	bl KihunterFlyingXMovement
	ldr r4, _080329A8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080329AC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080329B0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2b
	strb r0, [r1]
	b _080329EC
	.align 2, 0
_080329A8: .4byte gCurrentSprite
_080329AC: .4byte gPreviousCollisionCheck
_080329B0:
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _080329D8 @ =0x0833C2DC
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080329DC @ =0x00007FFF
	cmp r1, r0
	bne _080329E0
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _080329EA
	.align 2, 0
_080329D8: .4byte 0x0833C2DC
_080329DC: .4byte 0x00007FFF
_080329E0:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_080329EA:
	strh r0, [r4, #2]
_080329EC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterFlyingSwoopingAcrossInit
KihunterFlyingSwoopingAcrossInit: @ 0x080329F4
	ldr r2, _08032A10 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	movs r1, #0
	movs r0, #0x14
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x31
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	bx lr
	.align 2, 0
_08032A10: .4byte gCurrentSprite

	thumb_func_start KihunterFlyingSwoopingAcross
KihunterFlyingSwoopingAcross: @ 0x08032A14
	push {r4, r5, r6, r7, lr}
	bl KihunterFlyingUpdateSwipeAnimation
	movs r0, #8
	bl KihunterFlyingXMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r4, _08032A5C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x10
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08032A60 @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _08032A64
	cmp r5, #0
	beq _08032A44
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2d
	strb r0, [r1]
_08032A44:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08032AC2
	subs r1, #0xa
	movs r0, #0x2d
	b _08032AC0
	.align 2, 0
_08032A5C: .4byte gCurrentSprite
_08032A60: .4byte gPreviousCollisionCheck
_08032A64:
	ldrh r0, [r4, #2]
	adds r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _08032AB0
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08032A9C @ =0x0833C2FC
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08032AA0 @ =0x00007FFF
	cmp r1, r0
	bne _08032AA4
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r4, #2]
	b _08032AC2
	.align 2, 0
_08032A9C: .4byte 0x0833C2FC
_08032AA0: .4byte 0x00007FFF
_08032AA4:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
	b _08032AC2
_08032AB0:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
	adds r1, #3
	strb r0, [r1]
	subs r1, #0xd
	movs r0, #0x2a
_08032AC0:
	strb r0, [r1]
_08032AC2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start KihunterFlyingAfterSwoopingInit
KihunterFlyingAfterSwoopingInit: @ 0x08032AC8
	push {lr}
	ldr r2, _08032AF8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	movs r3, #0
	strb r3, [r0]
	adds r0, #3
	strb r3, [r0]
	subs r0, #0xd
	movs r1, #0x2e
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x25
	ldrb r0, [r1]
	cmp r0, #3
	bne _08032AF4
	ldr r0, _08032AFC @ =0x0833E454
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	movs r0, #2
	strb r0, [r1]
_08032AF4:
	pop {r0}
	bx r0
	.align 2, 0
_08032AF8: .4byte gCurrentSprite
_08032AFC: .4byte 0x0833E454

	thumb_func_start KihunterFlyingAfterSwooping
KihunterFlyingAfterSwooping: @ 0x08032B00
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r7, #0
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08032B24
	ldr r2, _08032B7C @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _08032B80 @ =0x0833E50C
	cmp r1, r0
	bne _08032B24
	ldr r0, _08032B84 @ =0x0833E454
	str r0, [r2, #0x18]
	strb r7, [r2, #0x1c]
	strh r7, [r2, #0x16]
_08032B24:
	movs r0, #6
	bl KihunterFlyingXMovement
	ldr r4, _08032B7C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08032B88 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08032BFA
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r1, [r2]
	cmp r1, #0
	bne _08032BAE
	ldrh r0, [r4, #8]
	adds r0, #0x40
	ldrh r5, [r4, #2]
	cmp r0, r5
	bge _08032BA2
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r1, _08032B8C @ =0x0833C30C
	mov r8, r1
	lsls r0, r2, #1
	add r0, r8
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08032B90 @ =0x00007FFF
	cmp r1, r0
	bne _08032B94
	subs r0, r2, #1
	lsls r0, r0, #1
	add r0, r8
	ldrh r3, [r0]
	adds r0, r5, r3
	strh r0, [r4, #2]
	b _08032C00
	.align 2, 0
_08032B7C: .4byte gCurrentSprite
_08032B80: .4byte 0x0833E50C
_08032B84: .4byte 0x0833E454
_08032B88: .4byte gPreviousCollisionCheck
_08032B8C: .4byte 0x0833C30C
_08032B90: .4byte 0x00007FFF
_08032B94:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
	b _08032C00
_08032BA2:
	movs r0, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x31
	strb r1, [r0]
	b _08032C00
_08032BAE:
	ldrh r3, [r4, #2]
	ldrh r0, [r4, #8]
	mov ip, r3
	cmp r0, r3
	bhs _08032BFA
	movs r5, #0x31
	adds r5, r5, r4
	mov r8, r5
	ldrb r2, [r5]
	ldr r6, _08032BE4 @ =0x0833C324
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r1, [r0]
	mov sb, r1
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _08032BE8 @ =0x00007FFF
	cmp r1, r0
	bne _08032BEC
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	add r0, ip
	strh r0, [r4, #2]
	b _08032C00
	.align 2, 0
_08032BE4: .4byte 0x0833C324
_08032BE8: .4byte 0x00007FFF
_08032BEC:
	adds r0, r2, #1
	mov r6, r8
	strb r0, [r6]
	mov r1, sb
	adds r0, r3, r1
	strh r0, [r4, #2]
	b _08032C00
_08032BFA:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_08032C00:
	cmp r7, #0
	beq _08032C54
	ldr r2, _08032C2C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032C34
	ldr r1, _08032C30 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08032C4C
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	b _08032C52
	.align 2, 0
_08032C2C: .4byte gCurrentSprite
_08032C30: .4byte gSamusData
_08032C34:
	ldr r1, _08032C48 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _08032C4C
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	b _08032C52
	.align 2, 0
_08032C48: .4byte gSamusData
_08032C4C:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #1
_08032C52:
	strb r0, [r1]
_08032C54:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start KihunterWingsInit
KihunterWingsInit: @ 0x08032C60
	push {r4, lr}
	ldr r0, _08032CDC @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _08032CE0 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08032C88
	mov r4, ip
	ldrh r1, [r4]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r4]
_08032C88:
	mov r0, ip
	ldrh r1, [r0]
	ldr r0, _08032CE4 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0x27
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _08032CE8 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	subs r1, #2
	movs r0, #3
	strb r0, [r1]
	ldr r0, _08032CEC @ =0x0833E474
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08032CDC: .4byte gCurrentSprite
_08032CE0: .4byte gSpriteData
_08032CE4: .4byte 0x0000FFFB
_08032CE8: .4byte 0x0000FFFC
_08032CEC: .4byte 0x0833E474

	thumb_func_start KihunterWingsIdle
KihunterWingsIdle: @ 0x08032CF0
	push {r4, r5, lr}
	ldr r3, _08032D28 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r4, [r0]
	ldr r1, _08032D2C @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r2, r0, r1
	ldrh r0, [r2, #2]
	strh r0, [r3, #2]
	ldrh r0, [r2, #4]
	strh r0, [r3, #4]
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x57
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r5, r1, #0
	cmp r0, #1
	bhi _08032D30
	bl SpriteDyingInit
	bl SpriteDying
	b _08032DBA
	.align 2, 0
_08032D28: .4byte gCurrentSprite
_08032D2C: .4byte gSpriteData
_08032D30:
	ldrh r1, [r2]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08032D42
	ldrh r0, [r3]
	movs r1, #0x20
	orrs r0, r1
	b _08032D48
_08032D42:
	ldrh r1, [r3]
	ldr r0, _08032D64 @ =0x0000FFDF
	ands r0, r1
_08032D48:
	strh r0, [r3]
	lsls r2, r4, #3
	subs r0, r2, r4
	lsls r0, r0, #3
	adds r0, r0, r5
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032D68
	ldrh r1, [r3]
	movs r0, #0x40
	orrs r0, r1
	b _08032D6E
	.align 2, 0
_08032D64: .4byte 0x0000FFDF
_08032D68:
	ldrh r1, [r3]
	ldr r0, _08032DAC @ =0x0000FFBF
	ands r0, r1
_08032D6E:
	strh r0, [r3]
	subs r0, r2, r4
	lsls r0, r0, #3
	adds r0, r0, r5
	ldrh r0, [r0, #0x14]
	cmp r0, #6
	bhi _08032DBA
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x38
	strb r0, [r1]
	ldr r0, _08032DB0 @ =0x0833E4C4
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x20
	strb r1, [r0]
	ldrh r0, [r3, #2]
	subs r0, #0x60
	strh r0, [r3, #2]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032DB4
	ldrh r0, [r3, #4]
	subs r0, #0x20
	b _08032DB8
	.align 2, 0
_08032DAC: .4byte 0x0000FFBF
_08032DB0: .4byte 0x0833E4C4
_08032DB4:
	ldrh r0, [r3, #4]
	adds r0, #0x20
_08032DB8:
	strh r0, [r3, #4]
_08032DBA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start KihunterWingsFalling
KihunterWingsFalling: @ 0x08032DC0
	push {r4, lr}
	ldr r4, _08032DE8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08032DEC @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08032DF0
	strh r1, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x28
	strb r0, [r1]
	b _08032DF6
	.align 2, 0
_08032DE8: .4byte gCurrentSprite
_08032DEC: .4byte gPreviousVerticalCollisionCheck
_08032DF0:
	ldrh r0, [r4, #2]
	adds r0, #2
	strh r0, [r4, #2]
_08032DF6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start KihunterWingsDisappearing
KihunterWingsDisappearing: @ 0x08032DFC
	push {lr}
	ldr r0, _08032E2C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	ldr r2, _08032E30 @ =gCurrentSprite
	cmp r0, #0
	bne _08032E14
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_08032E14:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08032E28
	strh r0, [r2]
_08032E28:
	pop {r0}
	bx r0
	.align 2, 0
_08032E2C: .4byte gFrameCounter8Bit
_08032E30: .4byte gCurrentSprite

	thumb_func_start KihunterSpitInit
KihunterSpitInit: @ 0x08032E34
	push {r4, lr}
	ldr r0, _08032E94 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08032E98 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08032E9C @ =0x0000FFF8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _08032EA0 @ =0x0833E64C
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08032E94: .4byte gCurrentSprite
_08032E98: .4byte 0x0000FFFB
_08032E9C: .4byte 0x0000FFF8
_08032EA0: .4byte 0x0833E64C

	thumb_func_start KihunterSpitMoving
KihunterSpitMoving: @ 0x08032EA4
	push {r4, r5, r6, lr}
	ldr r4, _08032EC8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08032ECC @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08032ED0
	strh r1, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _08032F2A
	.align 2, 0
_08032EC8: .4byte gCurrentSprite
_08032ECC: .4byte gPreviousVerticalCollisionCheck
_08032ED0:
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08032EF8 @ =0x0833C228
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08032EFC @ =0x00007FFF
	cmp r1, r0
	bne _08032F00
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08032F0A
	.align 2, 0
_08032EF8: .4byte 0x0833C228
_08032EFC: .4byte 0x00007FFF
_08032F00:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_08032F0A:
	strh r0, [r4, #2]
	ldr r2, _08032F20 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08032F24
	ldrh r0, [r2, #4]
	adds r0, #0xc
	b _08032F28
	.align 2, 0
_08032F20: .4byte gCurrentSprite
_08032F24:
	ldrh r0, [r2, #4]
	subs r0, #0xc
_08032F28:
	strh r0, [r2, #4]
_08032F2A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start KihunterSpitExplodingInit
KihunterSpitExplodingInit: @ 0x08032F30
	ldr r3, _08032F4C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _08032F50 @ =0x0833E664
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_08032F4C: .4byte gCurrentSprite
_08032F50: .4byte 0x0833E664

	thumb_func_start KihunterSpitExploding
KihunterSpitExploding: @ 0x08032F54
	push {r4, lr}
	ldr r4, _08032F74 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08032F6C
	movs r0, #0
	strh r0, [r4]
_08032F6C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08032F74: .4byte gCurrentSprite

	thumb_func_start KihunterHiveInit
KihunterHiveInit: @ 0x08032F78
	push {r4, r5, r6, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r5, _08032F9C @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08032FA0
	strh r0, [r5]
	b _08033032
	.align 2, 0
_08032F9C: .4byte gCurrentSprite
_08032FA0:
	adds r0, r5, #0
	adds r0, #0x27
	movs r4, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r2, #0
	ldr r0, _0803303C @ =0x0000FFC0
	strh r0, [r5, #0xa]
	movs r1, #0x30
	strh r1, [r5, #0xc]
	adds r0, #0x10
	strh r0, [r5, #0xe]
	strh r1, [r5, #0x10]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #1
	strb r0, [r1]
	adds r1, #0x10
	strb r0, [r1]
	subs r1, #0x13
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _08033040 @ =0x0833E61C
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r4, [r5, #0x16]
	ldr r2, _08033044 @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x24
	strb r3, [r0]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r6, r5, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	adds r0, #0x60
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #0x20
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x2b
	bl SpriteSpawnSecondary
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r5, #2]
	adds r0, #0x60
	str r0, [sp]
	ldrh r0, [r5, #4]
	adds r0, #0x20
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x2b
	bl SpriteSpawnSecondary
	movs r0, #0x8c
	lsls r0, r0, #1
	bl unk_2894
_08033032:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803303C: .4byte 0x0000FFC0
_08033040: .4byte 0x0833E61C
_08033044: .4byte sPrimarySpriteStats

	thumb_func_start KihunterHiveSpawnKihunter
KihunterHiveSpawnKihunter: @ 0x08033048
	push {r4, lr}
	sub sp, #0xc
	ldr r3, _080330D0 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	subs r1, #0xc
	movs r0, #0x10
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _080330D4 @ =0x00007FDF
	ands r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r3, #6]
	ldr r1, _080330D8 @ =gSamusData
	ldrh r0, [r3, #4]
	movs r4, #0x40
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0803307E
	movs r4, #0
_0803307E:
	ldrb r2, [r3, #0x1f]
	ldrh r0, [r3, #2]
	adds r0, #0x80
	str r0, [sp]
	ldrh r0, [r3, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x5b
	movs r1, #0
	movs r3, #0x20
	bl SpriteSpawnPrimary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _080330DC @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x59
	strb r0, [r2]
	ldrh r0, [r1]
	ldr r3, _080330E0 @ =0x00008020
	adds r2, r3, #0
	orrs r0, r2
	movs r2, #0
	orrs r0, r2
	ldr r2, _080330E4 @ =0x0000DFFF
	ands r0, r2
	strh r0, [r1]
	adds r1, #0x34
	ldrb r2, [r1]
	movs r0, #0xfd
	ands r0, r2
	strb r0, [r1]
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080330D0: .4byte gCurrentSprite
_080330D4: .4byte 0x00007FDF
_080330D8: .4byte gSamusData
_080330DC: .4byte gSpriteData
_080330E0: .4byte 0x00008020
_080330E4: .4byte 0x0000DFFF

	thumb_func_start KihunterHiveSpawnCooldown
KihunterHiveSpawnCooldown: @ 0x080330E8
	push {lr}
	ldr r3, _08033110 @ =gCurrentSprite
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0803310A
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #2
	movs r0, #2
	strb r0, [r2]
	adds r2, #0x10
	ldrb r0, [r2]
	orrs r1, r0
	strb r1, [r2]
_0803310A:
	pop {r0}
	bx r0
	.align 2, 0
_08033110: .4byte gCurrentSprite

	thumb_func_start KihunterBugInit
KihunterBugInit: @ 0x08033114
	push {r4, lr}
	ldr r0, _08033180 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08033184 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08033188 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _0803318C @ =0x0833E62C
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	mov r3, ip
	adds r3, #0x31
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	subs r1, #2
	movs r0, #0xc
	strb r0, [r1]
	ldr r1, _08033190 @ =gFrameCounter8Bit
	ldrb r0, [r1]
	lsls r0, r0, #2
	strb r0, [r3]
	ldrb r1, [r1]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08033194
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x14
	b _0803319A
	.align 2, 0
_08033180: .4byte gCurrentSprite
_08033184: .4byte 0x0000FFFB
_08033188: .4byte 0x0000FFFC
_0803318C: .4byte 0x0833E62C
_08033190: .4byte gSpriteRandomNumber
_08033194:
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x3c
_0803319A:
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterBugIdle
KihunterBugIdle: @ 0x080331A4
	push {r4, r5, r6, r7, lr}
	ldr r3, _0803321C @ =gCurrentSprite
	adds r5, r3, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r4, _08033220 @ =0x0833C104
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r2, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _08033224 @ =0x00007FFF
	cmp r0, r6
	bne _080331C4
	ldrh r2, [r4]
	movs r1, #0
_080331C4:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r3, #2]
	adds r0, r0, r2
	strh r0, [r3, #2]
	adds r5, r3, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _08033228 @ =0x0833C186
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _080331E8
	ldrh r2, [r4]
	movs r1, #0
_080331E8:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r3, #4]
	adds r0, r0, r2
	strh r0, [r3, #4]
	ldr r2, _0803322C @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0, #0x14]
	cmp r0, #0
	bne _08033216
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	subs r1, #2
	movs r0, #4
	strb r0, [r1]
_08033216:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803321C: .4byte gCurrentSprite
_08033220: .4byte 0x0833C104
_08033224: .4byte 0x00007FFF
_08033228: .4byte 0x0833C186
_0803322C: .4byte gSpriteData

	thumb_func_start KihunterBugChasingSamusInit
KihunterBugChasingSamusInit: @ 0x08033230
	push {r4, lr}
	ldr r4, _08033270 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	movs r2, #1
	strb r2, [r0]
	subs r0, #2
	strb r1, [r0]
	adds r0, #3
	strb r2, [r0]
	strh r1, [r4, #8]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	bl MakeSpriteFaceSamusDirection
	ldrh r2, [r4, #2]
	ldr r1, _08033274 @ =gSamusData
	movs r3, #0x26
	ldrsh r0, [r1, r3]
	ldrh r1, [r1, #0x18]
	adds r0, r0, r1
	cmp r2, r0
	ble _0803327C
	ldrh r1, [r4]
	ldr r0, _08033278 @ =0x0000FBFF
	ands r0, r1
	b _08033286
	.align 2, 0
_08033270: .4byte gCurrentSprite
_08033274: .4byte gSamusData
_08033278: .4byte 0x0000FBFF
_0803327C:
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
_08033286:
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterBugChasingSamus
KihunterBugChasingSamus: @ 0x08033290
	push {r4, r5, r6, r7, lr}
	ldr r1, _080332B4 @ =gSamusData
	ldrh r0, [r1, #0x26]
	ldrh r2, [r1, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r3, [r1, #0x16]
	movs r7, #0x1e
	movs r6, #0x28
	ldr r0, _080332B8 @ =gCurrentSprite
	ldrh r1, [r0, #8]
	adds r2, r0, #0
	cmp r1, #1
	beq _080332BC
	cmp r1, #3
	beq _080332D6
	b _080332F8
	.align 2, 0
_080332B4: .4byte gSamusData
_080332B8: .4byte gCurrentSprite
_080332BC:
	adds r0, r5, #0
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080332F0
	adds r0, r3, #0
	subs r0, #0x30
	b _080332F4
_080332D6:
	adds r0, r5, #0
	adds r0, #0x20
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080332F0
	adds r0, r3, #0
	subs r0, #0x30
	b _080332F4
_080332F0:
	adds r0, r3, #0
	adds r0, #0x30
_080332F4:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_080332F8:
	ldrh r1, [r2]
	movs r4, #0x80
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _08033354
	movs r0, #0x2f
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803332E
	ldrh r1, [r2, #4]
	subs r0, r3, #4
	cmp r1, r0
	bgt _08033368
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, r6
	bhs _08033328
	adds r0, #1
	strb r0, [r1]
_08033328:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	b _0803333E
_0803332E:
	subs r1, r0, #1
	mov r0, ip
	strb r1, [r0]
	lsls r0, r1, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _08033346
	lsrs r0, r0, #0x1a
_0803333E:
	ldrh r1, [r2, #4]
	adds r0, r0, r1
	strh r0, [r2, #4]
	b _080333C2
_08033346:
	ldrh r1, [r2]
	ldr r0, _08033350 @ =0x0000FDFF
	ands r0, r1
	b _080333A8
	.align 2, 0
_08033350: .4byte 0x0000FDFF
_08033354:
	movs r0, #0x2f
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _08033388
	ldrh r1, [r2, #4]
	adds r0, r3, #4
	cmp r1, r0
	bge _08033374
_08033368:
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	b _080333C2
_08033374:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, r6
	bhs _08033382
	adds r0, #1
	strb r0, [r1]
_08033382:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _0803339A
_08033388:
	subs r1, r0, #1
	mov r0, ip
	strb r1, [r0]
	lsls r0, r1, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _080333A2
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_0803339A:
	ldrh r0, [r2, #4]
	subs r0, r0, r1
	strh r0, [r2, #4]
	b _080333C2
_080333A2:
	ldrh r1, [r2]
	adds r0, r4, #0
	orrs r0, r1
_080333A8:
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r2, #8]
	adds r0, #1
	strh r0, [r2, #8]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #3
	bls _080333C2
	strh r3, [r2, #8]
_080333C2:
	adds r3, r2, #0
	ldrh r4, [r3]
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r6, #0
	ands r0, r4
	cmp r0, #0
	beq _08033428
	adds r2, #0x2e
	ldrb r0, [r2]
	cmp r0, #0
	bne _08033406
	ldrh r1, [r3, #2]
	subs r0, r5, #4
	cmp r1, r0
	ble _080333EC
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r2]
	b _08033482
_080333EC:
	adds r1, r3, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r7
	bhs _080333FA
	adds r0, #1
	strb r0, [r1]
_080333FA:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r1, [r3, #2]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _08033482
_08033406:
	subs r1, r0, #1
	strb r1, [r2]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0803341A
	lsrs r0, r0, #0x1a
	ldrh r2, [r3, #2]
	adds r0, r0, r2
	strh r0, [r3, #2]
	b _08033482
_0803341A:
	ldr r0, _08033424 @ =0x0000FBFF
	ands r0, r4
	strh r0, [r3]
	adds r1, r3, #0
	b _0803347C
	.align 2, 0
_08033424: .4byte 0x0000FBFF
_08033428:
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803345A
	ldrh r1, [r3, #2]
	adds r0, r5, #4
	cmp r1, r0
	bge _08033446
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	mov r1, ip
	b _08033480
_08033446:
	adds r1, r3, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r7
	bhs _08033454
	adds r0, #1
	strb r0, [r1]
_08033454:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _0803346A
_0803345A:
	subs r1, r0, #1
	mov r0, ip
	strb r1, [r0]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _08033472
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_0803346A:
	ldrh r0, [r3, #2]
	subs r0, r0, r1
	strh r0, [r3, #2]
	b _08033482
_08033472:
	ldrh r1, [r2]
	adds r0, r6, #0
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
_0803347C:
	adds r1, #0x31
	movs r0, #1
_08033480:
	strb r0, [r1]
_08033482:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start KihunterGround
KihunterGround: @ 0x08033488
	push {r4, r5, r6, lr}
	ldr r4, _080334B4 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2c
	ldrb r1, [r5]
	movs r6, #0x7f
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #4
	bne _080334A4
	movs r0, #0xba
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080334A4:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _080334B8
	bl SpriteUpdateFreezeTimer
	b _080336C6
	.align 2, 0
_080334B4: .4byte gCurrentSprite
_080334B8:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5a
	bhi _080334E0
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080334E0
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080334E0
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
_080334E0:
	ldr r0, _080334F8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _080334EC
	b _080336C6
_080334EC:
	lsls r0, r0, #2
	ldr r1, _080334FC @ =_08033500
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080334F8: .4byte gCurrentSprite
_080334FC: .4byte _08033500
_08033500: @ jump table
	.4byte _08033670 @ case 0
	.4byte _08033676 @ case 1
	.4byte _0803367A @ case 2
	.4byte _080336C6 @ case 3
	.4byte _08033692 @ case 4
	.4byte _08033698 @ case 5
	.4byte _080336C6 @ case 6
	.4byte _080336C6 @ case 7
	.4byte _0803368C @ case 8
	.4byte _080336C6 @ case 9
	.4byte _080336C6 @ case 10
	.4byte _080336C6 @ case 11
	.4byte _080336C6 @ case 12
	.4byte _080336C6 @ case 13
	.4byte _080336C6 @ case 14
	.4byte _080336C6 @ case 15
	.4byte _080336C6 @ case 16
	.4byte _080336C6 @ case 17
	.4byte _080336C6 @ case 18
	.4byte _080336C6 @ case 19
	.4byte _080336C6 @ case 20
	.4byte _080336C6 @ case 21
	.4byte _080336A4 @ case 22
	.4byte _080336C6 @ case 23
	.4byte _08033680 @ case 24
	.4byte _080336C6 @ case 25
	.4byte _08033686 @ case 26
	.4byte _080336C6 @ case 27
	.4byte _080336C6 @ case 28
	.4byte _080336C6 @ case 29
	.4byte _080336C6 @ case 30
	.4byte _080336C6 @ case 31
	.4byte _080336C6 @ case 32
	.4byte _080336C6 @ case 33
	.4byte _080336C6 @ case 34
	.4byte _080336C6 @ case 35
	.4byte _080336C6 @ case 36
	.4byte _080336C6 @ case 37
	.4byte _080336C6 @ case 38
	.4byte _080336C6 @ case 39
	.4byte _080336C6 @ case 40
	.4byte _080336C6 @ case 41
	.4byte _0803369E @ case 42
	.4byte _080336C6 @ case 43
	.4byte _080336C6 @ case 44
	.4byte _080336C6 @ case 45
	.4byte _080336C6 @ case 46
	.4byte _080336C6 @ case 47
	.4byte _080336C6 @ case 48
	.4byte _080336C6 @ case 49
	.4byte _080336C6 @ case 50
	.4byte _080336C6 @ case 51
	.4byte _080336C6 @ case 52
	.4byte _080336C6 @ case 53
	.4byte _080336C6 @ case 54
	.4byte _080336C6 @ case 55
	.4byte _080336C6 @ case 56
	.4byte _080336C6 @ case 57
	.4byte _080336C6 @ case 58
	.4byte _080336C6 @ case 59
	.4byte _080336C6 @ case 60
	.4byte _080336C6 @ case 61
	.4byte _080336C6 @ case 62
	.4byte _080336C6 @ case 63
	.4byte _080336C6 @ case 64
	.4byte _080336C6 @ case 65
	.4byte _080336C6 @ case 66
	.4byte _080336C6 @ case 67
	.4byte _080336C6 @ case 68
	.4byte _080336C6 @ case 69
	.4byte _080336C6 @ case 70
	.4byte _080336C6 @ case 71
	.4byte _080336C6 @ case 72
	.4byte _080336C6 @ case 73
	.4byte _080336C6 @ case 74
	.4byte _080336C6 @ case 75
	.4byte _080336C6 @ case 76
	.4byte _080336C6 @ case 77
	.4byte _080336C6 @ case 78
	.4byte _080336C6 @ case 79
	.4byte _080336C6 @ case 80
	.4byte _080336C6 @ case 81
	.4byte _080336C6 @ case 82
	.4byte _080336C6 @ case 83
	.4byte _080336C6 @ case 84
	.4byte _080336C6 @ case 85
	.4byte _080336C6 @ case 86
	.4byte _080336AA @ case 87
	.4byte _080336AE @ case 88
	.4byte _080336B4 @ case 89
	.4byte _080336B8 @ case 90
	.4byte _080336BE @ case 91
_08033670:
	bl KihunterGroundInit
	b _080336C6
_08033676:
	bl KihunterGroundJumpWarningInit
_0803367A:
	bl kihunterGroundJumpWarning
	b _080336C6
_08033680:
	bl KihunterGroundJumping
	b _080336C6
_08033686:
	bl KihunterGroundLanding
	b _080336C6
_0803368C:
	bl KihunterGroundIdle
	b _080336C6
_08033692:
	bl KihunterGroundTurningAround
	b _080336C6
_08033698:
	bl KihunterGroundTurningAroundSecondPart
	b _080336C6
_0803369E:
	bl KihunterGroundSpitting
	b _080336C6
_080336A4:
	bl KihunterGroundFalling
	b _080336C6
_080336AA:
	bl SpriteDyingInit
_080336AE:
	bl SpriteDying
	b _080336C6
_080336B4:
	bl KihunterGroundInit
_080336B8:
	bl SpriteSpawningFromX
	b _080336C6
_080336BE:
	bl KihunterTurningIntoX
	bl XParasiteInit
_080336C6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start KihunterFlying
KihunterFlying: @ 0x080336CC
	push {r4, lr}
	ldr r4, _08033704 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _080336E6
	movs r0, #0xba
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080336E6:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08033708
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x10
	bl UpdateSecondarySpritesFreezeTimer
	b _08033918
	.align 2, 0
_08033704: .4byte gCurrentSprite
_08033708:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08033714
	b _080338FE
_08033714:
	lsls r0, r0, #2
	ldr r1, _08033720 @ =_08033724
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08033720: .4byte _08033724
_08033724: @ jump table
	.4byte _08033894 @ case 0
	.4byte _0803389A @ case 1
	.4byte _0803389E @ case 2
	.4byte _080338A4 @ case 3
	.4byte _080338A8 @ case 4
	.4byte _080338AE @ case 5
	.4byte _080338FE @ case 6
	.4byte _080338FE @ case 7
	.4byte _080338FE @ case 8
	.4byte _080338FE @ case 9
	.4byte _080338FE @ case 10
	.4byte _080338FE @ case 11
	.4byte _080338FE @ case 12
	.4byte _080338FE @ case 13
	.4byte _080338FE @ case 14
	.4byte _080338FE @ case 15
	.4byte _080338FE @ case 16
	.4byte _080338FE @ case 17
	.4byte _080338FE @ case 18
	.4byte _080338FE @ case 19
	.4byte _080338FE @ case 20
	.4byte _080338FE @ case 21
	.4byte _080338FE @ case 22
	.4byte _080338FE @ case 23
	.4byte _080338FE @ case 24
	.4byte _080338FE @ case 25
	.4byte _080338FE @ case 26
	.4byte _080338FE @ case 27
	.4byte _080338FE @ case 28
	.4byte _080338FE @ case 29
	.4byte _080338FE @ case 30
	.4byte _080338FE @ case 31
	.4byte _080338FE @ case 32
	.4byte _080338FE @ case 33
	.4byte _080338FE @ case 34
	.4byte _080338FE @ case 35
	.4byte _080338FE @ case 36
	.4byte _080338FE @ case 37
	.4byte _080338FE @ case 38
	.4byte _080338FE @ case 39
	.4byte _080338FE @ case 40
	.4byte _080338B4 @ case 41
	.4byte _080338B8 @ case 42
	.4byte _080338BE @ case 43
	.4byte _080338C2 @ case 44
	.4byte _080338C8 @ case 45
	.4byte _080338CC @ case 46
	.4byte _080338FE @ case 47
	.4byte _080338FE @ case 48
	.4byte _080338FE @ case 49
	.4byte _080338FE @ case 50
	.4byte _080338FE @ case 51
	.4byte _080338FE @ case 52
	.4byte _080338FE @ case 53
	.4byte _080338FE @ case 54
	.4byte _080338FE @ case 55
	.4byte _080338FE @ case 56
	.4byte _080338FE @ case 57
	.4byte _080338FE @ case 58
	.4byte _080338FE @ case 59
	.4byte _080338FE @ case 60
	.4byte _080338FE @ case 61
	.4byte _080338FE @ case 62
	.4byte _080338FE @ case 63
	.4byte _080338FE @ case 64
	.4byte _080338FE @ case 65
	.4byte _080338FE @ case 66
	.4byte _080338FE @ case 67
	.4byte _080338FE @ case 68
	.4byte _080338FE @ case 69
	.4byte _080338FE @ case 70
	.4byte _080338FE @ case 71
	.4byte _080338FE @ case 72
	.4byte _080338FE @ case 73
	.4byte _080338FE @ case 74
	.4byte _080338FE @ case 75
	.4byte _080338FE @ case 76
	.4byte _080338FE @ case 77
	.4byte _080338FE @ case 78
	.4byte _080338FE @ case 79
	.4byte _080338FE @ case 80
	.4byte _080338FE @ case 81
	.4byte _080338FE @ case 82
	.4byte _080338FE @ case 83
	.4byte _080338FE @ case 84
	.4byte _080338FE @ case 85
	.4byte _080338FE @ case 86
	.4byte _080338D2 @ case 87
	.4byte _080338E2 @ case 88
	.4byte _080338EC @ case 89
	.4byte _080338F0 @ case 90
	.4byte _080338F6 @ case 91
_08033894:
	bl KihunterFlyingInit
	b _080338FE
_0803389A:
	bl KihunterFlyingIdleInit
_0803389E:
	bl KihunterFlyingIdle
	b _080338FE
_080338A4:
	bl KihunterFlyingTurningAroundInit
_080338A8:
	bl KihunterTurningAround
	b _080338FE
_080338AE:
	bl KihunterFlyingTurningAroundSecondPart
	b _080338FE
_080338B4:
	bl KihunterFlyingSwoopingDownInit
_080338B8:
	bl KihunterFlyingSwoopingDown
	b _080338FE
_080338BE:
	bl KihunterFlyingSwoopingAcrossInit
_080338C2:
	bl KihunterFlyingSwoopingAcross
	b _080338FE
_080338C8:
	bl KihunterFlyingAfterSwoopingInit
_080338CC:
	bl KihunterFlyingAfterSwooping
	b _080338FE
_080338D2:
	ldr r0, _080338E8 @ =gCurrentSprite
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x10
	bl UnfreezeSecondarySprites
	bl SpriteDyingInit
_080338E2:
	bl SpriteDying
	b _080338FE
	.align 2, 0
_080338E8: .4byte gCurrentSprite
_080338EC:
	bl KihunterFlyingInit
_080338F0:
	bl SpriteSpawningFromX
	b _080338FE
_080338F6:
	bl KihunterTurningIntoX
	bl XParasiteInit
_080338FE:
	ldr r2, _08033920 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #0x56
	bhi _08033918
	ldrh r0, [r2, #0x14]
	cmp r0, #6
	bhi _08033918
	movs r1, #0
	movs r0, #0x5c
	strb r0, [r2, #0x1d]
	strb r1, [r3]
_08033918:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08033920: .4byte gCurrentSprite

	thumb_func_start KihunterWings
KihunterWings: @ 0x08033924
	push {lr}
	ldr r1, _08033940 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08033944
	bl SpriteUpdateFreezeTimer
	b _0803397A
	.align 2, 0
_08033940: .4byte gCurrentSprite
_08033944:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0803396C
	cmp r0, #0x3a
	bgt _0803395C
	cmp r0, #0
	beq _08033972
	cmp r0, #0x38
	beq _08033966
	b _08033976
_0803395C:
	cmp r0, #0x58
	bne _08033976
	bl SpriteDying
	b _0803397A
_08033966:
	bl KihunterWingsFalling
	b _0803397A
_0803396C:
	bl KihunterWingsDisappearing
	b _0803397A
_08033972:
	bl KihunterWingsInit
_08033976:
	bl KihunterWingsIdle
_0803397A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterSpit
KihunterSpit: @ 0x08033980
	push {lr}
	ldr r0, _08033998 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080339A6
	cmp r0, #2
	bgt _0803399C
	cmp r0, #0
	beq _080339A2
	b _080339B2
	.align 2, 0
_08033998: .4byte gCurrentSprite
_0803399C:
	cmp r0, #0x38
	beq _080339AC
	b _080339B2
_080339A2:
	bl KihunterSpitInit
_080339A6:
	bl KihunterSpitMoving
	b _080339B6
_080339AC:
	bl KihunterSpitExploding
	b _080339B6
_080339B2:
	bl KihunterSpitExplodingInit
_080339B6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start KihunterHive
KihunterHive: @ 0x080339BC
	push {lr}
	ldr r0, _080339D4 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x59
	beq _080339E4
	cmp r0, #0x59
	bgt _080339D8
	cmp r0, #0
	beq _080339DE
	b _080339EE
	.align 2, 0
_080339D4: .4byte gCurrentSprite
_080339D8:
	cmp r0, #0x5a
	beq _080339EA
	b _080339EE
_080339DE:
	bl KihunterHiveInit
	b _080339EE
_080339E4:
	bl KihunterHiveSpawnKihunter
	b _080339EE
_080339EA:
	bl KihunterHiveSpawnCooldown
_080339EE:
	ldr r1, _080339FC @ =gCurrentSprite
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	bl unk_120ac
	pop {r0}
	bx r0
	.align 2, 0
_080339FC: .4byte gCurrentSprite

	thumb_func_start KihunterBug
KihunterBug: @ 0x08033A00
	push {lr}
	ldr r0, _08033A20 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08033A32
	cmp r0, #2
	bgt _08033A24
	cmp r0, #0
	beq _08033A2E
	b _08033A40
	.align 2, 0
_08033A20: .4byte gCurrentSprite
_08033A24:
	cmp r0, #0x17
	beq _08033A38
	cmp r0, #0x18
	beq _08033A3C
	b _08033A40
_08033A2E:
	bl KihunterBugInit
_08033A32:
	bl KihunterBugIdle
	b _08033A40
_08033A38:
	bl KihunterBugChasingSamusInit
_08033A3C:
	bl KihunterBugChasingSamus
_08033A40:
	pop {r0}
	bx r0

	thumb_func_start ReoPlaySound
ReoPlaySound: @ 0x08033A44
	push {lr}
	ldr r0, _08033A60 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _08033A5A
	movs r0, #0xc1
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08033A5A:
	pop {r0}
	bx r0
	.align 2, 0
_08033A60: .4byte gFrameCounter8Bit

	thumb_func_start ReoCheckFall
ReoCheckFall: @ 0x08033A64
	push {lr}
	ldr r2, _08033A8C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bls _08033A90
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08033A90
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	movs r0, #1
	b _08033A92
	.align 2, 0
_08033A8C: .4byte gCurrentSprite
_08033A90:
	movs r0, #0
_08033A92:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ReoXMovement
ReoXMovement: @ 0x08033A98
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r6, r5, #0
	ldr r4, _08033AC8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08033AD0
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08033ACC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08033AE4
	ldrh r0, [r4, #4]
	adds r0, r5, r0
	b _08033AF0
	.align 2, 0
_08033AC8: .4byte gCurrentSprite
_08033ACC: .4byte gPreviousCollisionCheck
_08033AD0:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08033AE8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08033AEC
_08033AE4:
	movs r0, #1
	b _08033AF4
	.align 2, 0
_08033AE8: .4byte gPreviousCollisionCheck
_08033AEC:
	ldrh r0, [r4, #4]
	subs r0, r0, r6
_08033AF0:
	strh r0, [r4, #4]
	movs r0, #0
_08033AF4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ReoInit
ReoInit: @ 0x08033AFC
	push {r4, r5, r6, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r2, _08033B28 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08033B40
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08033B2C
	strh r0, [r2]
	b _08033BFC
	.align 2, 0
_08033B28: .4byte gCurrentSprite
_08033B2C:
	ldr r0, _08033B3C @ =0x0000FFC0
	strh r0, [r2, #0xa]
	movs r1, #0x28
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	movs r0, #0x40
	b _08033B4E
	.align 2, 0
_08033B3C: .4byte 0x0000FFC0
_08033B40:
	ldr r0, _08033BAC @ =0x0000FFC8
	strh r0, [r2, #0xa]
	movs r0, #0x18
	strh r0, [r2, #0xc]
	ldr r0, _08033BB0 @ =0x0000FFD8
	strh r0, [r2, #0xe]
	movs r0, #0x28
_08033B4E:
	strh r0, [r2, #0x10]
	ldr r5, _08033BB4 @ =gCurrentSprite
	adds r1, r5, #0
	adds r1, #0x27
	movs r6, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08033BB8 @ =0x0833F128
	str r0, [r5, #0x18]
	strb r6, [r5, #0x1c]
	movs r0, #0
	strh r6, [r5, #0x16]
	adds r1, #5
	strb r0, [r1]
	adds r1, #3
	strb r0, [r1]
	ldr r2, _08033BBC @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl MakeSpriteFaceSamusDirection
	adds r1, r5, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08033BC0
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r5, #6]
	b _08033BFC
	.align 2, 0
_08033BAC: .4byte 0x0000FFC8
_08033BB0: .4byte 0x0000FFD8
_08033BB4: .4byte gCurrentSprite
_08033BB8: .4byte 0x0833F128
_08033BBC: .4byte sPrimarySpriteStats
_08033BC0:
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r5, #2]
	strh r0, [r5, #8]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	ldrh r4, [r5]
	movs r0, #0x40
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #8]
	movs r0, #0x2c
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _08033BF6
	strh r6, [r5]
_08033BF6:
	adds r0, r5, #0
	adds r0, #0x2f
	strb r2, [r0]
_08033BFC:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start ReoFallInit
ReoFallInit: @ 0x08033C04
	ldr r3, _08033C38 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x38
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	ldr r0, _08033C3C @ =0x0833F178
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	ldr r2, _08033C40 @ =gSpriteData
	subs r0, #2
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r2, #4
	orrs r1, r2
	strh r1, [r0]
	bx lr
	.align 2, 0
_08033C38: .4byte gCurrentSprite
_08033C3C: .4byte 0x0833F178
_08033C40: .4byte gSpriteData

	thumb_func_start ReoFalling
ReoFalling: @ 0x08033C44
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r4, _08033CA4 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r5, _08033CA8 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08033C8E
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _08033C8E
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r7, [r4, #4]
	adds r1, r1, r7
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _08033C8A
	movs r6, #1
_08033C8A:
	cmp r6, #0
	beq _08033CAC
_08033C8E:
	ldr r1, _08033CA4 @ =gCurrentSprite
	strh r2, [r1, #2]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3a
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	b _08033CEC
	.align 2, 0
_08033CA4: .4byte gCurrentSprite
_08033CA8: .4byte gPreviousVerticalCollisionCheck
_08033CAC:
	adds r3, r4, #0
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08033CD8 @ =sSpritesFallingSpeedQuickAcceleration
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08033CDC @ =0x00007FFF
	cmp r1, r0
	bne _08033CE0
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #2]
	b _08033CEC
	.align 2, 0
_08033CD8: .4byte sSpritesFallingSpeedQuickAcceleration
_08033CDC: .4byte 0x00007FFF
_08033CE0:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
	strh r0, [r4, #2]
_08033CEC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ReoLanding
ReoLanding: @ 0x08033CF4
	push {lr}
	ldr r3, _08033D34 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08033D30
	subs r1, #0xa
	movs r0, #0x2d
	strb r0, [r1]
	ldr r0, _08033D38 @ =0x0833F128
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r2, _08033D3C @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r2, [r1]
	ldr r0, _08033D40 @ =0x0000FFFB
	ands r0, r2
	strh r0, [r1]
_08033D30:
	pop {r0}
	bx r0
	.align 2, 0
_08033D34: .4byte gCurrentSprite
_08033D38: .4byte 0x0833F128
_08033D3C: .4byte gSpriteData
_08033D40: .4byte 0x0000FFFB

	thumb_func_start ReoIdleInit
ReoIdleInit: @ 0x08033D44
	ldr r3, _08033D68 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	ldr r0, _08033D6C @ =0x0833F128
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_08033D68: .4byte gCurrentSprite
_08033D6C: .4byte 0x0833F128

	thumb_func_start ReoIdle
ReoIdle: @ 0x08033D70
	push {r4, r5, r6, r7, lr}
	ldr r4, _08033E2C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _08033E52
	bl ReoCheckFall
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033E52
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08033E30 @ =0x0833E724
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08033E34 @ =0x00007FFF
	cmp r1, r0
	bne _08033DB2
	ldrh r3, [r5]
	movs r2, #0
_08033DB2:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
	movs r0, #2
	bl ReoXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033DD0
	ldrb r0, [r6]
	cmp r0, #0x20
	bls _08033DE0
_08033DD0:
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r4]
	movs r0, #0
	strb r0, [r6]
_08033DE0:
	ldr r6, _08033E2C @ =gCurrentSprite
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x2f
	bne _08033E52
	ldr r7, _08033E38 @ =gSamusData
	ldrh r5, [r7, #0x18]
	ldrh r4, [r6, #2]
	subs r4, #0x60
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #0xf0
	lsls r1, r1, #2
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r5, r4
	bhs _08033E0E
	movs r0, #0
_08033E0E:
	cmp r0, #0
	beq _08033E52
	ldrh r1, [r6]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08033E3C
	ldrh r0, [r6, #4]
	ldrh r7, [r7, #0x16]
	cmp r0, r7
	bls _08033E4A
	b _08033E44
	.align 2, 0
_08033E2C: .4byte gCurrentSprite
_08033E30: .4byte 0x0833E724
_08033E34: .4byte 0x00007FFF
_08033E38: .4byte gSamusData
_08033E3C:
	ldrh r0, [r6, #4]
	ldrh r7, [r7, #0x16]
	cmp r0, r7
	bhs _08033E4A
_08033E44:
	adds r0, r2, #0
	eors r0, r1
	strh r0, [r6]
_08033E4A:
	ldr r0, _08033E58 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x29
	strb r1, [r0]
_08033E52:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08033E58: .4byte gCurrentSprite

	thumb_func_start ReoGoingDownInit
ReoGoingDownInit: @ 0x08033E5C
	ldr r2, _08033E78 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	movs r1, #0
	movs r0, #8
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x31
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bx lr
	.align 2, 0
_08033E78: .4byte gCurrentSprite

	thumb_func_start ReoGoingDown
ReoGoingDown: @ 0x08033E7C
	push {r4, r5, r6, r7, lr}
	bl ReoCheckFall
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033F36
	bl ReoPlaySound
	ldr r4, _08033ECC @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08033ED0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _08033ED4
	movs r0, #3
	bl ReoXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08033EB4
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2d
	strb r0, [r1]
_08033EB4:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033F36
	subs r1, #0xa
	movs r0, #0x2d
	strb r0, [r1]
	b _08033F36
	.align 2, 0
_08033ECC: .4byte gCurrentSprite
_08033ED0: .4byte gPreviousCollisionCheck
_08033ED4:
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r0, [r6]
	lsrs r0, r0, #2
	cmp r0, #4
	bls _08033EE2
	movs r0, #6
_08033EE2:
	bl ReoXMovement
	ldrh r0, [r4, #2]
	adds r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _08033F00
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2b
	strb r0, [r1]
	b _08033F36
_08033F00:
	ldrb r2, [r6]
	ldr r5, _08033F24 @ =0x0833E786
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08033F28 @ =0x00007FFF
	cmp r1, r0
	bne _08033F2C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08033F34
	.align 2, 0
_08033F24: .4byte 0x0833E786
_08033F28: .4byte 0x00007FFF
_08033F2C:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_08033F34:
	strh r0, [r4, #2]
_08033F36:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start ReoSlidingInit
ReoSlidingInit: @ 0x08033F3C
	ldr r2, _08033F58 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	movs r1, #0
	movs r0, #8
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x31
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	bx lr
	.align 2, 0
_08033F58: .4byte gCurrentSprite

	thumb_func_start ReoSliding
ReoSliding: @ 0x08033F5C
	push {r4, r5, r6, r7, lr}
	bl ReoCheckFall
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	bne _08034016
	bl ReoPlaySound
	movs r0, #6
	bl ReoXMovement
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r4, _08033FB0 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08033FB4 @ =gPreviousCollisionCheck
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08033FB8
	cmp r6, #0
	beq _08033F98
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2d
	strb r0, [r1]
_08033F98:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08034016
	subs r1, #0xa
	movs r0, #0x2d
	b _08034014
	.align 2, 0
_08033FB0: .4byte gCurrentSprite
_08033FB4: .4byte gPreviousCollisionCheck
_08033FB8:
	ldrh r0, [r4, #2]
	adds r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08034004
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08033FF0 @ =0x0833E79E
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08033FF4 @ =0x00007FFF
	cmp r1, r0
	bne _08033FF8
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r4, #2]
	b _08034016
	.align 2, 0
_08033FF0: .4byte 0x0833E79E
_08033FF4: .4byte 0x00007FFF
_08033FF8:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
	b _08034016
_08034004:
	adds r0, r4, #0
	adds r0, #0x2e
	strb r5, [r0]
	adds r0, #3
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2a
_08034014:
	strb r0, [r1]
_08034016:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start ReoGoingUpInit
ReoGoingUpInit: @ 0x0803401C
	ldr r1, _08034034 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #0
	strb r0, [r2]
	adds r2, #3
	strb r0, [r2]
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
	bx lr
	.align 2, 0
_08034034: .4byte gCurrentSprite

	thumb_func_start ReoGoingUp
ReoGoingUp: @ 0x08034038
	push {r4, r5, r6, r7, lr}
	bl ReoCheckFall
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803411C
	bl ReoPlaySound
	ldr r4, _080340A0 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080340A4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08034114
	adds r7, r4, #0
	adds r7, #0x2e
	ldrb r5, [r7]
	cmp r5, #0
	bne _080340CA
	movs r0, #6
	bl ReoXMovement
	ldrh r0, [r4, #8]
	adds r0, #0x60
	ldrh r6, [r4, #2]
	cmp r0, r6
	bge _080340BE
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _080340A8 @ =0x0833E7BE
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _080340AC @ =0x00007FFF
	cmp r1, r0
	bne _080340B0
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	adds r0, r6, r3
	strh r0, [r4, #2]
	b _0803411C
	.align 2, 0
_080340A0: .4byte gCurrentSprite
_080340A4: .4byte gPreviousCollisionCheck
_080340A8: .4byte 0x0833E7BE
_080340AC: .4byte 0x00007FFF
_080340B0:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
	b _0803411C
_080340BE:
	movs r0, #1
	strb r0, [r7]
	adds r0, r4, #0
	adds r0, #0x31
	strb r5, [r0]
	b _0803411C
_080340CA:
	movs r0, #3
	bl ReoXMovement
	ldrh r3, [r4, #2]
	ldrh r0, [r4, #8]
	cmp r0, r3
	bhs _08034114
	adds r7, r4, #0
	adds r7, #0x31
	ldrb r2, [r7]
	ldr r6, _08034100 @ =0x0833E7D6
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	mov ip, r5
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _08034104 @ =0x00007FFF
	cmp r1, r0
	bne _08034108
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r0, r3, r0
	strh r0, [r4, #2]
	b _0803411C
	.align 2, 0
_08034100: .4byte 0x0833E7D6
_08034104: .4byte 0x00007FFF
_08034108:
	adds r0, r2, #1
	strb r0, [r7]
	mov r7, ip
	adds r0, r3, r7
	strh r0, [r4, #2]
	b _0803411C
_08034114:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_0803411C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ReoWingsInit
ReoWingsInit: @ 0x08034124
	push {r4, lr}
	ldr r0, _080341A0 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _080341A4 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0803414C
	mov r4, ip
	ldrh r1, [r4]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r4]
_0803414C:
	mov r0, ip
	ldrh r1, [r0]
	ldr r0, _080341A8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x10
	strb r0, [r1]
	ldr r1, _080341AC @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	subs r1, #2
	movs r0, #5
	strb r0, [r1]
	ldr r0, _080341B0 @ =0x0833F150
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080341A0: .4byte gCurrentSprite
_080341A4: .4byte gSpriteData
_080341A8: .4byte 0x0000FFFB
_080341AC: .4byte 0x0000FFFC
_080341B0: .4byte 0x0833F150

	thumb_func_start ReoWingsIdle
ReoWingsIdle: @ 0x080341B4
	push {r4, r5, r6, lr}
	ldr r1, _080341F0 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldr r2, _080341F4 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r3, r0, r2
	ldrh r0, [r3, #2]
	strh r0, [r1, #2]
	ldrh r0, [r3, #4]
	strh r0, [r1, #4]
	adds r0, r3, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x57
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r1, #0
	adds r6, r2, #0
	cmp r0, #1
	bhi _080341F8
	bl SpriteDyingInit
	bl SpriteDying
	b _08034260
	.align 2, 0
_080341F0: .4byte gCurrentSprite
_080341F4: .4byte gSpriteData
_080341F8:
	ldrh r1, [r3]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0803420A
	ldrh r0, [r4]
	movs r1, #0x20
	orrs r0, r1
	b _08034210
_0803420A:
	ldrh r1, [r4]
	ldr r0, _0803422C @ =0x0000FFDF
	ands r0, r1
_08034210:
	strh r0, [r4]
	lsls r2, r5, #3
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r6
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08034230
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	b _08034236
	.align 2, 0
_0803422C: .4byte 0x0000FFDF
_08034230:
	ldrh r1, [r4]
	ldr r0, _08034254 @ =0x0000FFBF
	ands r0, r1
_08034236:
	strh r0, [r4]
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r6
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08034258
	ldrh r1, [r4]
	adds r0, r2, #0
	orrs r0, r1
	b _0803425E
	.align 2, 0
_08034254: .4byte 0x0000FFBF
_08034258:
	ldrh r1, [r4]
	ldr r0, _08034268 @ =0x0000DFFF
	ands r0, r1
_0803425E:
	strh r0, [r4]
_08034260:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08034268: .4byte 0x0000DFFF

	thumb_func_start Reo
Reo: @ 0x0803426C
	push {r4, lr}
	ldr r4, _080342A0 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08034284
	ldr r0, _080342A4 @ =0x00000183
	bl CheckPlayNotAlreadyPlayingSound
_08034284:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _080342A8
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x2c
	bl UpdateSecondarySpritesFreezeTimer
	b _080344A2
	.align 2, 0
_080342A0: .4byte gCurrentSprite
_080342A4: .4byte 0x00000183
_080342A8:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _080342B4
	b _080344A2
_080342B4:
	lsls r0, r0, #2
	ldr r1, _080342C0 @ =_080342C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080342C0: .4byte _080342C4
_080342C4: @ jump table
	.4byte _08034434 @ case 0
	.4byte _0803443A @ case 1
	.4byte _0803443E @ case 2
	.4byte _080344A2 @ case 3
	.4byte _080344A2 @ case 4
	.4byte _080344A2 @ case 5
	.4byte _080344A2 @ case 6
	.4byte _080344A2 @ case 7
	.4byte _080344A2 @ case 8
	.4byte _080344A2 @ case 9
	.4byte _080344A2 @ case 10
	.4byte _080344A2 @ case 11
	.4byte _080344A2 @ case 12
	.4byte _080344A2 @ case 13
	.4byte _080344A2 @ case 14
	.4byte _080344A2 @ case 15
	.4byte _080344A2 @ case 16
	.4byte _080344A2 @ case 17
	.4byte _080344A2 @ case 18
	.4byte _080344A2 @ case 19
	.4byte _080344A2 @ case 20
	.4byte _080344A2 @ case 21
	.4byte _080344A2 @ case 22
	.4byte _080344A2 @ case 23
	.4byte _080344A2 @ case 24
	.4byte _080344A2 @ case 25
	.4byte _080344A2 @ case 26
	.4byte _080344A2 @ case 27
	.4byte _080344A2 @ case 28
	.4byte _080344A2 @ case 29
	.4byte _080344A2 @ case 30
	.4byte _080344A2 @ case 31
	.4byte _080344A2 @ case 32
	.4byte _080344A2 @ case 33
	.4byte _080344A2 @ case 34
	.4byte _080344A2 @ case 35
	.4byte _080344A2 @ case 36
	.4byte _080344A2 @ case 37
	.4byte _080344A2 @ case 38
	.4byte _080344A2 @ case 39
	.4byte _080344A2 @ case 40
	.4byte _08034454 @ case 41
	.4byte _08034458 @ case 42
	.4byte _0803445E @ case 43
	.4byte _08034462 @ case 44
	.4byte _08034468 @ case 45
	.4byte _0803446C @ case 46
	.4byte _080344A2 @ case 47
	.4byte _080344A2 @ case 48
	.4byte _080344A2 @ case 49
	.4byte _080344A2 @ case 50
	.4byte _080344A2 @ case 51
	.4byte _080344A2 @ case 52
	.4byte _080344A2 @ case 53
	.4byte _080344A2 @ case 54
	.4byte _08034444 @ case 55
	.4byte _08034448 @ case 56
	.4byte _080344A2 @ case 57
	.4byte _0803444E @ case 58
	.4byte _080344A2 @ case 59
	.4byte _080344A2 @ case 60
	.4byte _080344A2 @ case 61
	.4byte _080344A2 @ case 62
	.4byte _080344A2 @ case 63
	.4byte _080344A2 @ case 64
	.4byte _080344A2 @ case 65
	.4byte _080344A2 @ case 66
	.4byte _080344A2 @ case 67
	.4byte _080344A2 @ case 68
	.4byte _080344A2 @ case 69
	.4byte _080344A2 @ case 70
	.4byte _080344A2 @ case 71
	.4byte _080344A2 @ case 72
	.4byte _080344A2 @ case 73
	.4byte _080344A2 @ case 74
	.4byte _080344A2 @ case 75
	.4byte _080344A2 @ case 76
	.4byte _080344A2 @ case 77
	.4byte _080344A2 @ case 78
	.4byte _080344A2 @ case 79
	.4byte _080344A2 @ case 80
	.4byte _080344A2 @ case 81
	.4byte _080344A2 @ case 82
	.4byte _080344A2 @ case 83
	.4byte _080344A2 @ case 84
	.4byte _080344A2 @ case 85
	.4byte _080344A2 @ case 86
	.4byte _08034472 @ case 87
	.4byte _08034482 @ case 88
	.4byte _0803448C @ case 89
	.4byte _08034490 @ case 90
	.4byte _08034496 @ case 91
_08034434:
	bl ReoInit
	b _080344A2
_0803443A:
	bl ReoIdleInit
_0803443E:
	bl ReoIdle
	b _080344A2
_08034444:
	bl ReoFallInit
_08034448:
	bl ReoFalling
	b _080344A2
_0803444E:
	bl ReoLanding
	b _080344A2
_08034454:
	bl ReoGoingDownInit
_08034458:
	bl ReoGoingDown
	b _080344A2
_0803445E:
	bl ReoSlidingInit
_08034462:
	bl ReoSliding
	b _080344A2
_08034468:
	bl ReoGoingUpInit
_0803446C:
	bl ReoGoingUp
	b _080344A2
_08034472:
	ldr r0, _08034488 @ =gCurrentSprite
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x2c
	bl UnfreezeSecondarySprites
	bl SpriteDyingInit
_08034482:
	bl SpriteDying
	b _080344A2
	.align 2, 0
_08034488: .4byte gCurrentSprite
_0803448C:
	bl ReoInit
_08034490:
	bl SpriteSpawningFromX
	b _080344A2
_08034496:
	bl XParasiteInit
	ldr r1, _080344A8 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
_080344A2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080344A8: .4byte gCurrentSprite

	thumb_func_start ReoWings
ReoWings: @ 0x080344AC
	push {lr}
	ldr r1, _080344C8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _080344CC
	bl SpriteUpdateFreezeTimer
	b _080344E8
	.align 2, 0
_080344C8: .4byte gCurrentSprite
_080344CC:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _080344E0
	cmp r0, #0x58
	bne _080344E4
	bl SpriteDying
	b _080344E8
_080344E0:
	bl ReoWingsInit
_080344E4:
	bl ReoWingsIdle
_080344E8:
	pop {r0}
	bx r0

	thumb_func_start LavaPlumeInit
LavaPlumeInit: @ 0x080344EC
	ldr r0, _08034574 @ =gCurrentSprite
	mov ip, r0
	ldr r2, _08034578 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r3, #0
	mov r1, ip
	strh r0, [r1, #0x14]
	adds r1, #0x25
	movs r0, #4
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x68
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	movs r1, #0x10
	strb r1, [r0]
	mov r2, ip
	strh r3, [r2, #0xa]
	movs r0, #0xa0
	strh r0, [r2, #0xc]
	ldr r0, _0803457C @ =0x0000FFF0
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldrh r0, [r2, #2]
	adds r0, #0x1c
	strh r0, [r2, #2]
	strh r0, [r2, #6]
	ldrh r0, [r2, #4]
	strh r0, [r2, #8]
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r2, _08034580 @ =0x00008004
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	ldr r0, _08034584 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x78
	adds r1, #0x2f
	strb r0, [r1]
	ldr r0, _08034588 @ =0x0833FEB8
	mov r1, ip
	str r0, [r1, #0x18]
	strb r2, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08034574: .4byte gCurrentSprite
_08034578: .4byte sPrimarySpriteStats
_0803457C: .4byte 0x0000FFF0
_08034580: .4byte 0x00008004
_08034584: .4byte gSpriteRandomNumber
_08034588: .4byte 0x0833FEB8

	thumb_func_start LavaPlumeGoUpInit
LavaPlumeGoUpInit: @ 0x0803458C
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r0, _080345D4 @ =gCurrentSprite
	mov ip, r0
	ldr r0, _080345D8 @ =0x0833FE38
	mov r1, ip
	str r0, [r1, #0x18]
	movs r4, #0
	strb r4, [r1, #0x1c]
	strh r4, [r1, #0x16]
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	mov r5, ip
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	subs r0, #0x1c
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x2d
	bl SpriteSpawnSecondary
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080345D4: .4byte gCurrentSprite
_080345D8: .4byte 0x0833FE38

	thumb_func_start LavaPlumeGoUp
LavaPlumeGoUp: @ 0x080345DC
	push {r4, lr}
	ldr r4, _08034614 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803461C
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0803464E
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldrh r0, [r4]
	ldr r1, _08034618 @ =0x00007FFB
	ands r1, r0
	strh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803464E
	movs r0, #0xc2
	lsls r0, r0, #1
	bl SoundPlay
	b _0803464E
	.align 2, 0
_08034614: .4byte gCurrentSprite
_08034618: .4byte 0x00007FFB
_0803461C:
	ldrh r0, [r4, #6]
	subs r0, #0x40
	ldrh r2, [r4, #2]
	cmp r0, r2
	ble _08034636
	ldrh r1, [r4, #4]
	adds r0, r2, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08034654 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08034646
_08034636:
	ldr r4, _08034658 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0xe
	strh r0, [r4, #2]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803464E
_08034646:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_0803464E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034654: .4byte gPreviousCollisionCheck
_08034658: .4byte gCurrentSprite

	thumb_func_start LavaPlumeStopFromSamusContact
LavaPlumeStopFromSamusContact: @ 0x0803465C
	push {lr}
	movs r0, #0xc2
	lsls r0, r0, #1
	bl StopSound
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start LavaPlumeStopInit
LavaPlumeStopInit: @ 0x0803466C
	push {lr}
	ldr r1, _080346A0 @ =gCurrentSprite
	ldr r0, _080346A4 @ =0x0833FEC8
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x18
	strb r0, [r2]
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r1]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _0803469C
	ldr r0, _080346A8 @ =0x00000185
	bl SoundPlay
_0803469C:
	pop {r0}
	bx r0
	.align 2, 0
_080346A0: .4byte gCurrentSprite
_080346A4: .4byte 0x0833FEC8
_080346A8: .4byte 0x00000185

	thumb_func_start LavaPlumeStop
LavaPlumeStop: @ 0x080346AC
	push {r4, lr}
	ldr r4, _080346F0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080346EA
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #4
	movs r2, #0
	orrs r0, r1
	strh r0, [r4]
	ldr r0, _080346F4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x78
	adds r1, r4, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldr r0, _080346F8 @ =0x0833FEB8
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
_080346EA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080346F0: .4byte gCurrentSprite
_080346F4: .4byte gSpriteRandomNumber
_080346F8: .4byte 0x0833FEB8

	thumb_func_start LavaPlumeIdle
LavaPlumeIdle: @ 0x080346FC
	push {lr}
	ldr r1, _0803472C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x26
	movs r3, #1
	strb r3, [r0]
	adds r2, r1, #0
	adds r2, #0x2f
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08034726
	adds r0, r1, #0
	adds r0, #0x24
	strb r3, [r0]
	ldrh r0, [r1, #6]
	strh r0, [r1, #2]
	ldrh r0, [r1, #8]
	strh r0, [r1, #4]
_08034726:
	pop {r0}
	bx r0
	.align 2, 0
_0803472C: .4byte gCurrentSprite

	thumb_func_start LavaPlumeWarningInit
LavaPlumeWarningInit: @ 0x08034730
	push {r4, lr}
	ldr r0, _08034788 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0803478C @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #5
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _08034790 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08034794 @ =0x0833FDE0
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034788: .4byte gCurrentSprite
_0803478C: .4byte 0x0000FFFB
_08034790: .4byte 0x0000FFFC
_08034794: .4byte 0x0833FDE0

	thumb_func_start LavaPlumeWarningIdle
LavaPlumeWarningIdle: @ 0x08034798
	push {lr}
	ldr r2, _080347BC @ =gSpriteData
	ldr r3, _080347C0 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x18
	bne _080347C4
	movs r0, #0
	strh r0, [r3]
	b _080347FA
	.align 2, 0
_080347BC: .4byte gSpriteData
_080347C0: .4byte gCurrentSprite
_080347C4:
	ldr r0, _080347E0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r1, #0xf
	ands r1, r0
	cmp r1, #0
	bne _080347FA
	ldr r0, _080347E4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #7
	bls _080347EC
	ldr r0, [r3, #0x18]
	ldr r2, _080347E8 @ =0x0833FE08
	b _080347F0
	.align 2, 0
_080347E0: .4byte gFrameCounter8Bit
_080347E4: .4byte gSpriteRandomNumber
_080347E8: .4byte 0x0833FE08
_080347EC:
	ldr r0, [r3, #0x18]
	ldr r2, _08034800 @ =0x0833FDE0
_080347F0:
	cmp r0, r2
	beq _080347FA
	str r2, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
_080347FA:
	pop {r0}
	bx r0
	.align 2, 0
_08034800: .4byte 0x0833FDE0

	thumb_func_start LavaPlume
LavaPlume: @ 0x08034804
	push {lr}
	ldr r0, _0803481C @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x37
	bls _08034812
	b _08034928
_08034812:
	lsls r0, r0, #2
	ldr r1, _08034820 @ =_08034824
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803481C: .4byte gCurrentSprite
_08034820: .4byte _08034824
_08034824: @ jump table
	.4byte _08034904 @ case 0
	.4byte _0803490A @ case 1
	.4byte _08034910 @ case 2
	.4byte _08034928 @ case 3
	.4byte _08034928 @ case 4
	.4byte _08034928 @ case 5
	.4byte _08034928 @ case 6
	.4byte _08034928 @ case 7
	.4byte _08034928 @ case 8
	.4byte _08034928 @ case 9
	.4byte _08034928 @ case 10
	.4byte _08034928 @ case 11
	.4byte _08034928 @ case 12
	.4byte _08034928 @ case 13
	.4byte _08034928 @ case 14
	.4byte _08034928 @ case 15
	.4byte _08034928 @ case 16
	.4byte _08034928 @ case 17
	.4byte _08034928 @ case 18
	.4byte _08034928 @ case 19
	.4byte _08034928 @ case 20
	.4byte _08034928 @ case 21
	.4byte _08034928 @ case 22
	.4byte _0803491A @ case 23
	.4byte _0803491E @ case 24
	.4byte _08034928 @ case 25
	.4byte _08034924 @ case 26
	.4byte _08034928 @ case 27
	.4byte _08034928 @ case 28
	.4byte _08034928 @ case 29
	.4byte _08034928 @ case 30
	.4byte _08034928 @ case 31
	.4byte _08034928 @ case 32
	.4byte _08034928 @ case 33
	.4byte _08034928 @ case 34
	.4byte _08034928 @ case 35
	.4byte _08034928 @ case 36
	.4byte _08034928 @ case 37
	.4byte _08034928 @ case 38
	.4byte _08034928 @ case 39
	.4byte _08034928 @ case 40
	.4byte _08034928 @ case 41
	.4byte _08034928 @ case 42
	.4byte _08034928 @ case 43
	.4byte _08034928 @ case 44
	.4byte _08034928 @ case 45
	.4byte _08034928 @ case 46
	.4byte _08034928 @ case 47
	.4byte _08034928 @ case 48
	.4byte _08034928 @ case 49
	.4byte _08034928 @ case 50
	.4byte _08034928 @ case 51
	.4byte _08034928 @ case 52
	.4byte _08034928 @ case 53
	.4byte _08034928 @ case 54
	.4byte _08034916 @ case 55
_08034904:
	bl LavaPlumeInit
	b _08034928
_0803490A:
	bl LavaPlumeGoUpInit
	b _08034928
_08034910:
	bl LavaPlumeGoUp
	b _08034928
_08034916:
	bl LavaPlumeStopFromSamusContact
_0803491A:
	bl LavaPlumeStopInit
_0803491E:
	bl LavaPlumeStop
	b _08034928
_08034924:
	bl LavaPlumeIdle
_08034928:
	pop {r0}
	bx r0

	thumb_func_start LavaPlumeWarning
LavaPlumeWarning: @ 0x0803492C
	push {lr}
	ldr r0, _08034948 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803494C
	cmp r0, #2
	beq _08034950
	b _08034954
	.align 2, 0
_08034948: .4byte gCurrentSprite
_0803494C:
	bl LavaPlumeWarningInit
_08034950:
	bl LavaPlumeWarningIdle
_08034954:
	pop {r0}
	bx r0

	thumb_func_start FuneInit
FuneInit: @ 0x08034958
	push {r4, r5, r6, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _08034984 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08034988
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08034988
	strh r0, [r2]
	b _08034A44
	.align 2, 0
_08034984: .4byte gCurrentSprite
_08034988:
	ldr r1, _080349A0 @ =gCurrentSprite
	adds r5, r1, #0
	adds r5, #0x24
	ldrb r0, [r5]
	adds r4, r1, #0
	cmp r0, #0x59
	bne _080349A4
	movs r0, #0x5a
	strb r0, [r5]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _080349C6
	.align 2, 0
_080349A0: .4byte gCurrentSprite
_080349A4:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08034A2C @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _080349C2
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
_080349C2:
	movs r0, #1
	strb r0, [r5]
_080349C6:
	adds r1, r4, #0
	adds r1, #0x25
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0x60
	strb r0, [r1]
	movs r6, #0
	ldr r3, _08034A30 @ =0x0000FFD8
	strh r3, [r4, #0xa]
	movs r5, #0x28
	strh r5, [r4, #0xc]
	ldr r0, _08034A34 @ =0x08341568
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r2, [r4, #0x16]
	subs r1, #7
	movs r0, #3
	strb r0, [r1]
	adds r1, #0x13
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #4]
	strh r0, [r4, #8]
	ldr r2, _08034A38 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	ldrh r1, [r4]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08034A40
	ldr r0, _08034A3C @ =0x0000FFC0
	strh r0, [r4, #0xe]
	strh r5, [r4, #0x10]
	b _08034A44
	.align 2, 0
_08034A2C: .4byte gPreviousCollisionCheck
_08034A30: .4byte 0x0000FFD8
_08034A34: .4byte 0x08341568
_08034A38: .4byte sPrimarySpriteStats
_08034A3C: .4byte 0x0000FFC0
_08034A40:
	strh r3, [r4, #0xe]
	strh r2, [r4, #0x10]
_08034A44:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FuneDying
FuneDying: @ 0x08034A4C
	ldr r1, _08034A58 @ =gCurrentSprite
	ldrb r0, [r1, #0x1c]
	subs r0, #1
	strb r0, [r1, #0x1c]
	bx lr
	.align 2, 0
_08034A58: .4byte gCurrentSprite

	thumb_func_start FuneTurningIntoX
FuneTurningIntoX: @ 0x08034A5C
	push {r4, lr}
	sub sp, #0x10
	ldr r1, _08034A78 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x14
	strh r0, [r1, #2]
	ldrh r0, [r1, #8]
	adds r2, r1, #0
	ldrh r1, [r2, #4]
	cmp r0, r1
	bls _08034A7C
	ldrh r0, [r2, #8]
	ldrh r1, [r2, #4]
	b _08034A80
	.align 2, 0
_08034A78: .4byte gCurrentSprite
_08034A7C:
	ldrh r0, [r2, #4]
	ldrh r1, [r2, #8]
_08034A80:
	subs r0, r0, r1
	asrs r0, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	ldrb r1, [r2, #0x1d]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r2, #2]
	adds r0, #0x14
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x40
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start FuneCheckSamusInFront
FuneCheckSamusInFront: @ 0x08034AB4
	push {lr}
	movs r1, #0x80
	lsls r1, r1, #2
	movs r0, #0x48
	movs r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #3
	beq _08034ACE
	movs r0, #0
	b _08034AD8
_08034ACE:
	ldr r0, _08034ADC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2b
	strb r1, [r0]
	movs r0, #1
_08034AD8:
	pop {r1}
	bx r1
	.align 2, 0
_08034ADC: .4byte gCurrentSprite

	thumb_func_start FuneIdleInit
FuneIdleInit: @ 0x08034AE0
	ldr r1, _08034AF4 @ =gCurrentSprite
	ldr r0, _08034AF8 @ =0x08341568
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bx lr
	.align 2, 0
_08034AF4: .4byte gCurrentSprite
_08034AF8: .4byte 0x08341568

	thumb_func_start FuneIdle
FuneIdle: @ 0x08034AFC
	push {r4, r5, lr}
	ldr r5, _08034B28 @ =gCurrentSprite
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _08034BDE
	bl FuneCheckSamusInFront
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08034BDE
	movs r4, #0
	ldrh r0, [r5, #0x16]
	cmp r0, #7
	bhi _08034BAE
	lsls r0, r0, #2
	ldr r1, _08034B2C @ =_08034B30
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08034B28: .4byte gCurrentSprite
_08034B2C: .4byte _08034B30
_08034B30: @ jump table
	.4byte _08034B50 @ case 0
	.4byte _08034B7C @ case 1
	.4byte _08034B8C @ case 2
	.4byte _08034BA0 @ case 3
	.4byte _08034BAE @ case 4
	.4byte _08034B7C @ case 5
	.4byte _08034B8C @ case 6
	.4byte _08034BA0 @ case 7
_08034B50:
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _08034BAE
	ldr r0, _08034B78 @ =gCurrentSprite
	ldrb r1, [r0, #0x1c]
	subs r1, #1
	strb r1, [r0, #0x1c]
	adds r0, #0x24
	movs r1, #0x29
	strb r1, [r0]
	b _08034BDE
	.align 2, 0
_08034B78: .4byte gCurrentSprite
_08034B7C:
	ldr r0, _08034B88 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #8
	beq _08034BAC
	b _08034B94
	.align 2, 0
_08034B88: .4byte gCurrentSprite
_08034B8C:
	ldr r0, _08034B9C @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #8
	beq _08034B98
_08034B94:
	cmp r0, #0xf
	bne _08034BAE
_08034B98:
	movs r4, #4
	b _08034BAE
	.align 2, 0
_08034B9C: .4byte gCurrentSprite
_08034BA0:
	ldr r0, _08034BC8 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #8
	beq _08034B98
	cmp r0, #0xf
	bne _08034BAE
_08034BAC:
	movs r4, #2
_08034BAE:
	ldr r2, _08034BC8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08034BCC
	ldrh r0, [r2, #0x16]
	cmp r0, #3
	bhi _08034BD8
	ldrh r0, [r2, #4]
	adds r0, r4, r0
	b _08034BDC
	.align 2, 0
_08034BC8: .4byte gCurrentSprite
_08034BCC:
	ldrh r0, [r2, #0x16]
	cmp r0, #3
	bls _08034BD8
	ldrh r0, [r2, #4]
	adds r0, r4, r0
	b _08034BDC
_08034BD8:
	ldrh r0, [r2, #4]
	subs r0, r0, r4
_08034BDC:
	strh r0, [r2, #4]
_08034BDE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start FuneSpittingInit
FuneSpittingInit: @ 0x08034BE4
	ldr r1, _08034BF8 @ =gCurrentSprite
	ldr r0, _08034BFC @ =0x083415B0
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bx lr
	.align 2, 0
_08034BF8: .4byte gCurrentSprite
_08034BFC: .4byte 0x083415B0

	thumb_func_start FuneSpitting
FuneSpitting: @ 0x08034C00
	push {r4, r5, r6, lr}
	sub sp, #0xc
	bl FuneCheckSamusInFront
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034C10
	b _08034D0E
_08034C10:
	movs r5, #0
	ldr r0, _08034C28 @ =gCurrentSprite
	ldrh r2, [r0, #0x16]
	adds r3, r0, #0
	cmp r2, #7
	bhi _08034CDE
	lsls r0, r2, #2
	ldr r1, _08034C2C @ =_08034C30
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08034C28: .4byte gCurrentSprite
_08034C2C: .4byte _08034C30
_08034C30: @ jump table
	.4byte _08034C50 @ case 0
	.4byte _08034C50 @ case 1
	.4byte _08034C50 @ case 2
	.4byte _08034C78 @ case 3
	.4byte _08034C50 @ case 4
	.4byte _08034C50 @ case 5
	.4byte _08034C50 @ case 6
	.4byte _08034C5C @ case 7
_08034C50:
	ldr r0, _08034C58 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	b _08034C6C
	.align 2, 0
_08034C58: .4byte gCurrentSprite
_08034C5C:
	ldrb r0, [r3, #0x1c]
	cmp r0, #0x28
	bne _08034C6C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _08034D0E
_08034C6C:
	cmp r0, #1
	beq _08034C74
	cmp r0, #2
	bne _08034CDE
_08034C74:
	movs r5, #4
	b _08034CDE
_08034C78:
	ldr r0, _08034CBC @ =gCurrentSprite
	mov ip, r0
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	beq _08034C74
	cmp r0, #2
	beq _08034C74
	cmp r0, #4
	bne _08034CDE
	mov r4, ip
	ldrh r1, [r4]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _08034CC0
	mov r0, ip
	ldrb r1, [r0, #0x1e]
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r4, ip
	ldrh r0, [r4, #2]
	adds r0, #0x10
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x2f
	bl SpriteSpawnSecondary
	b _08034CDE
	.align 2, 0
_08034CBC: .4byte gCurrentSprite
_08034CC0:
	mov r6, ip
	ldrb r1, [r6, #0x1e]
	ldrb r2, [r6, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r6, #2]
	adds r0, #0x10
	str r0, [sp]
	ldrh r0, [r6, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x2f
	bl SpriteSpawnSecondary
_08034CDE:
	ldr r2, _08034CF8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08034CFC
	ldrh r0, [r2, #0x16]
	cmp r0, #3
	bhi _08034D08
	ldrh r0, [r2, #4]
	adds r0, r5, r0
	b _08034D0C
	.align 2, 0
_08034CF8: .4byte gCurrentSprite
_08034CFC:
	ldrh r0, [r2, #0x16]
	cmp r0, #3
	bls _08034D08
	ldrh r0, [r2, #4]
	adds r0, r5, r0
	b _08034D0C
_08034D08:
	ldrh r0, [r2, #4]
	subs r0, r0, r5
_08034D0C:
	strh r0, [r2, #4]
_08034D0E:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FuneLungingInit
FuneLungingInit: @ 0x08034D18
	push {lr}
	ldr r1, _08034D38 @ =gCurrentSprite
	ldr r0, _08034D3C @ =0x083415F8
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	ldr r0, _08034D40 @ =0x00000187
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_08034D38: .4byte gCurrentSprite
_08034D3C: .4byte 0x083415F8
_08034D40: .4byte 0x00000187

	thumb_func_start FuneLunging
FuneLunging: @ 0x08034D44
	push {r4, lr}
	movs r3, #0
	ldr r1, _08034D60 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	subs r0, #4
	adds r4, r1, #0
	cmp r0, #0x15
	bhi _08034DF6
	lsls r0, r0, #2
	ldr r1, _08034D64 @ =_08034D68
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08034D60: .4byte gCurrentSprite
_08034D64: .4byte _08034D68
_08034D68: @ jump table
	.4byte _08034DC0 @ case 0
	.4byte _08034DC0 @ case 1
	.4byte _08034DC0 @ case 2
	.4byte _08034DC0 @ case 3
	.4byte _08034DC0 @ case 4
	.4byte _08034DC0 @ case 5
	.4byte _08034DCE @ case 6
	.4byte _08034DDC @ case 7
	.4byte _08034DDC @ case 8
	.4byte _08034DDC @ case 9
	.4byte _08034DDC @ case 10
	.4byte _08034DDC @ case 11
	.4byte _08034DDC @ case 12
	.4byte _08034DDC @ case 13
	.4byte _08034DDC @ case 14
	.4byte _08034DDC @ case 15
	.4byte _08034DDC @ case 16
	.4byte _08034DF6 @ case 17
	.4byte _08034DF6 @ case 18
	.4byte _08034DF6 @ case 19
	.4byte _08034DF6 @ case 20
	.4byte _08034DE8 @ case 21
_08034DC0:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _08034DCA
	cmp r0, #3
	bne _08034DF6
_08034DCA:
	movs r3, #0x18
	b _08034DF6
_08034DCE:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _08034DD8
	cmp r0, #3
	bne _08034DF6
_08034DD8:
	movs r3, #0x10
	b _08034DF6
_08034DDC:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _08034DD8
	cmp r0, #2
	bne _08034DF6
	b _08034DD8
_08034DE8:
	ldrb r0, [r4, #0x1c]
	cmp r0, #0x28
	bne _08034DF6
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
_08034DF6:
	adds r2, r4, #0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08034E24
	ldrh r0, [r2, #0x16]
	cmp r0, #0xa
	bls _08034E16
	ldrh r0, [r2, #4]
	subs r0, r0, r3
	strh r0, [r2, #4]
	ldrh r0, [r2, #0xe]
	adds r0, r3, r0
	strh r0, [r2, #0xe]
	b _08034E44
_08034E16:
	ldrh r0, [r2, #4]
	adds r0, r3, r0
	strh r0, [r2, #4]
	ldrh r0, [r2, #0xe]
	subs r0, r0, r3
	strh r0, [r2, #0xe]
	b _08034E44
_08034E24:
	ldrh r0, [r2, #0x16]
	cmp r0, #0xa
	bls _08034E38
	ldrh r0, [r2, #4]
	adds r0, r3, r0
	strh r0, [r2, #4]
	ldrh r0, [r2, #0x10]
	subs r0, r0, r3
	strh r0, [r2, #0x10]
	b _08034E44
_08034E38:
	ldrh r0, [r4, #4]
	subs r0, r0, r3
	strh r0, [r4, #4]
	ldrh r0, [r4, #0x10]
	adds r0, r3, r0
	strh r0, [r4, #0x10]
_08034E44:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FuneLungingEnd
FuneLungingEnd: @ 0x08034E4C
	push {lr}
	ldr r1, _08034E68 @ =gCurrentSprite
	ldrb r0, [r1, #0x1c]
	subs r0, #1
	strb r0, [r1, #0x1c]
	ldrh r0, [r1, #4]
	adds r3, r0, #0
	ldrh r2, [r1, #8]
	cmp r3, r2
	bhs _08034E6C
	adds r0, #1
	strh r0, [r1, #4]
	b _08034E7C
	.align 2, 0
_08034E68: .4byte gCurrentSprite
_08034E6C:
	cmp r3, r2
	bls _08034E76
	subs r0, #1
	strh r0, [r1, #4]
	b _08034E7C
_08034E76:
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_08034E7C:
	pop {r0}
	bx r0

	thumb_func_start FuneSpitInit
FuneSpitInit: @ 0x08034E80
	push {r4, lr}
	ldr r0, _08034EE8 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08034EEC @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08034EF0 @ =0x0000FFF0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _08034EF4 @ =0x083416D0
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	adds r1, #0x10
	movs r0, #1
	strb r0, [r1]
	movs r0, #0xc3
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034EE8: .4byte gCurrentSprite
_08034EEC: .4byte 0x0000FFFB
_08034EF0: .4byte 0x0000FFF0
_08034EF4: .4byte 0x083416D0

	thumb_func_start FuneSpitMoving
FuneSpitMoving: @ 0x08034EF8
	push {r4, lr}
	ldr r4, _08034F18 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	ldr r0, _08034F1C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08034F20
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _08034F36
	.align 2, 0
_08034F18: .4byte gCurrentSprite
_08034F1C: .4byte gPreviousVerticalCollisionCheck
_08034F20:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08034F30
	ldrh r0, [r4, #4]
	adds r0, #0xa
	b _08034F34
_08034F30:
	ldrh r0, [r4, #4]
	subs r0, #0xa
_08034F34:
	strh r0, [r4, #4]
_08034F36:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start FuneSpitExplodingInit
FuneSpitExplodingInit: @ 0x08034F3C
	ldr r3, _08034F58 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _08034F5C @ =0x083416F0
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_08034F58: .4byte gCurrentSprite
_08034F5C: .4byte 0x083416F0

	thumb_func_start FuneSpitExploding
FuneSpitExploding: @ 0x08034F60
	push {r4, lr}
	ldr r4, _08034F80 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08034F78
	movs r0, #0
	strh r0, [r4]
_08034F78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034F80: .4byte gCurrentSprite

	thumb_func_start NamiheInit
NamiheInit: @ 0x08034F84
	push {r4, r5, r6, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _08034FB0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08034FB4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08034FB4
	strh r0, [r2]
	b _08035068
	.align 2, 0
_08034FB0: .4byte gCurrentSprite
_08034FB4:
	ldr r1, _08034FCC @ =gCurrentSprite
	adds r5, r1, #0
	adds r5, #0x24
	ldrb r0, [r5]
	adds r4, r1, #0
	cmp r0, #0x59
	bne _08034FD0
	movs r0, #0x5a
	strb r0, [r5]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _08034FF2
	.align 2, 0
_08034FCC: .4byte gCurrentSprite
_08034FD0:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08035050 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _08034FEE
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
_08034FEE:
	movs r0, #1
	strb r0, [r5]
_08034FF2:
	adds r1, r4, #0
	adds r1, #0x25
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0x60
	strb r0, [r1]
	movs r6, #0
	ldr r3, _08035054 @ =0x0000FFD8
	strh r3, [r4, #0xa]
	movs r5, #0x28
	strh r5, [r4, #0xc]
	ldr r0, _08035058 @ =0x08341E6C
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r2, [r4, #0x16]
	subs r1, #7
	movs r0, #3
	strb r0, [r1]
	ldrh r0, [r4, #4]
	strh r0, [r4, #8]
	ldr r2, _0803505C @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	ldrh r1, [r4]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08035064
	ldr r0, _08035060 @ =0x0000FFC0
	strh r0, [r4, #0xe]
	strh r5, [r4, #0x10]
	b _08035068
	.align 2, 0
_08035050: .4byte gPreviousCollisionCheck
_08035054: .4byte 0x0000FFD8
_08035058: .4byte 0x08341E6C
_0803505C: .4byte sPrimarySpriteStats
_08035060: .4byte 0x0000FFC0
_08035064:
	strh r3, [r4, #0xe]
	strh r2, [r4, #0x10]
_08035068:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NamiheDying
NamiheDying: @ 0x08035070
	ldr r1, _0803507C @ =gCurrentSprite
	ldrb r0, [r1, #0x1c]
	subs r0, #1
	strb r0, [r1, #0x1c]
	bx lr
	.align 2, 0
_0803507C: .4byte gCurrentSprite

	thumb_func_start NamiheTurningIntoX
NamiheTurningIntoX: @ 0x08035080
	push {r4, lr}
	sub sp, #0x10
	ldr r1, _0803509C @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x14
	strh r0, [r1, #2]
	ldrh r0, [r1, #8]
	adds r2, r1, #0
	ldrh r1, [r2, #4]
	cmp r0, r1
	bls _080350A0
	ldrh r0, [r2, #8]
	ldrh r1, [r2, #4]
	b _080350A4
	.align 2, 0
_0803509C: .4byte gCurrentSprite
_080350A0:
	ldrh r0, [r2, #4]
	ldrh r1, [r2, #8]
_080350A4:
	subs r0, r0, r1
	asrs r0, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	ldrb r1, [r2, #0x1d]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r2, #2]
	adds r0, #0x14
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x40
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NamiheCheckSamusInFront
NamiheCheckSamusInFront: @ 0x080350D8
	push {lr}
	movs r1, #0x80
	lsls r1, r1, #2
	movs r0, #0x48
	movs r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #3
	beq _080350F2
	movs r0, #0
	b _080350FC
_080350F2:
	ldr r0, _08035100 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2b
	strb r1, [r0]
	movs r0, #1
_080350FC:
	pop {r1}
	bx r1
	.align 2, 0
_08035100: .4byte gCurrentSprite

	thumb_func_start NamiheIdleInit
NamiheIdleInit: @ 0x08035104
	ldr r1, _08035118 @ =gCurrentSprite
	ldr r0, _0803511C @ =0x08341E6C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bx lr
	.align 2, 0
_08035118: .4byte gCurrentSprite
_0803511C: .4byte 0x08341E6C

	thumb_func_start NamiheIdle
NamiheIdle: @ 0x08035120
	push {r4, r5, lr}
	ldr r5, _0803514C @ =gCurrentSprite
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _08035202
	bl NamiheCheckSamusInFront
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08035202
	movs r4, #0
	ldrh r0, [r5, #0x16]
	cmp r0, #7
	bhi _080351D2
	lsls r0, r0, #2
	ldr r1, _08035150 @ =_08035154
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803514C: .4byte gCurrentSprite
_08035150: .4byte _08035154
_08035154: @ jump table
	.4byte _08035174 @ case 0
	.4byte _080351A0 @ case 1
	.4byte _080351B0 @ case 2
	.4byte _080351C4 @ case 3
	.4byte _080351D2 @ case 4
	.4byte _080351A0 @ case 5
	.4byte _080351B0 @ case 6
	.4byte _080351C4 @ case 7
_08035174:
	movs r0, #0xa0
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _080351D2
	ldr r0, _0803519C @ =gCurrentSprite
	ldrb r1, [r0, #0x1c]
	subs r1, #1
	strb r1, [r0, #0x1c]
	adds r0, #0x24
	movs r1, #0x29
	strb r1, [r0]
	b _08035202
	.align 2, 0
_0803519C: .4byte gCurrentSprite
_080351A0:
	ldr r0, _080351AC @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #8
	beq _080351D0
	b _080351B8
	.align 2, 0
_080351AC: .4byte gCurrentSprite
_080351B0:
	ldr r0, _080351C0 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #8
	beq _080351BC
_080351B8:
	cmp r0, #0xf
	bne _080351D2
_080351BC:
	movs r4, #4
	b _080351D2
	.align 2, 0
_080351C0: .4byte gCurrentSprite
_080351C4:
	ldr r0, _080351EC @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #8
	beq _080351BC
	cmp r0, #0xf
	bne _080351D2
_080351D0:
	movs r4, #2
_080351D2:
	ldr r2, _080351EC @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080351F0
	ldrh r0, [r2, #0x16]
	cmp r0, #3
	bhi _080351FC
	ldrh r0, [r2, #4]
	adds r0, r4, r0
	b _08035200
	.align 2, 0
_080351EC: .4byte gCurrentSprite
_080351F0:
	ldrh r0, [r2, #0x16]
	cmp r0, #3
	bls _080351FC
	ldrh r0, [r2, #4]
	adds r0, r4, r0
	b _08035200
_080351FC:
	ldrh r0, [r2, #4]
	subs r0, r0, r4
_08035200:
	strh r0, [r2, #4]
_08035202:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start NamiheSpittingInit
NamiheSpittingInit: @ 0x08035208
	ldr r1, _0803521C @ =gCurrentSprite
	ldr r0, _08035220 @ =0x08341EB4
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803521C: .4byte gCurrentSprite
_08035220: .4byte 0x08341EB4

	thumb_func_start NamiheSpitting
NamiheSpitting: @ 0x08035224
	push {r4, r5, r6, lr}
	sub sp, #0xc
	bl NamiheCheckSamusInFront
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08035234
	b _0803533E
_08035234:
	movs r5, #0
	ldr r1, _0803524C @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	subs r0, #4
	adds r2, r1, #0
	cmp r0, #0xb
	bhi _0803530E
	lsls r0, r0, #2
	ldr r1, _08035250 @ =_08035254
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803524C: .4byte gCurrentSprite
_08035250: .4byte _08035254
_08035254: @ jump table
	.4byte _08035284 @ case 0
	.4byte _08035284 @ case 1
	.4byte _08035284 @ case 2
	.4byte _08035298 @ case 3
	.4byte _08035284 @ case 4
	.4byte _08035284 @ case 5
	.4byte _08035284 @ case 6
	.4byte _08035284 @ case 7
	.4byte _0803530E @ case 8
	.4byte _0803530E @ case 9
	.4byte _0803530E @ case 10
	.4byte _080352FE @ case 11
_08035284:
	ldr r0, _08035294 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	beq _08035290
	cmp r0, #2
	bne _0803530E
_08035290:
	movs r5, #4
	b _0803530E
	.align 2, 0
_08035294: .4byte gCurrentSprite
_08035298:
	ldr r0, _080352D8 @ =gCurrentSprite
	mov ip, r0
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	beq _08035290
	cmp r0, #2
	beq _08035290
	cmp r0, #4
	bne _0803530E
	mov r4, ip
	ldrh r1, [r4]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _080352DC
	mov r0, ip
	ldrb r1, [r0, #0x1e]
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r4, ip
	ldrh r0, [r4, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x10
	str r0, [sp, #4]
	str r6, [sp, #8]
	b _080352F6
	.align 2, 0
_080352D8: .4byte gCurrentSprite
_080352DC:
	mov r6, ip
	ldrb r1, [r6, #0x1e]
	ldrb r2, [r6, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r6, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r6, #4]
	subs r0, #0x10
	str r0, [sp, #4]
	str r4, [sp, #8]
_080352F6:
	movs r0, #0x2e
	bl SpriteSpawnSecondary
	b _0803530E
_080352FE:
	ldrb r0, [r2, #0x1c]
	cmp r0, #0x28
	bne _0803530E
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _0803533E
_0803530E:
	ldr r2, _08035328 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803532C
	ldrh r0, [r2, #0x16]
	cmp r0, #7
	bhi _08035338
	ldrh r0, [r2, #4]
	adds r0, r5, r0
	b _0803533C
	.align 2, 0
_08035328: .4byte gCurrentSprite
_0803532C:
	ldrh r0, [r2, #0x16]
	cmp r0, #7
	bls _08035338
	ldrh r0, [r2, #4]
	adds r0, r5, r0
	b _0803533C
_08035338:
	ldrh r0, [r2, #4]
	subs r0, r0, r5
_0803533C:
	strh r0, [r2, #4]
_0803533E:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NamiheLungingInit
NamiheLungingInit: @ 0x08035348
	push {lr}
	ldr r1, _08035368 @ =gCurrentSprite
	ldr r0, _0803536C @ =0x08341F3C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	movs r0, #0xc5
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_08035368: .4byte gCurrentSprite
_0803536C: .4byte 0x08341F3C

	thumb_func_start NamiheLunging
NamiheLunging: @ 0x08035370
	push {r4, lr}
	movs r3, #0
	ldr r1, _0803538C @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	subs r0, #0xc
	adds r4, r1, #0
	cmp r0, #0x19
	bhi _08035432
	lsls r0, r0, #2
	ldr r1, _08035390 @ =_08035394
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803538C: .4byte gCurrentSprite
_08035390: .4byte _08035394
_08035394: @ jump table
	.4byte _080353FC @ case 0
	.4byte _080353FC @ case 1
	.4byte _080353FC @ case 2
	.4byte _080353FC @ case 3
	.4byte _080353FC @ case 4
	.4byte _080353FC @ case 5
	.4byte _0803540A @ case 6
	.4byte _08035418 @ case 7
	.4byte _08035418 @ case 8
	.4byte _08035418 @ case 9
	.4byte _08035418 @ case 10
	.4byte _08035418 @ case 11
	.4byte _08035418 @ case 12
	.4byte _08035418 @ case 13
	.4byte _08035418 @ case 14
	.4byte _08035418 @ case 15
	.4byte _08035418 @ case 16
	.4byte _08035432 @ case 17
	.4byte _08035432 @ case 18
	.4byte _08035432 @ case 19
	.4byte _08035432 @ case 20
	.4byte _08035432 @ case 21
	.4byte _08035432 @ case 22
	.4byte _08035432 @ case 23
	.4byte _08035432 @ case 24
	.4byte _08035424 @ case 25
_080353FC:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _08035406
	cmp r0, #3
	bne _08035432
_08035406:
	movs r3, #0x18
	b _08035432
_0803540A:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _08035414
	cmp r0, #3
	bne _08035432
_08035414:
	movs r3, #0x10
	b _08035432
_08035418:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _08035414
	cmp r0, #2
	bne _08035432
	b _08035414
_08035424:
	ldrb r0, [r4, #0x1c]
	cmp r0, #0x28
	bne _08035432
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
_08035432:
	adds r2, r4, #0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08035460
	ldrh r0, [r2, #0x16]
	cmp r0, #0x12
	bls _08035452
	ldrh r0, [r2, #4]
	subs r0, r0, r3
	strh r0, [r2, #4]
	ldrh r0, [r2, #0xe]
	adds r0, r3, r0
	strh r0, [r2, #0xe]
	b _08035480
_08035452:
	ldrh r0, [r2, #4]
	adds r0, r3, r0
	strh r0, [r2, #4]
	ldrh r0, [r2, #0xe]
	subs r0, r0, r3
	strh r0, [r2, #0xe]
	b _08035480
_08035460:
	ldrh r0, [r2, #0x16]
	cmp r0, #0x12
	bls _08035474
	ldrh r0, [r2, #4]
	adds r0, r3, r0
	strh r0, [r2, #4]
	ldrh r0, [r2, #0x10]
	subs r0, r0, r3
	strh r0, [r2, #0x10]
	b _08035480
_08035474:
	ldrh r0, [r4, #4]
	subs r0, r0, r3
	strh r0, [r4, #4]
	ldrh r0, [r4, #0x10]
	adds r0, r3, r0
	strh r0, [r4, #0x10]
_08035480:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NamiheLungingEnd
NamiheLungingEnd: @ 0x08035488
	push {lr}
	ldr r1, _080354A4 @ =gCurrentSprite
	ldrb r0, [r1, #0x1c]
	subs r0, #1
	strb r0, [r1, #0x1c]
	ldrh r0, [r1, #4]
	adds r3, r0, #0
	ldrh r2, [r1, #8]
	cmp r3, r2
	bhs _080354A8
	adds r0, #1
	strh r0, [r1, #4]
	b _080354B8
	.align 2, 0
_080354A4: .4byte gCurrentSprite
_080354A8:
	cmp r3, r2
	bls _080354B2
	subs r0, #1
	strh r0, [r1, #4]
	b _080354B8
_080354B2:
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_080354B8:
	pop {r0}
	bx r0

	thumb_func_start NamiheSpitInit
NamiheSpitInit: @ 0x080354BC
	push {r4, lr}
	ldr r0, _08035538 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0803553C @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08035540 @ =0x0000FFF0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _08035544 @ =0x08342074
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r3, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	adds r1, #9
	movs r0, #6
	strb r0, [r1]
	ldr r2, _08035548 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r2, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	mov r0, ip
	ldrh r1, [r0, #2]
	cmp r1, r2
	bls _0803554C
	adds r0, #0x2f
	strb r4, [r0]
	subs r0, r1, r2
	b _08035556
	.align 2, 0
_08035538: .4byte gCurrentSprite
_0803553C: .4byte 0x0000FFFB
_08035540: .4byte 0x0000FFF0
_08035544: .4byte 0x08342074
_08035548: .4byte gSamusData
_0803554C:
	mov r3, ip
	adds r3, #0x2f
	movs r0, #1
	strb r0, [r3]
	subs r0, r2, r1
_08035556:
	cmp r0, #0
	bge _0803555C
	adds r0, #0x1f
_0803555C:
	lsls r0, r0, #0xb
	lsrs r3, r0, #0x10
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	ldr r0, _08035574 @ =0x00000189
	bl CheckPlayNotAlreadyPlayingSound
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035574: .4byte 0x00000189

	thumb_func_start NamiheSpitMoving
NamiheSpitMoving: @ 0x08035578
	push {r4, lr}
	ldr r4, _08035598 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	ldr r0, _0803559C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080355A0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _080355EE
	.align 2, 0
_08035598: .4byte gCurrentSprite
_0803559C: .4byte gPreviousVerticalCollisionCheck
_080355A0:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080355B0
	ldrh r0, [r4, #4]
	adds r0, #0xa
	b _080355B4
_080355B0:
	ldrh r0, [r4, #4]
	subs r0, #0xa
_080355B4:
	strh r0, [r4, #4]
	ldr r2, _080355C8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _080355CC
	subs r0, #1
	strb r0, [r1]
	b _080355EE
	.align 2, 0
_080355C8: .4byte gCurrentSprite
_080355CC:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080355E2
	adds r1, r2, #0
	adds r1, #0x31
	ldrh r0, [r2, #2]
	ldrb r1, [r1]
	adds r0, r0, r1
	b _080355EC
_080355E2:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r1, [r0]
	ldrh r0, [r2, #2]
	subs r0, r0, r1
_080355EC:
	strh r0, [r2, #2]
_080355EE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NamiheSpitExplodingInit
NamiheSpitExplodingInit: @ 0x080355F4
	ldr r3, _08035610 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _08035614 @ =0x08342094
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_08035610: .4byte gCurrentSprite
_08035614: .4byte 0x08342094

	thumb_func_start NamiheSpitExploding
NamiheSpitExploding: @ 0x08035618
	push {r4, lr}
	ldr r4, _08035638 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08035630
	movs r0, #0
	strh r0, [r4]
_08035630:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035638: .4byte gCurrentSprite

	thumb_func_start Fune
Fune: @ 0x0803563C
	push {r4, lr}
	ldr r4, _08035668 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08035656
	movs r0, #0xc4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08035656:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803566C
	bl SpriteUpdateFreezeTimer
	b _08035842
	.align 2, 0
_08035668: .4byte gCurrentSprite
_0803566C:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08035678
	b _08035842
_08035678:
	lsls r0, r0, #2
	ldr r1, _08035684 @ =_08035688
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08035684: .4byte _08035688
_08035688: @ jump table
	.4byte _080357F8 @ case 0
	.4byte _080357FE @ case 1
	.4byte _08035802 @ case 2
	.4byte _08035842 @ case 3
	.4byte _08035842 @ case 4
	.4byte _08035842 @ case 5
	.4byte _08035842 @ case 6
	.4byte _08035842 @ case 7
	.4byte _08035842 @ case 8
	.4byte _08035842 @ case 9
	.4byte _08035842 @ case 10
	.4byte _08035842 @ case 11
	.4byte _08035842 @ case 12
	.4byte _08035842 @ case 13
	.4byte _08035842 @ case 14
	.4byte _08035842 @ case 15
	.4byte _08035842 @ case 16
	.4byte _08035842 @ case 17
	.4byte _08035842 @ case 18
	.4byte _08035842 @ case 19
	.4byte _08035842 @ case 20
	.4byte _08035842 @ case 21
	.4byte _08035842 @ case 22
	.4byte _08035842 @ case 23
	.4byte _08035842 @ case 24
	.4byte _08035842 @ case 25
	.4byte _08035842 @ case 26
	.4byte _08035842 @ case 27
	.4byte _08035842 @ case 28
	.4byte _08035842 @ case 29
	.4byte _08035842 @ case 30
	.4byte _08035842 @ case 31
	.4byte _08035842 @ case 32
	.4byte _08035842 @ case 33
	.4byte _08035842 @ case 34
	.4byte _08035842 @ case 35
	.4byte _08035842 @ case 36
	.4byte _08035842 @ case 37
	.4byte _08035842 @ case 38
	.4byte _08035842 @ case 39
	.4byte _08035842 @ case 40
	.4byte _08035808 @ case 41
	.4byte _0803580C @ case 42
	.4byte _08035812 @ case 43
	.4byte _08035816 @ case 44
	.4byte _08035842 @ case 45
	.4byte _0803581C @ case 46
	.4byte _08035842 @ case 47
	.4byte _08035842 @ case 48
	.4byte _08035842 @ case 49
	.4byte _08035842 @ case 50
	.4byte _08035842 @ case 51
	.4byte _08035842 @ case 52
	.4byte _08035842 @ case 53
	.4byte _08035842 @ case 54
	.4byte _08035842 @ case 55
	.4byte _08035842 @ case 56
	.4byte _08035842 @ case 57
	.4byte _08035842 @ case 58
	.4byte _08035842 @ case 59
	.4byte _08035842 @ case 60
	.4byte _08035842 @ case 61
	.4byte _08035842 @ case 62
	.4byte _08035842 @ case 63
	.4byte _08035842 @ case 64
	.4byte _08035842 @ case 65
	.4byte _08035842 @ case 66
	.4byte _08035842 @ case 67
	.4byte _08035842 @ case 68
	.4byte _08035842 @ case 69
	.4byte _08035842 @ case 70
	.4byte _08035842 @ case 71
	.4byte _08035842 @ case 72
	.4byte _08035842 @ case 73
	.4byte _08035842 @ case 74
	.4byte _08035842 @ case 75
	.4byte _08035842 @ case 76
	.4byte _08035842 @ case 77
	.4byte _08035842 @ case 78
	.4byte _08035842 @ case 79
	.4byte _08035842 @ case 80
	.4byte _08035842 @ case 81
	.4byte _08035842 @ case 82
	.4byte _08035842 @ case 83
	.4byte _08035842 @ case 84
	.4byte _08035842 @ case 85
	.4byte _08035842 @ case 86
	.4byte _08035822 @ case 87
	.4byte _08035826 @ case 88
	.4byte _08035830 @ case 89
	.4byte _08035834 @ case 90
	.4byte _0803583A @ case 91
_080357F8:
	bl FuneInit
	b _08035842
_080357FE:
	bl FuneIdleInit
_08035802:
	bl FuneIdle
	b _08035842
_08035808:
	bl FuneSpittingInit
_0803580C:
	bl FuneSpitting
	b _08035842
_08035812:
	bl FuneLungingInit
_08035816:
	bl FuneLunging
	b _08035842
_0803581C:
	bl FuneLungingEnd
	b _08035842
_08035822:
	bl SpriteDyingInit
_08035826:
	bl FuneDying
	bl SpriteDying
	b _08035842
_08035830:
	bl FuneInit
_08035834:
	bl SpriteSpawningFromX
	b _08035842
_0803583A:
	bl FuneTurningIntoX
	bl XParasiteInit
_08035842:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start FuneSpit
FuneSpit: @ 0x08035848
	push {lr}
	ldr r0, _08035860 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803586E
	cmp r0, #2
	bgt _08035864
	cmp r0, #0
	beq _0803586A
	b _0803587A
	.align 2, 0
_08035860: .4byte gCurrentSprite
_08035864:
	cmp r0, #0x38
	beq _08035874
	b _0803587A
_0803586A:
	bl FuneSpitInit
_0803586E:
	bl FuneSpitMoving
	b _0803587E
_08035874:
	bl FuneSpitExploding
	b _0803587E
_0803587A:
	bl FuneSpitExplodingInit
_0803587E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Namihe
Namihe: @ 0x08035884
	push {r4, lr}
	ldr r4, _080358AC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803589C
	ldr r0, _080358B0 @ =0x0000018B
	bl CheckPlayNotAlreadyPlayingSound
_0803589C:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _080358B4
	bl SpriteUpdateFreezeTimer
	b _08035A8A
	.align 2, 0
_080358AC: .4byte gCurrentSprite
_080358B0: .4byte 0x0000018B
_080358B4:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _080358C0
	b _08035A8A
_080358C0:
	lsls r0, r0, #2
	ldr r1, _080358CC @ =_080358D0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080358CC: .4byte _080358D0
_080358D0: @ jump table
	.4byte _08035A40 @ case 0
	.4byte _08035A46 @ case 1
	.4byte _08035A4A @ case 2
	.4byte _08035A8A @ case 3
	.4byte _08035A8A @ case 4
	.4byte _08035A8A @ case 5
	.4byte _08035A8A @ case 6
	.4byte _08035A8A @ case 7
	.4byte _08035A8A @ case 8
	.4byte _08035A8A @ case 9
	.4byte _08035A8A @ case 10
	.4byte _08035A8A @ case 11
	.4byte _08035A8A @ case 12
	.4byte _08035A8A @ case 13
	.4byte _08035A8A @ case 14
	.4byte _08035A8A @ case 15
	.4byte _08035A8A @ case 16
	.4byte _08035A8A @ case 17
	.4byte _08035A8A @ case 18
	.4byte _08035A8A @ case 19
	.4byte _08035A8A @ case 20
	.4byte _08035A8A @ case 21
	.4byte _08035A8A @ case 22
	.4byte _08035A8A @ case 23
	.4byte _08035A8A @ case 24
	.4byte _08035A8A @ case 25
	.4byte _08035A8A @ case 26
	.4byte _08035A8A @ case 27
	.4byte _08035A8A @ case 28
	.4byte _08035A8A @ case 29
	.4byte _08035A8A @ case 30
	.4byte _08035A8A @ case 31
	.4byte _08035A8A @ case 32
	.4byte _08035A8A @ case 33
	.4byte _08035A8A @ case 34
	.4byte _08035A8A @ case 35
	.4byte _08035A8A @ case 36
	.4byte _08035A8A @ case 37
	.4byte _08035A8A @ case 38
	.4byte _08035A8A @ case 39
	.4byte _08035A8A @ case 40
	.4byte _08035A50 @ case 41
	.4byte _08035A54 @ case 42
	.4byte _08035A5A @ case 43
	.4byte _08035A5E @ case 44
	.4byte _08035A8A @ case 45
	.4byte _08035A64 @ case 46
	.4byte _08035A8A @ case 47
	.4byte _08035A8A @ case 48
	.4byte _08035A8A @ case 49
	.4byte _08035A8A @ case 50
	.4byte _08035A8A @ case 51
	.4byte _08035A8A @ case 52
	.4byte _08035A8A @ case 53
	.4byte _08035A8A @ case 54
	.4byte _08035A8A @ case 55
	.4byte _08035A8A @ case 56
	.4byte _08035A8A @ case 57
	.4byte _08035A8A @ case 58
	.4byte _08035A8A @ case 59
	.4byte _08035A8A @ case 60
	.4byte _08035A8A @ case 61
	.4byte _08035A8A @ case 62
	.4byte _08035A8A @ case 63
	.4byte _08035A8A @ case 64
	.4byte _08035A8A @ case 65
	.4byte _08035A8A @ case 66
	.4byte _08035A8A @ case 67
	.4byte _08035A8A @ case 68
	.4byte _08035A8A @ case 69
	.4byte _08035A8A @ case 70
	.4byte _08035A8A @ case 71
	.4byte _08035A8A @ case 72
	.4byte _08035A8A @ case 73
	.4byte _08035A8A @ case 74
	.4byte _08035A8A @ case 75
	.4byte _08035A8A @ case 76
	.4byte _08035A8A @ case 77
	.4byte _08035A8A @ case 78
	.4byte _08035A8A @ case 79
	.4byte _08035A8A @ case 80
	.4byte _08035A8A @ case 81
	.4byte _08035A8A @ case 82
	.4byte _08035A8A @ case 83
	.4byte _08035A8A @ case 84
	.4byte _08035A8A @ case 85
	.4byte _08035A8A @ case 86
	.4byte _08035A6A @ case 87
	.4byte _08035A6E @ case 88
	.4byte _08035A78 @ case 89
	.4byte _08035A7C @ case 90
	.4byte _08035A82 @ case 91
_08035A40:
	bl NamiheInit
	b _08035A8A
_08035A46:
	bl NamiheIdleInit
_08035A4A:
	bl NamiheIdle
	b _08035A8A
_08035A50:
	bl NamiheSpittingInit
_08035A54:
	bl NamiheSpitting
	b _08035A8A
_08035A5A:
	bl NamiheLungingInit
_08035A5E:
	bl NamiheLunging
	b _08035A8A
_08035A64:
	bl NamiheLungingEnd
	b _08035A8A
_08035A6A:
	bl SpriteDyingInit
_08035A6E:
	bl NamiheDying
	bl SpriteDying
	b _08035A8A
_08035A78:
	bl NamiheInit
_08035A7C:
	bl SpriteSpawningFromX
	b _08035A8A
_08035A82:
	bl NamiheTurningIntoX
	bl XParasiteInit
_08035A8A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NamiheSpit
NamiheSpit: @ 0x08035A90
	push {lr}
	ldr r0, _08035AA8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08035AB6
	cmp r0, #2
	bgt _08035AAC
	cmp r0, #0
	beq _08035AB2
	b _08035AC2
	.align 2, 0
_08035AA8: .4byte gCurrentSprite
_08035AAC:
	cmp r0, #0x38
	beq _08035ABC
	b _08035AC2
_08035AB2:
	bl NamiheSpitInit
_08035AB6:
	bl NamiheSpitMoving
	b _08035AC6
_08035ABC:
	bl NamiheSpitExploding
	b _08035AC6
_08035AC2:
	bl NamiheSpitExplodingInit
_08035AC6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start UpdateSubSpriteData1Animation
UpdateSubSpriteData1Animation: @ 0x08035ACC
	push {lr}
	ldr r2, _08035B04 @ =gSubSpriteData1
	ldrb r0, [r2, #6]
	adds r0, #1
	strb r0, [r2, #6]
	ldrh r1, [r2, #4]
	ldr r3, [r2]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	bhs _08035B00
	movs r0, #1
	strb r0, [r2, #6]
	ldrh r0, [r2, #4]
	adds r0, #1
	strh r0, [r2, #4]
	ldrh r0, [r2, #4]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #4]
	cmp r0, #0
	bne _08035B00
	strh r0, [r2, #4]
_08035B00:
	pop {r0}
	bx r0
	.align 2, 0
_08035B04: .4byte gSubSpriteData1

	thumb_func_start SyncCurrentSpritePositionWithSubSprite1Position
SyncCurrentSpritePositionWithSubSprite1Position: @ 0x08035B08
	push {r4, lr}
	ldr r3, _08035B44 @ =gSubSpriteData1
	ldrh r0, [r3, #4]
	ldr r1, [r3]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r4, [r0]
	ldr r2, _08035B48 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0, #2]
	ldrh r1, [r3, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0, #4]
	ldrh r3, [r3, #0xa]
	adds r0, r0, r3
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035B44: .4byte gSubSpriteData1
_08035B48: .4byte gCurrentSprite

	thumb_func_start BoxSyncSubSprites
BoxSyncSubSprites: @ 0x08035B4C
	push {r4, lr}
	ldr r4, _08035BA8 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _08035BAC @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _08035BB0 @ =0x0879AFE0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _08035B7E
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_08035B7E:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035BA8: .4byte gSubSpriteData1
_08035BAC: .4byte gCurrentSprite
_08035BB0: .4byte 0x0879AFE0

	thumb_func_start BoxXMovement
BoxXMovement: @ 0x08035BB4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	mov sl, r7
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	mov sb, r5
	movs r0, #0
	mov r8, r0
	ldr r6, _08035C00 @ =gCurrentSprite
	ldrh r1, [r6]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08035C12
	ldr r4, _08035C04 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	adds r1, #0x6e
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08035C08 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08035C0C
	adds r0, r6, #0
	adds r0, #0x24
	strb r5, [r0]
	movs r1, #1
	mov r8, r1
	b _08035C48
	.align 2, 0
_08035C00: .4byte gCurrentSprite
_08035C04: .4byte gSubSpriteData1
_08035C08: .4byte gPreviousCollisionCheck
_08035C0C:
	ldrh r0, [r4, #0xa]
	adds r0, r7, r0
	b _08035C46
_08035C12:
	ldr r4, _08035C38 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	subs r1, #0x6e
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08035C3C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08035C40
	adds r0, r6, #0
	adds r0, #0x24
	mov r1, sb
	strb r1, [r0]
	movs r0, #1
	mov r8, r0
	b _08035C48
	.align 2, 0
_08035C38: .4byte gSubSpriteData1
_08035C3C: .4byte gPreviousCollisionCheck
_08035C40:
	ldrh r0, [r4, #0xa]
	mov r1, sl
	subs r0, r0, r1
_08035C46:
	strh r0, [r4, #0xa]
_08035C48:
	mov r0, r8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start BoxInit
BoxInit: @ 0x08035C58
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	bl EventCheckOn_BoxRumble
	adds r1, r0, #0
	cmp r1, #0
	bne _08035C70
	ldr r0, _08035C6C @ =gCurrentSprite
	strh r1, [r0]
	b _08035E02
	.align 2, 0
_08035C6C: .4byte gCurrentSprite
_08035C70:
	ldr r7, _08035E0C @ =gCurrentSprite
	adds r0, r7, #0
	adds r0, #0x25
	movs r5, #0
	strb r5, [r0]
	ldrh r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r3, r1, #0
	movs r6, #0
	orrs r3, r0
	strh r3, [r7]
	adds r0, r7, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08035E10 @ =0x0000FFD8
	strh r0, [r7, #0xa]
	movs r0, #0x40
	strh r0, [r7, #0xc]
	ldr r0, _08035E14 @ =0x0000FFD0
	strh r0, [r7, #0xe]
	movs r0, #0x30
	strh r0, [r7, #0x10]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #7
	strb r1, [r0]
	adds r2, r7, #0
	adds r2, #0x22
	movs r0, #0xc
	strb r0, [r2]
	adds r2, #0x13
	movs r0, #2
	strb r0, [r2]
	strb r1, [r7, #0x1e]
	ldr r2, _08035E18 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r7, #0x14]
	adds r2, r7, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _08035E1C @ =0x08347BD8
	str r0, [r7, #0x18]
	strb r6, [r7, #0x1c]
	strh r5, [r7, #0x16]
	ldr r4, _08035E20 @ =gSubSpriteData1
	ldrh r0, [r7, #2]
	strh r0, [r4, #8]
	ldrh r0, [r7, #4]
	strh r0, [r4, #0xa]
	ldr r0, _08035E24 @ =0x08342DF0
	str r0, [r4]
	strb r6, [r4, #6]
	strh r5, [r4, #4]
	strb r6, [r4, #0xe]
	adds r0, r7, #0
	adds r0, #0x2f
	strb r6, [r0]
	ldr r0, _08035E28 @ =0x0000FDFF
	ands r3, r0
	strh r3, [r7]
	adds r1, r7, #0
	adds r1, #0x24
	movs r0, #0x3f
	strb r0, [r1]
	ldrb r2, [r7, #0x1f]
	adds r6, r7, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #3
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #8
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #9
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #0xa
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x31
	movs r1, #0xb
	bl SpriteSpawnSecondary
_08035E02:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08035E0C: .4byte gCurrentSprite
_08035E10: .4byte 0x0000FFD8
_08035E14: .4byte 0x0000FFD0
_08035E18: .4byte sPrimarySpriteStats
_08035E1C: .4byte 0x08347BD8
_08035E20: .4byte gSubSpriteData1
_08035E24: .4byte 0x08342DF0
_08035E28: .4byte 0x0000FDFF

	thumb_func_start BoxWaitingToEmergeInit
BoxWaitingToEmergeInit: @ 0x08035E2C
	push {r4, r5, lr}
	ldr r1, _08035E74 @ =gSubSpriteData1
	ldr r0, _08035E78 @ =0x08342F38
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r4, #0
	strh r0, [r1, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r2, [r1, #0xa]
	adds r0, r0, r2
	strh r0, [r1, #0xa]
	ldr r5, _08035E7C @ =gCurrentSprite
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x40
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2e
	strb r4, [r0]
	ldr r0, _08035E80 @ =0x0000026D
	bl unk_3b1c
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	adds r0, r5, #0
	adds r0, #0x31
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08035E74: .4byte gSubSpriteData1
_08035E78: .4byte 0x08342F38
_08035E7C: .4byte gCurrentSprite
_08035E80: .4byte 0x0000026D

	thumb_func_start BoxWaitingToEmerge
BoxWaitingToEmerge: @ 0x08035E84
	push {r4, r5, r6, lr}
	ldr r6, _08035EC8 @ =gCurrentSprite
	adds r4, r6, #0
	adds r4, #0x31
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3c
	bls _08035EAC
	ldr r0, _08035ECC @ =0x0000026D
	bl unk_3b1c
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0
	strb r0, [r4]
_08035EAC:
	ldrh r5, [r6, #2]
	ldrh r4, [r6, #4]
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x24
	bls _08035EBC
	b _08035FC2
_08035EBC:
	lsls r0, r0, #2
	ldr r1, _08035ED0 @ =_08035ED4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08035EC8: .4byte gCurrentSprite
_08035ECC: .4byte 0x0000026D
_08035ED0: .4byte _08035ED4
_08035ED4: @ jump table
	.4byte _08035F68 @ case 0
	.4byte _08035FC2 @ case 1
	.4byte _08035FC2 @ case 2
	.4byte _08035FC2 @ case 3
	.4byte _08035F6E @ case 4
	.4byte _08035FC2 @ case 5
	.4byte _08035FC2 @ case 6
	.4byte _08035FC2 @ case 7
	.4byte _08035F74 @ case 8
	.4byte _08035FC2 @ case 9
	.4byte _08035FC2 @ case 10
	.4byte _08035FC2 @ case 11
	.4byte _08035FC2 @ case 12
	.4byte _08035FC2 @ case 13
	.4byte _08035FC2 @ case 14
	.4byte _08035FC2 @ case 15
	.4byte _08035F7E @ case 16
	.4byte _08035FC2 @ case 17
	.4byte _08035FC2 @ case 18
	.4byte _08035FC2 @ case 19
	.4byte _08035F88 @ case 20
	.4byte _08035FC2 @ case 21
	.4byte _08035FC2 @ case 22
	.4byte _08035FC2 @ case 23
	.4byte _08035F98 @ case 24
	.4byte _08035FC2 @ case 25
	.4byte _08035FC2 @ case 26
	.4byte _08035FC2 @ case 27
	.4byte _08035FA2 @ case 28
	.4byte _08035FC2 @ case 29
	.4byte _08035FC2 @ case 30
	.4byte _08035FC2 @ case 31
	.4byte _08035FAA @ case 32
	.4byte _08035FC2 @ case 33
	.4byte _08035FC2 @ case 34
	.4byte _08035FC2 @ case 35
	.4byte _08035FBA @ case 36
_08035F68:
	adds r0, r5, #0
	adds r1, r4, #0
	b _08035F90
_08035F6E:
	adds r0, r5, #0
	adds r1, r4, #0
	b _08035FB2
_08035F74:
	adds r0, r5, #0
	subs r0, #0x1c
	adds r1, r4, #0
	adds r1, #0x1c
	b _08035F90
_08035F7E:
	adds r0, r5, #0
	adds r0, #0x20
	adds r1, r4, #0
	subs r1, #0x20
	b _08035FB2
_08035F88:
	adds r0, r5, #0
	subs r0, #0x1c
	adds r1, r4, #0
	subs r1, #0x2e
_08035F90:
	movs r2, #0x2e
	bl ParticleSet
	b _08035FC2
_08035F98:
	adds r0, r5, #0
	adds r0, #0x40
	adds r1, r4, #0
	subs r1, #0x40
	b _08035FB2
_08035FA2:
	adds r0, r5, #0
	adds r0, #0x58
	adds r1, r4, #0
	b _08035FB2
_08035FAA:
	adds r0, r5, #0
	subs r0, #0x5a
	adds r1, r4, #0
	adds r1, #0x10
_08035FB2:
	movs r2, #0x2f
	bl ParticleSet
	b _08035FC2
_08035FBA:
	ldr r0, _08036000 @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #0xff
	strb r1, [r0]
_08035FC2:
	ldr r6, _08036000 @ =gCurrentSprite
	adds r1, r6, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #4
	bne _08035FF8
	adds r0, r6, #0
	adds r0, #0x24
	movs r1, #0x41
	strb r1, [r0]
	adds r1, r4, #0
	subs r1, #0xa0
	adds r0, r5, #0
	movs r2, #0x2f
	bl ParticleSet
	movs r0, #0x1b
	movs r1, #7
	bl PlayMusic
_08035FF8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08036000: .4byte gCurrentSprite

	thumb_func_start BoxFirstJumpInit
BoxFirstJumpInit: @ 0x08036004
	push {lr}
	ldr r1, _08036038 @ =gSubSpriteData1
	ldr r0, _0803603C @ =0x08342D98
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _08036040 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x42
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	ldrh r1, [r3]
	ldr r0, _08036044 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _08036048 @ =0x00000265
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036038: .4byte gSubSpriteData1
_0803603C: .4byte 0x08342D98
_08036040: .4byte gCurrentSprite
_08036044: .4byte 0x0000FDFF
_08036048: .4byte 0x00000265

	thumb_func_start BoxFirstJump
BoxFirstJump: @ 0x0803604C
	push {r4, r5, lr}
	ldr r4, _08036090 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r1, _08036094 @ =0x083420B4
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _08036098 @ =0x00007FFF
	cmp r1, r0
	bne _080360A4
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
	ldr r1, _0803609C @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	ldrh r1, [r1, #0xa]
	adds r1, #0xb4
	movs r2, #0x35
	bl ParticleSet
	ldr r0, _080360A0 @ =0x00000266
	bl SoundPlay
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	b _080360B8
	.align 2, 0
_08036090: .4byte gCurrentSprite
_08036094: .4byte 0x083420B4
_08036098: .4byte 0x00007FFF
_0803609C: .4byte gSubSpriteData1
_080360A0: .4byte 0x00000266
_080360A4:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _080360C0 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r3
	strh r0, [r1, #8]
	ldrh r0, [r1, #0xa]
	subs r0, #0xa
	strh r0, [r1, #0xa]
_080360B8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080360C0: .4byte gSubSpriteData1

	thumb_func_start BoxWaitingToRunInit
BoxWaitingToRunInit: @ 0x080360C4
	push {lr}
	ldr r1, _080360EC @ =gSubSpriteData1
	ldr r0, _080360F0 @ =0x08342F60
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _080360F4 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x18
	strb r1, [r2]
	adds r0, #0x2e
	strb r3, [r0]
	ldr r0, _080360F8 @ =0x0000026A
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_080360EC: .4byte gSubSpriteData1
_080360F0: .4byte 0x08342F60
_080360F4: .4byte gCurrentSprite
_080360F8: .4byte 0x0000026A

	thumb_func_start BoxWaitingToRun
BoxWaitingToRun: @ 0x080360FC
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036120
	ldr r1, _08036138 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08036120
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
_08036120:
	ldr r1, _08036138 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08036132
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
_08036132:
	pop {r0}
	bx r0
	.align 2, 0
_08036138: .4byte gCurrentSprite

	thumb_func_start BoxSlowRunningInit
BoxSlowRunningInit: @ 0x0803613C
	push {lr}
	bl MakeSpriteFaceSamusDirection
	ldr r0, _08036158 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08036164
	ldr r1, _0803615C @ =gSubSpriteData1
	ldr r0, _08036160 @ =0x08342ED8
	b _08036168
	.align 2, 0
_08036158: .4byte gCurrentSprite
_0803615C: .4byte gSubSpriteData1
_08036160: .4byte 0x08342ED8
_08036164:
	ldr r1, _08036184 @ =gSubSpriteData1
	ldr r0, _08036188 @ =0x08342E48
_08036168:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _0803618C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x1a
	strb r1, [r2]
	adds r0, #0x2e
	strb r3, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08036184: .4byte gSubSpriteData1
_08036188: .4byte 0x08342E48
_0803618C: .4byte gCurrentSprite

	thumb_func_start BoxSlowRun
BoxSlowRun: @ 0x08036190
	push {r4, r5, lr}
	ldr r0, _080361F0 @ =gSubSpriteData1
	ldr r0, [r0, #4]
	ldr r1, _080361F4 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _080361F8 @ =0x00010003
	cmp r0, r1
	bne _080361A6
	ldr r0, _080361FC @ =0x00000262
	bl SoundPlay
_080361A6:
	ldr r5, _08036200 @ =gCurrentSprite
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	movs r1, #0x37
	bl BoxXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080361EA
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080361D8
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #7
	bne _080361D8
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
_080361D8:
	ldr r1, _08036200 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080361EA
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
_080361EA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080361F0: .4byte gSubSpriteData1
_080361F4: .4byte 0x00FFFFFF
_080361F8: .4byte 0x00010003
_080361FC: .4byte 0x00000262
_08036200: .4byte gCurrentSprite

	thumb_func_start BoxFastRunInit
BoxFastRunInit: @ 0x08036204
	push {lr}
	ldr r2, _0803621C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08036228
	ldr r1, _08036220 @ =gSubSpriteData1
	ldr r0, _08036224 @ =0x08342F08
	b _0803622C
	.align 2, 0
_0803621C: .4byte gCurrentSprite
_08036220: .4byte gSubSpriteData1
_08036224: .4byte 0x08342F08
_08036228:
	ldr r1, _08036248 @ =gSubSpriteData1
	ldr r0, _0803624C @ =0x08342E78
_0803622C:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0xa
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08036248: .4byte gSubSpriteData1
_0803624C: .4byte 0x08342E78

	thumb_func_start BoxFastRun
BoxFastRun: @ 0x08036250
	push {r4, lr}
	ldr r4, _08036284 @ =gSubSpriteData1
	ldr r0, [r4, #4]
	ldr r1, _08036288 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _0803628C @ =0x00010003
	cmp r0, r1
	bne _08036266
	ldr r0, _08036290 @ =0x00000262
	bl SoundPlay
_08036266:
	movs r0, #8
	movs r1, #0x37
	bl BoxXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080362CC
	ldr r2, _08036294 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08036298
	subs r0, #1
	b _080362DC
	.align 2, 0
_08036284: .4byte gSubSpriteData1
_08036288: .4byte 0x00FFFFFF
_0803628C: .4byte 0x00010003
_08036290: .4byte 0x00000262
_08036294: .4byte gCurrentSprite
_08036298:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080362B8
	ldrh r0, [r4, #0xa]
	subs r0, #0xc8
	ldr r1, _080362B4 @ =gSamusData
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	ble _080362CC
	b _080362C4
	.align 2, 0
_080362B4: .4byte gSamusData
_080362B8:
	ldrh r0, [r4, #0xa]
	adds r0, #0xc8
	ldr r1, _080362E4 @ =gSamusData
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bge _080362CC
_080362C4:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1d
	strb r0, [r1]
_080362CC:
	ldr r1, _080362E8 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080362DE
	adds r1, #0x24
	movs r0, #0x3b
_080362DC:
	strb r0, [r1]
_080362DE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080362E4: .4byte gSamusData
_080362E8: .4byte gCurrentSprite

	thumb_func_start BoxSkiddingInit
BoxSkiddingInit: @ 0x080362EC
	push {lr}
	ldr r2, _08036304 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08036310
	ldr r1, _08036308 @ =gSubSpriteData1
	ldr r0, _0803630C @ =0x08342FC8
	b _08036314
	.align 2, 0
_08036304: .4byte gCurrentSprite
_08036308: .4byte gSubSpriteData1
_0803630C: .4byte 0x08342FC8
_08036310:
	ldr r1, _08036334 @ =gSubSpriteData1
	ldr r0, _08036338 @ =0x08342FA8
_08036314:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _0803633C @ =0x00000263
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036334: .4byte gSubSpriteData1
_08036338: .4byte 0x08342FA8
_0803633C: .4byte 0x00000263

	thumb_func_start BoxSkidding
BoxSkidding: @ 0x08036340
	push {r4, r5, lr}
	ldr r4, _0803638C @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	lsrs r0, r0, #2
	movs r1, #0x1f
	cmp r0, #5
	bls _08036354
	movs r1, #0x37
_08036354:
	bl BoxXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08036384
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08036372
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
_08036372:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08036384
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
_08036384:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803638C: .4byte gCurrentSprite

	thumb_func_start BoxStopSkiddingInit
BoxStopSkiddingInit: @ 0x08036390
	push {lr}
	ldr r2, _080363A8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080363B4
	ldr r1, _080363AC @ =gSubSpriteData1
	ldr r0, _080363B0 @ =0x08342FD8
	b _080363B8
	.align 2, 0
_080363A8: .4byte gCurrentSprite
_080363AC: .4byte gSubSpriteData1
_080363B0: .4byte 0x08342FD8
_080363B4:
	ldr r1, _080363CC @ =gSubSpriteData1
	ldr r0, _080363D0 @ =0x08342FB8
_080363B8:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080363CC: .4byte gSubSpriteData1
_080363D0: .4byte 0x08342FB8

	thumb_func_start BoxStopSkidding
BoxStopSkidding: @ 0x080363D4
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080363F4
	ldr r1, _080363F0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3b
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #3
	b _08036404
	.align 2, 0
_080363F0: .4byte gCurrentSprite
_080363F4:
	ldr r1, _0803640C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08036406
	adds r1, #0x24
	movs r0, #0x3b
_08036404:
	strb r0, [r1]
_08036406:
	pop {r0}
	bx r0
	.align 2, 0
_0803640C: .4byte gCurrentSprite

	thumb_func_start BoxBonkingInit
BoxBonkingInit: @ 0x08036410
	push {lr}
	ldr r1, _08036454 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	subs r0, #0x10
	movs r3, #0
	movs r2, #0
	strh r0, [r1, #8]
	ldr r0, _08036458 @ =0x08342D98
	str r0, [r1]
	strb r3, [r1, #6]
	strh r2, [r1, #4]
	ldr r2, _0803645C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r3, [r0]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	ldr r0, _08036460 @ =0x00000267
	bl SoundPlay
	movs r0, #0x14
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	pop {r0}
	bx r0
	.align 2, 0
_08036454: .4byte gSubSpriteData1
_08036458: .4byte 0x08342D98
_0803645C: .4byte gCurrentSprite
_08036460: .4byte 0x00000267

	thumb_func_start BoxBonking
BoxBonking: @ 0x08036464
	push {r4, r5, r6, r7, lr}
	ldr r4, _08036488 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0803648C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08036494
	strh r1, [r4, #8]
	ldr r0, _08036490 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x4b
	strb r1, [r0]
	b _080364F8
	.align 2, 0
_08036488: .4byte gSubSpriteData1
_0803648C: .4byte gPreviousVerticalCollisionCheck
_08036490: .4byte gCurrentSprite
_08036494:
	ldr r2, _080364C0 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r6, _080364C4 @ =0x0834210C
	lsls r0, r3, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _080364C8 @ =0x00007FFF
	cmp r1, r0
	bne _080364CC
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r4, #8]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _080364D6
	.align 2, 0
_080364C0: .4byte gCurrentSprite
_080364C4: .4byte 0x0834210C
_080364C8: .4byte 0x00007FFF
_080364CC:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #8]
	adds r0, r0, r5
_080364D6:
	strh r0, [r4, #8]
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080364F0
	ldr r1, _080364EC @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	adds r0, #6
	b _080364F6
	.align 2, 0
_080364EC: .4byte gSubSpriteData1
_080364F0:
	ldr r1, _08036500 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	subs r0, #6
_080364F6:
	strh r0, [r1, #0xa]
_080364F8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08036500: .4byte gSubSpriteData1

	thumb_func_start BoxLandingFromBonkInit
BoxLandingFromBonkInit: @ 0x08036504
	push {lr}
	ldr r1, _08036534 @ =gSubSpriteData1
	ldr r0, _08036538 @ =0x08342DA8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _0803653C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x4c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	ldr r0, _08036540 @ =0x00000266
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036534: .4byte gSubSpriteData1
_08036538: .4byte 0x08342DA8
_0803653C: .4byte gCurrentSprite
_08036540: .4byte 0x00000266

	thumb_func_start BoxLandingFromBonk
BoxLandingFromBonk: @ 0x08036544
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036556
	ldr r0, _0803655C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x17
	strb r1, [r0]
_08036556:
	pop {r0}
	bx r0
	.align 2, 0
_0803655C: .4byte gCurrentSprite

	thumb_func_start BoxLandingInit
BoxLandingInit: @ 0x08036560
	push {lr}
	ldr r1, _08036588 @ =gSubSpriteData1
	ldr r0, _0803658C @ =0x08342DA8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _08036590 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x3a
	strb r1, [r2]
	adds r0, #0x31
	strb r3, [r0]
	ldr r0, _08036594 @ =0x00000266
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036588: .4byte gSubSpriteData1
_0803658C: .4byte 0x08342DA8
_08036590: .4byte gCurrentSprite
_08036594: .4byte 0x00000266

	thumb_func_start BoxLanding
BoxLanding: @ 0x08036598
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080365CC
	ldr r1, _080365B4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	cmp r0, #0
	bne _080365B8
	adds r1, #0x24
	movs r0, #0x27
	b _080365CA
	.align 2, 0
_080365B4: .4byte gCurrentSprite
_080365B8:
	subs r0, #1
	strb r0, [r3]
	movs r2, #0x7f
	ands r2, r0
	cmp r2, #0
	bne _080365C6
	strb r2, [r3]
_080365C6:
	adds r1, #0x24
	movs r0, #0x3b
_080365CA:
	strb r0, [r1]
_080365CC:
	pop {r0}
	bx r0

	thumb_func_start BoxFinishedCrawlingInit
BoxFinishedCrawlingInit: @ 0x080365D0
	push {r4, lr}
	ldr r2, _08036600 @ =gSubSpriteData1
	ldr r0, _08036604 @ =0x08342F38
	str r0, [r2]
	ldr r1, _08036608 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r1
	mov ip, r0
	movs r3, #0
	movs r0, #2
	mov r4, ip
	strb r0, [r4]
	strb r3, [r2, #6]
	strh r3, [r2, #4]
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	movs r0, #0x99
	lsls r0, r0, #2
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036600: .4byte gSubSpriteData1
_08036604: .4byte 0x08342F38
_08036608: .4byte gCurrentSprite

	thumb_func_start BoxFinishedCrawling
BoxFinishedCrawling: @ 0x0803660C
	push {r4, r5, lr}
	ldr r4, _0803662C @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #1
	bls _08036630
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036662
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	b _08036662
	.align 2, 0
_0803662C: .4byte gCurrentSprite
_08036630:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036662
	bl SamusCheckOnCeilingLadder
	cmp r0, #0
	beq _08036648
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3b
	b _08036660
_08036648:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803665A
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3b
	b _08036660
_0803665A:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x19
_08036660:
	strb r0, [r1]
_08036662:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start BoxJumpWarningInit
BoxJumpWarningInit: @ 0x08036668
	push {r4, lr}
	ldr r0, _0803668C @ =gSamusData
	ldrh r4, [r0, #0x16]
	ldr r0, _08036690 @ =gSubSpriteData1
	ldrh r2, [r0, #0xa]
	adds r1, r2, #0
	subs r1, #0x78
	adds r3, r0, #0
	cmp r1, r4
	bge _08036694
	adds r0, r2, #0
	adds r0, #0x78
	cmp r0, r4
	ble _08036694
	bl BoxStoppingToFireBombInit
	b _080366A6
	.align 2, 0
_0803668C: .4byte gSamusData
_08036690: .4byte gSubSpriteData1
_08036694:
	ldr r0, _080366AC @ =0x08342DC8
	str r0, [r3]
	movs r0, #0
	strb r0, [r3, #6]
	strh r0, [r3, #4]
	ldr r0, _080366B0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3c
	strb r1, [r0]
_080366A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080366AC: .4byte 0x08342DC8
_080366B0: .4byte gCurrentSprite

	thumb_func_start BoxJumpWarning
BoxJumpWarning: @ 0x080366B4
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080366C6
	ldr r0, _080366CC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3d
	strb r1, [r0]
_080366C6:
	pop {r0}
	bx r0
	.align 2, 0
_080366CC: .4byte gCurrentSprite

	thumb_func_start BoxJumpingInit
BoxJumpingInit: @ 0x080366D0
	push {r4, r5, lr}
	ldr r1, _0803670C @ =gSubSpriteData1
	ldr r0, _08036710 @ =0x08342D98
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _08036714 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3e
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #2
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0803678C
	bl SamusCheckOnCeilingLadder
	cmp r0, #0
	beq _08036718
	bl MakeSpriteFaceSamusDirection
	b _0803671C
	.align 2, 0
_0803670C: .4byte gSubSpriteData1
_08036710: .4byte 0x08342D98
_08036714: .4byte gCurrentSprite
_08036718:
	bl MakeSpriteFaceAwayFromSamusDirection
_0803671C:
	ldr r4, _08036750 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _08036764
	ldr r1, _08036754 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	ldr r2, _08036758 @ =0xFFFFFED4
	adds r0, r0, r2
	ldrh r1, [r1, #0xa]
	movs r2, #0x96
	lsls r2, r2, #1
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803675C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803678C
	ldrh r1, [r4]
	ldr r0, _08036760 @ =0x0000FDFF
	ands r0, r1
	b _08036782
	.align 2, 0
_08036750: .4byte gCurrentSprite
_08036754: .4byte gSubSpriteData1
_08036758: .4byte 0xFFFFFED4
_0803675C: .4byte gPreviousCollisionCheck
_08036760: .4byte 0x0000FDFF
_08036764:
	ldr r1, _08036798 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	ldr r2, _0803679C @ =0xFFFFFED4
	adds r0, r0, r2
	ldrh r1, [r1, #0xa]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080367A0 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803678C
	ldrh r1, [r4]
	adds r0, r5, #0
	orrs r0, r1
_08036782:
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0x83
	strb r0, [r1]
_0803678C:
	ldr r0, _080367A4 @ =0x00000265
	bl SoundPlay
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08036798: .4byte gSubSpriteData1
_0803679C: .4byte 0xFFFFFED4
_080367A0: .4byte gPreviousCollisionCheck
_080367A4: .4byte 0x00000265

	thumb_func_start BoxJumping
BoxJumping: @ 0x080367A8
	push {r4, r5, lr}
	ldr r4, _080367D0 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r1, _080367D4 @ =0x083420E4
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _080367D8 @ =0x00007FFF
	cmp r1, r0
	bne _080367DC
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x39
	strb r0, [r1]
	b _080367F2
	.align 2, 0
_080367D0: .4byte gCurrentSprite
_080367D4: .4byte 0x083420E4
_080367D8: .4byte 0x00007FFF
_080367DC:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _080367F8 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r3
	strh r0, [r1, #8]
	movs r0, #0xc
	movs r1, #0x37
	bl BoxXMovement
_080367F2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080367F8: .4byte gSubSpriteData1

	thumb_func_start BoxStoppingToFireBombInit
BoxStoppingToFireBombInit: @ 0x080367FC
	push {r4, lr}
	ldr r2, _0803682C @ =gSubSpriteData1
	ldr r0, _08036830 @ =0x08342F38
	str r0, [r2]
	ldr r1, _08036834 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r1
	mov ip, r0
	movs r3, #0
	movs r0, #3
	mov r4, ip
	strb r0, [r4]
	strb r3, [r2, #6]
	strh r3, [r2, #4]
	adds r1, #0x24
	movs r0, #0x28
	strb r0, [r1]
	movs r0, #0x99
	lsls r0, r0, #2
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803682C: .4byte gSubSpriteData1
_08036830: .4byte 0x08342F38
_08036834: .4byte gCurrentSprite

	thumb_func_start BoxStoppingToFireBomb
BoxStoppingToFireBomb: @ 0x08036838
	push {r4, r5, lr}
	ldr r5, _08036858 @ =gCurrentSprite
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #1
	bls _0803685C
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0803686C
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	b _0803686C
	.align 2, 0
_08036858: .4byte gCurrentSprite
_0803685C:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0803686C
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
_0803686C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxLoweringToFireBombInit
BoxLoweringToFireBombInit: @ 0x08036874
	push {lr}
	ldr r1, _08036898 @ =gSubSpriteData1
	ldr r0, _0803689C @ =0x08342FE8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _080368A0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2a
	strb r1, [r0]
	movs r0, #0x9a
	lsls r0, r0, #2
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036898: .4byte gSubSpriteData1
_0803689C: .4byte 0x08342FE8
_080368A0: .4byte gCurrentSprite

	thumb_func_start BoxLoweringToFireBomb
BoxLoweringToFireBomb: @ 0x080368A4
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080368C2
	ldr r0, _080368C8 @ =gCurrentSprite
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x2c
	strb r1, [r0]
	ldr r0, _080368CC @ =gSubSpriteData1
	ldr r1, _080368D0 @ =0x08343028
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
_080368C2:
	pop {r0}
	bx r0
	.align 2, 0
_080368C8: .4byte gCurrentSprite
_080368CC: .4byte gSubSpriteData1
_080368D0: .4byte 0x08343028

	thumb_func_start BoxFiringBomb
BoxFiringBomb: @ 0x080368D4
	push {r4, r5, r6, lr}
	sub sp, #0xc
	bl CheckEndOfSubSpriteData1Animation
	adds r6, r0, #0
	cmp r6, #0
	beq _08036910
	ldr r0, _08036900 @ =gCurrentSprite
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x2e
	strb r1, [r0]
	ldr r0, _08036904 @ =gSubSpriteData1
	ldr r1, _08036908 @ =0x08343048
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	ldr r0, _0803690C @ =0x00000269
	bl SoundPlay
	b _0803697A
	.align 2, 0
_08036900: .4byte gCurrentSprite
_08036904: .4byte gSubSpriteData1
_08036908: .4byte 0x08343048
_0803690C: .4byte 0x00000269
_08036910:
	ldr r3, _08036948 @ =gCurrentSprite
	ldrh r5, [r3, #2]
	ldrh r4, [r3, #4]
	ldr r0, _0803694C @ =gSubSpriteData1
	ldr r0, [r0, #4]
	ldr r1, _08036950 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _08036954 @ =0x00020001
	cmp r0, r1
	bne _0803697A
	ldr r0, _08036958 @ =gSamusData
	ldrh r0, [r0, #0x16]
	cmp r4, r0
	bls _0803695C
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r5, #0
	subs r0, #0x64
	str r0, [sp]
	str r4, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x71
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0803697A
	.align 2, 0
_08036948: .4byte gCurrentSprite
_0803694C: .4byte gSubSpriteData1
_08036950: .4byte 0x00FFFFFF
_08036954: .4byte 0x00020001
_08036958: .4byte gSamusData
_0803695C:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r5, #0
	subs r0, #0x64
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [sp, #8]
	movs r0, #0x71
	movs r1, #0
	bl SpriteSpawnSecondary
_0803697A:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxDoneFiringBomb
BoxDoneFiringBomb: @ 0x08036984
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036996
	ldr r0, _0803699C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x17
	strb r1, [r0]
_08036996:
	pop {r0}
	bx r0
	.align 2, 0
_0803699C: .4byte gCurrentSprite

	thumb_func_start BoxDyingInit
BoxDyingInit: @ 0x080369A0
	ldr r1, _080369CC @ =gCurrentSprite
	ldr r0, _080369D0 @ =0x08347BD8
	str r0, [r1, #0x18]
	movs r3, #0
	strb r3, [r1, #0x1c]
	movs r2, #0
	strh r3, [r1, #0x16]
	adds r0, r1, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, #3
	strb r2, [r0]
	adds r1, #0x24
	movs r0, #0x44
	strb r0, [r1]
	ldr r0, _080369D4 @ =gSubSpriteData1
	ldr r1, _080369D8 @ =0x08342DF0
	str r1, [r0]
	strb r2, [r0, #6]
	strh r3, [r0, #4]
	bx lr
	.align 2, 0
_080369CC: .4byte gCurrentSprite
_080369D0: .4byte 0x08347BD8
_080369D4: .4byte gSubSpriteData1
_080369D8: .4byte 0x08342DF0

	thumb_func_start BoxDying
BoxDying: @ 0x080369DC
	push {r4, r5, lr}
	ldr r1, _08036A08 @ =gCurrentSprite
	adds r5, r1, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #0
	bne _08036A1C
	ldr r4, _08036A0C @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08036A10 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08036A14
	strh r1, [r4, #8]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	b _08036A2E
	.align 2, 0
_08036A08: .4byte gCurrentSprite
_08036A0C: .4byte gSubSpriteData1
_08036A10: .4byte gPreviousVerticalCollisionCheck
_08036A14:
	ldrh r0, [r4, #8]
	adds r0, #0x10
	strh r0, [r4, #8]
	b _08036A2E
_08036A1C:
	adds r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1e
	bls _08036A2E
	adds r1, #0x24
	movs r0, #0x45
	strb r0, [r1]
_08036A2E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start BoxMovingToFinalJumpInit
BoxMovingToFinalJumpInit: @ 0x08036A34
	push {r4, lr}
	ldr r4, _08036A80 @ =gCurrentSprite
	ldr r0, _08036A84 @ =0x08347BD8
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	movs r0, #0x77
	bl FindPrimarySprite
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _08036A88 @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrh r1, [r1, #4]
	strh r1, [r4, #8]
	adds r2, r4, #0
	adds r2, #0x2f
	strb r0, [r2]
	ldr r2, _08036A8C @ =gSubSpriteData1
	ldrh r0, [r2, #0xa]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r0, r1
	bls _08036A98
	ldr r0, _08036A90 @ =0x08342E18
	str r0, [r2]
	ldrh r1, [r4]
	ldr r0, _08036A94 @ =0x0000FDFF
	ands r0, r1
	b _08036AA6
	.align 2, 0
_08036A80: .4byte gCurrentSprite
_08036A84: .4byte 0x08347BD8
_08036A88: .4byte gSpriteData
_08036A8C: .4byte gSubSpriteData1
_08036A90: .4byte 0x08342E18
_08036A94: .4byte 0x0000FDFF
_08036A98:
	ldr r0, _08036AB8 @ =0x08342EA8
	str r0, [r2]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
_08036AA6:
	strh r0, [r4]
	ldr r1, _08036ABC @ =gSubSpriteData1
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036AB8: .4byte 0x08342EA8
_08036ABC: .4byte gSubSpriteData1

	thumb_func_start BoxMovingToFinalJump
BoxMovingToFinalJump: @ 0x08036AC0
	push {r4, r5, lr}
	ldr r0, _08036AFC @ =gSubSpriteData1
	ldr r0, [r0, #4]
	ldr r1, _08036B00 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _08036B04 @ =0x00010003
	cmp r0, r1
	bne _08036AD6
	ldr r0, _08036B08 @ =0x00000262
	bl SoundPlay
_08036AD6:
	ldr r0, _08036B0C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	ldr r5, _08036B10 @ =gCurrentSprite
	cmp r0, #0
	bne _08036B1A
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08036B14
	adds r1, r5, #0
	adds r1, #0x20
	movs r0, #0xb
	strb r0, [r1]
	b _08036B1A
	.align 2, 0
_08036AFC: .4byte gSubSpriteData1
_08036B00: .4byte 0x00FFFFFF
_08036B04: .4byte 0x00010003
_08036B08: .4byte 0x00000262
_08036B0C: .4byte gFrameCounter8Bit
_08036B10: .4byte gCurrentSprite
_08036B14:
	adds r0, r5, #0
	adds r0, #0x20
	strb r1, [r0]
_08036B1A:
	ldr r4, _08036B38 @ =gSubSpriteData1
	ldrh r3, [r4, #0xa]
	ldr r0, _08036B3C @ =0x0000FFF8
	ldrh r2, [r5, #8]
	adds r1, r0, #0
	ands r1, r3
	ands r0, r2
	cmp r1, r0
	bne _08036B40
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x47
	strb r0, [r1]
	b _08036B54
	.align 2, 0
_08036B38: .4byte gSubSpriteData1
_08036B3C: .4byte 0x0000FFF8
_08036B40:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08036B50
	adds r0, r3, #2
	b _08036B52
_08036B50:
	subs r0, r3, #2
_08036B52:
	strh r0, [r4, #0xa]
_08036B54:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxWaitingForFinalJumpInit
BoxWaitingForFinalJumpInit: @ 0x08036B5C
	push {lr}
	ldr r1, _08036B7C @ =gSubSpriteData1
	ldr r0, _08036B80 @ =0x08342DF0
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08036B84 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x48
	strb r1, [r0]
	ldr r0, _08036B88 @ =0x00000276
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036B7C: .4byte gSubSpriteData1
_08036B80: .4byte 0x08342DF0
_08036B84: .4byte gCurrentSprite
_08036B88: .4byte 0x00000276

	thumb_func_start BoxWaitingForFinalJump
BoxWaitingForFinalJump: @ 0x08036B8C
	push {r4, lr}
	ldr r0, _08036BB4 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	ldr r4, _08036BB8 @ =gCurrentSprite
	cmp r0, #0
	bne _08036BC2
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08036BBC
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #0xb
	strb r0, [r1]
	b _08036BC2
	.align 2, 0
_08036BB4: .4byte gFrameCounter8Bit
_08036BB8: .4byte gCurrentSprite
_08036BBC:
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
_08036BC2:
	ldrh r0, [r4, #4]
	lsrs r0, r0, #2
	ldr r1, _08036BF0 @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _08036BF4 @ =0xFFE70000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xbe
	bhi _08036BEA
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036BEA
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x49
	strb r0, [r1]
_08036BEA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036BF0: .4byte gBg1XPosition
_08036BF4: .4byte 0xFFE70000

	thumb_func_start BoxCrouchingForFinalJumpInit
BoxCrouchingForFinalJumpInit: @ 0x08036BF8
	ldr r1, _08036C10 @ =gSubSpriteData1
	ldr r0, _08036C14 @ =0x08342DC8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08036C18 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x4a
	strb r1, [r0]
	bx lr
	.align 2, 0
_08036C10: .4byte gSubSpriteData1
_08036C14: .4byte 0x08342DC8
_08036C18: .4byte gCurrentSprite

	thumb_func_start BoxCrouchingForFinalJump
BoxCrouchingForFinalJump: @ 0x08036C1C
	push {lr}
	ldr r0, _08036C40 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _08036C4E
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08036C48
	ldr r0, _08036C44 @ =gCurrentSprite
	adds r0, #0x20
	movs r1, #0xb
	b _08036C4C
	.align 2, 0
_08036C40: .4byte gFrameCounter8Bit
_08036C44: .4byte gCurrentSprite
_08036C48:
	ldr r0, _08036C68 @ =gCurrentSprite
	adds r0, #0x20
_08036C4C:
	strb r1, [r0]
_08036C4E:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08036C62
	ldr r0, _08036C68 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x4d
	strb r1, [r0]
	bl unk_36c4
_08036C62:
	pop {r0}
	bx r0
	.align 2, 0
_08036C68: .4byte gCurrentSprite

	thumb_func_start BoxFinalJumpInit
BoxFinalJumpInit: @ 0x08036C6C
	push {lr}
	ldr r1, _08036C94 @ =gSubSpriteData1
	ldr r0, _08036C98 @ =0x08342D98
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _08036C9C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x4e
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	ldr r0, _08036CA0 @ =0x00000277
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08036C94: .4byte gSubSpriteData1
_08036C98: .4byte 0x08342D98
_08036C9C: .4byte gCurrentSprite
_08036CA0: .4byte 0x00000277

	thumb_func_start BoxFinalJump
BoxFinalJump: @ 0x08036CA4
	push {r4, lr}
	ldr r0, _08036CCC @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	ldr r4, _08036CD0 @ =gCurrentSprite
	cmp r0, #0
	bne _08036CDA
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08036CD4
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #0xb
	strb r0, [r1]
	b _08036CDA
	.align 2, 0
_08036CCC: .4byte gFrameCounter8Bit
_08036CD0: .4byte gCurrentSprite
_08036CD4:
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
_08036CDA:
	ldr r0, _08036D14 @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	subs r1, #0x28
	strh r1, [r0, #8]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _08036D0C
	ldr r2, _08036D18 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	strh r3, [r4]
_08036D0C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036D14: .4byte gSubSpriteData1
_08036D18: .4byte gSpriteData

	thumb_func_start BoxCrawlingInit
BoxCrawlingInit: @ 0x08036D1C
	push {lr}
	ldr r2, _08036D34 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08036D40
	ldr r1, _08036D38 @ =gSubSpriteData1
	ldr r0, _08036D3C @ =0x08342EA8
	b _08036D44
	.align 2, 0
_08036D34: .4byte gCurrentSprite
_08036D38: .4byte gSubSpriteData1
_08036D3C: .4byte 0x08342EA8
_08036D40:
	ldr r1, _08036D58 @ =gSubSpriteData1
	ldr r0, _08036D5C @ =0x08342E18
_08036D44:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08036D58: .4byte gSubSpriteData1
_08036D5C: .4byte 0x08342E18

	thumb_func_start BoxCrawling
BoxCrawling: @ 0x08036D60
	push {lr}
	movs r0, #1
	movs r1, #7
	bl BoxXMovement
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxPartSetBoxWorkVar2
BoxPartSetBoxWorkVar2: @ 0x08036D70
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	ldr r2, _08036D94 @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, r3
	bhs _08036D8E
	strb r3, [r1]
_08036D8E:
	pop {r0}
	bx r0
	.align 2, 0
_08036D94: .4byte gSpriteData

	thumb_func_start BoxPartCenterSetImmunity
BoxPartCenterSetImmunity: @ 0x08036D98
	push {lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r1, _08036DC0 @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x29
	adds r3, r1, #0
	cmp r0, #0x19
	bhi _08036E64
	lsls r0, r0, #2
	ldr r1, _08036DC4 @ =_08036DC8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08036DC0: .4byte gSpriteData
_08036DC4: .4byte _08036DC8
_08036DC8: @ jump table
	.4byte _08036E30 @ case 0
	.4byte _08036E30 @ case 1
	.4byte _08036E64 @ case 2
	.4byte _08036E30 @ case 3
	.4byte _08036E64 @ case 4
	.4byte _08036E64 @ case 5
	.4byte _08036E64 @ case 6
	.4byte _08036E64 @ case 7
	.4byte _08036E64 @ case 8
	.4byte _08036E64 @ case 9
	.4byte _08036E64 @ case 10
	.4byte _08036E64 @ case 11
	.4byte _08036E64 @ case 12
	.4byte _08036E64 @ case 13
	.4byte _08036E64 @ case 14
	.4byte _08036E64 @ case 15
	.4byte _08036E64 @ case 16
	.4byte _08036E64 @ case 17
	.4byte _08036E64 @ case 18
	.4byte _08036E64 @ case 19
	.4byte _08036E64 @ case 20
	.4byte _08036E64 @ case 21
	.4byte _08036E54 @ case 22
	.4byte _08036E54 @ case 23
	.4byte _08036E54 @ case 24
	.4byte _08036E54 @ case 25
_08036E30:
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r3
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08036E64
	ldr r0, _08036E50 @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0x40
	orrs r1, r2
	b _08036E6E
	.align 2, 0
_08036E50: .4byte gCurrentSprite
_08036E54:
	ldr r0, _08036E60 @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0x40
	orrs r1, r2
	b _08036E6E
	.align 2, 0
_08036E60: .4byte gCurrentSprite
_08036E64:
	ldr r0, _08036E74 @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0xbf
	ands r1, r2
_08036E6E:
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08036E74: .4byte gCurrentSprite

	thumb_func_start BoxPartRemoveIgnoreProjectiles
BoxPartRemoveIgnoreProjectiles: @ 0x08036E78
	ldr r2, _08036E84 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08036E88 @ =0x00007FFF
	ands r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_08036E84: .4byte gCurrentSprite
_08036E88: .4byte 0x00007FFF

	thumb_func_start BoxPartInit
BoxPartInit: @ 0x08036E8C
	push {lr}
	ldr r2, _08036EC4 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08036EC8 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	subs r1, #5
	movs r0, #2
	strb r0, [r1]
	ldrb r0, [r2, #0x1e]
	adds r3, r2, #0
	cmp r0, #6
	bhi _08036ECC
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xb
	b _08036ED2
	.align 2, 0
_08036EC4: .4byte gCurrentSprite
_08036EC8: .4byte 0x0000FFFB
_08036ECC:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xd
_08036ED2:
	strb r0, [r1]
	ldrb r0, [r3, #0x1e]
	cmp r0, #0xb
	bls _08036EDC
	b _08036FE0
_08036EDC:
	lsls r0, r0, #2
	ldr r1, _08036EE8 @ =_08036EEC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08036EE8: .4byte _08036EEC
_08036EEC: @ jump table
	.4byte _08036F1C @ case 0
	.4byte _08036FA8 @ case 1
	.4byte _08036F1C @ case 2
	.4byte _08036FA8 @ case 3
	.4byte _08036FA8 @ case 4
	.4byte _08036FA8 @ case 5
	.4byte _08036F40 @ case 6
	.4byte _08036FE0 @ case 7
	.4byte _08036FA8 @ case 8
	.4byte _08036F68 @ case 9
	.4byte _08036FA8 @ case 10
	.4byte _08036FA8 @ case 11
_08036F1C:
	ldr r0, _08036F38 @ =0x0000FFB8
	strh r0, [r3, #0xa]
	movs r0, #0x48
	strh r0, [r3, #0xc]
	ldr r0, _08036F3C @ =0x0000FFE0
	strh r0, [r3, #0xe]
	movs r0, #0x20
	strh r0, [r3, #0x10]
	adds r1, r3, #0
	adds r1, #0x35
	movs r0, #2
	strb r0, [r1]
	subs r1, #0x10
	b _08036F7E
	.align 2, 0
_08036F38: .4byte 0x0000FFB8
_08036F3C: .4byte 0x0000FFE0
_08036F40:
	ldr r0, _08036F60 @ =0x0000FFD0
	strh r0, [r3, #0xa]
	movs r0, #0x40
	strh r0, [r3, #0xc]
	ldr r0, _08036F64 @ =0x0000FFE0
	strh r0, [r3, #0xe]
	movs r0, #0x20
	strh r0, [r3, #0x10]
	adds r1, r3, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	subs r1, #0x10
	movs r0, #2
	strb r0, [r1]
	b _08036FC8
	.align 2, 0
_08036F60: .4byte 0x0000FFD0
_08036F64: .4byte 0x0000FFE0
_08036F68:
	ldr r0, _08036F9C @ =0x0000FFE0
	strh r0, [r3, #0xa]
	movs r0, #0x20
	strh r0, [r3, #0xc]
	ldr r0, _08036FA0 @ =0x0000FFC0
	strh r0, [r3, #0xe]
	movs r0, #0x40
	strh r0, [r3, #0x10]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
_08036F7E:
	strb r0, [r1]
	ldr r1, _08036FA4 @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	b _08036FE4
	.align 2, 0
_08036F9C: .4byte 0x0000FFE0
_08036FA0: .4byte 0x0000FFC0
_08036FA4: .4byte sSecondarySpriteStats
_08036FA8:
	movs r2, #0
	ldr r1, _08036FD8 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3]
_08036FC8:
	ldr r1, _08036FDC @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	b _08036FE4
	.align 2, 0
_08036FD8: .4byte 0x0000FFFC
_08036FDC: .4byte sSecondarySpriteStats
_08036FE0:
	movs r0, #0
	strh r0, [r3]
_08036FE4:
	bl BoxSyncSubSprites
	pop {r0}
	bx r0

	thumb_func_start BoxPartFrontLeftLeg
BoxPartFrontLeftLeg: @ 0x08036FEC
	push {r4, r5, r6, r7, lr}
	ldr r5, _08037010 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r6, [r0]
	ldr r0, _08037014 @ =gSpriteData
	lsls r1, r6, #3
	subs r1, r1, r6
	lsls r1, r1, #3
	adds r2, r1, r0
	ldrh r0, [r2]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08037018
	strh r1, [r5]
	b _0803709A
	.align 2, 0
_08037010: .4byte gCurrentSprite
_08037014: .4byte gSpriteData
_08037018:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0803709A
	ldrh r3, [r5, #2]
	ldrh r1, [r5, #4]
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x44
	bne _0803704E
	ldr r0, [r5, #0x18]
	ldr r7, _08037084 @ =0x083479F0
	cmp r0, r7
	beq _0803704E
	adds r0, r3, #0
	adds r0, #0x3c
	movs r2, #0x30
	bl ParticleSet
	str r7, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
_0803704E:
	ldr r1, _08037088 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0803709A
	ldr r0, _0803708C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0803709A
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08037094
	ldr r0, _08037090 @ =gCurrentSprite
	adds r0, #0x20
	movs r1, #0xb
	b _08037098
	.align 2, 0
_08037084: .4byte 0x083479F0
_08037088: .4byte gSpriteData
_0803708C: .4byte gFrameCounter8Bit
_08037090: .4byte gCurrentSprite
_08037094:
	ldr r0, _080370A0 @ =gCurrentSprite
	adds r0, #0x20
_08037098:
	strb r1, [r0]
_0803709A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080370A0: .4byte gCurrentSprite

	thumb_func_start BoxPartFrontRightLeg
BoxPartFrontRightLeg: @ 0x080370A4
	push {r4, r5, r6, r7, lr}
	ldr r5, _080370C8 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r6, [r0]
	ldr r0, _080370CC @ =gSpriteData
	lsls r1, r6, #3
	subs r1, r1, r6
	lsls r1, r1, #3
	adds r2, r1, r0
	ldrh r0, [r2]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _080370D0
	strh r1, [r5]
	b _08037152
	.align 2, 0
_080370C8: .4byte gCurrentSprite
_080370CC: .4byte gSpriteData
_080370D0:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _08037152
	ldrh r3, [r5, #2]
	ldrh r1, [r5, #4]
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x44
	bne _08037106
	ldr r0, [r5, #0x18]
	ldr r7, _0803713C @ =0x08347AE8
	cmp r0, r7
	beq _08037106
	adds r0, r3, #0
	adds r0, #0x3c
	movs r2, #0x30
	bl ParticleSet
	str r7, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
_08037106:
	ldr r1, _08037140 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _08037152
	ldr r0, _08037144 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _08037152
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0803714C
	ldr r0, _08037148 @ =gCurrentSprite
	adds r0, #0x20
	movs r1, #0xb
	b _08037150
	.align 2, 0
_0803713C: .4byte 0x08347AE8
_08037140: .4byte gSpriteData
_08037144: .4byte gFrameCounter8Bit
_08037148: .4byte gCurrentSprite
_0803714C:
	ldr r0, _08037158 @ =gCurrentSprite
	adds r0, #0x20
_08037150:
	strb r1, [r0]
_08037152:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08037158: .4byte gCurrentSprite

	thumb_func_start BoxPartCenter
BoxPartCenter: @ 0x0803715C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	ldr r4, _0803718C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov sb, r0
	ldr r0, _08037190 @ =gSpriteData
	mov r2, sb
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	mov r8, r1
	ldrh r0, [r1]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08037194
	strh r1, [r4]
	b _080372A0
	.align 2, 0
_0803718C: .4byte gCurrentSprite
_08037190: .4byte gSpriteData
_08037194:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _080371A6
	b _080372A0
_080371A6:
	mov r7, r8
	adds r7, #0x2d
	ldrb r1, [r7]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _080371E0
	ldr r0, _080371D4 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _080372A0
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080371D8
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #0xc
	strb r0, [r1]
	b _080372A0
	.align 2, 0
_080371D4: .4byte gFrameCounter8Bit
_080371D8:
	adds r0, r4, #0
	adds r0, #0x20
	strb r6, [r0]
	b _080372A0
_080371E0:
	ldr r1, _08037220 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r5, [r0]
	ldrh r2, [r4, #2]
	ldrh r3, [r4, #4]
	mov r0, sb
	str r2, [sp]
	str r3, [sp, #4]
	bl BoxPartCenterSetImmunity
	ldrh r1, [r4, #0x14]
	ldr r2, [sp]
	ldr r3, [sp, #4]
	cmp r1, #0
	bne _08037224
	ldrb r1, [r7]
	movs r0, #0xfb
	ands r0, r1
	strb r0, [r7]
	adds r0, r2, #0
	adds r0, #0x32
	adds r1, r3, #0
	movs r2, #0x2f
	bl ParticleSet
	mov r1, r8
	adds r1, #0x24
	movs r0, #0x43
	strb r0, [r1]
	b _08037282
	.align 2, 0
_08037220: .4byte sSecondarySpriteStats
_08037224:
	lsrs r0, r5, #2
	cmp r1, r0
	bhs _08037234
	ldr r0, [r4, #0x18]
	ldr r1, _08037230 @ =0x08347BC8
	b _0803723E
	.align 2, 0
_08037230: .4byte 0x08347BC8
_08037234:
	lsrs r0, r5, #1
	cmp r1, r0
	bhs _0803725C
	ldr r0, [r4, #0x18]
	ldr r1, _08037258 @ =0x08347BB8
_0803723E:
	cmp r0, r1
	beq _08037282
	str r1, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r0, r2, #0
	adds r0, #0x24
	adds r1, r3, #0
	movs r2, #0x30
	bl ParticleSet
	b _08037282
	.align 2, 0
_08037258: .4byte 0x08347BB8
_0803725C:
	ldrh r1, [r4, #0x14]
	lsls r0, r5, #1
	adds r0, r0, r5
	asrs r0, r0, #2
	cmp r1, r0
	bge _08037282
	ldr r0, [r4, #0x18]
	ldr r1, _080372B0 @ =0x08347BA8
	cmp r0, r1
	beq _08037282
	str r1, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r0, r2, #0
	adds r0, #0x24
	adds r1, r3, #0
	movs r2, #0x30
	bl ParticleSet
_08037282:
	ldr r0, _080372B4 @ =gCurrentSprite
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _080372A0
	mov r0, sb
	movs r1, #2
	bl BoxPartSetBoxWorkVar2
	movs r0, #0x9e
	lsls r0, r0, #2
	bl SoundPlay
_080372A0:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080372B0: .4byte 0x08347BA8
_080372B4: .4byte gCurrentSprite

	thumb_func_start BoxPartCenterBottom
BoxPartCenterBottom: @ 0x080372B8
	push {lr}
	ldr r3, _080372DC @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _080372E0 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r2, r0, r2
	ldrh r0, [r2]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _080372E4
	strh r1, [r3]
	b _0803748C
	.align 2, 0
_080372DC: .4byte gCurrentSprite
_080372E0: .4byte gSpriteData
_080372E4:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _080372F2
	b _0803748C
_080372F2:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #8
	cmp r0, #0x46
	bls _08037300
	b _0803747C
_08037300:
	lsls r0, r0, #2
	ldr r1, _0803730C @ =_08037310
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803730C: .4byte _08037310
_08037310: @ jump table
	.4byte _0803742C @ case 0
	.4byte _0803747C @ case 1
	.4byte _0803747C @ case 2
	.4byte _0803747C @ case 3
	.4byte _0803747C @ case 4
	.4byte _0803747C @ case 5
	.4byte _0803747C @ case 6
	.4byte _0803747C @ case 7
	.4byte _0803747C @ case 8
	.4byte _0803747C @ case 9
	.4byte _0803747C @ case 10
	.4byte _0803747C @ case 11
	.4byte _0803747C @ case 12
	.4byte _0803747C @ case 13
	.4byte _0803747C @ case 14
	.4byte _0803747C @ case 15
	.4byte _0803742C @ case 16
	.4byte _0803747C @ case 17
	.4byte _0803747C @ case 18
	.4byte _0803747C @ case 19
	.4byte _0803747C @ case 20
	.4byte _0803747C @ case 21
	.4byte _0803747C @ case 22
	.4byte _0803747C @ case 23
	.4byte _0803747C @ case 24
	.4byte _0803747C @ case 25
	.4byte _0803747C @ case 26
	.4byte _0803747C @ case 27
	.4byte _0803747C @ case 28
	.4byte _0803747C @ case 29
	.4byte _0803747C @ case 30
	.4byte _0803747C @ case 31
	.4byte _0803747C @ case 32
	.4byte _0803747C @ case 33
	.4byte _0803747C @ case 34
	.4byte _0803747C @ case 35
	.4byte _0803747C @ case 36
	.4byte _0803747C @ case 37
	.4byte _0803747C @ case 38
	.4byte _0803747C @ case 39
	.4byte _0803747C @ case 40
	.4byte _0803747C @ case 41
	.4byte _0803747C @ case 42
	.4byte _0803747C @ case 43
	.4byte _0803747C @ case 44
	.4byte _0803747C @ case 45
	.4byte _0803747C @ case 46
	.4byte _0803747C @ case 47
	.4byte _0803747C @ case 48
	.4byte _0803747C @ case 49
	.4byte _0803747C @ case 50
	.4byte _0803747C @ case 51
	.4byte _0803742C @ case 52
	.4byte _0803747C @ case 53
	.4byte _0803747C @ case 54
	.4byte _0803747C @ case 55
	.4byte _0803747C @ case 56
	.4byte _0803747C @ case 57
	.4byte _0803747C @ case 58
	.4byte _0803747C @ case 59
	.4byte _08037438 @ case 60
	.4byte _08037438 @ case 61
	.4byte _08037438 @ case 62
	.4byte _08037438 @ case 63
	.4byte _08037438 @ case 64
	.4byte _08037438 @ case 65
	.4byte _08037438 @ case 66
	.4byte _0803747C @ case 67
	.4byte _0803747C @ case 68
	.4byte _08037438 @ case 69
	.4byte _08037438 @ case 70
_0803742C:
	ldr r0, [r3, #0x18]
	ldr r1, _08037434 @ =0x08347CA8
	b _08037480
	.align 2, 0
_08037434: .4byte 0x08347CA8
_08037438:
	ldr r0, [r3, #0x18]
	ldr r1, _0803746C @ =0x08347CA8
	cmp r0, r1
	beq _08037448
	str r1, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
_08037448:
	ldr r0, _08037470 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0803748C
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08037474
	adds r1, r3, #0
	adds r1, #0x20
	movs r0, #0xc
	strb r0, [r1]
	b _0803748C
	.align 2, 0
_0803746C: .4byte 0x08347CA8
_08037470: .4byte gFrameCounter8Bit
_08037474:
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
	b _0803748C
_0803747C:
	ldr r0, [r3, #0x18]
	ldr r1, _08037490 @ =0x08347C98
_08037480:
	cmp r0, r1
	beq _0803748C
	str r1, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
_0803748C:
	pop {r0}
	bx r0
	.align 2, 0
_08037490: .4byte 0x08347C98

	thumb_func_start BoxPartDefault
BoxPartDefault: @ 0x08037494
	push {lr}
	ldr r3, _080374B8 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _080374BC @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r2, r0, r2
	ldrh r0, [r2]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _080374C0
	strh r1, [r3]
	b _0803750E
	.align 2, 0
_080374B8: .4byte gCurrentSprite
_080374BC: .4byte gSpriteData
_080374C0:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0803750E
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x44
	blt _0803750E
	cmp r0, #0x4a
	ble _080374E2
	cmp r0, #0x4e
	bgt _0803750E
	cmp r0, #0x4d
	blt _0803750E
_080374E2:
	ldr r0, _08037504 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0803750E
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08037508
	adds r1, r3, #0
	adds r1, #0x20
	movs r0, #0xd
	strb r0, [r1]
	b _0803750E
	.align 2, 0
_08037504: .4byte gFrameCounter8Bit
_08037508:
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
_0803750E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxMissileInit
BoxMissileInit: @ 0x08037514
	push {r4, lr}
	ldr r0, _0803759C @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _080375A0 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	ldr r0, _080375A4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _080375A8 @ =0x0000FFF8
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #8
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _080375AC @ =0x08347D68
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r1, _080375B0 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r1, ip
	adds r1, #0x2b
	movs r0, #0xc0
	strb r0, [r1]
	adds r0, #0x40
	strh r0, [r4, #0x12]
	adds r1, #3
	movs r0, #0x24
	strb r0, [r1]
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r4, #6]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	ldr r0, _080375B4 @ =0x0000026B
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803759C: .4byte gCurrentSprite
_080375A0: .4byte 0x0000FFFB
_080375A4: .4byte gIoRegisters
_080375A8: .4byte 0x0000FFF8
_080375AC: .4byte 0x08347D68
_080375B0: .4byte sSecondarySpriteStats
_080375B4: .4byte 0x0000026B

	thumb_func_start BoxMissileSpawning
BoxMissileSpawning: @ 0x080375B8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r5, _08037638 @ =gCurrentSprite
	ldrh r0, [r5, #0x14]
	cmp r0, #0
	bne _080375D0
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
_080375D0:
	adds r6, r5, #0
	adds r6, #0x2e
	ldrb r1, [r6]
	lsrs r1, r1, #1
	ldrh r0, [r5, #2]
	subs r0, r0, r1
	movs r2, #0
	mov r8, r2
	strh r0, [r5, #2]
	cmp r1, #2
	bhi _08037600
	adds r7, r5, #0
	adds r7, #0x2b
	ldrb r0, [r7]
	ldr r2, _0803763C @ =gSamusData
	ldrh r1, [r2, #0x18]
	subs r1, #0x40
	ldrh r2, [r2, #0x16]
	ldrh r3, [r5, #2]
	ldrh r4, [r5, #4]
	str r4, [sp]
	bl RotateSpriteTowardsSamus
	strb r0, [r7]
_08037600:
	ldrb r0, [r6]
	subs r0, #2
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0803762C
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	mov r2, r8
	strb r2, [r6]
	adds r0, #1
	strb r1, [r0]
_0803762C:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08037638: .4byte gCurrentSprite
_0803763C: .4byte gSamusData

	thumb_func_start BoxMissileMoving
BoxMissileMoving: @ 0x08037640
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r1, _080376C0 @ =gCurrentSprite
	ldrh r0, [r1, #6]
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080376B2
	ldrh r0, [r1, #0x14]
	cmp r0, #0
	beq _080376B2
	ldrb r1, [r1, #0x1e]
	movs r2, #8
	cmp r1, #3
	beq _0803766E
	movs r2, #0x28
	cmp r1, #2
	beq _0803766E
	movs r2, #0x68
	cmp r1, #1
	bne _0803766E
	movs r2, #0x48
_0803766E:
	ldr r4, _080376C4 @ =gSamusData
	ldrh r0, [r4, #0x18]
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r4, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0x18
	movs r3, #0x28
	bl MoveSpriteTowardsTarget
	ldr r5, _080376C0 @ =gCurrentSprite
	adds r6, r5, #0
	adds r6, #0x2b
	ldrb r0, [r6]
	ldrh r1, [r4, #0x18]
	subs r1, #0x40
	ldrh r2, [r4, #0x16]
	ldrh r3, [r5, #2]
	ldrh r4, [r5, #4]
	str r4, [sp]
	bl RotateSpriteTowardsSamus
	strb r0, [r6]
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080376C8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080376B8
	adds r1, r5, #0
_080376B2:
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
_080376B8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080376C0: .4byte gCurrentSprite
_080376C4: .4byte gSamusData
_080376C8: .4byte gPreviousCollisionCheck

	thumb_func_start BoxMissileExploding
BoxMissileExploding: @ 0x080376CC
	push {lr}
	ldr r1, _080376EC @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	movs r2, #0x25
	bl ParticleSet
	movs r0, #0x9b
	lsls r0, r0, #2
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_080376EC: .4byte gCurrentSprite

	thumb_func_start BoxBombInit
BoxBombInit: @ 0x080376F0
	push {r4, lr}
	ldr r0, _08037780 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08037784 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08037788 @ =0x0000FFE4
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #0x1c
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _0803778C @ =0x08347E58
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r1, _08037790 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r0, ip
	adds r0, #0x2b
	strb r2, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x12]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x30
	movs r0, #7
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #0xd
	movs r3, #2
	strb r3, [r0]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #0x9c
	lsls r0, r0, #2
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08037780: .4byte gCurrentSprite
_08037784: .4byte 0x0000FFFB
_08037788: .4byte 0x0000FFE4
_0803778C: .4byte 0x08347E58
_08037790: .4byte sSecondarySpriteStats

	thumb_func_start BoxBombMoving
BoxBombMoving: @ 0x08037794
	push {r4, r5, r6, lr}
	ldr r1, _080377A8 @ =gCurrentSprite
	ldrh r0, [r1, #0x14]
	adds r5, r1, #0
	cmp r0, #0
	bne _080377AC
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _08037958
	.align 2, 0
_080377A8: .4byte gCurrentSprite
_080377AC:
	movs r0, #0x2f
	adds r0, r0, r5
	mov ip, r0
	ldrb r6, [r0]
	adds r0, r6, #0
	cmp r0, #0
	bne _080377FC
	adds r3, r5, #0
	adds r3, #0x31
	ldrb r2, [r3]
	ldr r0, _080377DC @ =0x0834214A
	lsls r1, r2, #1
	adds r1, r1, r0
	ldrh r4, [r1]
	ldr r0, _080377E0 @ =0x00007FFF
	cmp r4, r0
	bne _080377E4
	movs r4, #0
	adds r0, r6, #1
	mov r1, ip
	strb r0, [r1]
	strb r4, [r3]
	b _080377E8
	.align 2, 0
_080377DC: .4byte 0x0834214A
_080377E0: .4byte 0x00007FFF
_080377E4:
	adds r0, r2, #1
	strb r0, [r3]
_080377E8:
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #3
	bne _080378D4
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #7
	strb r0, [r1]
	b _080378D4
_080377FC:
	cmp r0, #2
	bne _08037828
	adds r3, r5, #0
	adds r3, #0x31
	ldrb r2, [r3]
	ldr r0, _08037820 @ =0x0834213E
_08037808:
	lsls r1, r2, #1
	adds r1, r1, r0
	ldrh r4, [r1]
	ldr r0, _08037824 @ =0x00007FFF
	cmp r4, r0
	bne _0803783C
	movs r4, #0
	adds r0, r6, #1
	mov r1, ip
	strb r0, [r1]
	strb r4, [r3]
	b _080378D4
	.align 2, 0
_08037820: .4byte 0x0834213E
_08037824: .4byte 0x00007FFF
_08037828:
	cmp r0, #4
	bne _08037842
	adds r3, r5, #0
	adds r3, #0x31
	ldrb r2, [r3]
	ldr r0, _08037838 @ =0x08342134
	b _08037808
	.align 2, 0
_08037838: .4byte 0x08342134
_0803783C:
	adds r0, r2, #1
	strb r0, [r3]
	b _080378D4
_08037842:
	cmp r0, #6
	bne _08037858
	adds r0, r5, #0
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	b _080378DA
_08037858:
	adds r3, r5, #0
	adds r3, #0x31
	ldrb r2, [r3]
	ldr r1, _08037878 @ =0x08342160
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	ldr r0, _0803787C @ =0x00007FFF
	cmp r4, r0
	bne _08037880
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	b _08037884
	.align 2, 0
_08037878: .4byte 0x08342160
_0803787C: .4byte 0x00007FFF
_08037880:
	adds r0, r2, #1
	strb r0, [r3]
_08037884:
	ldr r5, _080378C8 @ =gCurrentSprite
	ldrh r0, [r5, #2]
	adds r0, #0x20
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _080378CC @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080378D4
	adds r0, r1, #0
	subs r0, #0x20
	strh r0, [r5, #2]
	adds r4, r5, #0
	adds r4, #0x2f
	ldrb r0, [r4]
	cmp r0, #1
	bne _080378B0
	ldr r0, _080378D0 @ =0x00000271
	bl SoundPlay
_080378B0:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	subs r0, #2
	strb r0, [r1]
	b _080378DA
	.align 2, 0
_080378C8: .4byte gCurrentSprite
_080378CC: .4byte gPreviousVerticalCollisionCheck
_080378D0: .4byte 0x00000271
_080378D4:
	ldrh r0, [r5, #2]
	adds r0, r4, r0
	strh r0, [r5, #2]
_080378DA:
	adds r4, r5, #0
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08037924
	adds r2, r4, #0
	adds r2, #0x2b
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r0, #6
	subs r0, r0, r1
	lsls r0, r0, #3
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08037920 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08037958
	adds r1, r4, #0
	adds r1, #0x30
	ldrh r0, [r4, #4]
	ldrb r1, [r1]
	adds r0, r0, r1
	strh r0, [r4, #4]
	b _08037958
	.align 2, 0
_08037920: .4byte gPreviousCollisionCheck
_08037924:
	adds r2, r5, #0
	adds r2, #0x2b
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	movs r1, #6
	subs r1, r1, r0
	lsls r1, r1, #3
	ldrb r0, [r2]
	subs r0, r0, r1
	strb r0, [r2]
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08037960 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08037958
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r0]
	ldrh r0, [r5, #4]
	subs r0, r0, r1
	strh r0, [r5, #4]
_08037958:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08037960: .4byte gPreviousCollisionCheck

	thumb_func_start BoxBombLanded
BoxBombLanded: @ 0x08037964
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r4, _0803797C @ =gCurrentSprite
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _08037980
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _080379DC
	.align 2, 0
_0803797C: .4byte gCurrentSprite
_08037980:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	bne _080379DC
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x72
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [sp, #8]
	movs r0, #0x72
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x22
	bl ParticleSet
	strh r5, [r4]
	ldr r0, _080379E4 @ =0x00000272
	bl SoundPlay
_080379DC:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080379E4: .4byte 0x00000272

	thumb_func_start BoxBombExploding
BoxBombExploding: @ 0x080379E8
	push {r4, lr}
	ldr r4, _08037A08 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	movs r2, #0x32
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	ldr r0, _08037A0C @ =0x00000273
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08037A08: .4byte gCurrentSprite
_08037A0C: .4byte 0x00000273

	thumb_func_start BoxFireInit
BoxFireInit: @ 0x08037A10
	push {r4, lr}
	ldr r0, _08037A6C @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08037A70 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r2, #0
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x27
	movs r0, #0x68
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	movs r1, #0x10
	strb r1, [r0]
	ldr r0, _08037A74 @ =0x0000FFE0
	mov r4, ip
	strh r0, [r4, #0xa]
	strh r2, [r4, #0xc]
	adds r0, #0x10
	strh r0, [r4, #0xe]
	strh r1, [r4, #0x10]
	ldr r0, _08037A78 @ =0x08347E80
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r1, _08037A7C @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08037A6C: .4byte gCurrentSprite
_08037A70: .4byte 0x0000FFFB
_08037A74: .4byte 0x0000FFE0
_08037A78: .4byte 0x08347E80
_08037A7C: .4byte sSecondarySpriteStats

	thumb_func_start BoxFireMovingHigh
BoxFireMovingHigh: @ 0x08037A80
	push {r4, r5, r6, lr}
	ldr r0, _08037A98 @ =gCurrentSprite
	ldrh r0, [r0, #0x16]
	cmp r0, #0x23
	bls _08037A8C
	b _08037BB4
_08037A8C:
	lsls r0, r0, #2
	ldr r1, _08037A9C @ =_08037AA0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08037A98: .4byte gCurrentSprite
_08037A9C: .4byte _08037AA0
_08037AA0: @ jump table
	.4byte _08037B30 @ case 0
	.4byte _08037B30 @ case 1
	.4byte _08037B30 @ case 2
	.4byte _08037B38 @ case 3
	.4byte _08037B40 @ case 4
	.4byte _08037BA4 @ case 5
	.4byte _08037B5C @ case 6
	.4byte _08037B94 @ case 7
	.4byte _08037B84 @ case 8
	.4byte _08037BB4 @ case 9
	.4byte _08037BB4 @ case 10
	.4byte _08037BB4 @ case 11
	.4byte _08037BB4 @ case 12
	.4byte _08037BB4 @ case 13
	.4byte _08037BB4 @ case 14
	.4byte _08037BB4 @ case 15
	.4byte _08037BB4 @ case 16
	.4byte _08037BB4 @ case 17
	.4byte _08037BB4 @ case 18
	.4byte _08037BB4 @ case 19
	.4byte _08037BB4 @ case 20
	.4byte _08037BB4 @ case 21
	.4byte _08037BB4 @ case 22
	.4byte _08037BB4 @ case 23
	.4byte _08037BB4 @ case 24
	.4byte _08037BB4 @ case 25
	.4byte _08037BB4 @ case 26
	.4byte _08037B64 @ case 27
	.4byte _08037B72 @ case 28
	.4byte _08037B84 @ case 29
	.4byte _08037B84 @ case 30
	.4byte _08037B8C @ case 31
	.4byte _08037B94 @ case 32
	.4byte _08037B9A @ case 33
	.4byte _08037BA4 @ case 34
	.4byte _08037BAC @ case 35
_08037B30:
	ldr r5, _08037B34 @ =0x0000FFE0
	b _08037BB6
	.align 2, 0
_08037B34: .4byte 0x0000FFE0
_08037B38:
	ldr r5, _08037B3C @ =0x0000FFC0
	b _08037BB6
	.align 2, 0
_08037B3C: .4byte 0x0000FFC0
_08037B40:
	ldr r5, _08037B54 @ =0x0000FFA0
	ldr r0, _08037B58 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _08037BB6
	movs r0, #0x9d
	lsls r0, r0, #2
	bl SoundPlay
	b _08037BB6
	.align 2, 0
_08037B54: .4byte 0x0000FFA0
_08037B58: .4byte gCurrentSprite
_08037B5C:
	ldr r5, _08037B60 @ =0x0000FF40
	b _08037BB6
	.align 2, 0
_08037B60: .4byte 0x0000FF40
_08037B64:
	ldr r0, _08037B78 @ =gCurrentSprite
	ldrb r0, [r0, #0x1c]
	cmp r0, #1
	bne _08037B72
	ldr r0, _08037B7C @ =0x00000275
	bl SoundPlay
_08037B72:
	ldr r5, _08037B80 @ =0x0000FEA0
	b _08037BB6
	.align 2, 0
_08037B78: .4byte gCurrentSprite
_08037B7C: .4byte 0x00000275
_08037B80: .4byte 0x0000FEA0
_08037B84:
	ldr r5, _08037B88 @ =0x0000FEC0
	b _08037BB6
	.align 2, 0
_08037B88: .4byte 0x0000FEC0
_08037B8C:
	ldr r5, _08037B90 @ =0x0000FEE0
	b _08037BB6
	.align 2, 0
_08037B90: .4byte 0x0000FEE0
_08037B94:
	movs r5, #0xff
	lsls r5, r5, #8
	b _08037BB6
_08037B9A:
	ldr r5, _08037BA0 @ =0x0000FF20
	b _08037BB6
	.align 2, 0
_08037BA0: .4byte 0x0000FF20
_08037BA4:
	ldr r5, _08037BA8 @ =0x0000FF80
	b _08037BB6
	.align 2, 0
_08037BA8: .4byte 0x0000FF80
_08037BAC:
	ldr r5, _08037BB0 @ =0x0000FFA0
	b _08037BB6
	.align 2, 0
_08037BB0: .4byte 0x0000FFA0
_08037BB4:
	ldr r5, _08037C08 @ =0x0000FE80
_08037BB6:
	ldr r4, _08037C0C @ =gCurrentSprite
	movs r6, #0
	strh r5, [r4, #0xa]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08037BE0
	ldr r0, _08037C10 @ =0x083480A8
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	ldr r0, _08037C14 @ =0x0000FFD0
	strh r0, [r4, #0xa]
_08037BE0:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _08037C1C
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08037C18 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08037C30
	ldrh r0, [r4, #4]
	adds r0, #3
	b _08037C3C
	.align 2, 0
_08037C08: .4byte 0x0000FE80
_08037C0C: .4byte gCurrentSprite
_08037C10: .4byte 0x083480A8
_08037C14: .4byte 0x0000FFD0
_08037C18: .4byte gPreviousCollisionCheck
_08037C1C:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08037C34 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08037C38
_08037C30:
	strh r6, [r4]
	b _08037C3E
	.align 2, 0
_08037C34: .4byte gPreviousCollisionCheck
_08037C38:
	ldrh r0, [r4, #4]
	subs r0, #3
_08037C3C:
	strh r0, [r4, #4]
_08037C3E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start BoxFireMovingLow
BoxFireMovingLow: @ 0x08037C44
	push {r4, r5, lr}
	ldr r4, _08037C94 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	movs r5, #0
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08037C6C
	ldr r0, _08037C98 @ =0x08347E80
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08037C9C @ =0x0000FFE0
	strh r0, [r4, #0xa]
_08037C6C:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _08037CA4
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08037CA0 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08037CB8
	ldrh r0, [r4, #4]
	adds r0, #3
	b _08037CC4
	.align 2, 0
_08037C94: .4byte gCurrentSprite
_08037C98: .4byte 0x08347E80
_08037C9C: .4byte 0x0000FFE0
_08037CA0: .4byte gPreviousCollisionCheck
_08037CA4:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08037CBC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08037CC0
_08037CB8:
	strh r5, [r4]
	b _08037CC6
	.align 2, 0
_08037CBC: .4byte gPreviousCollisionCheck
_08037CC0:
	ldrh r0, [r4, #4]
	subs r0, #3
_08037CC4:
	strh r0, [r4, #4]
_08037CC6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start BoxSpawnFallingDebris
BoxSpawnFallingDebris: @ 0x08037CCC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r4, _08037DC4 @ =gCurrentSprite
	ldrh r6, [r4, #2]
	ldrh r7, [r4, #4]
	ldrb r2, [r4, #0x1f]
	movs r0, #0x23
	adds r0, r0, r4
	mov r8, r0
	ldrb r3, [r0]
	str r6, [sp]
	adds r0, r7, #0
	subs r0, #0xe8
	str r0, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r1, r8
	ldrb r3, [r1]
	str r6, [sp]
	adds r0, r7, #0
	adds r0, #0xbe
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r6, [sp]
	ldr r1, _08037DC8 @ =0xFFFFFEAA
	adds r0, r7, r1
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r6, [sp]
	adds r0, r7, #0
	subs r0, #0xa0
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #3
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r1, r8
	ldrb r3, [r1]
	str r6, [sp]
	ldr r1, _08037DCC @ =0xFFFFFEFA
	adds r0, r7, r1
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r6, [sp]
	adds r0, r7, #0
	adds r0, #0xdc
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r1, r8
	ldrb r3, [r1]
	str r6, [sp]
	adds r0, r7, #0
	subs r0, #0x50
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r6, [sp]
	ldr r1, _08037DD0 @ =0xFFFFFEDC
	adds r0, r7, r1
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #7
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r6, [sp]
	adds r0, r7, #0
	adds r0, #0x8c
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4b
	movs r1, #8
	bl SpriteSpawnSecondary
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08037DC4: .4byte gCurrentSprite
_08037DC8: .4byte 0xFFFFFEAA
_08037DCC: .4byte 0xFFFFFEFA
_08037DD0: .4byte 0xFFFFFEDC

	thumb_func_start BoxSetDebrisClipdata
BoxSetDebrisClipdata: @ 0x08037DD4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08037E10 @ =gCurrentSprite
	ldrh r5, [r0, #2]
	ldrh r6, [r0, #4]
	ldr r0, _08037E14 @ =gCurrentClipdataAffectingAction
	mov r8, r0
	strb r4, [r0]
	subs r5, #0xe0
	adds r1, r6, #0
	adds r1, #0x20
	adds r0, r5, #0
	bl ProcessClipdata
	mov r0, r8
	strb r4, [r0]
	subs r6, #0x20
	adds r0, r5, #0
	adds r1, r6, #0
	bl ProcessClipdata
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08037E10: .4byte gCurrentSprite
_08037E14: .4byte gCurrentClipdataAffectingAction

	thumb_func_start BoxDebrisInit
BoxDebrisInit: @ 0x08037E18
	push {r4, r5, lr}
	ldr r4, _08037EAC @ =gCurrentSprite
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	movs r2, #0
	movs r3, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x40
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	movs r5, #0x29
	movs r0, #0x18
	strb r0, [r5, r4]
	ldr r0, _08037EB0 @ =0x0000FF10
	strh r0, [r4, #0xa]
	strh r1, [r4, #0xc]
	adds r0, #0xc0
	strh r0, [r4, #0xe]
	movs r0, #0x30
	strh r0, [r4, #0x10]
	ldr r0, _08037EB4 @ =0x08347FA8
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	movs r3, #1
	movs r0, #1
	strh r0, [r4, #0x14]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrh r0, [r4, #4]
	subs r0, #0x20
	strh r0, [r4, #4]
	bl EventCheckAfter_BoxDefeated
	adds r2, r0, #0
	cmp r2, #0
	beq _08037ECC
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	ldrh r1, [r4]
	ldr r0, _08037EB8 @ =0x0000DFFF
	ands r0, r1
	strh r0, [r4]
	ldr r0, _08037EBC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08037EC0
	strh r0, [r4]
	b _08037EDE
	.align 2, 0
_08037EAC: .4byte gCurrentSprite
_08037EB0: .4byte 0x0000FF10
_08037EB4: .4byte 0x08347FA8
_08037EB8: .4byte 0x0000DFFF
_08037EBC: .4byte gPreviousCollisionCheck
_08037EC0:
	movs r0, #2
	bl BoxSetDebrisClipdata
	bl BoxSpawnFallingDebris
	b _08037EDE
_08037ECC:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08037EE4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08037EDE
	strh r2, [r4]
_08037EDE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08037EE4: .4byte gPreviousCollisionCheck

	thumb_func_start BoxDebrisIdle
BoxDebrisIdle: @ 0x08037EE8
	ldr r0, _08037EF4 @ =gCurrentSprite
	adds r0, #0x26
	movs r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_08037EF4: .4byte gCurrentSprite

	thumb_func_start BoxDebrisFallingInit
BoxDebrisFallingInit: @ 0x08037EF8
	ldr r1, _08037F14 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r2, [r1]
	ldr r0, _08037F18 @ =0x0000DFFF
	ands r0, r2
	strh r0, [r1]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	bx lr
	.align 2, 0
_08037F14: .4byte gCurrentSprite
_08037F18: .4byte 0x0000DFFF

	thumb_func_start BoxDebrisWaitToFall
BoxDebrisWaitToFall: @ 0x08037F1C
	push {lr}
	ldr r2, _08037F74 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r3, #0
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r2, #4]
	lsrs r0, r0, #2
	ldr r1, _08037F78 @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _08037F7C @ =0xFFDF0000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xae
	bhi _08037F6E
	adds r0, r2, #0
	adds r0, #0x2e
	strb r3, [r0]
	adds r0, #3
	strb r3, [r0]
	subs r0, #0xd
	movs r1, #0x1c
	strb r1, [r0]
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	bl BoxSpawnFallingDebris
	movs r0, #0x8c
	lsls r0, r0, #2
	bl unk_3b1c
_08037F6E:
	pop {r0}
	bx r0
	.align 2, 0
_08037F74: .4byte gCurrentSprite
_08037F78: .4byte gBg1XPosition
_08037F7C: .4byte 0xFFDF0000

	thumb_func_start BoxDebrisFalling
BoxDebrisFalling: @ 0x08037F80
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r4, _08037FF0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r1, #8
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r7, [r1]
	ldrh r5, [r4, #2]
	ldrh r6, [r4, #4]
	adds r0, r5, #0
	adds r1, r6, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08037FF4 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08037FF8
	strh r1, [r4, #2]
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x1e
	strb r1, [r0]
	movs r0, #0x1e
	movs r1, #0x81
	bl ScreenShakeStartVertical
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0x31
	bl ParticleSet
	adds r1, r6, #0
	adds r1, #0x20
	adds r0, r5, #0
	movs r2, #0x31
	bl ParticleSet
	movs r0, #0x28
	bl EventCheckAdvance
	movs r0, #2
	bl BoxSetDebrisClipdata
	movs r0, #0x18
	movs r1, #6
	bl PlayMusic
	b _0803807E
	.align 2, 0
_08037FF0: .4byte gCurrentSprite
_08037FF4: .4byte gPreviousVerticalCollisionCheck
_08037FF8:
	movs r0, #0x31
	adds r0, r0, r4
	mov r8, r0
	ldrb r2, [r0]
	ldr r1, _08038024 @ =sSpritesFallingSpeedFast
	mov ip, r1
	lsls r0, r2, #1
	add r0, ip
	ldrh r3, [r0]
	mov sb, r3
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, _08038028 @ =0x00007FFF
	cmp r1, r0
	bne _0803802C
	subs r1, r2, #1
	lsls r1, r1, #1
	add r1, ip
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08038036
	.align 2, 0
_08038024: .4byte sSpritesFallingSpeedFast
_08038028: .4byte 0x00007FFF
_0803802C:
	adds r0, r2, #1
	mov r1, r8
	strb r0, [r1]
	ldrh r0, [r4, #2]
	add r0, sb
_08038036:
	strh r0, [r4, #2]
	movs r1, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0803804E
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0x34
	bl ParticleSet
	b _0803807E
_0803804E:
	adds r0, r7, #4
	ands r0, r1
	cmp r0, #0
	bne _08038066
	adds r0, r5, #0
	subs r0, #0xa0
	adds r1, r6, #0
	adds r1, #0x28
	movs r2, #0x33
	bl ParticleSet
	b _0803807E
_08038066:
	adds r0, r7, #0
	adds r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0803807E
	adds r0, r5, #0
	subs r0, #0x82
	adds r1, r6, #0
	subs r1, #0x28
	movs r2, #0x33
	bl ParticleSet
_0803807E:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxFallingDebrisInit
BoxFallingDebrisInit: @ 0x0803808C
	push {r4, lr}
	ldr r3, _080380D0 @ =gCurrentSprite
	ldrh r1, [r3]
	ldr r0, _080380D4 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r4, #0
	strh r0, [r3]
	ldr r1, _080380D8 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #0xa
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	ldrb r0, [r3, #0x1e]
	cmp r0, #8
	bls _080380C6
	b _080382E8
_080380C6:
	lsls r0, r0, #2
	ldr r1, _080380DC @ =_080380E0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080380D0: .4byte gCurrentSprite
_080380D4: .4byte 0x0000FFFB
_080380D8: .4byte 0x0000FFFC
_080380DC: .4byte _080380E0
_080380E0: @ jump table
	.4byte _08038104 @ case 0
	.4byte _08038160 @ case 1
	.4byte _0803818C @ case 2
	.4byte _080381BC @ case 3
	.4byte _080381EC @ case 4
	.4byte _0803821C @ case 5
	.4byte _0803824C @ case 6
	.4byte _08038280 @ case 7
	.4byte _080382A8 @ case 8
_08038104:
	ldr r3, _08038154 @ =gCurrentSprite
	ldr r0, _08038158 @ =0x08347FB8
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x29
	movs r0, #0x18
	strb r0, [r2]
	ldr r0, _0803815C @ =0x0000FF78
	strh r0, [r3, #0xa]
	strh r1, [r3, #0xc]
	adds r0, #0x84
	strh r0, [r3, #0xe]
	movs r0, #0x44
	strh r0, [r3, #0x10]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xb
	strb r0, [r1]
	adds r1, #3
	movs r0, #1
	strb r0, [r1]
	strh r0, [r3, #0x14]
	adds r2, #0xb
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	b _080382EA
	.align 2, 0
_08038154: .4byte gCurrentSprite
_08038158: .4byte 0x08347FB8
_0803815C: .4byte 0x0000FF78
_08038160:
	ldr r4, _08038184 @ =gCurrentSprite
	ldr r0, _08038188 @ =0x08347FC8
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #5
	b _080382CA
	.align 2, 0
_08038184: .4byte gCurrentSprite
_08038188: .4byte 0x08347FC8
_0803818C:
	ldr r2, _080381B4 @ =gCurrentSprite
	ldr r0, _080381B8 @ =0x08347FD8
	str r0, [r2, #0x18]
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x28
	strb r0, [r1]
	b _080382EA
	.align 2, 0
_080381B4: .4byte gCurrentSprite
_080381B8: .4byte 0x08347FD8
_080381BC:
	ldr r2, _080381E4 @ =gCurrentSprite
	ldr r0, _080381E8 @ =0x08347FE8
	str r0, [r2, #0x18]
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x50
	strb r0, [r1]
	b _080382EA
	.align 2, 0
_080381E4: .4byte gCurrentSprite
_080381E8: .4byte 0x08347FE8
_080381EC:
	ldr r2, _08038214 @ =gCurrentSprite
	ldr r0, _08038218 @ =0x08347FF8
	str r0, [r2, #0x18]
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #9
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	b _080382EA
	.align 2, 0
_08038214: .4byte gCurrentSprite
_08038218: .4byte 0x08347FF8
_0803821C:
	ldr r4, _08038244 @ =gCurrentSprite
	ldr r0, _08038248 @ =0x08348008
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #9
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x78
	b _080382CC
	.align 2, 0
_08038244: .4byte gCurrentSprite
_08038248: .4byte 0x08348008
_0803824C:
	ldr r2, _08038278 @ =gCurrentSprite
	ldr r0, _0803827C @ =0x08348018
	str r0, [r2, #0x18]
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0xa
	strb r0, [r1]
	b _080382EA
	.align 2, 0
_08038278: .4byte gCurrentSprite
_0803827C: .4byte 0x08348018
_08038280:
	ldr r2, _080382A0 @ =gCurrentSprite
	ldr r0, _080382A4 @ =0x08348028
	str r0, [r2, #0x18]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x14
	strb r0, [r1]
	b _080382EA
	.align 2, 0
_080382A0: .4byte gCurrentSprite
_080382A4: .4byte 0x08348028
_080382A8:
	ldr r4, _080382E0 @ =gCurrentSprite
	ldr r0, _080382E4 @ =0x08348038
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
_080382CA:
	movs r0, #0x3c
_080382CC:
	strb r0, [r1]
	bl EventCheckAfter_BoxDefeated
	cmp r0, #0
	bne _080382EA
	ldrh r0, [r4, #2]
	adds r0, #0xc0
	strh r0, [r4, #2]
	b _080382EA
	.align 2, 0
_080382E0: .4byte gCurrentSprite
_080382E4: .4byte 0x08348038
_080382E8:
	strh r4, [r3]
_080382EA:
	bl EventCheckAfter_BoxDefeated
	cmp r0, #0
	beq _08038300
	ldr r0, _080382FC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1e
	b _08038306
	.align 2, 0
_080382FC: .4byte gCurrentSprite
_08038300:
	ldr r0, _08038310 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
_08038306:
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08038310: .4byte gCurrentSprite

	thumb_func_start BoxFallingDebrisFalling
BoxFallingDebrisFalling: @ 0x08038314
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _08038334 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r1, #8
	ldrb r0, [r1]
	cmp r0, #0
	beq _08038338
	subs r0, #1
	strb r0, [r1]
	b _08038542
	.align 2, 0
_08038334: .4byte gCurrentSprite
_08038338:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r6, [r1]
	ldrh r7, [r4, #2]
	ldrh r0, [r4, #4]
	mov r8, r0
	ldrb r5, [r4, #0x1e]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0xfe
	bhi _08038358
	adds r0, #1
	strb r0, [r1]
_08038358:
	ldrb r0, [r1]
	cmp r0, #0x32
	bls _080383DE
	adds r0, r7, #0
	mov r1, r8
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08038398 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080383DE
	strh r1, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	cmp r5, #0
	bne _0803839C
	movs r1, #0x81
	bl ScreenShakeStartVertical
	mov r1, r8
	subs r1, #0x20
	adds r0, r7, #0
	movs r2, #0x31
	bl ParticleSet
	mov r1, r8
	adds r1, #0x20
	adds r0, r7, #0
	b _080383A8
	.align 2, 0
_08038398: .4byte gPreviousVerticalCollisionCheck
_0803839C:
	cmp r5, #1
	beq _080383A4
	cmp r5, #6
	bne _080383B0
_080383A4:
	adds r0, r7, #0
	mov r1, r8
_080383A8:
	movs r2, #0x31
	bl ParticleSet
	b _08038542
_080383B0:
	subs r0, r5, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _080383BE
	cmp r5, #7
	bne _080383D2
_080383BE:
	mov r1, r8
	subs r1, #0x10
	adds r0, r7, #0
	movs r2, #0x27
	bl ParticleSet
	mov r1, r8
	adds r1, #0x10
	adds r0, r7, #0
	b _080383D6
_080383D2:
	adds r0, r7, #0
	mov r1, r8
_080383D6:
	movs r2, #0x27
	bl ParticleSet
	b _08038542
_080383DE:
	cmp r5, #0
	bne _0803845C
	movs r1, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _080383F8
	adds r0, r7, #0
	mov r1, r8
	movs r2, #0x31
	bl ParticleSet
	b _08038426
_080383F8:
	adds r0, r6, #4
	ands r0, r1
	cmp r0, #0
	bne _08038410
	adds r0, r7, #0
	subs r0, #0xa0
	mov r1, r8
	adds r1, #0x32
	movs r2, #0x2e
	bl ParticleSet
	b _08038426
_08038410:
	adds r0, r6, #0
	adds r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08038426
	mov r1, r8
	subs r1, #0x20
	adds r0, r7, #0
	movs r2, #0x33
	bl ParticleSet
_08038426:
	ldr r3, _08038450 @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08038454 @ =sSpritesFallingSpeedFast
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08038458 @ =0x00007FFF
	cmp r1, r0
	beq _08038442
	b _08038538
_08038442:
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08038540
	.align 2, 0
_08038450: .4byte gCurrentSprite
_08038454: .4byte sSpritesFallingSpeedFast
_08038458: .4byte 0x00007FFF
_0803845C:
	cmp r5, #1
	beq _08038464
	cmp r5, #6
	bne _080384AC
_08038464:
	movs r0, #0x1f
	ands r6, r0
	cmp r6, #0
	bne _08038476
	adds r0, r7, #0
	mov r1, r8
	movs r2, #0x27
	bl ParticleSet
_08038476:
	ldr r3, _080384A0 @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _080384A4 @ =sSpritesFallingSpeedQuickAcceleration
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _080384A8 @ =0x00007FFF
	cmp r1, r0
	bne _08038538
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08038540
	.align 2, 0
_080384A0: .4byte gCurrentSprite
_080384A4: .4byte sSpritesFallingSpeedQuickAcceleration
_080384A8: .4byte 0x00007FFF
_080384AC:
	subs r0, r5, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _080384BA
	cmp r5, #7
	bne _08038504
_080384BA:
	adds r0, r6, #7
	movs r1, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _080384CE
	adds r0, r7, #0
	mov r1, r8
	movs r2, #0x33
	bl ParticleSet
_080384CE:
	ldr r3, _080384F8 @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _080384FC @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08038500 @ =0x00007FFF
	cmp r1, r0
	bne _08038538
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08038540
	.align 2, 0
_080384F8: .4byte gCurrentSprite
_080384FC: .4byte sSpritesFallingSpeed
_08038500: .4byte 0x00007FFF
_08038504:
	ldr r3, _0803852C @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08038530 @ =sSpritesFallingSpeedSlow
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08038534 @ =0x00007FFF
	cmp r1, r0
	bne _08038538
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08038540
	.align 2, 0
_0803852C: .4byte gCurrentSprite
_08038530: .4byte sSpritesFallingSpeedSlow
_08038534: .4byte 0x00007FFF
_08038538:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_08038540:
	strh r0, [r3, #2]
_08038542:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start Box
Box: @ 0x0803854C
	push {lr}
	ldr r0, _08038564 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x4e
	bls _0803855A
	b _0803878A
_0803855A:
	lsls r0, r0, #2
	ldr r1, _08038568 @ =_0803856C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08038564: .4byte gCurrentSprite
_08038568: .4byte _0803856C
_0803856C: @ jump table
	.4byte _080386A8 @ case 0
	.4byte _080386AE @ case 1
	.4byte _080386B2 @ case 2
	.4byte _0803878A @ case 3
	.4byte _0803878A @ case 4
	.4byte _0803878A @ case 5
	.4byte _0803878A @ case 6
	.4byte _080386EA @ case 7
	.4byte _080386EE @ case 8
	.4byte _0803878A @ case 9
	.4byte _0803878A @ case 10
	.4byte _0803878A @ case 11
	.4byte _0803878A @ case 12
	.4byte _0803878A @ case 13
	.4byte _0803878A @ case 14
	.4byte _0803878A @ case 15
	.4byte _0803878A @ case 16
	.4byte _0803878A @ case 17
	.4byte _0803878A @ case 18
	.4byte _0803878A @ case 19
	.4byte _0803878A @ case 20
	.4byte _0803878A @ case 21
	.4byte _0803878A @ case 22
	.4byte _080386B8 @ case 23
	.4byte _080386BC @ case 24
	.4byte _080386C2 @ case 25
	.4byte _080386C6 @ case 26
	.4byte _080386CC @ case 27
	.4byte _080386D0 @ case 28
	.4byte _080386D6 @ case 29
	.4byte _080386DA @ case 30
	.4byte _080386E0 @ case 31
	.4byte _080386E4 @ case 32
	.4byte _0803878A @ case 33
	.4byte _0803878A @ case 34
	.4byte _0803878A @ case 35
	.4byte _0803878A @ case 36
	.4byte _0803878A @ case 37
	.4byte _0803878A @ case 38
	.4byte _08038726 @ case 39
	.4byte _0803872A @ case 40
	.4byte _08038730 @ case 41
	.4byte _08038734 @ case 42
	.4byte _0803878A @ case 43
	.4byte _0803873A @ case 44
	.4byte _0803878A @ case 45
	.4byte _08038740 @ case 46
	.4byte _0803878A @ case 47
	.4byte _0803878A @ case 48
	.4byte _0803878A @ case 49
	.4byte _0803878A @ case 50
	.4byte _0803878A @ case 51
	.4byte _0803878A @ case 52
	.4byte _0803878A @ case 53
	.4byte _0803878A @ case 54
	.4byte _080386F4 @ case 55
	.4byte _080386F8 @ case 56
	.4byte _08038708 @ case 57
	.4byte _0803870C @ case 58
	.4byte _08038712 @ case 59
	.4byte _08038716 @ case 60
	.4byte _0803871C @ case 61
	.4byte _08038720 @ case 62
	.4byte _08038746 @ case 63
	.4byte _0803874A @ case 64
	.4byte _08038750 @ case 65
	.4byte _08038754 @ case 66
	.4byte _0803875A @ case 67
	.4byte _0803875E @ case 68
	.4byte _08038764 @ case 69
	.4byte _08038768 @ case 70
	.4byte _0803876E @ case 71
	.4byte _08038772 @ case 72
	.4byte _08038778 @ case 73
	.4byte _0803877C @ case 74
	.4byte _080386FE @ case 75
	.4byte _08038702 @ case 76
	.4byte _08038782 @ case 77
	.4byte _08038786 @ case 78
_080386A8:
	bl BoxInit
	b _0803878A
_080386AE:
	bl BoxCrawlingInit
_080386B2:
	bl BoxCrawling
	b _0803878A
_080386B8:
	bl BoxWaitingToRunInit
_080386BC:
	bl BoxWaitingToRun
	b _0803878A
_080386C2:
	bl BoxSlowRunningInit
_080386C6:
	bl BoxSlowRun
	b _0803878A
_080386CC:
	bl BoxFastRunInit
_080386D0:
	bl BoxFastRun
	b _0803878A
_080386D6:
	bl BoxSkiddingInit
_080386DA:
	bl BoxSkidding
	b _0803878A
_080386E0:
	bl BoxStopSkiddingInit
_080386E4:
	bl BoxStopSkidding
	b _0803878A
_080386EA:
	bl BoxFinishedCrawlingInit
_080386EE:
	bl BoxFinishedCrawling
	b _0803878A
_080386F4:
	bl BoxBonkingInit
_080386F8:
	bl BoxBonking
	b _0803878A
_080386FE:
	bl BoxLandingFromBonkInit
_08038702:
	bl BoxLandingFromBonk
	b _0803878A
_08038708:
	bl BoxLandingInit
_0803870C:
	bl BoxLanding
	b _0803878A
_08038712:
	bl BoxJumpWarningInit
_08038716:
	bl BoxJumpWarning
	b _0803878A
_0803871C:
	bl BoxJumpingInit
_08038720:
	bl BoxJumping
	b _0803878A
_08038726:
	bl BoxStoppingToFireBombInit
_0803872A:
	bl BoxStoppingToFireBomb
	b _0803878A
_08038730:
	bl BoxLoweringToFireBombInit
_08038734:
	bl BoxLoweringToFireBomb
	b _0803878A
_0803873A:
	bl BoxFiringBomb
	b _0803878A
_08038740:
	bl BoxDoneFiringBomb
	b _0803878A
_08038746:
	bl BoxWaitingToEmergeInit
_0803874A:
	bl BoxWaitingToEmerge
	b _0803878A
_08038750:
	bl BoxFirstJumpInit
_08038754:
	bl BoxFirstJump
	b _0803878A
_0803875A:
	bl BoxDyingInit
_0803875E:
	bl BoxDying
	b _0803878A
_08038764:
	bl BoxMovingToFinalJumpInit
_08038768:
	bl BoxMovingToFinalJump
	b _0803878A
_0803876E:
	bl BoxWaitingForFinalJumpInit
_08038772:
	bl BoxWaitingForFinalJump
	b _0803878A
_08038778:
	bl BoxCrouchingForFinalJumpInit
_0803877C:
	bl BoxCrouchingForFinalJump
	b _0803878A
_08038782:
	bl BoxFinalJumpInit
_08038786:
	bl BoxFinalJump
_0803878A:
	bl UpdateSubSpriteData1Animation
	bl SyncCurrentSpritePositionWithSubSprite1Position
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BoxPart
BoxPart: @ 0x08038798
	push {r4, lr}
	ldr r0, _080387B0 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	bne _080387B4
	bl BoxPartInit
	b _0803887C
	.align 2, 0
_080387B0: .4byte gCurrentSprite
_080387B4:
	ldrb r0, [r2, #0x1e]
	cmp r0, #2
	beq _080387F4
	cmp r0, #2
	bgt _080387C4
	cmp r0, #0
	beq _080387CE
	b _0803885C
_080387C4:
	cmp r0, #6
	beq _0803881C
	cmp r0, #8
	beq _08038834
	b _0803885C
_080387CE:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _080387F0 @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _080387E6
	strb r3, [r4]
_080387E6:
	bl BoxPartFrontLeftLeg
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _0803887C
	.align 2, 0
_080387F0: .4byte gSubSpriteData1
_080387F4:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08038818 @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _0803880C
	strb r3, [r4]
_0803880C:
	bl BoxPartFrontRightLeg
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _0803887C
	.align 2, 0
_08038818: .4byte gSubSpriteData1
_0803881C:
	ldr r0, _08038830 @ =gSubSpriteData1
	adds r1, r2, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	strb r1, [r0, #0xe]
	bl BoxPartCenter
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _0803887C
	.align 2, 0
_08038830: .4byte gSubSpriteData1
_08038834:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08038858 @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _0803884C
	strb r3, [r4]
_0803884C:
	bl BoxPartCenterBottom
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _0803887C
	.align 2, 0
_08038858: .4byte gSubSpriteData1
_0803885C:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08038884 @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _08038874
	strb r3, [r4]
_08038874:
	bl BoxPartDefault
	bl BoxSyncSubSprites
_0803887C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08038884: .4byte gSubSpriteData1

	thumb_func_start BoxMissile
BoxMissile: @ 0x08038888
	push {lr}
	ldr r0, _080388A0 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080388B4
	cmp r0, #2
	bgt _080388A4
	cmp r0, #0
	beq _080388AE
	b _080388C4
	.align 2, 0
_080388A0: .4byte gCurrentSprite
_080388A4:
	cmp r0, #0x18
	beq _080388BA
	cmp r0, #0x37
	beq _080388C0
	b _080388C4
_080388AE:
	bl BoxMissileInit
	b _080388C4
_080388B4:
	bl BoxMissileSpawning
	b _080388C4
_080388BA:
	bl BoxMissileMoving
	b _080388C4
_080388C0:
	bl BoxMissileExploding
_080388C4:
	pop {r0}
	bx r0

	thumb_func_start BoxBomb
BoxBomb: @ 0x080388C8
	push {lr}
	ldr r0, _080388E0 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080388F4
	cmp r0, #2
	bgt _080388E4
	cmp r0, #0
	beq _080388EE
	b _08038904
	.align 2, 0
_080388E0: .4byte gCurrentSprite
_080388E4:
	cmp r0, #0x18
	beq _080388FA
	cmp r0, #0x37
	beq _08038900
	b _08038904
_080388EE:
	bl BoxBombInit
	b _08038904
_080388F4:
	bl BoxBombMoving
	b _08038904
_080388FA:
	bl BoxBombLanded
	b _08038904
_08038900:
	bl BoxBombExploding
_08038904:
	pop {r0}
	bx r0

	thumb_func_start BoxFire
BoxFire: @ 0x08038908
	push {lr}
	ldr r0, _08038920 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803892E
	cmp r0, #2
	bgt _08038924
	cmp r0, #0
	beq _0803892A
	b _08038938
	.align 2, 0
_08038920: .4byte gCurrentSprite
_08038924:
	cmp r0, #0x18
	beq _08038934
	b _08038938
_0803892A:
	bl BoxFireInit
_0803892E:
	bl BoxFireMovingHigh
	b _08038938
_08038934:
	bl BoxFireMovingLow
_08038938:
	pop {r0}
	bx r0

	thumb_func_start BoxDebris
BoxDebris: @ 0x0803893C
	push {lr}
	ldr r0, _08038954 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _080389EC
	lsls r0, r0, #2
	ldr r1, _08038958 @ =_0803895C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08038954: .4byte gCurrentSprite
_08038958: .4byte _0803895C
_0803895C: @ jump table
	.4byte _080389D0 @ case 0
	.4byte _080389EC @ case 1
	.4byte _080389D6 @ case 2
	.4byte _080389EC @ case 3
	.4byte _080389EC @ case 4
	.4byte _080389EC @ case 5
	.4byte _080389EC @ case 6
	.4byte _080389EC @ case 7
	.4byte _080389EC @ case 8
	.4byte _080389EC @ case 9
	.4byte _080389EC @ case 10
	.4byte _080389EC @ case 11
	.4byte _080389EC @ case 12
	.4byte _080389EC @ case 13
	.4byte _080389EC @ case 14
	.4byte _080389EC @ case 15
	.4byte _080389EC @ case 16
	.4byte _080389EC @ case 17
	.4byte _080389EC @ case 18
	.4byte _080389EC @ case 19
	.4byte _080389EC @ case 20
	.4byte _080389EC @ case 21
	.4byte _080389EC @ case 22
	.4byte _080389EC @ case 23
	.4byte _080389DC @ case 24
	.4byte _080389EC @ case 25
	.4byte _080389E2 @ case 26
	.4byte _080389EC @ case 27
	.4byte _080389E8 @ case 28
_080389D0:
	bl BoxDebrisInit
	b _080389EC
_080389D6:
	bl BoxDebrisIdle
	b _080389EC
_080389DC:
	bl BoxDebrisFallingInit
	b _080389EC
_080389E2:
	bl BoxDebrisWaitToFall
	b _080389EC
_080389E8:
	bl BoxDebrisFalling
_080389EC:
	pop {r0}
	bx r0

	thumb_func_start BoxFallingDebris
BoxFallingDebris: @ 0x080389F0
	push {lr}
	ldr r0, _08038A04 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08038A08
	cmp r0, #2
	beq _08038A0E
	b _08038A12
	.align 2, 0
_08038A04: .4byte gCurrentSprite
_08038A08:
	bl BoxFallingDebrisInit
	b _08038A12
_08038A0E:
	bl BoxFallingDebrisFalling
_08038A12:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GerudaYMovement
GerudaYMovement: @ 0x08038A18
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r6, r5, #0
	ldr r4, _08038A48 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08038A50
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08038A4C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _08038A62
	ldrh r0, [r4, #2]
	adds r0, r5, r0
	b _08038A70
	.align 2, 0
_08038A48: .4byte gCurrentSprite
_08038A4C: .4byte gPreviousCollisionCheck
_08038A50:
	ldrh r0, [r4, #2]
	subs r0, #0x40
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08038A68 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _08038A6C
_08038A62:
	movs r0, #1
	b _08038A74
	.align 2, 0
_08038A68: .4byte gPreviousCollisionCheck
_08038A6C:
	ldrh r0, [r4, #2]
	subs r0, r0, r6
_08038A70:
	strh r0, [r4, #2]
	movs r0, #0
_08038A74:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start GerudaXMovement
GerudaXMovement: @ 0x08038A7C
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r7, r6, #0
	ldr r4, _08038ABC @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08038AC4
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08038AC0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08038AEA
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08038AEA
	ldrh r0, [r4, #4]
	adds r0, r6, r0
	b _08038AF8
	.align 2, 0
_08038ABC: .4byte gCurrentSprite
_08038AC0: .4byte gPreviousCollisionCheck
_08038AC4:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08038AF0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08038AEA
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _08038AF4
_08038AEA:
	movs r0, #1
	b _08038AFC
	.align 2, 0
_08038AF0: .4byte gPreviousCollisionCheck
_08038AF4:
	ldrh r0, [r4, #4]
	subs r0, r0, r7
_08038AF8:
	strh r0, [r4, #4]
	movs r0, #0
_08038AFC:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start GerudaSetIdleSideHitboxes
GerudaSetIdleSideHitboxes: @ 0x08038B04
	push {lr}
	ldr r2, _08038B20 @ =gCurrentSprite
	ldr r3, _08038B24 @ =0x0000FFE0
	strh r3, [r2, #0xa]
	movs r0, #0x40
	strh r0, [r2, #0xc]
	ldrh r1, [r2]
	ands r0, r1
	cmp r0, #0
	beq _08038B28
	strh r3, [r2, #0xe]
	movs r0, #0x30
	b _08038B2E
	.align 2, 0
_08038B20: .4byte gCurrentSprite
_08038B24: .4byte 0x0000FFE0
_08038B28:
	ldr r0, _08038B34 @ =0x0000FFD0
	strh r0, [r2, #0xe]
	movs r0, #0x20
_08038B2E:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_08038B34: .4byte 0x0000FFD0

	thumb_func_start GerudaSetAttackingSideHitboxes
GerudaSetAttackingSideHitboxes: @ 0x08038B38
	push {lr}
	ldr r2, _08038B54 @ =gCurrentSprite
	ldr r3, _08038B58 @ =0x0000FFE0
	strh r3, [r2, #0xa]
	movs r0, #0x28
	strh r0, [r2, #0xc]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08038B5C
	strh r3, [r2, #0xe]
	movs r0, #0x50
	b _08038B62
	.align 2, 0
_08038B54: .4byte gCurrentSprite
_08038B58: .4byte 0x0000FFE0
_08038B5C:
	ldr r0, _08038B68 @ =0x0000FFB0
	strh r0, [r2, #0xe]
	movs r0, #0x20
_08038B62:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_08038B68: .4byte 0x0000FFB0

	thumb_func_start GerudaUpdateLungingAnimation
GerudaUpdateLungingAnimation: @ 0x08038B6C
	push {lr}
	movs r0, #0xe0
	movs r1, #0xc0
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08038BAE
	ldr r1, _08038B90 @ =gCurrentSprite
	ldr r0, [r1, #0x18]
	ldr r2, _08038B94 @ =0x08348C64
	cmp r0, r2
	beq _08038B98
	str r2, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	b _08038BE0
	.align 2, 0
_08038B90: .4byte gCurrentSprite
_08038B94: .4byte 0x08348C64
_08038B98:
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _08038BE0
	ldrb r0, [r1, #0x1c]
	cmp r0, #4
	bne _08038BE0
	movs r0, #0xc6
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _08038BE0
_08038BAE:
	ldr r2, _08038BE4 @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _08038BE8 @ =0x08348C64
	cmp r1, r0
	bne _08038BE0
	ldrh r0, [r2, #0x16]
	cmp r0, #0
	bne _08038BCC
	ldrb r0, [r2, #0x1c]
	cmp r0, #4
	bne _08038BCC
	movs r0, #0xc6
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08038BCC:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08038BE0
	ldr r0, _08038BE4 @ =gCurrentSprite
	ldr r1, _08038BEC @ =0x08348C54
	str r1, [r0, #0x18]
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
_08038BE0:
	pop {r0}
	bx r0
	.align 2, 0
_08038BE4: .4byte gCurrentSprite
_08038BE8: .4byte 0x08348C64
_08038BEC: .4byte 0x08348C54

	thumb_func_start GerudaInit
GerudaInit: @ 0x08038BF0
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _08038C1C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08038C20
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08038C20
	strh r0, [r2]
	b _08038C84
	.align 2, 0
_08038C1C: .4byte gCurrentSprite
_08038C20:
	bl MakeSpriteFaceSamusXFlip
	ldr r5, _08038C74 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x27
	movs r4, #0
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0x20
	strb r0, [r1]
	bl GerudaSetIdleSideHitboxes
	ldr r0, _08038C78 @ =0x08348C1C
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	ldr r2, _08038C7C @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08038C80
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r5, #6]
	b _08038C84
	.align 2, 0
_08038C74: .4byte gCurrentSprite
_08038C78: .4byte 0x08348C1C
_08038C7C: .4byte sPrimarySpriteStats
_08038C80:
	movs r0, #1
	strb r0, [r1]
_08038C84:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GerudaIdleInit
GerudaIdleInit: @ 0x08038C8C
	ldr r3, _08038CB0 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	ldr r0, _08038CB4 @ =0x08348C1C
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_08038CB0: .4byte gCurrentSprite
_08038CB4: .4byte 0x08348C1C

	thumb_func_start GerudaIdle
GerudaIdle: @ 0x08038CB8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, _08038D28 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _08038CCE
	b _08038E98
_08038CCE:
	adds r4, r2, #0
	adds r4, #0x31
	ldrb r0, [r4]
	cmp r0, #0x23
	bhi _08038CEE
	ldrh r0, [r2, #2]
	adds r0, #0x40
	ldrh r1, [r2, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08038D2C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08038CEE
	movs r0, #0x24
	strb r0, [r4]
_08038CEE:
	ldr r4, _08038D28 @ =gCurrentSprite
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08038D30 @ =0x083480C8
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08038D34 @ =0x00007FFF
	cmp r1, r0
	bne _08038D0C
	ldrh r3, [r5]
	movs r2, #0
_08038D0C:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
	movs r0, #1
	bl GerudaXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08038D38
	adds r1, r4, #0
	b _08038E92
	.align 2, 0
_08038D28: .4byte gCurrentSprite
_08038D2C: .4byte gPreviousCollisionCheck
_08038D30: .4byte 0x083480C8
_08038D34: .4byte 0x00007FFF
_08038D38:
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08038D56
	cmp r2, #8
	beq _08038D5C
	b _08038E86
_08038D56:
	cmp r2, #4
	beq _08038D5C
	movs r2, #0
_08038D5C:
	cmp r2, #0
	bne _08038D62
	b _08038E86
_08038D62:
	ldr r2, _08038DA4 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08038DA8 @ =0x0000F7FF
	ands r0, r1
	strh r0, [r2]
	ldr r1, _08038DAC @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	ldrh r5, [r2, #2]
	adds r0, r5, #0
	adds r0, #0x64
	adds r4, r2, #0
	mov r8, r1
	cmp r6, r0
	ble _08038DE8
	subs r0, #0x24
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08038DB0 @ =gPreviousCollisionCheck
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08038DB4
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x3d
	bls _08038E98
	adds r1, r4, #0
	b _08038E92
	.align 2, 0
_08038DA4: .4byte gCurrentSprite
_08038DA8: .4byte 0x0000F7FF
_08038DAC: .4byte gSamusData
_08038DB0: .4byte gPreviousCollisionCheck
_08038DB4:
	ldrh r0, [r4, #2]
	adds r0, #0x60
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08038DD2
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x3d
	bls _08038E98
	adds r1, r4, #0
	b _08038E92
_08038DD2:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	b _08038E42
_08038DE8:
	adds r0, r5, #0
	subs r0, #0x64
	cmp r6, r0
	bge _08038E3A
	adds r0, #0x24
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08038E10 @ =gPreviousCollisionCheck
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08038E14
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x3d
	bls _08038E98
	adds r1, r4, #0
	b _08038E92
	.align 2, 0
_08038E10: .4byte gPreviousCollisionCheck
_08038E14:
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08038E32
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x3d
	bls _08038E98
	adds r1, r4, #0
	b _08038E92
_08038E32:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	b _08038E40
_08038E3A:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #2
_08038E40:
	strb r0, [r1]
_08038E42:
	strh r5, [r4, #6]
	strh r6, [r4, #8]
	mov r7, r8
	ldrh r6, [r7, #0x16]
	ldrh r5, [r4, #4]
	cmp r5, r6
	bls _08038E54
	subs r0, r5, r6
	b _08038E56
_08038E54:
	subs r0, r6, r5
_08038E56:
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	movs r0, #0x96
	lsls r0, r0, #1
	cmp r5, r0
	bls _08038E6A
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #8
	b _08038E7C
_08038E6A:
	cmp r5, #0xa0
	bls _08038E76
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #6
	b _08038E7C
_08038E76:
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #4
_08038E7C:
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	b _08038E96
_08038E86:
	ldr r1, _08038EA4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x3d
	bls _08038E98
_08038E92:
	adds r1, #0x24
	movs r0, #3
_08038E96:
	strb r0, [r1]
_08038E98:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08038EA4: .4byte gCurrentSprite

	thumb_func_start GerudaTurningAroundInit
GerudaTurningAroundInit: @ 0x08038EA8
	ldr r1, _08038EC0 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #4
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _08038EC4 @ =0x08348C94
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_08038EC0: .4byte gCurrentSprite
_08038EC4: .4byte 0x08348C94

	thumb_func_start GerudaTurningAround
GerudaTurningAround: @ 0x08038EC8
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08038EE4
	ldr r2, _08038EE8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_08038EE4:
	pop {r0}
	bx r0
	.align 2, 0
_08038EE8: .4byte gCurrentSprite

	thumb_func_start GerudaAttackWarningInit
GerudaAttackWarningInit: @ 0x08038EEC
	push {lr}
	ldr r1, _08038F08 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r0, _08038F0C @ =0x08348C44
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bl GerudaSetAttackingSideHitboxes
	pop {r0}
	bx r0
	.align 2, 0
_08038F08: .4byte gCurrentSprite
_08038F0C: .4byte 0x08348C44

	thumb_func_start GerudaAttackWarning
GerudaAttackWarning: @ 0x08038F10
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08038F34
	ldr r0, _08038F38 @ =gCurrentSprite
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	ldr r1, _08038F3C @ =0x08348C54
	str r1, [r0, #0x18]
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x2c
	strb r1, [r2]
	adds r0, #0x2e
	movs r1, #0xb4
	strb r1, [r0]
_08038F34:
	pop {r0}
	bx r0
	.align 2, 0
_08038F38: .4byte gCurrentSprite
_08038F3C: .4byte 0x08348C54

	thumb_func_start GerudaAttacking
GerudaAttacking: @ 0x08038F40
	push {r4, r5, lr}
	bl GerudaUpdateLungingAnimation
	movs r5, #0
	ldr r4, _08038F84 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08038F92
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	bl GerudaXMovement
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r5, r1, #0x1f
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08038F8C
	ldrh r0, [r4, #2]
	ldrh r2, [r4, #8]
	cmp r0, r2
	blo _08038FB6
	ldr r0, _08038F88 @ =0x0000F7FF
	ands r0, r1
	strh r0, [r4]
	b _08038FB6
	.align 2, 0
_08038F84: .4byte gCurrentSprite
_08038F88: .4byte 0x0000F7FF
_08038F8C:
	ldrh r0, [r4, #2]
	ldrh r4, [r4, #6]
	b _08038FAC
_08038F92:
	cmp r0, #1
	bne _08038FCA
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	bl GerudaXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08038FA8
	movs r5, #1
_08038FA8:
	ldrh r0, [r4, #2]
	ldrh r4, [r4, #8]
_08038FAC:
	cmp r0, r4
	bhi _08038FB6
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08038FB6:
	movs r0, #4
	bl GerudaYMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08038FD8
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08038FD8
_08038FCA:
	movs r0, #8
	bl GerudaXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08038FD8
	movs r5, #1
_08038FD8:
	ldr r2, _08039010 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08038FF0
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08038FF0:
	cmp r5, #0
	beq _0803903C
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08039018
	ldr r1, _08039014 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08039030
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	b _08039036
	.align 2, 0
_08039010: .4byte gCurrentSprite
_08039014: .4byte gSamusData
_08039018:
	ldr r1, _0803902C @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _08039030
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	b _08039036
	.align 2, 0
_0803902C: .4byte gSamusData
_08039030:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #1
_08039036:
	strb r0, [r1]
	bl GerudaSetIdleSideHitboxes
_0803903C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Geruda
Geruda: @ 0x08039044
	push {r4, lr}
	ldr r4, _0803906C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803905C
	ldr r0, _08039070 @ =0x0000018D
	bl CheckPlayNotAlreadyPlayingSound
_0803905C:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08039074
	bl SpriteUpdateFreezeTimer
	b _08039242
	.align 2, 0
_0803906C: .4byte gCurrentSprite
_08039070: .4byte 0x0000018D
_08039074:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08039080
	b _08039242
_08039080:
	lsls r0, r0, #2
	ldr r1, _0803908C @ =_08039090
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803908C: .4byte _08039090
_08039090: @ jump table
	.4byte _08039200 @ case 0
	.4byte _08039206 @ case 1
	.4byte _0803920A @ case 2
	.4byte _08039210 @ case 3
	.4byte _08039214 @ case 4
	.4byte _08039242 @ case 5
	.4byte _08039242 @ case 6
	.4byte _08039242 @ case 7
	.4byte _08039242 @ case 8
	.4byte _08039242 @ case 9
	.4byte _08039242 @ case 10
	.4byte _08039242 @ case 11
	.4byte _08039242 @ case 12
	.4byte _08039242 @ case 13
	.4byte _08039242 @ case 14
	.4byte _08039242 @ case 15
	.4byte _08039242 @ case 16
	.4byte _08039242 @ case 17
	.4byte _08039242 @ case 18
	.4byte _08039242 @ case 19
	.4byte _08039242 @ case 20
	.4byte _08039242 @ case 21
	.4byte _08039242 @ case 22
	.4byte _08039242 @ case 23
	.4byte _08039242 @ case 24
	.4byte _08039242 @ case 25
	.4byte _08039242 @ case 26
	.4byte _08039242 @ case 27
	.4byte _08039242 @ case 28
	.4byte _08039242 @ case 29
	.4byte _08039242 @ case 30
	.4byte _08039242 @ case 31
	.4byte _08039242 @ case 32
	.4byte _08039242 @ case 33
	.4byte _08039242 @ case 34
	.4byte _08039242 @ case 35
	.4byte _08039242 @ case 36
	.4byte _08039242 @ case 37
	.4byte _08039242 @ case 38
	.4byte _08039242 @ case 39
	.4byte _08039242 @ case 40
	.4byte _0803921A @ case 41
	.4byte _0803921E @ case 42
	.4byte _08039242 @ case 43
	.4byte _08039224 @ case 44
	.4byte _08039242 @ case 45
	.4byte _08039242 @ case 46
	.4byte _08039242 @ case 47
	.4byte _08039242 @ case 48
	.4byte _08039242 @ case 49
	.4byte _08039242 @ case 50
	.4byte _08039242 @ case 51
	.4byte _08039242 @ case 52
	.4byte _08039242 @ case 53
	.4byte _08039242 @ case 54
	.4byte _08039242 @ case 55
	.4byte _08039242 @ case 56
	.4byte _08039242 @ case 57
	.4byte _08039242 @ case 58
	.4byte _08039242 @ case 59
	.4byte _08039242 @ case 60
	.4byte _08039242 @ case 61
	.4byte _08039242 @ case 62
	.4byte _08039242 @ case 63
	.4byte _08039242 @ case 64
	.4byte _08039242 @ case 65
	.4byte _08039242 @ case 66
	.4byte _08039242 @ case 67
	.4byte _08039242 @ case 68
	.4byte _08039242 @ case 69
	.4byte _08039242 @ case 70
	.4byte _08039242 @ case 71
	.4byte _08039242 @ case 72
	.4byte _08039242 @ case 73
	.4byte _08039242 @ case 74
	.4byte _08039242 @ case 75
	.4byte _08039242 @ case 76
	.4byte _08039242 @ case 77
	.4byte _08039242 @ case 78
	.4byte _08039242 @ case 79
	.4byte _08039242 @ case 80
	.4byte _08039242 @ case 81
	.4byte _08039242 @ case 82
	.4byte _08039242 @ case 83
	.4byte _08039242 @ case 84
	.4byte _08039242 @ case 85
	.4byte _08039242 @ case 86
	.4byte _0803922A @ case 87
	.4byte _0803922E @ case 88
	.4byte _08039234 @ case 89
	.4byte _08039238 @ case 90
	.4byte _0803923E @ case 91
_08039200:
	bl GerudaInit
	b _08039242
_08039206:
	bl GerudaIdleInit
_0803920A:
	bl GerudaIdle
	b _08039242
_08039210:
	bl GerudaTurningAroundInit
_08039214:
	bl GerudaTurningAround
	b _08039242
_0803921A:
	bl GerudaAttackWarningInit
_0803921E:
	bl GerudaAttackWarning
	b _08039242
_08039224:
	bl GerudaAttacking
	b _08039242
_0803922A:
	bl SpriteDyingInit
_0803922E:
	bl SpriteDying
	b _08039242
_08039234:
	bl GerudaInit
_08039238:
	bl SpriteSpawningFromX
	b _08039242
_0803923E:
	bl XParasiteInit
_08039242:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start MiscPadInit
MiscPadInit: @ 0x08039248
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	movs r5, #0
	ldr r3, _0803929C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r5, [r0]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _080392A0 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	adds r1, r3, #0
	adds r1, #0x21
	movs r0, #1
	strb r0, [r1]
	ldrb r0, [r3, #0x1d]
	adds r4, r3, #0
	cmp r0, #0x66
	beq _080392B4
	cmp r0, #0x66
	bgt _080392A4
	cmp r0, #0x65
	beq _080392AE
	b _080392FC
	.align 2, 0
_0803929C: .4byte gCurrentSprite
_080392A0: .4byte 0x0000FFFC
_080392A4:
	cmp r0, #0x67
	beq _080392DC
	cmp r0, #0x68
	beq _080392E6
	b _080392FC
_080392AE:
	bl EventCheckOn_EnteredPumpControlUnit
	b _080392E0
_080392B4:
	bl EventCheckOn_Meltdown
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #1
	bne _08039302
	ldrb r1, [r4, #0x1e]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x53
	movs r2, #0
	movs r3, #0x10
	bl SpriteSpawnPrimary
	movs r5, #0
	b _08039302
_080392DC:
	bl EventCheckOn_SpaceJumpRecovered
_080392E0:
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _08039302
_080392E6:
	bl EventCheckOn_NavigationRoomLeavingPyr2
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r1, _080392F8 @ =gAbilityRestingXPosition
	ldrh r0, [r4, #4]
	strh r0, [r1]
	b _08039302
	.align 2, 0
_080392F8: .4byte gAbilityRestingXPosition
_080392FC:
	movs r0, #0
	strh r0, [r4]
	b _0803937E
_08039302:
	ldr r4, _08039330 @ =gCurrentSprite
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x33
	movs r1, #0
	bl SpriteSpawnSecondary
	cmp r5, #0
	beq _08039334
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	b _0803933A
	.align 2, 0
_08039330: .4byte gCurrentSprite
_08039334:
	adds r0, r4, #0
	adds r0, #0x2f
	strb r5, [r0]
_0803933A:
	ldr r6, _08039388 @ =gCurrentSprite
	ldrb r0, [r6, #0x1d]
	cmp r0, #0x68
	bne _0803937E
	adds r7, r6, #0
	adds r7, #0x23
	ldrb r3, [r7]
	ldrh r0, [r6, #2]
	str r0, [sp]
	ldrh r0, [r6, #4]
	ldr r5, _0803938C @ =0xFFFFFF00
	adds r0, r0, r5
	str r0, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r0, #0x68
	movs r1, #0
	movs r2, #4
	bl SpriteSpawnSecondary
	ldrb r3, [r7]
	ldrh r0, [r6, #2]
	str r0, [sp]
	ldrh r0, [r6, #4]
	adds r0, r0, r5
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x67
	movs r1, #0
	movs r2, #4
	bl SpriteSpawnSecondary
	ldr r1, _08039390 @ =gBossWork2
	strb r0, [r1]
_0803937E:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039388: .4byte gCurrentSprite
_0803938C: .4byte 0xFFFFFF00
_08039390: .4byte gBossWork2

	thumb_func_start MiscPadIdleInit
MiscPadIdleInit: @ 0x08039394
	push {lr}
	ldr r1, _080393BC @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _080393D4
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x68
	bne _080393C4
	ldr r0, _080393C0 @ =0x0834AD8C
	b _080393C6
	.align 2, 0
_080393BC: .4byte gCurrentSprite
_080393C0: .4byte 0x0834AD8C
_080393C4:
	ldr r0, _080393D0 @ =0x0834A0F4
_080393C6:
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x46
	b _080393EC
	.align 2, 0
_080393D0: .4byte 0x0834A0F4
_080393D4:
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x68
	bne _080393E4
	ldr r0, _080393E0 @ =0x0834AD7C
	b _080393E6
	.align 2, 0
_080393E0: .4byte 0x0834AD7C
_080393E4:
	ldr r0, _080393F4 @ =0x0834A0E4
_080393E6:
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #2
_080393EC:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080393F4: .4byte 0x0834A0E4

	thumb_func_start MiscPadIdle
MiscPadIdle: @ 0x080393F8
	push {lr}
	bl NavPadDetectSamus
	cmp r0, #0
	beq _08039448
	ldr r1, _08039420 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	adds r3, r1, #0
	cmp r0, #0
	bne _08039450
	ldrb r0, [r3, #0x1d]
	cmp r0, #0x68
	bne _08039428
	ldr r0, _08039424 @ =0x0834AD2C
	b _0803942A
	.align 2, 0
_08039420: .4byte gCurrentSprite
_08039424: .4byte 0x0834AD2C
_08039428:
	ldr r0, _08039444 @ =0x0834A094
_0803942A:
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r0, #0xe9
	bl SoundPlay
	b _08039450
	.align 2, 0
_08039444: .4byte 0x0834A094
_08039448:
	ldr r0, _08039454 @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
_08039450:
	pop {r0}
	bx r0
	.align 2, 0
_08039454: .4byte gCurrentSprite

	thumb_func_start MiscPadPressingSwitch
MiscPadPressingSwitch: @ 0x08039458
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803948A
	ldr r0, _08039470 @ =gCurrentSprite
	ldrb r1, [r0, #0x1d]
	adds r3, r0, #0
	cmp r1, #0x68
	bne _08039478
	ldr r0, _08039474 @ =0x0834AD8C
	b _0803947A
	.align 2, 0
_08039470: .4byte gCurrentSprite
_08039474: .4byte 0x0834AD8C
_08039478:
	ldr r0, _08039490 @ =0x0834A0F4
_0803947A:
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x1a
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
_0803948A:
	pop {r0}
	bx r0
	.align 2, 0
_08039490: .4byte 0x0834A0F4

	thumb_func_start MiscPadSwitchPressed
MiscPadSwitchPressed: @ 0x08039494
	push {r4, lr}
	bl NavPadDetectSamus
	cmp r0, #0
	beq _080394E4
	bl SamusCheckMorphed
	cmp r0, #0
	bne _08039514
	ldr r2, _080394D8 @ =gSamusData
	ldr r4, _080394DC @ =gCurrentSprite
	ldrh r0, [r4, #4]
	strh r0, [r2, #0x16]
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _080394B8
	movs r0, #0
	strb r0, [r2, #5]
_080394B8:
	ldr r1, _080394E0 @ =0x0828FD04
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x36
	bl _call_via_r1
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x14
	strb r0, [r1]
	b _08039514
	.align 2, 0
_080394D8: .4byte gSamusData
_080394DC: .4byte gCurrentSprite
_080394E0: .4byte 0x0828FD04
_080394E4:
	ldr r0, _080394F4 @ =gCurrentSprite
	ldrb r1, [r0, #0x1d]
	adds r3, r0, #0
	cmp r1, #0x68
	bne _080394FC
	ldr r0, _080394F8 @ =0x0834AD54
	b _080394FE
	.align 2, 0
_080394F4: .4byte gCurrentSprite
_080394F8: .4byte 0x0834AD54
_080394FC:
	ldr r0, _0803951C @ =0x0834A0BC
_080394FE:
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x1c
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r0, #0xe6
	bl SoundPlay
_08039514:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803951C: .4byte 0x0834A0BC

	thumb_func_start MiscPadReleasingSwitch
MiscPadReleasingSwitch: @ 0x08039520
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803952E
	bl MiscPadIdleInit
_0803952E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MiscPadSamusInteracting
MiscPadSamusInteracting: @ 0x08039534
	push {r4, lr}
	ldr r2, _08039564 @ =gCurrentSprite
	adds r4, r2, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #0
	beq _0803957C
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08039552
	ldr r0, _08039568 @ =0x00000103
	bl SoundPlay
_08039552:
	ldrb r0, [r4]
	cmp r0, #7
	bhi _0803956C
	adds r2, r0, #0
	movs r0, #0x21
	movs r1, #2
	bl SpriteLoadGfx
	b _0803959A
	.align 2, 0
_08039564: .4byte gCurrentSprite
_08039568: .4byte 0x00000103
_0803956C:
	cmp r0, #8
	bne _0803959A
	movs r0, #0x21
	movs r1, #2
	movs r2, #2
	bl SpriteLoadPal
	b _0803959A
_0803957C:
	ldr r1, _080395A0 @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x36
	bne _0803959A
	adds r0, r1, #0
	adds r0, #0x22
	ldrb r0, [r0]
	cmp r0, #0xd
	bls _0803959A
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x3a
	strb r1, [r0]
	movs r0, #0x1e
	strb r0, [r4]
_0803959A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080395A0: .4byte gSamusData

	thumb_func_start MiscPadSpawnMessageBanner
MiscPadSpawnMessageBanner: @ 0x080395A4
	push {lr}
	sub sp, #0xc
	movs r3, #0
	ldr r2, _080395D4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08039632
	subs r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	ldrb r1, [r2, #0x1d]
	cmp r1, #0x66
	beq _080395EC
	cmp r1, #0x66
	bgt _080395D8
	cmp r1, #0x65
	beq _080395E2
	b _08039608
	.align 2, 0
_080395D4: .4byte gCurrentSprite
_080395D8:
	cmp r1, #0x67
	beq _080395F6
	cmp r1, #0x68
	beq _08039600
	b _08039608
_080395E2:
	movs r0, #0x20
	bl EventCheckAdvance
	movs r3, #6
	b _0803960C
_080395EC:
	movs r0, #0x3d
	bl EventCheckAdvance
	movs r3, #7
	b _0803960C
_080395F6:
	movs r0, #0x4a
	bl EventCheckAdvance
	movs r3, #9
	b _0803960C
_08039600:
	movs r0, #0x3f
	bl EventCheckAdvance
	movs r3, #8
_08039608:
	cmp r3, #0
	beq _08039632
_0803960C:
	ldr r1, _08039638 @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, _0803963C @ =gXParasiteTargetYPosition
	ldrh r0, [r0]
	str r0, [sp]
	ldr r0, _08039640 @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x21
	adds r1, r3, #0
	movs r2, #2
	movs r3, #0x10
	bl SpriteSpawnPrimary
_08039632:
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
_08039638: .4byte gPreventMovementTimer
_0803963C: .4byte gXParasiteTargetYPosition
_08039640: .4byte gXParasiteTargetXPosition

	thumb_func_start MiscPadAfterInteraction
MiscPadAfterInteraction: @ 0x08039644
	push {lr}
	ldr r1, _08039660 @ =gCurrentSprite
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x68
	bne _08039672
	ldr r0, _08039664 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x3b
	bne _08039668
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	b _08039672
	.align 2, 0
_08039660: .4byte gCurrentSprite
_08039664: .4byte gSamusData
_08039668:
	ldr r1, _08039678 @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
_08039672:
	pop {r0}
	bx r0
	.align 2, 0
_08039678: .4byte gPreventMovementTimer

	thumb_func_start MiscPadInactive
MiscPadInactive: @ 0x0803967C
	bx lr
	.align 2, 0

	thumb_func_start MiscPadWaitForWideBeamCoreX
MiscPadWaitForWideBeamCoreX: @ 0x08039680
	push {r4, lr}
	ldr r4, _080396C8 @ =gCurrentSprite
	ldrb r0, [r4, #0x1d]
	cmp r0, #0x66
	bne _080396C2
	bl EventCheckOn_Meltdown
	cmp r0, #2
	bne _080396C2
	movs r0, #0x57
	bl CountPrimarySprite
	cmp r0, #0
	bne _080396C2
	ldr r0, _080396CC @ =gPreventMovementTimer
	ldrh r2, [r0]
	cmp r2, #0
	bne _080396C2
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	subs r1, #0xb
	movs r0, #0x1c
	strb r0, [r1]
	ldr r0, _080396D0 @ =0x0834A0BC
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_080396C2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080396C8: .4byte gCurrentSprite
_080396CC: .4byte gPreventMovementTimer
_080396D0: .4byte 0x0834A0BC

	thumb_func_start MiscPadConsoleInit
MiscPadConsoleInit: @ 0x080396D4
	push {r4, r5, lr}
	ldr r0, _0803974C @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r4, [r0]
	mov r2, ip
	ldrh r1, [r2]
	ldr r0, _08039750 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r5, #0
	strh r0, [r2]
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08039754 @ =0x0000FFFC
	mov r0, ip
	strh r1, [r0, #0xa]
	movs r0, #4
	mov r2, ip
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	strh r5, [r2, #0x16]
	ldr r1, _08039758 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r1, [r0, #0x1d]
	mov r4, ip
	cmp r1, #0x66
	bne _08039760
	bl EventCheckOn_Meltdown
	cmp r0, #0
	beq _08039790
	ldr r0, _0803975C @ =0x0834A044
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	b _0803979A
	.align 2, 0
_0803974C: .4byte gCurrentSprite
_08039750: .4byte 0x0000FFFB
_08039754: .4byte 0x0000FFFC
_08039758: .4byte gSpriteData
_0803975C: .4byte 0x0834A044
_08039760:
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08039784
	cmp r1, #0x68
	bne _08039774
	ldr r0, _08039770 @ =0x0834ACDC
	b _08039776
	.align 2, 0
_08039770: .4byte 0x0834ACDC
_08039774:
	ldr r0, _08039780 @ =0x0834A044
_08039776:
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	b _0803979A
	.align 2, 0
_08039780: .4byte 0x0834A044
_08039784:
	cmp r1, #0x68
	bne _08039790
	ldr r0, _0803978C @ =0x0834AD04
	b _08039792
	.align 2, 0
_0803978C: .4byte 0x0834AD04
_08039790:
	ldr r0, _080397A4 @ =0x0834A06C
_08039792:
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
_0803979A:
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080397A4: .4byte 0x0834A06C

	thumb_func_start MiscPadConsoleIdle
MiscPadConsoleIdle: @ 0x080397A8
	push {lr}
	ldr r3, _080397D0 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _080397D4 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _080397EE
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x68
	bne _080397DC
	ldr r0, _080397D8 @ =0x0834AD04
	b _080397DE
	.align 2, 0
_080397D0: .4byte gCurrentSprite
_080397D4: .4byte gSpriteData
_080397D8: .4byte 0x0834AD04
_080397DC:
	ldr r0, _080397F4 @ =0x0834A06C
_080397DE:
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
_080397EE:
	pop {r0}
	bx r0
	.align 2, 0
_080397F4: .4byte 0x0834A06C

	thumb_func_start MiscPad
MiscPad: @ 0x080397F8
	push {lr}
	ldr r0, _08039818 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bls _0803980E
	b _0803997A
_0803980E:
	lsls r0, r0, #2
	ldr r1, _0803981C @ =_08039820
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08039818: .4byte gCurrentSprite
_0803981C: .4byte _08039820
_08039820: @ jump table
	.4byte _0803993C @ case 0
	.4byte _08039940 @ case 1
	.4byte _08039946 @ case 2
	.4byte _0803997A @ case 3
	.4byte _0803997A @ case 4
	.4byte _0803997A @ case 5
	.4byte _0803997A @ case 6
	.4byte _0803997A @ case 7
	.4byte _0803997A @ case 8
	.4byte _0803997A @ case 9
	.4byte _0803997A @ case 10
	.4byte _0803997A @ case 11
	.4byte _0803997A @ case 12
	.4byte _0803997A @ case 13
	.4byte _0803997A @ case 14
	.4byte _0803997A @ case 15
	.4byte _0803997A @ case 16
	.4byte _0803997A @ case 17
	.4byte _0803997A @ case 18
	.4byte _0803997A @ case 19
	.4byte _0803997A @ case 20
	.4byte _0803997A @ case 21
	.4byte _0803997A @ case 22
	.4byte _0803997A @ case 23
	.4byte _0803994C @ case 24
	.4byte _0803997A @ case 25
	.4byte _08039952 @ case 26
	.4byte _0803997A @ case 27
	.4byte _08039958 @ case 28
	.4byte _0803997A @ case 29
	.4byte _0803995E @ case 30
	.4byte _0803997A @ case 31
	.4byte _08039964 @ case 32
	.4byte _0803997A @ case 33
	.4byte _0803997A @ case 34
	.4byte _0803997A @ case 35
	.4byte _0803997A @ case 36
	.4byte _0803997A @ case 37
	.4byte _0803997A @ case 38
	.4byte _0803997A @ case 39
	.4byte _0803997A @ case 40
	.4byte _0803997A @ case 41
	.4byte _0803997A @ case 42
	.4byte _0803997A @ case 43
	.4byte _0803997A @ case 44
	.4byte _0803997A @ case 45
	.4byte _0803997A @ case 46
	.4byte _0803997A @ case 47
	.4byte _0803997A @ case 48
	.4byte _0803997A @ case 49
	.4byte _0803997A @ case 50
	.4byte _0803997A @ case 51
	.4byte _0803997A @ case 52
	.4byte _0803997A @ case 53
	.4byte _0803997A @ case 54
	.4byte _0803997A @ case 55
	.4byte _0803996A @ case 56
	.4byte _0803997A @ case 57
	.4byte _08039970 @ case 58
	.4byte _0803997A @ case 59
	.4byte _0803997A @ case 60
	.4byte _0803997A @ case 61
	.4byte _0803997A @ case 62
	.4byte _0803997A @ case 63
	.4byte _0803997A @ case 64
	.4byte _0803997A @ case 65
	.4byte _0803997A @ case 66
	.4byte _0803997A @ case 67
	.4byte _0803997A @ case 68
	.4byte _0803997A @ case 69
	.4byte _08039976 @ case 70
_0803993C:
	bl MiscPadInit
_08039940:
	bl MiscPadIdleInit
	b _0803997A
_08039946:
	bl MiscPadIdle
	b _0803997A
_0803994C:
	bl MiscPadPressingSwitch
	b _0803997A
_08039952:
	bl MiscPadSwitchPressed
	b _0803997A
_08039958:
	bl MiscPadReleasingSwitch
	b _0803997A
_0803995E:
	bl MiscPadAfterInteraction
	b _0803997A
_08039964:
	bl MiscPadInactive
	b _0803997A
_0803996A:
	bl MiscPadSamusInteracting
	b _0803997A
_08039970:
	bl MiscPadSpawnMessageBanner
	b _0803997A
_08039976:
	bl MiscPadWaitForWideBeamCoreX
_0803997A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MiscPadConsole
MiscPadConsole: @ 0x08039980
	push {lr}
	ldr r0, _0803999C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _080399A0
	cmp r0, #2
	beq _080399A6
	b _080399AA
	.align 2, 0
_0803999C: .4byte gCurrentSprite
_080399A0:
	bl MiscPadConsoleInit
	b _080399AA
_080399A6:
	bl MiscPadConsoleIdle
_080399AA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OperationsRoomPadInit
OperationsRoomPadInit: @ 0x080399B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r4, _08039A38 @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r7, #0
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r7, [r0]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _08039A3C @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x21
	movs r1, #1
	mov r8, r1
	mov r1, r8
	strb r1, [r0]
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x34
	movs r1, #0
	bl SpriteSpawnSecondary
	bl EventCheckOn_SaXDefeated
	adds r5, r0, #0
	cmp r5, #0
	beq _08039A40
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	b _08039A5E
	.align 2, 0
_08039A38: .4byte gCurrentSprite
_08039A3C: .4byte 0x0000FFFC
_08039A40:
	bl EventCheckAfter_OrbitChange
	cmp r0, #0
	beq _08039A68
	adds r0, r4, #0
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
_08039A5E:
	movs r0, #0x35
	movs r1, #0
	bl SpriteSpawnSecondary
	b _08039A70
_08039A68:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #2
	strb r0, [r1]
_08039A70:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start OperationsRoomPadIdleInit
OperationsRoomPadIdleInit: @ 0x08039A7C
	push {lr}
	ldr r1, _08039AA4 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08039AAC
	ldr r0, _08039AA8 @ =0x0834C344
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x46
	b _08039AB4
	.align 2, 0
_08039AA4: .4byte gCurrentSprite
_08039AA8: .4byte 0x0834C344
_08039AAC:
	ldr r0, _08039ABC @ =0x0834C2F4
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #2
_08039AB4:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08039ABC: .4byte 0x0834C2F4

	thumb_func_start OperationsRoomPadIdle
OperationsRoomPadIdle: @ 0x08039AC0
	push {lr}
	bl NavPadDetectSamus
	cmp r0, #0
	beq _08039B00
	ldr r3, _08039AF4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08039B08
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08039AF8 @ =0x0834C254
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _08039AFC @ =0x00000101
	bl SoundPlay
	b _08039B08
	.align 2, 0
_08039AF4: .4byte gCurrentSprite
_08039AF8: .4byte 0x0834C254
_08039AFC: .4byte 0x00000101
_08039B00:
	ldr r0, _08039B0C @ =gCurrentSprite
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
_08039B08:
	pop {r0}
	bx r0
	.align 2, 0
_08039B0C: .4byte gCurrentSprite

	thumb_func_start OperationsRoomPadPressingSwitch
OperationsRoomPadPressingSwitch: @ 0x08039B10
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08039B2E
	ldr r1, _08039B34 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _08039B38 @ =0x0834C344
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
_08039B2E:
	pop {r0}
	bx r0
	.align 2, 0
_08039B34: .4byte gCurrentSprite
_08039B38: .4byte 0x0834C344

	thumb_func_start OperationsRoomPadSwitchPressed
OperationsRoomPadSwitchPressed: @ 0x08039B3C
	push {r4, lr}
	bl NavPadDetectSamus
	adds r3, r0, #0
	cmp r3, #0
	beq _08039B90
	bl SamusCheckMorphed
	cmp r0, #0
	bne _08039BAA
	ldr r2, _08039B84 @ =gSamusData
	ldr r4, _08039B88 @ =gCurrentSprite
	ldrh r0, [r4, #4]
	strh r0, [r2, #0x16]
	ldrb r0, [r2, #5]
	cmp r0, #0
	beq _08039B62
	movs r0, #0
	strb r0, [r2, #5]
_08039B62:
	ldr r1, _08039B8C @ =0x0828FD04
	ldrb r0, [r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x36
	bl _call_via_r1
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x14
	strb r0, [r1]
	b _08039BAA
	.align 2, 0
_08039B84: .4byte gSamusData
_08039B88: .4byte gCurrentSprite
_08039B8C: .4byte 0x0828FD04
_08039B90:
	ldr r1, _08039BB0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _08039BB4 @ =0x0834C2CC
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #0x81
	lsls r0, r0, #1
	bl SoundPlay
_08039BAA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08039BB0: .4byte gCurrentSprite
_08039BB4: .4byte 0x0834C2CC

	thumb_func_start OperationsRoomPadReleasing
OperationsRoomPadReleasing: @ 0x08039BB8
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08039BC6
	bl OperationsRoomPadIdleInit
_08039BC6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OperationsRoomPadSamusInteracting
OperationsRoomPadSamusInteracting: @ 0x08039BCC
	push {lr}
	ldr r0, _08039C10 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08039BEA
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08039BEA
	ldr r0, _08039C14 @ =0x00000103
	bl SoundPlay
_08039BEA:
	ldr r1, _08039C18 @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x36
	bne _08039C0C
	adds r0, r1, #0
	adds r0, #0x22
	ldrb r0, [r0]
	cmp r0, #0xe
	bne _08039C0C
	ldr r1, _08039C10 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3a
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
_08039C0C:
	pop {r0}
	bx r0
	.align 2, 0
_08039C10: .4byte gCurrentSprite
_08039C14: .4byte 0x00000103
_08039C18: .4byte gSamusData

	thumb_func_start OperationsRoomPadStartEscape
OperationsRoomPadStartEscape: @ 0x08039C1C
	push {lr}
	ldr r1, _08039C58 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08039C52
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	ldr r1, _08039C5C @ =gPreventMovementTimer
	movs r2, #0xfa
	lsls r2, r2, #2
	adds r0, r2, #0
	strh r0, [r1]
	movs r0, #0x67
	bl EventCheckAdvance
	movs r0, #0xb
	bl TrySpawnMessageBanner
	movs r0, #0
	bl FadeMusic
_08039C52:
	pop {r0}
	bx r0
	.align 2, 0
_08039C58: .4byte gCurrentSprite
_08039C5C: .4byte gPreventMovementTimer

	thumb_func_start OperationsRoomPadConsoleInit
OperationsRoomPadConsoleInit: @ 0x08039C60
	push {r4, lr}
	ldr r0, _08039CB4 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08039CB8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08039CBC @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08039CC0 @ =0x0834C244
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08039CB4: .4byte gCurrentSprite
_08039CB8: .4byte 0x0000FFFB
_08039CBC: .4byte 0x0000FFFC
_08039CC0: .4byte 0x0834C244

	thumb_func_start OperationsRoomPadConsoleIdle
OperationsRoomPadConsoleIdle: @ 0x08039CC4
	bx lr
	.align 2, 0

	thumb_func_start OperationsRoomPadConsoleScreenInit
OperationsRoomPadConsoleScreenInit: @ 0x08039CC8
	push {r4, lr}
	ldr r0, _08039D3C @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08039D40 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08039D44 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r2, _08039D48 @ =gSpriteData
	mov r0, ip
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08039D50
	ldr r0, _08039D4C @ =0x0834C27C
	mov r1, ip
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x18
	b _08039D5C
	.align 2, 0
_08039D3C: .4byte gCurrentSprite
_08039D40: .4byte 0x0000FFFB
_08039D44: .4byte 0x0000FFFC
_08039D48: .4byte gSpriteData
_08039D4C: .4byte 0x0834C27C
_08039D50:
	ldr r0, _08039D64 @ =0x0834C2A4
	mov r2, ip
	str r0, [r2, #0x18]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
_08039D5C:
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08039D64: .4byte 0x0834C2A4

	thumb_func_start OperationsRoomPadConsoleScreenIdle
OperationsRoomPadConsoleScreenIdle: @ 0x08039D68
	push {lr}
	ldr r2, _08039D9C @ =gSpriteData
	ldr r3, _08039DA0 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _08039D96
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08039DA4 @ =0x0834C27C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
_08039D96:
	pop {r0}
	bx r0
	.align 2, 0
_08039D9C: .4byte gSpriteData
_08039DA0: .4byte gCurrentSprite
_08039DA4: .4byte 0x0834C27C

	thumb_func_start OperationsRoomPadScreenInit
OperationsRoomPadScreenInit: @ 0x08039DA8
	push {r4, lr}
	ldr r0, _08039E0C @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	mov r4, ip
	ldrh r1, [r4]
	ldr r0, _08039E10 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #2
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08039E14 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08039E18 @ =0x0834C31C
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	movs r0, #0x82
	lsls r0, r0, #1
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08039E0C: .4byte gCurrentSprite
_08039E10: .4byte 0x0000FFFB
_08039E14: .4byte 0x0000FFFC
_08039E18: .4byte 0x0834C31C

	thumb_func_start OperationsRoomPadScreenTurningOn
OperationsRoomPadScreenTurningOn: @ 0x08039E1C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08039E38
	ldr r1, _08039E3C @ =gCurrentSprite
	ldr r0, _08039E40 @ =0x0834C304
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_08039E38:
	pop {r0}
	bx r0
	.align 2, 0
_08039E3C: .4byte gCurrentSprite
_08039E40: .4byte 0x0834C304

	thumb_func_start OperationsRoomPadScreenIdle
OperationsRoomPadScreenIdle: @ 0x08039E44
	push {lr}
	ldr r3, _08039E7C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _08039E80 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bne _08039E78
	ldr r0, _08039E84 @ =0x0834C354
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	adds r0, #0xeb
	bl SoundPlay
_08039E78:
	pop {r0}
	bx r0
	.align 2, 0
_08039E7C: .4byte gCurrentSprite
_08039E80: .4byte gSpriteData
_08039E84: .4byte 0x0834C354

	thumb_func_start OperationsRoomPadScreenTurningOff
OperationsRoomPadScreenTurningOff: @ 0x08039E88
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08039E98
	ldr r1, _08039E9C @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08039E98:
	pop {r0}
	bx r0
	.align 2, 0
_08039E9C: .4byte gCurrentSprite

	thumb_func_start OperationsRoomPad
OperationsRoomPad: @ 0x08039EA0
	push {lr}
	ldr r0, _08039EC0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bls _08039EB6
	b _08039FE0
_08039EB6:
	lsls r0, r0, #2
	ldr r1, _08039EC4 @ =_08039EC8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08039EC0: .4byte gCurrentSprite
_08039EC4: .4byte _08039EC8
_08039EC8: @ jump table
	.4byte _08039FB4 @ case 0
	.4byte _08039FB8 @ case 1
	.4byte _08039FBE @ case 2
	.4byte _08039FE0 @ case 3
	.4byte _08039FE0 @ case 4
	.4byte _08039FE0 @ case 5
	.4byte _08039FE0 @ case 6
	.4byte _08039FE0 @ case 7
	.4byte _08039FE0 @ case 8
	.4byte _08039FE0 @ case 9
	.4byte _08039FE0 @ case 10
	.4byte _08039FE0 @ case 11
	.4byte _08039FE0 @ case 12
	.4byte _08039FE0 @ case 13
	.4byte _08039FE0 @ case 14
	.4byte _08039FE0 @ case 15
	.4byte _08039FE0 @ case 16
	.4byte _08039FE0 @ case 17
	.4byte _08039FE0 @ case 18
	.4byte _08039FE0 @ case 19
	.4byte _08039FE0 @ case 20
	.4byte _08039FE0 @ case 21
	.4byte _08039FE0 @ case 22
	.4byte _08039FE0 @ case 23
	.4byte _08039FC4 @ case 24
	.4byte _08039FE0 @ case 25
	.4byte _08039FCA @ case 26
	.4byte _08039FE0 @ case 27
	.4byte _08039FD0 @ case 28
	.4byte _08039FE0 @ case 29
	.4byte _08039FE0 @ case 30
	.4byte _08039FE0 @ case 31
	.4byte _08039FE0 @ case 32
	.4byte _08039FE0 @ case 33
	.4byte _08039FE0 @ case 34
	.4byte _08039FE0 @ case 35
	.4byte _08039FE0 @ case 36
	.4byte _08039FE0 @ case 37
	.4byte _08039FE0 @ case 38
	.4byte _08039FE0 @ case 39
	.4byte _08039FE0 @ case 40
	.4byte _08039FE0 @ case 41
	.4byte _08039FE0 @ case 42
	.4byte _08039FE0 @ case 43
	.4byte _08039FE0 @ case 44
	.4byte _08039FE0 @ case 45
	.4byte _08039FE0 @ case 46
	.4byte _08039FE0 @ case 47
	.4byte _08039FE0 @ case 48
	.4byte _08039FE0 @ case 49
	.4byte _08039FE0 @ case 50
	.4byte _08039FE0 @ case 51
	.4byte _08039FE0 @ case 52
	.4byte _08039FE0 @ case 53
	.4byte _08039FE0 @ case 54
	.4byte _08039FE0 @ case 55
	.4byte _08039FD6 @ case 56
	.4byte _08039FE0 @ case 57
	.4byte _08039FDC @ case 58
_08039FB4:
	bl OperationsRoomPadInit
_08039FB8:
	bl OperationsRoomPadIdleInit
	b _08039FE0
_08039FBE:
	bl OperationsRoomPadIdle
	b _08039FE0
_08039FC4:
	bl OperationsRoomPadPressingSwitch
	b _08039FE0
_08039FCA:
	bl OperationsRoomPadSwitchPressed
	b _08039FE0
_08039FD0:
	bl OperationsRoomPadReleasing
	b _08039FE0
_08039FD6:
	bl OperationsRoomPadSamusInteracting
	b _08039FE0
_08039FDC:
	bl OperationsRoomPadStartEscape
_08039FE0:
	pop {r0}
	bx r0

	thumb_func_start OperationsRoomPadConsole
OperationsRoomPadConsole: @ 0x08039FE4
	push {lr}
	ldr r0, _0803A000 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803A004
	cmp r0, #2
	beq _0803A008
	b _0803A00C
	.align 2, 0
_0803A000: .4byte gCurrentSprite
_0803A004:
	bl OperationsRoomPadConsoleInit
_0803A008:
	bl OperationsRoomPadConsoleIdle
_0803A00C:
	pop {r0}
	bx r0

	thumb_func_start OperationsRoomPadConsoleScreen
OperationsRoomPadConsoleScreen: @ 0x0803A010
	push {lr}
	ldr r0, _0803A02C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803A030
	cmp r0, #2
	beq _0803A036
	b _0803A03A
	.align 2, 0
_0803A02C: .4byte gCurrentSprite
_0803A030:
	bl OperationsRoomPadConsoleScreenInit
	b _0803A03A
_0803A036:
	bl OperationsRoomPadConsoleScreenIdle
_0803A03A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OperationsRoomPadScreen
OperationsRoomPadScreen: @ 0x0803A040
	push {lr}
	ldr r0, _0803A060 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803A072
	cmp r0, #2
	bgt _0803A064
	cmp r0, #0
	beq _0803A06E
	b _0803A082
	.align 2, 0
_0803A060: .4byte gCurrentSprite
_0803A064:
	cmp r0, #0x18
	beq _0803A078
	cmp r0, #0x1a
	beq _0803A07E
	b _0803A082
_0803A06E:
	bl OperationsRoomPadScreenInit
_0803A072:
	bl OperationsRoomPadScreenTurningOn
	b _0803A082
_0803A078:
	bl OperationsRoomPadScreenIdle
	b _0803A082
_0803A07E:
	bl OperationsRoomPadScreenTurningOff
_0803A082:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ScientistInit
ScientistInit: @ 0x0803A088
	push {r4, r5, lr}
	ldr r2, _0803A0AC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0803A0B0 @ =gEquipment
	ldrb r1, [r0, #0xa]
	movs r5, #2
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	beq _0803A0B4
	movs r0, #0
	strh r0, [r2]
	b _0803A0FC
	.align 2, 0
_0803A0AC: .4byte gCurrentSprite
_0803A0B0: .4byte gEquipment
_0803A0B4:
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _0803A104 @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x25
	strb r5, [r0]
	adds r3, r2, #0
	adds r3, #0x27
	movs r0, #0x28
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r3, #2
	movs r0, #0x10
	strb r0, [r3]
	ldr r0, _0803A108 @ =0x0000FF88
	strh r0, [r2, #0xa]
	strh r4, [r2, #0xc]
	adds r0, #0x64
	strh r0, [r2, #0xe]
	movs r0, #0x14
	strh r0, [r2, #0x10]
	adds r0, r2, #0
	adds r0, #0x24
	strb r5, [r0]
	ldr r0, _0803A10C @ =0x0834D9EC
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r4, [r2, #0x16]
_0803A0FC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803A104: .4byte 0x0000FFFB
_0803A108: .4byte 0x0000FF88
_0803A10C: .4byte 0x0834D9EC

	thumb_func_start ScientistIdle
ScientistIdle: @ 0x0803A110
	push {lr}
	ldr r3, _0803A144 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bls _0803A13E
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0803A148 @ =0x0834DAC4
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	bl MakeSpriteFaceSamusXFlip
_0803A13E:
	pop {r0}
	bx r0
	.align 2, 0
_0803A144: .4byte gCurrentSprite
_0803A148: .4byte 0x0834DAC4

	thumb_func_start ScientistTurning
ScientistTurning: @ 0x0803A14C
	push {lr}
	ldr r1, _0803A16C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803A166
	adds r1, #0x24
	movs r0, #0x45
	strb r0, [r1]
_0803A166:
	pop {r0}
	bx r0
	.align 2, 0
_0803A16C: .4byte gCurrentSprite

	thumb_func_start ScientistTransformingInit
ScientistTransformingInit: @ 0x0803A170
	ldr r3, _0803A194 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r2, _0803A198 @ =0x00008020
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r3, #6]
	bx lr
	.align 2, 0
_0803A194: .4byte gCurrentSprite
_0803A198: .4byte 0x00008020

	thumb_func_start ScientistTransforming
ScientistTransforming: @ 0x0803A19C
	push {r4, lr}
	ldr r2, _0803A1E4 @ =gWrittenToMosaic_H
	ldr r1, _0803A1E8 @ =0x083BDED6
	ldr r4, _0803A1EC @ =gCurrentSprite
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x13
	bhi _0803A1F0
	ldrh r2, [r4, #6]
	movs r0, #0x57
	movs r1, #0
	bl SpriteLoadGfx
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0803A1FE
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	movs r0, #0x57
	strb r0, [r4, #0x1d]
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	b _0803A1FE
	.align 2, 0
_0803A1E4: .4byte gWrittenToMosaic_H
_0803A1E8: .4byte 0x083BDED6
_0803A1EC: .4byte gCurrentSprite
_0803A1F0:
	cmp r0, #0x14
	bne _0803A1FE
	movs r0, #0x57
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_0803A1FE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start Scientist
Scientist: @ 0x0803A204
	push {lr}
	ldr r0, _0803A224 @ =gCurrentSprite
	movs r1, #1
	strh r1, [r0, #0x14]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x18
	beq _0803A23E
	cmp r0, #0x18
	bgt _0803A228
	cmp r0, #0
	beq _0803A232
	cmp r0, #2
	beq _0803A238
	b _0803A24C
	.align 2, 0
_0803A224: .4byte gCurrentSprite
_0803A228:
	cmp r0, #0x45
	beq _0803A244
	cmp r0, #0x46
	beq _0803A248
	b _0803A24C
_0803A232:
	bl ScientistInit
	b _0803A24C
_0803A238:
	bl ScientistIdle
	b _0803A24C
_0803A23E:
	bl ScientistTurning
	b _0803A24C
_0803A244:
	bl ScientistTransformingInit
_0803A248:
	bl ScientistTransforming
_0803A24C:
	pop {r0}
	bx r0

	thumb_func_start SkulteraSetSidesHitboxes
SkulteraSetSidesHitboxes: @ 0x0803A250
	push {lr}
	ldr r2, _0803A270 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803A284
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A278
	ldr r0, _0803A274 @ =0x0000FFE8
	strh r0, [r2, #0xe]
	movs r0, #0x28
	b _0803A2A2
	.align 2, 0
_0803A270: .4byte gCurrentSprite
_0803A274: .4byte 0x0000FFE8
_0803A278:
	ldr r0, _0803A280 @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x20
	b _0803A2A2
	.align 2, 0
_0803A280: .4byte 0x0000FFF0
_0803A284:
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A29C
	ldr r0, _0803A298 @ =0x0000FFD8
	strh r0, [r2, #0xe]
	movs r0, #0x18
	b _0803A2A2
	.align 2, 0
_0803A298: .4byte 0x0000FFD8
_0803A29C:
	ldr r0, _0803A2A8 @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x10
_0803A2A2:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_0803A2A8: .4byte 0x0000FFE0

	thumb_func_start SkulteraXMovement
SkulteraXMovement: @ 0x0803A2AC
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r2, _0803A2D0 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r4, r2, #0
	cmp r0, #0
	beq _0803A2F8
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A2D4
	ldrh r0, [r4, #4]
	adds r0, #0x38
	b _0803A2D8
	.align 2, 0
_0803A2D0: .4byte gCurrentSprite
_0803A2D4:
	ldrh r0, [r4, #4]
	adds r0, #0x28
_0803A2D8:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrh r0, [r4, #2]
	subs r0, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803A2F4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _0803A320
	ldrh r0, [r4, #4]
	adds r0, r5, r0
	b _0803A32C
	.align 2, 0
_0803A2F4: .4byte gPreviousCollisionCheck
_0803A2F8:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A308
	ldrh r0, [r4, #4]
	subs r0, #0x38
	b _0803A30C
_0803A308:
	ldrh r0, [r4, #4]
	subs r0, #0x28
_0803A30C:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrh r0, [r4, #2]
	subs r0, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803A324 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0803A328
_0803A320:
	movs r0, #1
	b _0803A330
	.align 2, 0
_0803A324: .4byte gPreviousCollisionCheck
_0803A328:
	ldrh r0, [r4, #4]
	subs r0, r0, r5
_0803A32C:
	strh r0, [r4, #4]
	movs r0, #0
_0803A330:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start SkulteraTurningIntoX
SkulteraTurningIntoX: @ 0x0803A338
	push {lr}
	sub sp, #0x10
	ldr r2, _0803A370 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A374
	ldrb r1, [r2, #0x1d]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r2, #2]
	subs r0, #0x30
	str r0, [sp, #4]
	ldrh r0, [r2, #4]
	subs r0, #0x10
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	b _0803A37A
	.align 2, 0
_0803A370: .4byte gCurrentSprite
_0803A374:
	ldrh r0, [r2, #2]
	subs r0, #0x20
	strh r0, [r2, #2]
_0803A37A:
	add sp, #0x10
	pop {r0}
	bx r0

	thumb_func_start SkulteraInit
SkulteraInit: @ 0x0803A380
	push {r4, r5, lr}
	ldr r2, _0803A3B4 @ =gCurrentSprite
	adds r4, r2, #0
	adds r4, #0x24
	ldrb r3, [r4]
	cmp r3, #0
	bne _0803A3D8
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	subs r0, #0x20
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x2f
	bhi _0803A3C2
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0803A3B8
	adds r0, r2, #0
	adds r0, #0x2d
	strb r3, [r0]
	b _0803A3C6
	.align 2, 0
_0803A3B4: .4byte gCurrentSprite
_0803A3B8:
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	b _0803A3C6
_0803A3C2:
	strh r3, [r2]
	b _0803A498
_0803A3C6:
	bl SpriteChooseRandomXFlip
	ldr r0, _0803A3D4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	b _0803A3EA
	.align 2, 0
_0803A3D4: .4byte gCurrentSprite
_0803A3D8:
	adds r1, r2, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x5a
	strb r0, [r4]
	movs r0, #0x2c
	strh r0, [r2, #6]
_0803A3EA:
	ldr r1, _0803A440 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x25
	movs r4, #0
	movs r0, #2
	strb r0, [r2]
	strb r4, [r1, #0x1c]
	movs r5, #0
	strh r4, [r1, #0x16]
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r3, r1, #0
	cmp r0, #2
	bne _0803A44C
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r2]
	ldr r0, _0803A444 @ =0x0834F074
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0803A448 @ =0x0000FF80
	strh r0, [r3, #0xa]
	strh r4, [r3, #0xc]
	adds r1, #0xc
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x6a
	strb r0, [r3, #0x1d]
	b _0803A484
	.align 2, 0
_0803A440: .4byte gCurrentSprite
_0803A444: .4byte 0x0834F074
_0803A448: .4byte 0x0000FF80
_0803A44C:
	ldr r0, _0803A4A0 @ =0x0834EFEC
	str r0, [r3, #0x18]
	ldrb r0, [r3, #0x1d]
	cmp r0, #0xb5
	beq _0803A462
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	strb r1, [r0]
_0803A462:
	adds r0, r3, #0
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x28
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x29
	strb r2, [r0]
	ldr r0, _0803A4A4 @ =0x0000FFC0
	strh r0, [r3, #0xa]
	strh r4, [r3, #0xc]
	adds r1, #0xe
	movs r0, #1
	strb r0, [r1]
_0803A484:
	ldr r2, _0803A4A8 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	bl SkulteraSetSidesHitboxes
_0803A498:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803A4A0: .4byte 0x0834EFEC
_0803A4A4: .4byte 0x0000FFC0
_0803A4A8: .4byte sPrimarySpriteStats

	thumb_func_start SkulteraIdleInit
SkulteraIdleInit: @ 0x0803A4AC
	push {lr}
	ldr r0, _0803A4DC @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #4]
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1, #8]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	strb r2, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A4E4
	ldr r0, _0803A4E0 @ =0x0834F074
	mov r1, ip
	str r0, [r1, #0x18]
	adds r1, #0x2e
	movs r0, #3
	b _0803A4EE
	.align 2, 0
_0803A4DC: .4byte gCurrentSprite
_0803A4E0: .4byte 0x0834F074
_0803A4E4:
	ldr r0, _0803A4F4 @ =0x0834EFEC
	mov r1, ip
	str r0, [r1, #0x18]
	adds r1, #0x2e
	movs r0, #4
_0803A4EE:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0803A4F4: .4byte 0x0834EFEC

	thumb_func_start SkulteraIdle
SkulteraIdle: @ 0x0803A4F8
	push {r4, lr}
	ldr r4, _0803A520 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803A572
	movs r0, #4
	bl SkulteraXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803A524
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	b _0803A570
	.align 2, 0
_0803A520: .4byte gCurrentSprite
_0803A524:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803A53E
	ldrh r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	cmp r0, r1
	bge _0803A552
	b _0803A54A
_0803A53E:
	ldrh r0, [r4, #8]
	ldr r1, _0803A564 @ =0xFFFFFE00
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	cmp r0, r1
	ble _0803A552
_0803A54A:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
_0803A552:
	ldr r1, _0803A568 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A56C
	adds r1, #0x2e
	movs r0, #3
	b _0803A570
	.align 2, 0
_0803A564: .4byte 0xFFFFFE00
_0803A568: .4byte gCurrentSprite
_0803A56C:
	adds r1, #0x2e
	movs r0, #4
_0803A570:
	strb r0, [r1]
_0803A572:
	ldr r0, _0803A5AC @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803A5D2
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #0x40
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	bne _0803A5D2
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r0, #0xc0
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldr r3, _0803A5B0 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803A5BA
	cmp r2, #8
	bne _0803A5B4
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x29
	b _0803A5D0
	.align 2, 0
_0803A5AC: .4byte 0x03001346
_0803A5B0: .4byte gCurrentSprite
_0803A5B4:
	cmp r2, #4
	bne _0803A5D2
	b _0803A5CA
_0803A5BA:
	cmp r2, #4
	bne _0803A5C6
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x29
	b _0803A5D0
_0803A5C6:
	cmp r2, #8
	bne _0803A5D2
_0803A5CA:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #3
_0803A5D0:
	strb r0, [r1]
_0803A5D2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SkulteraChasingSamusInit
SkulteraChasingSamusInit: @ 0x0803A5D8
	push {lr}
	ldr r3, _0803A5F8 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x2a
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A600
	ldr r0, _0803A5FC @ =0x0834F0E4
	b _0803A602
	.align 2, 0
_0803A5F8: .4byte gCurrentSprite
_0803A5FC: .4byte 0x0834F0E4
_0803A600:
	ldr r0, _0803A608 @ =0x0834F054
_0803A602:
	str r0, [r3, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0803A608: .4byte 0x0834F054

	thumb_func_start SkulteraChasingSamus
SkulteraChasingSamus: @ 0x0803A60C
	push {r4, r5, lr}
	ldr r2, _0803A654 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r2, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldr r4, _0803A658 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	subs r0, #0x40
	cmp r0, r2
	ble _0803A664
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803A65C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803A682
	ldr r0, _0803A660 @ =gCurrentAffectingClipdata
	ldrh r0, [r0, #2]
	cmp r0, #1
	bne _0803A682
	ldrh r0, [r4, #2]
	subs r0, #2
	b _0803A680
	.align 2, 0
_0803A654: .4byte gSamusData
_0803A658: .4byte gCurrentSprite
_0803A65C: .4byte gPreviousCollisionCheck
_0803A660: .4byte gCurrentAffectingClipdata
_0803A664:
	adds r0, r1, #0
	adds r0, #0x40
	cmp r0, r2
	bge _0803A682
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803A6AC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803A682
	ldrh r0, [r4, #2]
	adds r0, #2
_0803A680:
	strh r0, [r4, #2]
_0803A682:
	ldr r4, _0803A6B0 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803A6C2
	movs r0, #4
	bl SkulteraXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803A6B4
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _0803A6C2
	.align 2, 0
_0803A6AC: .4byte gPreviousCollisionCheck
_0803A6B0: .4byte gCurrentSprite
_0803A6B4:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803A6C0
	movs r0, #3
_0803A6C0:
	strb r0, [r5]
_0803A6C2:
	ldr r0, _0803A6D4 @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803A6DC
	ldr r0, _0803A6D8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	b _0803A730
	.align 2, 0
_0803A6D4: .4byte 0x03001346
_0803A6D8: .4byte gCurrentSprite
_0803A6DC:
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #0x40
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	bne _0803A730
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r0, #0xc0
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldr r3, _0803A714 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803A718
	cmp r2, #8
	beq _0803A730
	cmp r2, #4
	bne _0803A728
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #3
	b _0803A72E
	.align 2, 0
_0803A714: .4byte gCurrentSprite
_0803A718:
	cmp r2, #4
	beq _0803A730
	cmp r2, #8
	bne _0803A728
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #3
	b _0803A72E
_0803A728:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #1
_0803A72E:
	strb r0, [r1]
_0803A730:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SkulteraTurningAroundInit
SkulteraTurningAroundInit: @ 0x0803A738
	push {lr}
	ldr r3, _0803A77C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #4
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	cmp r1, #2
	bne _0803A78C
	ldr r0, _0803A780 @ =0x0834F09C
	str r0, [r3, #0x18]
	ldrh r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	bne _0803A7B2
	ldr r0, _0803A784 @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803A7B2
	ands r1, r2
	cmp r1, #0
	beq _0803A7B2
	ldr r0, _0803A788 @ =0x00000193
	bl CheckPlayNotAlreadyPlayingSound
	b _0803A7B2
	.align 2, 0
_0803A77C: .4byte gCurrentSprite
_0803A780: .4byte 0x0834F09C
_0803A784: .4byte 0x03001346
_0803A788: .4byte 0x00000193
_0803A78C:
	ldr r0, _0803A7B8 @ =0x0834F00C
	str r0, [r3, #0x18]
	ldrh r2, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	bne _0803A7B2
	ldr r0, _0803A7BC @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803A7B2
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0803A7B2
	ldr r0, _0803A7C0 @ =0x00000191
	bl CheckPlayNotAlreadyPlayingSound
_0803A7B2:
	pop {r0}
	bx r0
	.align 2, 0
_0803A7B8: .4byte 0x0834F00C
_0803A7BC: .4byte 0x03001346
_0803A7C0: .4byte 0x00000191

	thumb_func_start SkulteraTurningAround
SkulteraTurningAround: @ 0x0803A7C4
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803A7E0
	bl SkulteraIdleInit
	ldr r0, _0803A7E4 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r2, #0x40
	eors r1, r2
	strh r1, [r0]
	bl SkulteraSetSidesHitboxes
_0803A7E0:
	pop {r0}
	bx r0
	.align 2, 0
_0803A7E4: .4byte gCurrentSprite

	thumb_func_start Skultera
Skultera: @ 0x0803A7E8
	push {lr}
	ldr r1, _0803A810 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803A814
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803A82A
	movs r0, #0xca
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0803A82A
	.align 2, 0
_0803A810: .4byte gCurrentSprite
_0803A814:
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803A82A
	movs r0, #0xc9
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803A82A:
	ldr r1, _0803A83C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803A840
	bl SpriteUpdateFreezeTimer
	b _0803AA0E
	.align 2, 0
_0803A83C: .4byte gCurrentSprite
_0803A840:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803A84C
	b _0803AA0E
_0803A84C:
	lsls r0, r0, #2
	ldr r1, _0803A858 @ =_0803A85C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803A858: .4byte _0803A85C
_0803A85C: @ jump table
	.4byte _0803A9CC @ case 0
	.4byte _0803A9D2 @ case 1
	.4byte _0803A9D8 @ case 2
	.4byte _0803A9DE @ case 3
	.4byte _0803A9E2 @ case 4
	.4byte _0803AA0E @ case 5
	.4byte _0803AA0E @ case 6
	.4byte _0803AA0E @ case 7
	.4byte _0803AA0E @ case 8
	.4byte _0803AA0E @ case 9
	.4byte _0803AA0E @ case 10
	.4byte _0803AA0E @ case 11
	.4byte _0803AA0E @ case 12
	.4byte _0803AA0E @ case 13
	.4byte _0803AA0E @ case 14
	.4byte _0803AA0E @ case 15
	.4byte _0803AA0E @ case 16
	.4byte _0803AA0E @ case 17
	.4byte _0803AA0E @ case 18
	.4byte _0803AA0E @ case 19
	.4byte _0803AA0E @ case 20
	.4byte _0803AA0E @ case 21
	.4byte _0803AA0E @ case 22
	.4byte _0803AA0E @ case 23
	.4byte _0803AA0E @ case 24
	.4byte _0803AA0E @ case 25
	.4byte _0803AA0E @ case 26
	.4byte _0803AA0E @ case 27
	.4byte _0803AA0E @ case 28
	.4byte _0803AA0E @ case 29
	.4byte _0803AA0E @ case 30
	.4byte _0803AA0E @ case 31
	.4byte _0803AA0E @ case 32
	.4byte _0803AA0E @ case 33
	.4byte _0803AA0E @ case 34
	.4byte _0803AA0E @ case 35
	.4byte _0803AA0E @ case 36
	.4byte _0803AA0E @ case 37
	.4byte _0803AA0E @ case 38
	.4byte _0803AA0E @ case 39
	.4byte _0803AA0E @ case 40
	.4byte _0803A9E8 @ case 41
	.4byte _0803A9EC @ case 42
	.4byte _0803AA0E @ case 43
	.4byte _0803AA0E @ case 44
	.4byte _0803AA0E @ case 45
	.4byte _0803AA0E @ case 46
	.4byte _0803AA0E @ case 47
	.4byte _0803AA0E @ case 48
	.4byte _0803AA0E @ case 49
	.4byte _0803AA0E @ case 50
	.4byte _0803AA0E @ case 51
	.4byte _0803AA0E @ case 52
	.4byte _0803AA0E @ case 53
	.4byte _0803AA0E @ case 54
	.4byte _0803AA0E @ case 55
	.4byte _0803AA0E @ case 56
	.4byte _0803AA0E @ case 57
	.4byte _0803AA0E @ case 58
	.4byte _0803AA0E @ case 59
	.4byte _0803AA0E @ case 60
	.4byte _0803AA0E @ case 61
	.4byte _0803AA0E @ case 62
	.4byte _0803AA0E @ case 63
	.4byte _0803AA0E @ case 64
	.4byte _0803AA0E @ case 65
	.4byte _0803AA0E @ case 66
	.4byte _0803AA0E @ case 67
	.4byte _0803AA0E @ case 68
	.4byte _0803AA0E @ case 69
	.4byte _0803AA0E @ case 70
	.4byte _0803AA0E @ case 71
	.4byte _0803AA0E @ case 72
	.4byte _0803AA0E @ case 73
	.4byte _0803AA0E @ case 74
	.4byte _0803AA0E @ case 75
	.4byte _0803AA0E @ case 76
	.4byte _0803AA0E @ case 77
	.4byte _0803AA0E @ case 78
	.4byte _0803AA0E @ case 79
	.4byte _0803AA0E @ case 80
	.4byte _0803AA0E @ case 81
	.4byte _0803AA0E @ case 82
	.4byte _0803AA0E @ case 83
	.4byte _0803AA0E @ case 84
	.4byte _0803AA0E @ case 85
	.4byte _0803AA0E @ case 86
	.4byte _0803A9F2 @ case 87
	.4byte _0803A9F6 @ case 88
	.4byte _0803A9FC @ case 89
	.4byte _0803AA00 @ case 90
	.4byte _0803AA06 @ case 91
_0803A9CC:
	bl SkulteraInit
	b _0803AA0E
_0803A9D2:
	bl SkulteraIdleInit
	b _0803AA0E
_0803A9D8:
	bl SkulteraIdle
	b _0803AA0E
_0803A9DE:
	bl SkulteraTurningAroundInit
_0803A9E2:
	bl SkulteraTurningAround
	b _0803AA0E
_0803A9E8:
	bl SkulteraChasingSamusInit
_0803A9EC:
	bl SkulteraChasingSamus
	b _0803AA0E
_0803A9F2:
	bl SpriteDyingInit
_0803A9F6:
	bl SpriteDying
	b _0803AA0E
_0803A9FC:
	bl SkulteraInit
_0803AA00:
	bl SpriteSpawningFromX
	b _0803AA0E
_0803AA06:
	bl SkulteraTurningIntoX
	bl XParasiteInit
_0803AA0E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZeelaCheckCollidingWithAir
ZeelaCheckCollidingWithAir: @ 0x0803AA14
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0803AA48 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803AA74
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803AA50
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AA4C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803AAC4
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _0803AAB8
	.align 2, 0
_0803AA48: .4byte gCurrentSprite
_0803AA4C: .4byte gPreviousCollisionCheck
_0803AA50:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AA70 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803AAC4
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803AAB8
	.align 2, 0
_0803AA70: .4byte gPreviousCollisionCheck
_0803AA74:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803AAA0
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AA9C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803AAC4
	ldrh r0, [r4, #2]
	subs r0, #4
	b _0803AAB4
	.align 2, 0
_0803AA9C: .4byte gPreviousCollisionCheck
_0803AAA0:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AACC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803AAC4
	ldrh r0, [r4, #2]
_0803AAB4:
	ldrh r1, [r4, #4]
	adds r1, #0x20
_0803AAB8:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803AAC4
	movs r6, #1
_0803AAC4:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0803AACC: .4byte gPreviousCollisionCheck

	thumb_func_start ZeelaUpdateHitbox
ZeelaUpdateHitbox: @ 0x0803AAD0
	push {lr}
	ldr r2, _0803AAFC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803AB20
	ldrh r1, [r2]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0803AB08
	ldr r0, _0803AB00 @ =0x0000FFD8
	strh r0, [r2, #0xa]
	movs r0, #0x28
	strh r0, [r2, #0xc]
	ldr r0, _0803AB04 @ =0x0000FFC0
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _0803AB42
	.align 2, 0
_0803AAFC: .4byte gCurrentSprite
_0803AB00: .4byte 0x0000FFD8
_0803AB04: .4byte 0x0000FFC0
_0803AB08:
	ldr r0, _0803AB18 @ =0x0000FFD8
	strh r0, [r2, #0xa]
	movs r0, #0x28
	strh r0, [r2, #0xc]
	ldr r0, _0803AB1C @ =0x0000FFF0
	strh r0, [r2, #0xe]
	strh r3, [r2, #0x10]
	b _0803AB44
	.align 2, 0
_0803AB18: .4byte 0x0000FFD8
_0803AB1C: .4byte 0x0000FFF0
_0803AB20:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803AB34
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x40
	b _0803AB3A
_0803AB34:
	ldr r0, _0803AB48 @ =0x0000FFC0
	strh r0, [r2, #0xa]
	movs r0, #0x10
_0803AB3A:
	strh r0, [r2, #0xc]
	ldr r0, _0803AB4C @ =0x0000FFD8
	strh r0, [r2, #0xe]
	movs r0, #0x28
_0803AB42:
	strh r0, [r2, #0x10]
_0803AB44:
	pop {r0}
	bx r0
	.align 2, 0
_0803AB48: .4byte 0x0000FFC0
_0803AB4C: .4byte 0x0000FFD8

	thumb_func_start ZeelaSetCrawlingOam
ZeelaSetCrawlingOam: @ 0x0803AB50
	push {lr}
	ldr r0, _0803AB64 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803AB6C
	ldr r0, _0803AB68 @ =0x083505DC
	b _0803AB6E
	.align 2, 0
_0803AB64: .4byte gCurrentSprite
_0803AB68: .4byte 0x083505DC
_0803AB6C:
	ldr r0, _0803AB7C @ =0x08350584
_0803AB6E:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803AB7C: .4byte 0x08350584

	thumb_func_start ZeelaSetFallingOam
ZeelaSetFallingOam: @ 0x0803AB80
	push {lr}
	ldr r0, _0803AB94 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803AB9C
	ldr r0, _0803AB98 @ =0x0835060C
	b _0803AB9E
	.align 2, 0
_0803AB94: .4byte gCurrentSprite
_0803AB98: .4byte 0x0835060C
_0803AB9C:
	ldr r0, _0803ABAC @ =0x083505B4
_0803AB9E:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803ABAC: .4byte 0x083505B4

	thumb_func_start ZeelaShootProjectiles
ZeelaShootProjectiles: @ 0x0803ABB0
	push {r4, r5, lr}
	sub sp, #0xc
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803ABDC
	ldr r0, _0803ABD8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bhi _0803ABD2
	b _0803AD6C
_0803ABD2:
	movs r0, #0
	strb r0, [r1]
	b _0803AD6C
	.align 2, 0
_0803ABD8: .4byte gCurrentSprite
_0803ABDC:
	ldr r1, _0803AC44 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803ABEA
	b _0803AD6C
_0803ABEA:
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0803AC06
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0803AC06
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803AC06
	ldr r0, _0803AC48 @ =0x000001CB
	bl CheckPlayNotAlreadyPlayingSound
_0803AC06:
	ldr r1, _0803AC44 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	adds r4, r1, #0
	cmp r0, #1
	bne _0803ACAC
	ldrb r0, [r4, #0x1c]
	cmp r0, #8
	bne _0803ACAC
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803AC64
	ldrh r1, [r4]
	movs r5, #0x40
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803AC4C
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x34
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x3c
	str r0, [sp, #4]
	str r5, [sp, #8]
	b _0803ACEE
	.align 2, 0
_0803AC44: .4byte gCurrentSprite
_0803AC48: .4byte 0x000001CB
_0803AC4C:
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x34
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x3c
	str r0, [sp, #4]
	str r5, [sp, #8]
	b _0803AD10
_0803AC64:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803AC8A
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x3c
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x34
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	b _0803AD44
_0803AC8A:
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x3c
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x34
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #0x38
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0803AD6C
_0803ACAC:
	mov ip, r4
	ldrh r0, [r4, #0x16]
	cmp r0, #2
	bne _0803AD6C
	ldrb r0, [r4, #0x1c]
	cmp r0, #8
	bne _0803AD6C
	mov r0, ip
	adds r0, #0x2d
	ldrb r5, [r0]
	cmp r5, #0
	beq _0803AD1A
	mov r0, ip
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _0803ACF8
	mov r1, ip
	ldrb r2, [r1, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x34
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x3c
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
_0803ACEE:
	movs r0, #0x38
	movs r1, #3
	bl SpriteSpawnSecondary
	b _0803AD6C
_0803ACF8:
	mov r4, ip
	ldrb r2, [r4, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x34
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x3c
	str r0, [sp, #4]
	str r1, [sp, #8]
_0803AD10:
	movs r0, #0x38
	movs r1, #2
	bl SpriteSpawnSecondary
	b _0803AD6C
_0803AD1A:
	mov r0, ip
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _0803AD4E
	mov r1, ip
	ldrb r2, [r1, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x3c
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x34
	str r0, [sp, #4]
	str r5, [sp, #8]
_0803AD44:
	movs r0, #0x38
	movs r1, #1
	bl SpriteSpawnSecondary
	b _0803AD6C
_0803AD4E:
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x3c
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x34
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x38
	movs r1, #0
	bl SpriteSpawnSecondary
_0803AD6C:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start ZeelaTurningIntoX
ZeelaTurningIntoX: @ 0x0803AD74
	push {lr}
	ldr r2, _0803AD94 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803ADA0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803AD98
	ldrh r0, [r2, #4]
	subs r0, #0x20
	strh r0, [r2, #4]
	b _0803ADB8
	.align 2, 0
_0803AD94: .4byte gCurrentSprite
_0803AD98:
	ldrh r0, [r2, #4]
	adds r0, #0x20
	strh r0, [r2, #4]
	b _0803ADB8
_0803ADA0:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803ADB2
	ldrh r0, [r2, #2]
	adds r0, #0x20
	b _0803ADB6
_0803ADB2:
	ldrh r0, [r2, #2]
	subs r0, #0x20
_0803ADB6:
	strh r0, [r2, #2]
_0803ADB8:
	pop {r0}
	bx r0

	thumb_func_start ZeelaInit
ZeelaInit: @ 0x0803ADBC
	push {r4, r5, r6, r7, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0803ADE8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803ADEC
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803ADEC
	strh r0, [r2]
	b _0803AEFC
	.align 2, 0
_0803ADE8: .4byte gCurrentSprite
_0803ADEC:
	ldr r0, _0803AE04 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	ldrb r1, [r2]
	adds r7, r0, #0
	cmp r1, #0x59
	bne _0803AE08
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	strh r0, [r7, #6]
	b _0803AEC2
	.align 2, 0
_0803AE04: .4byte gCurrentSprite
_0803AE08:
	movs r0, #2
	strb r0, [r2]
	ldrh r0, [r7, #2]
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AE2C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	movs r6, #0xf0
	adds r4, r6, #0
	ands r4, r0
	cmp r4, #0
	beq _0803AE30
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	b _0803AEC2
	.align 2, 0
_0803AE2C: .4byte gPreviousCollisionCheck
_0803AE30:
	ldrh r0, [r7, #2]
	subs r0, #0x44
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803AE5E
	adds r0, r7, #0
	adds r0, #0x2d
	strb r4, [r0]
	ldrh r0, [r7]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x40
	strh r0, [r7, #2]
	b _0803AEC2
_0803AE5E:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803AE8A
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	subs r0, #0x20
	strh r0, [r7, #4]
	b _0803AEC2
_0803AE8A:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	adds r2, r6, #0
	ands r2, r0
	cmp r2, #0
	beq _0803AEBE
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r7]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	adds r0, #0x20
	strh r0, [r7, #4]
	b _0803AEC2
_0803AEBE:
	strh r2, [r7]
	b _0803AEFC
_0803AEC2:
	adds r1, r7, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl ZeelaSetCrawlingOam
	bl ZeelaUpdateHitbox
	ldr r2, _0803AF04 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0
	strh r0, [r7, #0x14]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #8
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_0803AEFC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803AF04: .4byte sPrimarySpriteStats

	thumb_func_start ZeelaIdleInit
ZeelaIdleInit: @ 0x0803AF08
	push {lr}
	bl ZeelaSetCrawlingOam
	ldr r0, _0803AF1C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0803AF1C: .4byte gCurrentSprite

	thumb_func_start ZeelaIdle
ZeelaIdle: @ 0x0803AF20
	push {r4, r5, r6, lr}
	ldr r4, _0803AF4C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0803AF32
	b _0803B14C
_0803AF32:
	bl ZeelaShootProjectiles
	bl ZeelaCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803AF50
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _0803B14C
	.align 2, 0
_0803AF4C: .4byte gCurrentSprite
_0803AF50:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B040
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803AFBC
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803AF94
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AF90 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803AF86
	b _0803B138
_0803AF86:
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803AFE6
	.align 2, 0
_0803AF90: .4byte gPreviousCollisionCheck
_0803AF94:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803AFB8 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803AFAC
	b _0803B138
_0803AFAC:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803B024
	.align 2, 0
_0803AFB8: .4byte gPreviousCollisionCheck
_0803AFBC:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803B004
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B000 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803AFE0
	b _0803B138
_0803AFE0:
	ldrh r0, [r4, #2]
	adds r0, #0x38
	ldrh r1, [r4, #4]
_0803AFE6:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803AFF6
	b _0803B138
_0803AFF6:
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	b _0803B132
	.align 2, 0
_0803B000: .4byte gPreviousCollisionCheck
_0803B004:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B03C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803B01E
	b _0803B138
_0803B01E:
	ldrh r0, [r4, #2]
	subs r0, #0x38
	ldrh r1, [r4, #4]
_0803B024:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803B034
	b _0803B138
_0803B034:
	ldrh r0, [r4, #2]
	subs r0, #1
	strh r0, [r4, #2]
	b _0803B132
	.align 2, 0
_0803B03C: .4byte gPreviousCollisionCheck
_0803B040:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803B0C0
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803B090
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B08C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803B138
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _0803B138
	ldrh r0, [r4, #4]
	adds r0, #1
	b _0803B130
	.align 2, 0
_0803B08C: .4byte gPreviousCollisionCheck
_0803B090:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B0BC @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803B138
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	b _0803B126
	.align 2, 0
_0803B0BC: .4byte gPreviousCollisionCheck
_0803B0C0:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803B100
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B0FC @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803B138
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0803B138
	ldrh r0, [r4, #4]
	adds r0, #1
	b _0803B130
	.align 2, 0
_0803B0FC: .4byte gPreviousCollisionCheck
_0803B100:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B154 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803B138
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x38
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
_0803B126:
	ands r0, r1
	cmp r0, #0
	bne _0803B138
	ldrh r0, [r4, #4]
	subs r0, #1
_0803B130:
	strh r0, [r4, #4]
_0803B132:
	movs r0, #0
	cmp r0, #0
	beq _0803B14C
_0803B138:
	ldr r2, _0803B158 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
_0803B14C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803B154: .4byte gPreviousCollisionCheck
_0803B158: .4byte gCurrentSprite

	thumb_func_start ZeelaTurningAroundInit
ZeelaTurningAroundInit: @ 0x0803B15C
	push {lr}
	ldr r0, _0803B170 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
	bl ZeelaSetFallingOam
	pop {r0}
	bx r0
	.align 2, 0
_0803B170: .4byte gCurrentSprite

	thumb_func_start ZeelaTurningAround
ZeelaTurningAround: @ 0x0803B174
	push {lr}
	bl ZeelaCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803B18C
	ldr r0, _0803B188 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _0803B19A
	.align 2, 0
_0803B188: .4byte gCurrentSprite
_0803B18C:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803B19C
	ldr r0, _0803B1A0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
_0803B19A:
	strb r1, [r0]
_0803B19C:
	pop {r0}
	bx r0
	.align 2, 0
_0803B1A0: .4byte gCurrentSprite

	thumb_func_start ZeelaFallingInit
ZeelaFallingInit: @ 0x0803B1A4
	push {lr}
	ldr r1, _0803B1C0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bl ZeelaSetFallingOam
	pop {r0}
	bx r0
	.align 2, 0
_0803B1C0: .4byte gCurrentSprite

	thumb_func_start ZeelaFalling
ZeelaFalling: @ 0x0803B1C4
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _0803B1EC @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B1F0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803B1FC
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _0803B1FC
	.align 2, 0
_0803B1EC: .4byte gCurrentSprite
_0803B1F0:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803B204
_0803B1FC:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_0803B204:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0803B250 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B278
	ldr r4, _0803B254 @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _0803B22A
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0803B22A:
	ldrh r0, [r4]
	ldr r1, _0803B258 @ =0x0000FEFF
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strb r0, [r2]
	bl ZeelaUpdateHitbox
	cmp r5, #0
	beq _0803B264
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803B25C
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _0803B260
	.align 2, 0
_0803B250: .4byte gPreviousVerticalCollisionCheck
_0803B254: .4byte gCurrentSprite
_0803B258: .4byte 0x0000FEFF
_0803B25C:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_0803B260:
	subs r0, r0, r1
	strh r0, [r4, #4]
_0803B264:
	ldr r0, _0803B274 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
	bl ZeelaSetFallingOam
	b _0803B2BC
	.align 2, 0
_0803B274: .4byte gCurrentSprite
_0803B278:
	ldr r3, _0803B2A4 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0803B2A8 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0803B2AC @ =0x00007FFF
	cmp r1, r0
	bne _0803B2B0
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0803B2BA
	.align 2, 0
_0803B2A4: .4byte gCurrentSprite
_0803B2A8: .4byte sSpritesFallingSpeed
_0803B2AC: .4byte 0x00007FFF
_0803B2B0:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_0803B2BA:
	strh r0, [r3, #2]
_0803B2BC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZeelaProjectileInit
ZeelaProjectileInit: @ 0x0803B2C4
	push {r4, lr}
	ldr r0, _0803B328 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0803B32C @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0803B330 @ =0x0000FFF8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _0803B334 @ =0x08350634
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803B328: .4byte gCurrentSprite
_0803B32C: .4byte 0x0000FFFB
_0803B330: .4byte 0x0000FFF8
_0803B334: .4byte 0x08350634

	thumb_func_start ZeelaProjectileMoving
ZeelaProjectileMoving: @ 0x0803B338
	push {r4, r5, r6, lr}
	ldr r1, _0803B360 @ =gCurrentClipdataAffectingAction
	movs r0, #5
	strb r0, [r1]
	ldr r4, _0803B364 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803B368 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803B36C
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _0803B3FA
	.align 2, 0
_0803B360: .4byte gCurrentClipdataAffectingAction
_0803B364: .4byte gCurrentSprite
_0803B368: .4byte gPreviousCollisionCheck
_0803B36C:
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r3, _0803B390 @ =0x0834F10C
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0803B394 @ =0x00007FFF
	cmp r1, r0
	bne _0803B398
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	b _0803B39C
	.align 2, 0
_0803B390: .4byte 0x0834F10C
_0803B394: .4byte 0x00007FFF
_0803B398:
	adds r0, r2, #1
	strb r0, [r5]
_0803B39C:
	ldr r0, _0803B3B0 @ =gCurrentSprite
	ldrb r2, [r0, #0x1e]
	adds r3, r0, #0
	cmp r2, #1
	bls _0803B3D4
	cmp r2, #3
	bne _0803B3B4
	ldrh r0, [r3, #4]
	adds r0, r0, r4
	b _0803B3B8
	.align 2, 0
_0803B3B0: .4byte gCurrentSprite
_0803B3B4:
	ldrh r0, [r3, #4]
	subs r0, r0, r4
_0803B3B8:
	strh r0, [r3, #4]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803B3CC
	ldrh r0, [r3, #2]
	adds r0, #6
	strh r0, [r3, #2]
	b _0803B3FA
_0803B3CC:
	ldrh r0, [r3, #2]
	subs r0, #6
	strh r0, [r3, #2]
	b _0803B3FA
_0803B3D4:
	cmp r2, #0
	beq _0803B3DE
	ldrh r0, [r3, #2]
	subs r0, r0, r4
	b _0803B3E2
_0803B3DE:
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_0803B3E2:
	strh r0, [r3, #2]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803B3F4
	ldrh r0, [r3, #4]
	adds r0, #6
	b _0803B3F8
_0803B3F4:
	ldrh r0, [r3, #4]
	subs r0, #6
_0803B3F8:
	strh r0, [r3, #4]
_0803B3FA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start ZeelaProjectileExplodingInit
ZeelaProjectileExplodingInit: @ 0x0803B400
	push {lr}
	ldr r3, _0803B430 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x21
	movs r0, #1
	strb r0, [r1]
	ldr r1, _0803B434 @ =gFrameCounter8Bit
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0803B43C
	ldr r0, _0803B438 @ =0x0835066C
	b _0803B43E
	.align 2, 0
_0803B430: .4byte gCurrentSprite
_0803B434: .4byte gSpriteRandomNumber
_0803B438: .4byte 0x0835066C
_0803B43C:
	ldr r0, _0803B444 @ =0x08350694
_0803B43E:
	str r0, [r3, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0803B444: .4byte 0x08350694

	thumb_func_start ZeelaProjectileExploding
ZeelaProjectileExploding: @ 0x0803B448
	push {r4, lr}
	ldr r4, _0803B468 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803B460
	movs r0, #0
	strh r0, [r4]
_0803B460:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803B468: .4byte gCurrentSprite

	thumb_func_start Zeela
Zeela: @ 0x0803B46C
	push {r4, lr}
	ldr r4, _0803B498 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803B486
	movs r0, #0xe6
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803B486:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B49C
	bl SpriteUpdateFreezeTimer
	b _0803B668
	.align 2, 0
_0803B498: .4byte gCurrentSprite
_0803B49C:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803B4A8
	b _0803B668
_0803B4A8:
	lsls r0, r0, #2
	ldr r1, _0803B4B4 @ =_0803B4B8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803B4B4: .4byte _0803B4B8
_0803B4B8: @ jump table
	.4byte _0803B628 @ case 0
	.4byte _0803B62E @ case 1
	.4byte _0803B632 @ case 2
	.4byte _0803B668 @ case 3
	.4byte _0803B668 @ case 4
	.4byte _0803B668 @ case 5
	.4byte _0803B668 @ case 6
	.4byte _0803B638 @ case 7
	.4byte _0803B63C @ case 8
	.4byte _0803B668 @ case 9
	.4byte _0803B668 @ case 10
	.4byte _0803B668 @ case 11
	.4byte _0803B668 @ case 12
	.4byte _0803B668 @ case 13
	.4byte _0803B668 @ case 14
	.4byte _0803B668 @ case 15
	.4byte _0803B668 @ case 16
	.4byte _0803B668 @ case 17
	.4byte _0803B668 @ case 18
	.4byte _0803B668 @ case 19
	.4byte _0803B668 @ case 20
	.4byte _0803B642 @ case 21
	.4byte _0803B646 @ case 22
	.4byte _0803B668 @ case 23
	.4byte _0803B668 @ case 24
	.4byte _0803B668 @ case 25
	.4byte _0803B668 @ case 26
	.4byte _0803B668 @ case 27
	.4byte _0803B668 @ case 28
	.4byte _0803B668 @ case 29
	.4byte _0803B668 @ case 30
	.4byte _0803B668 @ case 31
	.4byte _0803B668 @ case 32
	.4byte _0803B668 @ case 33
	.4byte _0803B668 @ case 34
	.4byte _0803B668 @ case 35
	.4byte _0803B668 @ case 36
	.4byte _0803B668 @ case 37
	.4byte _0803B668 @ case 38
	.4byte _0803B668 @ case 39
	.4byte _0803B668 @ case 40
	.4byte _0803B668 @ case 41
	.4byte _0803B668 @ case 42
	.4byte _0803B668 @ case 43
	.4byte _0803B668 @ case 44
	.4byte _0803B668 @ case 45
	.4byte _0803B668 @ case 46
	.4byte _0803B668 @ case 47
	.4byte _0803B668 @ case 48
	.4byte _0803B668 @ case 49
	.4byte _0803B668 @ case 50
	.4byte _0803B668 @ case 51
	.4byte _0803B668 @ case 52
	.4byte _0803B668 @ case 53
	.4byte _0803B668 @ case 54
	.4byte _0803B668 @ case 55
	.4byte _0803B668 @ case 56
	.4byte _0803B668 @ case 57
	.4byte _0803B668 @ case 58
	.4byte _0803B668 @ case 59
	.4byte _0803B668 @ case 60
	.4byte _0803B668 @ case 61
	.4byte _0803B668 @ case 62
	.4byte _0803B668 @ case 63
	.4byte _0803B668 @ case 64
	.4byte _0803B668 @ case 65
	.4byte _0803B668 @ case 66
	.4byte _0803B668 @ case 67
	.4byte _0803B668 @ case 68
	.4byte _0803B668 @ case 69
	.4byte _0803B668 @ case 70
	.4byte _0803B668 @ case 71
	.4byte _0803B668 @ case 72
	.4byte _0803B668 @ case 73
	.4byte _0803B668 @ case 74
	.4byte _0803B668 @ case 75
	.4byte _0803B668 @ case 76
	.4byte _0803B668 @ case 77
	.4byte _0803B668 @ case 78
	.4byte _0803B668 @ case 79
	.4byte _0803B668 @ case 80
	.4byte _0803B668 @ case 81
	.4byte _0803B668 @ case 82
	.4byte _0803B668 @ case 83
	.4byte _0803B668 @ case 84
	.4byte _0803B668 @ case 85
	.4byte _0803B668 @ case 86
	.4byte _0803B64C @ case 87
	.4byte _0803B650 @ case 88
	.4byte _0803B656 @ case 89
	.4byte _0803B65A @ case 90
	.4byte _0803B660 @ case 91
_0803B628:
	bl ZeelaInit
	b _0803B668
_0803B62E:
	bl ZeelaIdleInit
_0803B632:
	bl ZeelaIdle
	b _0803B668
_0803B638:
	bl ZeelaTurningAroundInit
_0803B63C:
	bl ZeelaTurningAround
	b _0803B668
_0803B642:
	bl ZeelaFallingInit
_0803B646:
	bl ZeelaFalling
	b _0803B668
_0803B64C:
	bl SpriteDyingInit
_0803B650:
	bl SpriteDying
	b _0803B668
_0803B656:
	bl ZeelaInit
_0803B65A:
	bl SpriteSpawningFromX
	b _0803B668
_0803B660:
	bl ZeelaTurningIntoX
	bl XParasiteInit
_0803B668:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZeelaProjectile
ZeelaProjectile: @ 0x0803B670
	push {lr}
	ldr r0, _0803B688 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803B696
	cmp r0, #2
	bgt _0803B68C
	cmp r0, #0
	beq _0803B692
	b _0803B6A2
	.align 2, 0
_0803B688: .4byte gCurrentSprite
_0803B68C:
	cmp r0, #0x38
	beq _0803B69C
	b _0803B6A2
_0803B692:
	bl ZeelaProjectileInit
_0803B696:
	bl ZeelaProjectileMoving
	b _0803B6A6
_0803B69C:
	bl ZeelaProjectileExploding
	b _0803B6A6
_0803B6A2:
	bl ZeelaProjectileExplodingInit
_0803B6A6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SovaCheckCollidingWithAir
SovaCheckCollidingWithAir: @ 0x0803B6AC
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0803B6E0 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B70C
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803B6E8
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B6E4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803B758
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _0803B74C
	.align 2, 0
_0803B6E0: .4byte gCurrentSprite
_0803B6E4: .4byte gPreviousCollisionCheck
_0803B6E8:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B708 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803B758
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803B74C
	.align 2, 0
_0803B708: .4byte gPreviousCollisionCheck
_0803B70C:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B734
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B730 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803B758
	ldrh r0, [r4, #2]
	subs r0, #4
	b _0803B748
	.align 2, 0
_0803B730: .4byte gPreviousCollisionCheck
_0803B734:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803B760 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803B758
	ldrh r0, [r4, #2]
_0803B748:
	ldrh r1, [r4, #4]
	adds r1, #0x20
_0803B74C:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803B758
	movs r6, #1
_0803B758:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0803B760: .4byte gPreviousCollisionCheck

	thumb_func_start SovaUpdateHitbox
SovaUpdateHitbox: @ 0x0803B764
	push {lr}
	ldr r2, _0803B790 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B7B4
	ldrh r1, [r2]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0803B79C
	ldr r0, _0803B794 @ =0x0000FFE4
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _0803B798 @ =0x0000FFC0
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _0803B7D4
	.align 2, 0
_0803B790: .4byte gCurrentSprite
_0803B794: .4byte 0x0000FFE4
_0803B798: .4byte 0x0000FFC0
_0803B79C:
	ldr r0, _0803B7AC @ =0x0000FFE4
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _0803B7B0 @ =0x0000FFF0
	strh r0, [r2, #0xe]
	strh r3, [r2, #0x10]
	b _0803B7D6
	.align 2, 0
_0803B7AC: .4byte 0x0000FFE4
_0803B7B0: .4byte 0x0000FFF0
_0803B7B4:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B7C6
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x40
	b _0803B7CC
_0803B7C6:
	ldr r0, _0803B7DC @ =0x0000FFC0
	strh r0, [r2, #0xa]
	movs r0, #0x10
_0803B7CC:
	strh r0, [r2, #0xc]
	ldr r0, _0803B7E0 @ =0x0000FFE4
	strh r0, [r2, #0xe]
	movs r0, #0x1c
_0803B7D4:
	strh r0, [r2, #0x10]
_0803B7D6:
	pop {r0}
	bx r0
	.align 2, 0
_0803B7DC: .4byte 0x0000FFC0
_0803B7E0: .4byte 0x0000FFE4

	thumb_func_start SovaSetCrawlingOam
SovaSetCrawlingOam: @ 0x0803B7E4
	push {lr}
	ldr r0, _0803B7F8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803B800
	ldr r0, _0803B7FC @ =0x0835335C
	b _0803B816
	.align 2, 0
_0803B7F8: .4byte gCurrentSprite
_0803B7FC: .4byte 0x0835335C
_0803B800:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B814
	ldr r0, _0803B810 @ =0x08353384
	b _0803B816
	.align 2, 0
_0803B810: .4byte 0x08353384
_0803B814:
	ldr r0, _0803B824 @ =0x08353334
_0803B816:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803B824: .4byte 0x08353334

	thumb_func_start SovaTurningIntoX
SovaTurningIntoX: @ 0x0803B828
	push {lr}
	ldr r2, _0803B848 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B854
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803B84C
	ldrh r0, [r2, #4]
	subs r0, #0x20
	strh r0, [r2, #4]
	b _0803B86A
	.align 2, 0
_0803B848: .4byte gCurrentSprite
_0803B84C:
	ldrh r0, [r2, #4]
	adds r0, #0x20
	strh r0, [r2, #4]
	b _0803B86A
_0803B854:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B864
	ldrh r0, [r2, #2]
	adds r0, #0x20
	b _0803B868
_0803B864:
	ldrh r0, [r2, #2]
	subs r0, #0x20
_0803B868:
	strh r0, [r2, #2]
_0803B86A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SovaInit
SovaInit: @ 0x0803B870
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	bl TrySetAbsorbXFlag
	ldr r2, _0803B8A0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803B8A4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803B8A4
	strh r0, [r2]
	b _0803B9E4
	.align 2, 0
_0803B8A0: .4byte gCurrentSprite
_0803B8A4:
	ldr r1, _0803B8BC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	ldrb r0, [r2]
	adds r4, r1, #0
	cmp r0, #0x59
	bne _0803B8C0
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0803B9B4
	.align 2, 0
_0803B8BC: .4byte gCurrentSprite
_0803B8C0:
	movs r0, #0
	mov r8, r0
	movs r0, #2
	strb r0, [r2]
	movs r1, #0x2f
	adds r1, r1, r4
	mov sb, r1
	mov r0, r8
	strb r0, [r1]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803B8FC @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	movs r7, #0xf0
	adds r5, r7, #0
	ands r5, r0
	cmp r5, #0
	beq _0803B904
	adds r0, r4, #0
	adds r0, #0x2d
	mov r1, r8
	strb r1, [r0]
	ldr r0, _0803B900 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x46
	b _0803B9A2
	.align 2, 0
_0803B8FC: .4byte gPreviousCollisionCheck
_0803B900: .4byte gSpriteRandomNumber
_0803B904:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803B92C
	adds r0, r4, #0
	adds r0, #0x2d
	strb r5, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	movs r0, #1
	mov r1, sb
	strb r0, [r1]
	b _0803B99A
_0803B92C:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803B968
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	strh r0, [r4, #4]
	ldr r0, _0803B964 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x1e
	adds r1, #3
	strb r0, [r1]
	b _0803B9B4
	.align 2, 0
_0803B964: .4byte gSpriteRandomNumber
_0803B968:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	adds r2, r7, #0
	ands r2, r0
	cmp r2, #0
	beq _0803B9B0
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x20
	strh r0, [r4, #4]
_0803B99A:
	ldr r0, _0803B9AC @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x1e
_0803B9A2:
	adds r1, r4, #0
	adds r1, #0x30
	strb r0, [r1]
	b _0803B9B4
	.align 2, 0
_0803B9AC: .4byte gSpriteRandomNumber
_0803B9B0:
	strh r2, [r4]
	b _0803B9E4
_0803B9B4:
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl SovaSetCrawlingOam
	bl SovaUpdateHitbox
	ldr r2, _0803B9F0 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_0803B9E4:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B9F0: .4byte sPrimarySpriteStats

	thumb_func_start SovaIdleInit
SovaIdleInit: @ 0x0803B9F4
	push {lr}
	bl SovaSetCrawlingOam
	ldr r0, _0803BA08 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0803BA08: .4byte gCurrentSprite

	thumb_func_start SovaIdle
SovaIdle: @ 0x0803BA0C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r4, _0803BAC0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0803BA24
	b _0803BE98
_0803BA24:
	movs r0, #1
	mov r8, r0
	movs r5, #0
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r0, [r6]
	subs r1, r0, #1
	strb r1, [r6]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803BA40
	b _0803BBCC
_0803BA40:
	bl SovaCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803BA4C
	b _0803BD70
_0803BA4C:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803BB08
	ldrb r0, [r6]
	cmp r0, #0
	bne _0803BA90
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x14
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x14
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x39
	movs r1, #1
	bl SpriteSpawnSecondary
	movs r0, #0xa0
	strb r0, [r6]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BA90
	movs r0, #0xc7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803BA90:
	ldr r4, _0803BAC0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BAC8
	ldrh r0, [r4, #2]
	adds r0, #0x28
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BAC4 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803BAB6
	b _0803BC9E
_0803BAB6:
	ldrh r0, [r4, #2]
	adds r0, #0x28
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803BB70
	.align 2, 0
_0803BAC0: .4byte gCurrentSprite
_0803BAC4: .4byte gPreviousCollisionCheck
_0803BAC8:
	ldrh r0, [r4, #2]
	subs r0, #0x28
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BB04 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803BAE0
	b _0803BC9E
_0803BAE0:
	ldrh r0, [r4, #2]
	subs r0, #0x28
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803BAF8
	b _0803BC9E
_0803BAF8:
	ldrh r0, [r4, #2]
	mov r1, r8
	subs r0, r0, r1
	strh r0, [r4, #2]
	b _0803BE80
	.align 2, 0
_0803BB04: .4byte gPreviousCollisionCheck
_0803BB08:
	ldrb r0, [r6]
	cmp r0, #0
	bne _0803BB42
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x14
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x14
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x39
	movs r1, #1
	bl SpriteSpawnSecondary
	movs r0, #0xa0
	strb r0, [r6]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BB42
	movs r0, #0xc7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803BB42:
	ldr r4, _0803BB88 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BB90
	ldrh r0, [r4, #2]
	adds r0, #0x28
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BB8C @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803BB6A
	b _0803BC9E
_0803BB6A:
	ldrh r0, [r4, #2]
	adds r0, #0x28
	ldrh r1, [r4, #4]
_0803BB70:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803BB80
	b _0803BC9E
_0803BB80:
	ldrh r0, [r4, #2]
	add r0, r8
	strh r0, [r4, #2]
	b _0803BE80
	.align 2, 0
_0803BB88: .4byte gCurrentSprite
_0803BB8C: .4byte gPreviousCollisionCheck
_0803BB90:
	ldrh r0, [r4, #2]
	subs r0, #0x28
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BBC8 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803BC9E
	ldrh r0, [r4, #2]
	subs r0, #0x28
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0803BC9E
	ldrh r0, [r4, #2]
	mov r3, r8
	subs r0, r0, r3
	strh r0, [r4, #2]
	b _0803BE80
	.align 2, 0
_0803BBC8: .4byte gPreviousCollisionCheck
_0803BBCC:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803BCB6
	lsls r0, r1, #0x18
	cmp r0, #0
	bne _0803BC0E
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x14
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x39
	movs r1, #1
	bl SpriteSpawnSecondary
	movs r0, #0xa0
	strb r0, [r6]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BC0E
	movs r0, #0xc7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803BC0E:
	bl SovaCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803BC28
	ldr r0, _0803BC24 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _0803BE98
	.align 2, 0
_0803BC24: .4byte gCurrentSprite
_0803BC28:
	ldr r4, _0803BC68 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BC70
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BC6C @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r7, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803BC9E
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0803BC9E
	b _0803BD4E
	.align 2, 0
_0803BC68: .4byte gCurrentSprite
_0803BC6C: .4byte gPreviousCollisionCheck
_0803BC70:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BCA8 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r7, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803BC9E
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803BCAC
_0803BC9E:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _0803BE80
	.align 2, 0
_0803BCA8: .4byte gPreviousCollisionCheck
_0803BCAC:
	ldrh r0, [r4, #4]
	mov r1, r8
	subs r0, r0, r1
	strh r0, [r4, #4]
	b _0803BE80
_0803BCB6:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x40
	beq _0803BCC2
	cmp r0, #0x20
	bne _0803BCF0
_0803BCC2:
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x39
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BD24
	movs r0, #0xc7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0803BD24
_0803BCF0:
	cmp r0, #0
	bne _0803BD24
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x39
	movs r1, #0
	bl SpriteSpawnSecondary
	movs r0, #0xd2
	strb r0, [r6]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BD24
	movs r0, #0xc7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803BD24:
	bl unk_1129c
	ldr r6, _0803BD58 @ =gPreviousVerticalCollisionCheck
	ldrb r2, [r6]
	adds r1, r2, #0
	cmp r1, #0
	bne _0803BD84
	ldr r4, _0803BD5C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803BD60
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl CheckVerticalCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0
	beq _0803BD70
_0803BD4E:
	ldrh r0, [r4, #4]
	add r0, r8
	strh r0, [r4, #4]
	b _0803BE80
	.align 2, 0
_0803BD58: .4byte gPreviousVerticalCollisionCheck
_0803BD5C: .4byte gCurrentSprite
_0803BD60:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl CheckVerticalCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0
	bne _0803BD7A
_0803BD70:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _0803BE98
_0803BD7A:
	ldrh r0, [r4, #4]
	mov r3, r8
	subs r0, r0, r3
	strh r0, [r4, #4]
	b _0803BE80
_0803BD84:
	movs r0, #0xf0
	ands r0, r2
	cmp r0, #0
	beq _0803BE18
	ldr r2, _0803BDD4 @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _0803BDD8 @ =0x083533AC
	cmp r1, r0
	bne _0803BDAA
	ldr r0, _0803BDDC @ =0x08353334
	str r0, [r2, #0x18]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803BDAA
	ldr r0, _0803BDE0 @ =0x0000FFBF
	ands r0, r1
	strh r0, [r2]
_0803BDAA:
	ldr r4, _0803BDD4 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BDE8
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BDE4 @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	cmp r0, #0
	beq _0803BE0C
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x28
	b _0803BE02
	.align 2, 0
_0803BDD4: .4byte gCurrentSprite
_0803BDD8: .4byte 0x083533AC
_0803BDDC: .4byte 0x08353334
_0803BDE0: .4byte 0x0000FFBF
_0803BDE4: .4byte gPreviousCollisionCheck
_0803BDE8:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803BE14 @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	cmp r0, #0
	beq _0803BE0C
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x28
_0803BE02:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _0803BE50
_0803BE0C:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _0803BE50
	.align 2, 0
_0803BE14: .4byte gPreviousCollisionCheck
_0803BE18:
	cmp r1, #2
	beq _0803BE20
	cmp r1, #4
	bne _0803BE2E
_0803BE20:
	ldr r2, _0803BE68 @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _0803BE6C @ =0x08353334
	cmp r1, r0
	bne _0803BE2E
	ldr r0, _0803BE70 @ =0x083533AC
	str r0, [r2, #0x18]
_0803BE2E:
	ldr r0, _0803BE74 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #3
	beq _0803BE3A
	cmp r0, #5
	bne _0803BE50
_0803BE3A:
	ldr r2, _0803BE68 @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _0803BE6C @ =0x08353334
	cmp r1, r0
	bne _0803BE50
	ldr r0, _0803BE70 @ =0x083533AC
	str r0, [r2, #0x18]
	ldrh r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r2]
_0803BE50:
	cmp r5, #0
	bne _0803BE84
	ldr r2, _0803BE68 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803BE78
	ldrh r0, [r2, #4]
	add r0, r8
	b _0803BE7E
	.align 2, 0
_0803BE68: .4byte gCurrentSprite
_0803BE6C: .4byte 0x08353334
_0803BE70: .4byte 0x083533AC
_0803BE74: .4byte gPreviousVerticalCollisionCheck
_0803BE78:
	ldrh r0, [r2, #4]
	mov r1, r8
	subs r0, r0, r1
_0803BE7E:
	strh r0, [r2, #4]
_0803BE80:
	cmp r5, #0
	beq _0803BE98
_0803BE84:
	ldr r2, _0803BEA4 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
_0803BE98:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803BEA4: .4byte gCurrentSprite

	thumb_func_start SovaTurningAroundInit
SovaTurningAroundInit: @ 0x0803BEA8
	ldr r1, _0803BEBC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #8
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803BEBC: .4byte gCurrentSprite

	thumb_func_start SovaTurningAround
SovaTurningAround: @ 0x0803BEC0
	push {lr}
	bl SovaCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803BEDC
	ldr r0, _0803BED8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _0803BEF4
	.align 2, 0
_0803BED8: .4byte gCurrentSprite
_0803BEDC:
	ldr r1, _0803BEF8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803BEF4
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_0803BEF4:
	pop {r0}
	bx r0
	.align 2, 0
_0803BEF8: .4byte gCurrentSprite

	thumb_func_start SovaFallingInit
SovaFallingInit: @ 0x0803BEFC
	ldr r1, _0803BF10 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bx lr
	.align 2, 0
_0803BF10: .4byte gCurrentSprite

	thumb_func_start SovaFalling
SovaFalling: @ 0x0803BF14
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _0803BF3C @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803BF40
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803BF4C
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _0803BF4C
	.align 2, 0
_0803BF3C: .4byte gCurrentSprite
_0803BF40:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803BF54
_0803BF4C:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_0803BF54:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0803BFB0 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803BFC6
	ldr r4, _0803BFB4 @ =gCurrentSprite
	movs r3, #0
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _0803BF7C
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0803BF7C:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	strb r3, [r2]
	ldrh r1, [r4]
	ldr r0, _0803BFB8 @ =0x0000FEFF
	ands r0, r1
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x2f
	strb r3, [r0]
	bl SovaSetCrawlingOam
	bl SovaUpdateHitbox
	cmp r5, #0
	beq _0803C008
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803BFBC
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _0803BFC0
	.align 2, 0
_0803BFB0: .4byte gPreviousVerticalCollisionCheck
_0803BFB4: .4byte gCurrentSprite
_0803BFB8: .4byte 0x0000FEFF
_0803BFBC:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_0803BFC0:
	subs r0, r0, r1
	strh r0, [r4, #4]
	b _0803C008
_0803BFC6:
	ldr r3, _0803BFF0 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0803BFF4 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0803BFF8 @ =0x00007FFF
	cmp r1, r0
	bne _0803BFFC
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0803C006
	.align 2, 0
_0803BFF0: .4byte gCurrentSprite
_0803BFF4: .4byte sSpritesFallingSpeed
_0803BFF8: .4byte 0x00007FFF
_0803BFFC:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_0803C006:
	strh r0, [r3, #2]
_0803C008:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SovaFireInit
SovaFireInit: @ 0x0803C010
	push {r4, lr}
	ldr r0, _0803C084 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0803C088 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	movs r1, #8
	strb r1, [r0]
	subs r2, #0xb
	movs r0, #0x10
	strb r0, [r2]
	ldr r0, _0803C08C @ =0x0000FFD8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r3, [r2, #0xc]
	adds r0, #0x20
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	strb r4, [r2, #0x1c]
	strh r3, [r2, #0x16]
	mov r0, ip
	adds r0, #0x25
	movs r2, #2
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	mov r1, ip
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	beq _0803C094
	ldr r0, _0803C090 @ =0x0835346C
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x16
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x31
	strb r4, [r0]
	b _0803C0A6
	.align 2, 0
_0803C084: .4byte gCurrentSprite
_0803C088: .4byte 0x0000FFFB
_0803C08C: .4byte 0x0000FFD8
_0803C090: .4byte 0x0835346C
_0803C094:
	ldr r0, _0803C0AC @ =0x083533D4
	mov r1, ip
	str r0, [r1, #0x18]
	mov r0, ip
	adds r0, #0x24
	strb r2, [r0]
	adds r1, #0x2e
	movs r0, #0x32
	strb r0, [r1]
_0803C0A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803C0AC: .4byte 0x083533D4

	thumb_func_start SovaFireBig
SovaFireBig: @ 0x0803C0B0
	push {lr}
	ldr r2, _0803C0EC @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0803C0E6
	movs r1, #0
	ldr r0, _0803C0F0 @ =0x0000FFE4
	strh r0, [r2, #0xa]
	ldr r0, _0803C0F4 @ =0x083533FC
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r3, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #0x32
	mov r1, ip
	strb r0, [r1]
_0803C0E6:
	pop {r0}
	bx r0
	.align 2, 0
_0803C0EC: .4byte gCurrentSprite
_0803C0F0: .4byte 0x0000FFE4
_0803C0F4: .4byte 0x083533FC

	thumb_func_start SovaFireSmall
SovaFireSmall: @ 0x0803C0F8
	push {lr}
	ldr r2, _0803C134 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0803C12E
	movs r1, #0
	ldr r0, _0803C138 @ =0x0000FFF0
	strh r0, [r2, #0xa]
	ldr r0, _0803C13C @ =0x08353424
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r3, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	movs r0, #0x1e
	mov r1, ip
	strb r0, [r1]
_0803C12E:
	pop {r0}
	bx r0
	.align 2, 0
_0803C134: .4byte gCurrentSprite
_0803C138: .4byte 0x0000FFF0
_0803C13C: .4byte 0x08353424

	thumb_func_start SovaFireDisappearing
SovaFireDisappearing: @ 0x0803C140
	push {lr}
	ldr r2, _0803C174 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r1, [r3]
	ands r0, r1
	cmp r0, #0
	bne _0803C160
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_0803C160:
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0803C170
	strh r0, [r2]
_0803C170:
	pop {r0}
	bx r0
	.align 2, 0
_0803C174: .4byte gCurrentSprite

	thumb_func_start SovaFireExplodingInit
SovaFireExplodingInit: @ 0x0803C178
	push {lr}
	ldr r1, _0803C1A4 @ =gCurrentSprite
	ldr r0, _0803C1A8 @ =0x08353494
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #8
	strb r0, [r2]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803C19E
	ldr r0, _0803C1AC @ =0x0000018F
	bl CheckPlayNotAlreadyPlayingSound
_0803C19E:
	pop {r0}
	bx r0
	.align 2, 0
_0803C1A4: .4byte gCurrentSprite
_0803C1A8: .4byte 0x08353494
_0803C1AC: .4byte 0x0000018F

	thumb_func_start SovaFireExploding
SovaFireExploding: @ 0x0803C1B0
	push {r4, lr}
	ldr r4, _0803C1D0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803C1C8
	movs r0, #0
	strh r0, [r4]
_0803C1C8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803C1D0: .4byte gCurrentSprite

	thumb_func_start Sova
Sova: @ 0x0803C1D4
	push {r4, lr}
	ldr r4, _0803C200 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803C1EE
	movs r0, #0xc8
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803C1EE:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C204
	bl SpriteUpdateFreezeTimer
	b _0803C3D0
	.align 2, 0
_0803C200: .4byte gCurrentSprite
_0803C204:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803C210
	b _0803C3D0
_0803C210:
	lsls r0, r0, #2
	ldr r1, _0803C21C @ =_0803C220
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803C21C: .4byte _0803C220
_0803C220: @ jump table
	.4byte _0803C390 @ case 0
	.4byte _0803C396 @ case 1
	.4byte _0803C39A @ case 2
	.4byte _0803C3D0 @ case 3
	.4byte _0803C3D0 @ case 4
	.4byte _0803C3D0 @ case 5
	.4byte _0803C3D0 @ case 6
	.4byte _0803C3A0 @ case 7
	.4byte _0803C3A4 @ case 8
	.4byte _0803C3D0 @ case 9
	.4byte _0803C3D0 @ case 10
	.4byte _0803C3D0 @ case 11
	.4byte _0803C3D0 @ case 12
	.4byte _0803C3D0 @ case 13
	.4byte _0803C3D0 @ case 14
	.4byte _0803C3D0 @ case 15
	.4byte _0803C3D0 @ case 16
	.4byte _0803C3D0 @ case 17
	.4byte _0803C3D0 @ case 18
	.4byte _0803C3D0 @ case 19
	.4byte _0803C3D0 @ case 20
	.4byte _0803C3AA @ case 21
	.4byte _0803C3AE @ case 22
	.4byte _0803C3D0 @ case 23
	.4byte _0803C3D0 @ case 24
	.4byte _0803C3D0 @ case 25
	.4byte _0803C3D0 @ case 26
	.4byte _0803C3D0 @ case 27
	.4byte _0803C3D0 @ case 28
	.4byte _0803C3D0 @ case 29
	.4byte _0803C3D0 @ case 30
	.4byte _0803C3D0 @ case 31
	.4byte _0803C3D0 @ case 32
	.4byte _0803C3D0 @ case 33
	.4byte _0803C3D0 @ case 34
	.4byte _0803C3D0 @ case 35
	.4byte _0803C3D0 @ case 36
	.4byte _0803C3D0 @ case 37
	.4byte _0803C3D0 @ case 38
	.4byte _0803C3D0 @ case 39
	.4byte _0803C3D0 @ case 40
	.4byte _0803C3D0 @ case 41
	.4byte _0803C3D0 @ case 42
	.4byte _0803C3D0 @ case 43
	.4byte _0803C3D0 @ case 44
	.4byte _0803C3D0 @ case 45
	.4byte _0803C3D0 @ case 46
	.4byte _0803C3D0 @ case 47
	.4byte _0803C3D0 @ case 48
	.4byte _0803C3D0 @ case 49
	.4byte _0803C3D0 @ case 50
	.4byte _0803C3D0 @ case 51
	.4byte _0803C3D0 @ case 52
	.4byte _0803C3D0 @ case 53
	.4byte _0803C3D0 @ case 54
	.4byte _0803C3D0 @ case 55
	.4byte _0803C3D0 @ case 56
	.4byte _0803C3D0 @ case 57
	.4byte _0803C3D0 @ case 58
	.4byte _0803C3D0 @ case 59
	.4byte _0803C3D0 @ case 60
	.4byte _0803C3D0 @ case 61
	.4byte _0803C3D0 @ case 62
	.4byte _0803C3D0 @ case 63
	.4byte _0803C3D0 @ case 64
	.4byte _0803C3D0 @ case 65
	.4byte _0803C3D0 @ case 66
	.4byte _0803C3D0 @ case 67
	.4byte _0803C3D0 @ case 68
	.4byte _0803C3D0 @ case 69
	.4byte _0803C3D0 @ case 70
	.4byte _0803C3D0 @ case 71
	.4byte _0803C3D0 @ case 72
	.4byte _0803C3D0 @ case 73
	.4byte _0803C3D0 @ case 74
	.4byte _0803C3D0 @ case 75
	.4byte _0803C3D0 @ case 76
	.4byte _0803C3D0 @ case 77
	.4byte _0803C3D0 @ case 78
	.4byte _0803C3D0 @ case 79
	.4byte _0803C3D0 @ case 80
	.4byte _0803C3D0 @ case 81
	.4byte _0803C3D0 @ case 82
	.4byte _0803C3D0 @ case 83
	.4byte _0803C3D0 @ case 84
	.4byte _0803C3D0 @ case 85
	.4byte _0803C3D0 @ case 86
	.4byte _0803C3B4 @ case 87
	.4byte _0803C3B8 @ case 88
	.4byte _0803C3BE @ case 89
	.4byte _0803C3C2 @ case 90
	.4byte _0803C3C8 @ case 91
_0803C390:
	bl SovaInit
	b _0803C3D0
_0803C396:
	bl SovaIdleInit
_0803C39A:
	bl SovaIdle
	b _0803C3D0
_0803C3A0:
	bl SovaTurningAroundInit
_0803C3A4:
	bl SovaTurningAround
	b _0803C3D0
_0803C3AA:
	bl SovaFallingInit
_0803C3AE:
	bl SovaFalling
	b _0803C3D0
_0803C3B4:
	bl SpriteDyingInit
_0803C3B8:
	bl SpriteDying
	b _0803C3D0
_0803C3BE:
	bl SovaInit
_0803C3C2:
	bl SpriteSpawningFromX
	b _0803C3D0
_0803C3C8:
	bl SovaTurningIntoX
	bl XParasiteInit
_0803C3D0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SovaFire
SovaFire: @ 0x0803C3D8
	push {lr}
	ldr r0, _0803C3F0 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1a
	bhi _0803C48A
	lsls r0, r0, #2
	ldr r1, _0803C3F4 @ =_0803C3F8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803C3F0: .4byte gCurrentSprite
_0803C3F4: .4byte _0803C3F8
_0803C3F8: @ jump table
	.4byte _0803C464 @ case 0
	.4byte _0803C48A @ case 1
	.4byte _0803C46A @ case 2
	.4byte _0803C48A @ case 3
	.4byte _0803C48A @ case 4
	.4byte _0803C48A @ case 5
	.4byte _0803C48A @ case 6
	.4byte _0803C482 @ case 7
	.4byte _0803C486 @ case 8
	.4byte _0803C48A @ case 9
	.4byte _0803C48A @ case 10
	.4byte _0803C48A @ case 11
	.4byte _0803C48A @ case 12
	.4byte _0803C48A @ case 13
	.4byte _0803C48A @ case 14
	.4byte _0803C48A @ case 15
	.4byte _0803C48A @ case 16
	.4byte _0803C48A @ case 17
	.4byte _0803C48A @ case 18
	.4byte _0803C48A @ case 19
	.4byte _0803C48A @ case 20
	.4byte _0803C48A @ case 21
	.4byte _0803C47C @ case 22
	.4byte _0803C48A @ case 23
	.4byte _0803C470 @ case 24
	.4byte _0803C48A @ case 25
	.4byte _0803C476 @ case 26
_0803C464:
	bl SovaFireInit
	b _0803C48A
_0803C46A:
	bl SovaFireBig
	b _0803C48A
_0803C470:
	bl SovaFireSmall
	b _0803C48A
_0803C476:
	bl SovaFireDisappearing
	b _0803C48A
_0803C47C:
	bl CurrentSpriteFalling
	b _0803C48A
_0803C482:
	bl SovaFireExplodingInit
_0803C486:
	bl SovaFireExploding
_0803C48A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YardCheckShouldStartle
YardCheckShouldStartle: @ 0x0803C490
	push {lr}
	ldr r0, _0803C4B4 @ =gCurrentPowerBomb
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C4D8
	ldr r1, _0803C4B8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x18
	strb r0, [r2]
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C4C0
	ldr r0, _0803C4BC @ =0x08355490
	b _0803C4C2
	.align 2, 0
_0803C4B4: .4byte gCurrentPowerBomb
_0803C4B8: .4byte gCurrentSprite
_0803C4BC: .4byte 0x08355490
_0803C4C0:
	ldr r0, _0803C4D4 @ =0x08355370
_0803C4C2:
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x30
	movs r0, #0xb4
	strb r0, [r1]
	movs r0, #1
	b _0803C4DA
	.align 2, 0
_0803C4D4: .4byte 0x08355370
_0803C4D8:
	movs r0, #0
_0803C4DA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start YardCheckCollidingWithAir
YardCheckCollidingWithAir: @ 0x0803C4E0
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0803C514 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C540
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803C51C
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803C518 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803C590
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _0803C584
	.align 2, 0
_0803C514: .4byte gCurrentSprite
_0803C518: .4byte gPreviousCollisionCheck
_0803C51C:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803C53C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803C590
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803C584
	.align 2, 0
_0803C53C: .4byte gPreviousCollisionCheck
_0803C540:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803C56C
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803C568 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803C590
	ldrh r0, [r4, #2]
	subs r0, #4
	b _0803C580
	.align 2, 0
_0803C568: .4byte gPreviousCollisionCheck
_0803C56C:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803C598 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803C590
	ldrh r0, [r4, #2]
_0803C580:
	ldrh r1, [r4, #4]
	adds r1, #0x20
_0803C584:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803C590
	movs r6, #1
_0803C590:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0803C598: .4byte gPreviousCollisionCheck

	thumb_func_start YardUpdateHitbox
YardUpdateHitbox: @ 0x0803C59C
	push {lr}
	ldr r2, _0803C5D4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803C630
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C5F8
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803C5E0
	ldr r0, _0803C5D8 @ =0x0000FFE4
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _0803C5DC @ =0x0000FFC8
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _0803C69A
	.align 2, 0
_0803C5D4: .4byte gCurrentSprite
_0803C5D8: .4byte 0x0000FFE4
_0803C5DC: .4byte 0x0000FFC8
_0803C5E0:
	ldr r0, _0803C5F0 @ =0x0000FFE4
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _0803C5F4 @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x38
	b _0803C69A
	.align 2, 0
_0803C5F0: .4byte 0x0000FFE4
_0803C5F4: .4byte 0x0000FFF0
_0803C5F8:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803C618
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x38
	strh r0, [r2, #0xc]
	ldr r0, _0803C614 @ =0x0000FFE4
	strh r0, [r2, #0xe]
	movs r0, #0x1c
	b _0803C69A
	.align 2, 0
_0803C614: .4byte 0x0000FFE4
_0803C618:
	ldr r0, _0803C628 @ =0x0000FFC8
	strh r0, [r2, #0xa]
	movs r0, #0x10
	strh r0, [r2, #0xc]
	ldr r0, _0803C62C @ =0x0000FFE4
	strh r0, [r2, #0xe]
	movs r0, #0x1c
	b _0803C69A
	.align 2, 0
_0803C628: .4byte 0x0000FFC8
_0803C62C: .4byte 0x0000FFE4
_0803C630:
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C678
	ldrh r1, [r2]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0803C660
	ldr r0, _0803C658 @ =0x0000FFE0
	strh r0, [r2, #0xa]
	movs r0, #0x20
	strh r0, [r2, #0xc]
	ldr r0, _0803C65C @ =0x0000FFC0
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _0803C69A
	.align 2, 0
_0803C658: .4byte 0x0000FFE0
_0803C65C: .4byte 0x0000FFC0
_0803C660:
	ldr r0, _0803C670 @ =0x0000FFE0
	strh r0, [r2, #0xa]
	movs r0, #0x20
	strh r0, [r2, #0xc]
	ldr r0, _0803C674 @ =0x0000FFF0
	strh r0, [r2, #0xe]
	strh r3, [r2, #0x10]
	b _0803C69C
	.align 2, 0
_0803C670: .4byte 0x0000FFE0
_0803C674: .4byte 0x0000FFF0
_0803C678:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803C68C
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x40
	b _0803C692
_0803C68C:
	ldr r0, _0803C6A0 @ =0x0000FFC0
	strh r0, [r2, #0xa]
	movs r0, #0x10
_0803C692:
	strh r0, [r2, #0xc]
	ldr r0, _0803C6A4 @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x20
_0803C69A:
	strh r0, [r2, #0x10]
_0803C69C:
	pop {r0}
	bx r0
	.align 2, 0
_0803C6A0: .4byte 0x0000FFC0
_0803C6A4: .4byte 0x0000FFE0

	thumb_func_start YardSetCrawlingOam
YardSetCrawlingOam: @ 0x0803C6A8
	push {lr}
	ldr r2, _0803C6CC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	adds r1, r2, #0
	cmp r0, #0
	beq _0803C6DC
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C6D4
	ldr r0, _0803C6D0 @ =0x08355540
	b _0803C6F2
	.align 2, 0
_0803C6CC: .4byte gCurrentSprite
_0803C6D0: .4byte 0x08355540
_0803C6D4:
	ldr r0, _0803C6D8 @ =0x08355530
	b _0803C6F2
	.align 2, 0
_0803C6D8: .4byte 0x08355530
_0803C6DC:
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C6F0
	ldr r0, _0803C6EC @ =0x083553E8
	b _0803C6F2
	.align 2, 0
_0803C6EC: .4byte 0x083553E8
_0803C6F0:
	ldr r0, _0803C700 @ =0x083552C8
_0803C6F2:
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803C700: .4byte 0x083552C8

	thumb_func_start YardSetTurningAroundOam
YardSetTurningAroundOam: @ 0x0803C704
	push {lr}
	ldr r0, _0803C718 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803C720
	ldr r0, _0803C71C @ =0x083554C8
	b _0803C722
	.align 2, 0
_0803C718: .4byte gCurrentSprite
_0803C71C: .4byte 0x083554C8
_0803C720:
	ldr r0, _0803C730 @ =0x083553A8
_0803C722:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803C730: .4byte 0x083553A8

	thumb_func_start YardSetTurningAroundSecondPartOam
YardSetTurningAroundSecondPartOam: @ 0x0803C734
	push {lr}
	ldr r0, _0803C748 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803C750
	ldr r0, _0803C74C @ =0x083554E8
	b _0803C752
	.align 2, 0
_0803C748: .4byte gCurrentSprite
_0803C74C: .4byte 0x083554E8
_0803C750:
	ldr r0, _0803C760 @ =0x083553C8
_0803C752:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803C760: .4byte 0x083553C8

	thumb_func_start YardSetChargingOam
YardSetChargingOam: @ 0x0803C764
	push {lr}
	ldr r0, _0803C778 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803C780
	ldr r0, _0803C77C @ =0x08355408
	b _0803C782
	.align 2, 0
_0803C778: .4byte gCurrentSprite
_0803C77C: .4byte 0x08355408
_0803C780:
	ldr r0, _0803C790 @ =0x083552E8
_0803C782:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803C790: .4byte 0x083552E8

	thumb_func_start YardSetShootingOam
YardSetShootingOam: @ 0x0803C794
	push {lr}
	ldr r0, _0803C7A8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803C7B0
	ldr r0, _0803C7AC @ =0x08355438
	b _0803C7B2
	.align 2, 0
_0803C7A8: .4byte gCurrentSprite
_0803C7AC: .4byte 0x08355438
_0803C7B0:
	ldr r0, _0803C7C0 @ =0x08355318
_0803C7B2:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803C7C0: .4byte 0x08355318

	thumb_func_start YardSetRecoilOam
YardSetRecoilOam: @ 0x0803C7C4
	push {lr}
	ldr r0, _0803C7D8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803C7E0
	ldr r0, _0803C7DC @ =0x08355470
	b _0803C7E2
	.align 2, 0
_0803C7D8: .4byte gCurrentSprite
_0803C7DC: .4byte 0x08355470
_0803C7E0:
	ldr r0, _0803C7F0 @ =0x08355350
_0803C7E2:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0803C7F0: .4byte 0x08355350

	thumb_func_start YardCheckShoot
YardCheckShoot: @ 0x0803C7F4
	push {r4, lr}
	ldr r1, _0803C808 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	cmp r0, #0
	beq _0803C80C
	subs r0, #1
	strb r0, [r2]
	b _0803C866
	.align 2, 0
_0803C808: .4byte gCurrentSprite
_0803C80C:
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803C824
	movs r2, #0xa0
	lsls r2, r2, #2
	adds r0, r2, #0
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindY
	b _0803C830
_0803C824:
	movs r2, #0xa0
	lsls r2, r2, #2
	adds r0, r2, #0
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindX
_0803C830:
	adds r1, r0, #0
	cmp r1, #3
	bne _0803C844
	ldr r0, _0803C840 @ =gCurrentSprite
	adds r0, #0x24
	strb r1, [r0]
	b _0803C866
	.align 2, 0
_0803C840: .4byte gCurrentSprite
_0803C844:
	cmp r1, #0xc
	bne _0803C866
	ldr r4, _0803C86C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bl YardSetChargingOam
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803C866
	ldr r0, _0803C870 @ =0x00000195
	bl CheckPlayNotAlreadyPlayingSound
_0803C866:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803C86C: .4byte gCurrentSprite
_0803C870: .4byte 0x00000195

	thumb_func_start YardCharging
YardCharging: @ 0x0803C874
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803C892
	ldr r0, _0803C898 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x2e
	movs r1, #0x1e
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #0x2c
	strb r1, [r0]
	bl YardSetShootingOam
_0803C892:
	pop {r0}
	bx r0
	.align 2, 0
_0803C898: .4byte gCurrentSprite

	thumb_func_start YardShooting
YardShooting: @ 0x0803C89C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	bl YardCheckShouldStartle
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _0803C8AE
	b _0803CA2C
_0803C8AE:
	ldr r1, _0803C8CC @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r2, r0, #1
	strb r2, [r3]
	lsls r0, r2, #0x18
	cmp r0, #0
	bne _0803C8D0
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
	bl YardSetRecoilOam
	b _0803CA2C
	.align 2, 0
_0803C8CC: .4byte gCurrentSprite
_0803C8D0:
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xf
	beq _0803C8DA
	b _0803CA2C
_0803C8DA:
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r6, [r0]
	cmp r6, #0
	beq _0803C972
	ldrh r2, [r1]
	movs r0, #0x40
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0803C930
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _0803C918
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x40
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x54
	str r0, [sp, #4]
	str r7, [sp, #8]
	b _0803C9F0
_0803C918:
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x40
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x54
	str r0, [sp, #4]
	str r4, [sp, #8]
	b _0803C9A4
_0803C930:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _0803C95E
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x40
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x54
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x3a
	movs r1, #3
	bl SpriteSpawnSecondary
	b _0803CA18
_0803C95E:
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x40
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x54
	b _0803C9C0
_0803C972:
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0803C9CE
	movs r0, #0x40
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _0803C9AE
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x54
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	str r6, [sp, #8]
_0803C9A4:
	movs r0, #0x3a
	movs r1, #1
	bl SpriteSpawnSecondary
	b _0803CA18
_0803C9AE:
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x54
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x40
_0803C9C0:
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x3a
	movs r1, #2
	bl SpriteSpawnSecondary
	b _0803CA18
_0803C9CE:
	movs r0, #0x40
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _0803C9FA
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x54
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x40
	str r0, [sp, #4]
	str r5, [sp, #8]
_0803C9F0:
	movs r0, #0x3a
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0803CA18
_0803C9FA:
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x54
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x40
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x3a
	movs r1, #3
	bl SpriteSpawnSecondary
_0803CA18:
	ldr r0, _0803CA34 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CA2C
	movs r0, #0xcb
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803CA2C:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803CA34: .4byte gCurrentSprite

	thumb_func_start YardRecoil
YardRecoil: @ 0x0803CA38
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803CA52
	ldr r1, _0803CA58 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #3
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
_0803CA52:
	pop {r0}
	bx r0
	.align 2, 0
_0803CA58: .4byte gCurrentSprite

	thumb_func_start YardTurningIntoX
YardTurningIntoX: @ 0x0803CA5C
	push {lr}
	ldr r2, _0803CA7C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803CA88
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803CA80
	ldrh r0, [r2, #4]
	subs r0, #0x20
	strh r0, [r2, #4]
	b _0803CAA0
	.align 2, 0
_0803CA7C: .4byte gCurrentSprite
_0803CA80:
	ldrh r0, [r2, #4]
	adds r0, #0x20
	strh r0, [r2, #4]
	b _0803CAA0
_0803CA88:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803CA9A
	ldrh r0, [r2, #2]
	adds r0, #0x20
	b _0803CA9E
_0803CA9A:
	ldrh r0, [r2, #2]
	subs r0, #0x20
_0803CA9E:
	strh r0, [r2, #2]
_0803CAA0:
	pop {r0}
	bx r0

	thumb_func_start YardInit
YardInit: @ 0x0803CAA4
	push {r4, r5, r6, r7, lr}
	bl TrySetAbsorbXFlag
	ldr r4, _0803CAF0 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #0x59
	bne _0803CB04
	ldrh r0, [r4]
	ldr r2, _0803CAF4 @ =0x0000FF7F
	ands r2, r0
	strh r2, [r4]
	movs r0, #0x5a
	strb r0, [r5]
	movs r0, #0x2c
	strh r0, [r4, #6]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803CAD2
	b _0803CC0A
_0803CAD2:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0803CADE
	b _0803CC0A
_0803CADE:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0803CAF8
	movs r1, #0x40
	adds r0, r2, #0
	b _0803CBB8
	.align 2, 0
_0803CAF0: .4byte gCurrentSprite
_0803CAF4: .4byte 0x0000FF7F
_0803CAF8:
	ldr r0, _0803CB00 @ =0x0000FFBF
	ands r0, r2
	strh r0, [r4]
	b _0803CC0A
	.align 2, 0
_0803CB00: .4byte 0x0000FFBF
_0803CB04:
	bl SpriteUtilChooseRandomXDirection
	movs r0, #2
	strb r0, [r5]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803CB3C @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	movs r7, #0xf0
	adds r5, r7, #0
	ands r5, r0
	cmp r5, #0
	beq _0803CB40
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CC0A
	movs r0, #0x40
	b _0803CBB8
	.align 2, 0
_0803CB3C: .4byte gPreviousCollisionCheck
_0803CB40:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803CB7C
	adds r0, r4, #0
	adds r0, #0x2d
	strb r5, [r0]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r2, #0
	orrs r1, r0
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CC0A
	movs r0, #0x40
	b _0803CC06
_0803CB7C:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803CBBE
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	strh r0, [r4, #4]
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CC0A
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_0803CBB8:
	orrs r0, r1
	strh r0, [r4]
	b _0803CC0A
_0803CBBE:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	adds r2, r7, #0
	ands r2, r0
	cmp r2, #0
	bne _0803CBD8
	strh r2, [r4]
	b _0803CC74
_0803CBD8:
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r0, #0x40
	movs r2, #0
	orrs r1, r0
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x20
	strh r0, [r4, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CC0A
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_0803CC06:
	orrs r1, r0
	strh r1, [r4]
_0803CC0A:
	ldr r1, _0803CC28 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x34
	ldrb r2, [r3]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0803CC2C
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	movs r0, #8
	orrs r0, r2
	b _0803CC36
	.align 2, 0
_0803CC28: .4byte gCurrentSprite
_0803CC2C:
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	movs r0, #0xf7
	ands r0, r2
_0803CC36:
	strb r0, [r3]
	bl YardSetCrawlingOam
	bl YardUpdateHitbox
	ldr r3, _0803CC7C @ =gCurrentSprite
	ldr r2, _0803CC80 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0
	strh r0, [r3, #0x14]
	adds r2, r3, #0
	adds r2, #0x25
	movs r0, #2
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #8
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_0803CC74:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803CC7C: .4byte gCurrentSprite
_0803CC80: .4byte sPrimarySpriteStats

	thumb_func_start YardCheckRoll
YardCheckRoll: @ 0x0803CC84
	push {r4, r5, lr}
	ldr r4, _0803CCC0 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #1
	bne _0803CCF0
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CCF0
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803CCB6
	movs r5, #0x80
	lsls r5, r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803CCC4
_0803CCB6:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _0803CCF0
	.align 2, 0
_0803CCC0: .4byte gCurrentSprite
_0803CCC4:
	bl MakeSpriteFaceAwayFromSamusDirection
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	ldrh r2, [r4]
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne _0803CCF0
	movs r1, #0
	movs r0, #0x80
	orrs r0, r2
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x2b
	strb r1, [r0]
	strh r5, [r4, #0x12]
_0803CCF0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YardRolling
YardRolling: @ 0x0803CCF8
	push {r4, r5, r6, r7, lr}
	bl YardCheckRoll
	movs r7, #0
	bl unk_1129c
	ldr r5, _0803CD38 @ =gPreviousVerticalCollisionCheck
	ldrb r2, [r5]
	adds r1, r2, #0
	cmp r1, #0
	bne _0803CD72
	ldr r4, _0803CD3C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CD40
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl CheckVerticalCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	beq _0803CD50
	cmp r0, #4
	beq _0803CD64
	cmp r0, #2
	beq _0803CD36
	b _0803CE5E
_0803CD36:
	b _0803CD64
	.align 2, 0
_0803CD38: .4byte gPreviousVerticalCollisionCheck
_0803CD3C: .4byte gCurrentSprite
_0803CD40:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl CheckVerticalCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803CD5A
_0803CD50:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	strb r0, [r1]
	b _0803CED0
_0803CD5A:
	cmp r0, #5
	beq _0803CD64
	cmp r0, #3
	beq _0803CD64
	b _0803CE5E
_0803CD64:
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	bl CheckVerticalCollisionAtPosition
	strh r0, [r4, #2]
	b _0803CE5E
_0803CD72:
	movs r0, #0xf0
	ands r0, r2
	cmp r0, #0
	beq _0803CDF8
	ldr r4, _0803CDB8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803CDC4
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803CDBC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0803CDAE
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803CE5E
_0803CDAE:
	ldrh r1, [r4]
	ldr r0, _0803CDC0 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r4]
	b _0803CED0
	.align 2, 0
_0803CDB8: .4byte gCurrentSprite
_0803CDBC: .4byte gPreviousCollisionCheck
_0803CDC0: .4byte 0x0000FDFF
_0803CDC4:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _0803CDF4 @ =gPreviousCollisionCheck
	ldrb r0, [r6]
	cmp r0, #0
	beq _0803CDE8
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _0803CE5E
_0803CDE8:
	ldrh r1, [r4]
	adds r0, r5, #0
	orrs r0, r1
	strh r0, [r4]
	b _0803CED0
	.align 2, 0
_0803CDF4: .4byte gPreviousCollisionCheck
_0803CDF8:
	cmp r1, #4
	beq _0803CE00
	cmp r1, #2
	bne _0803CE28
_0803CE00:
	ldr r1, _0803CE24 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	bne _0803CE80
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #1
	bne _0803CE5E
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r5]
	b _0803CE80
	.align 2, 0
_0803CE24: .4byte gCurrentSprite
_0803CE28:
	cmp r1, #5
	beq _0803CE30
	cmp r1, #3
	bne _0803CE5E
_0803CE30:
	ldr r1, _0803CE54 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq _0803CE5C
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #1
	bne _0803CE5E
	ldr r0, _0803CE58 @ =0x0000FDFF
	ands r0, r2
	strh r0, [r5]
	b _0803CE80
	.align 2, 0
_0803CE54: .4byte gCurrentSprite
_0803CE58: .4byte 0x0000FDFF
_0803CE5C:
	movs r7, #1
_0803CE5E:
	ldr r5, _0803CE7C @ =gCurrentSprite
	cmp r7, #0
	bne _0803CE80
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803CE8E
	subs r1, #0xa
	movs r0, #1
	strb r0, [r1]
	b _0803CED0
	.align 2, 0
_0803CE7C: .4byte gCurrentSprite
_0803CE80:
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0xf
	bhi _0803CE8E
	movs r0, #0x10
	strb r0, [r1]
_0803CE8E:
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsrs r4, r0, #3
	adds r0, r4, #0
	bl unk_11604
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CEB2
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	adds r0, r0, r4
	b _0803CEBA
_0803CEB2:
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	subs r0, r0, r4
_0803CEBA:
	strb r0, [r1]
	ldr r0, _0803CED8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _0803CED0
	movs r0, #0xcc
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803CED0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803CED8: .4byte gFrameCounter8Bit

	thumb_func_start YardStartled
YardStartled: @ 0x0803CEDC
	push {lr}
	bl YardCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803CEF8
	ldr r0, _0803CEF4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _0803CF10
	.align 2, 0
_0803CEF4: .4byte gCurrentSprite
_0803CEF8:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803CF10
	ldr r1, _0803CF14 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #1
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
_0803CF10:
	pop {r0}
	bx r0
	.align 2, 0
_0803CF14: .4byte gCurrentSprite

	thumb_func_start YardIdleInit
YardIdleInit: @ 0x0803CF18
	push {lr}
	bl YardSetCrawlingOam
	ldr r0, _0803CF2C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0803CF2C: .4byte gCurrentSprite

	thumb_func_start YardIdle
YardIdle: @ 0x0803CF30
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	movs r0, #1
	mov sb, r0
	movs r6, #0
	bl YardCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803CF5C
	ldr r0, _0803CF58 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _0803D2C0
	.align 2, 0
_0803CF58: .4byte gCurrentSprite
_0803CF5C:
	ldr r4, _0803CF74 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803CF78
	bl YardCheckRoll
	b _0803D2C0
	.align 2, 0
_0803CF74: .4byte gCurrentSprite
_0803CF78:
	bl YardCheckShouldStartle
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803CF84
	b _0803D2C0
_0803CF84:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	bne _0803D050
	ldrh r1, [r4, #2]
	ldrh r2, [r4, #4]
	ldrh r0, [r4, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r4, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0x14]
	ldrh r0, [r4, #0xe]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sl, r0
	ldrh r0, [r4, #0x10]
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	movs r5, #0
	str r4, [sp, #0x18]
_0803CFBE:
	ldr r0, [sp, #0x18]
	adds r0, #0x23
	ldrb r0, [r0]
	cmp r5, r0
	beq _0803D03E
	ldr r1, _0803D04C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	mov ip, r0
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803D03E
	mov r1, ip
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x6d
	bne _0803D03E
	mov r0, ip
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x82
	ands r0, r1
	cmp r0, #0
	bne _0803D03E
	mov r0, ip
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5a
	bhi _0803D03E
	mov r7, ip
	ldrh r3, [r7, #2]
	ldrh r4, [r7, #4]
	ldrh r2, [r7, #0xa]
	adds r2, r3, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldrh r0, [r7, #0xc]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	ldrh r1, [r7, #0xe]
	adds r1, r4, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r7, #0x10]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r2, [sp]
	str r3, [sp, #4]
	str r1, [sp, #8]
	str r4, [sp, #0xc]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r2, sl
	mov r3, r8
	bl CheckObjectsTouching
	cmp r0, #0
	beq _0803D03E
	b _0803D296
_0803D03E:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0x17
	bls _0803CFBE
	b _0803D054
	.align 2, 0
_0803D04C: .4byte gSpriteData
_0803D050:
	subs r0, #1
	strb r0, [r1]
_0803D054:
	ldr r4, _0803D098 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803D062
	b _0803D168
_0803D062:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803D0E0
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D0A0
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803D09C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803D08E
	b _0803D270
_0803D08E:
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0803D10A
	.align 2, 0
_0803D098: .4byte gCurrentSprite
_0803D09C: .4byte gPreviousCollisionCheck
_0803D0A0:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803D0DC @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803D0B8
	b _0803D270
_0803D0B8:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803D0D0
	b _0803D270
_0803D0D0:
	ldrh r0, [r4, #2]
	mov r1, sb
	subs r0, r0, r1
	strh r0, [r4, #2]
	b _0803D2B0
	.align 2, 0
_0803D0DC: .4byte gPreviousCollisionCheck
_0803D0E0:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D128
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803D124 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803D104
	b _0803D270
_0803D104:
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
_0803D10A:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803D11A
	b _0803D270
_0803D11A:
	ldrh r0, [r4, #2]
	add r0, sb
	strh r0, [r4, #2]
	b _0803D2B0
	.align 2, 0
_0803D124: .4byte gPreviousCollisionCheck
_0803D128:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803D164 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _0803D142
	b _0803D270
_0803D142:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803D158
	b _0803D270
_0803D158:
	ldrh r0, [r4, #2]
	mov r7, sb
	subs r0, r0, r7
	strh r0, [r4, #2]
	b _0803D2B0
	.align 2, 0
_0803D164: .4byte gPreviousCollisionCheck
_0803D168:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803D1EC
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D1B8
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803D1B4 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r7, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D270
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0803D270
	ldrh r0, [r4, #4]
	add r0, sb
	b _0803D2AE
	.align 2, 0
_0803D1B4: .4byte gPreviousCollisionCheck
_0803D1B8:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803D1E8 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r7, #0xf
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D270
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _0803D270
	b _0803D2A8
	.align 2, 0
_0803D1E8: .4byte gPreviousCollisionCheck
_0803D1EC:
	bl unk_1129c
	ldr r0, _0803D23C @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	movs r5, #0xf0
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D284
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D244
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _0803D240 @ =gPreviousCollisionCheck
	ldrb r1, [r7]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D270
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r7]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0803D270
	ldrh r0, [r4, #4]
	add r0, sb
	b _0803D2AE
	.align 2, 0
_0803D23C: .4byte gPreviousVerticalCollisionCheck
_0803D240: .4byte gPreviousCollisionCheck
_0803D244:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _0803D278 @ =gPreviousCollisionCheck
	ldrb r1, [r7]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D270
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r7]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0803D27C
_0803D270:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0803D2B0
	.align 2, 0
_0803D278: .4byte gPreviousCollisionCheck
_0803D27C:
	ldrh r0, [r4, #4]
	mov r7, sb
	subs r0, r0, r7
	b _0803D2AE
_0803D284:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D2A8
	ldrh r0, [r4, #4]
	add r0, sb
	b _0803D2AE
_0803D296:
	ldr r1, [sp, #0x18]
	adds r1, #0x2f
	movs r0, #0x78
	strb r0, [r1]
	ldr r1, [sp, #0x18]
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _0803D2C0
_0803D2A8:
	ldrh r0, [r4, #4]
	mov r1, sb
	subs r0, r0, r1
_0803D2AE:
	strh r0, [r4, #4]
_0803D2B0:
	cmp r6, #0
	beq _0803D2BC
	ldr r0, _0803D2D0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
	strb r1, [r0]
_0803D2BC:
	bl YardCheckShoot
_0803D2C0:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803D2D0: .4byte gCurrentSprite

	thumb_func_start YardTurningAroundInit
YardTurningAroundInit: @ 0x0803D2D4
	push {lr}
	ldr r0, _0803D2E8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #4
	strb r1, [r0]
	bl YardSetTurningAroundOam
	pop {r0}
	bx r0
	.align 2, 0
_0803D2E8: .4byte gCurrentSprite

	thumb_func_start YardTurningAround
YardTurningAround: @ 0x0803D2EC
	push {r4, lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803D332
	ldr r4, _0803D318 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #5
	strb r1, [r0]
	bl YardSetTurningAroundSecondPartOam
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803D31C
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	b _0803D320
	.align 2, 0
_0803D318: .4byte gCurrentSprite
_0803D31C:
	ldrh r0, [r4]
	movs r1, #0x40
_0803D320:
	eors r0, r1
	strh r0, [r4]
	ldr r0, _0803D338 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
_0803D332:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D338: .4byte gCurrentSprite

	thumb_func_start YardTurningAroundSecondPart
YardTurningAroundSecondPart: @ 0x0803D33C
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803D34E
	ldr r0, _0803D354 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0803D34E:
	pop {r0}
	bx r0
	.align 2, 0
_0803D354: .4byte gCurrentSprite

	thumb_func_start YardFallingInit
YardFallingInit: @ 0x0803D358
	push {lr}
	ldr r1, _0803D374 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bl YardSetCrawlingOam
	pop {r0}
	bx r0
	.align 2, 0
_0803D374: .4byte gCurrentSprite

	thumb_func_start YardFalling
YardFalling: @ 0x0803D378
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _0803D3A0 @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803D3A4
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803D3B0
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _0803D3B0
	.align 2, 0
_0803D3A0: .4byte gCurrentSprite
_0803D3A4:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803D3B8
_0803D3B0:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_0803D3B8:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0803D410 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803D444
	ldr r4, _0803D414 @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _0803D3DE
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0803D3DE:
	ldrh r1, [r4]
	ldr r0, _0803D418 @ =0x0000FEFF
	ands r0, r1
	strh r0, [r4]
	movs r0, #0
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bl YardUpdateHitbox
	bl YardSetCrawlingOam
	cmp r5, #0
	beq _0803D424
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803D41C
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _0803D420
	.align 2, 0
_0803D410: .4byte gPreviousVerticalCollisionCheck
_0803D414: .4byte gCurrentSprite
_0803D418: .4byte 0x0000FEFF
_0803D41C:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_0803D420:
	subs r0, r0, r1
	strh r0, [r4, #4]
_0803D424:
	ldr r2, _0803D440 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D488
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x28
	bl ParticleSet
	b _0803D488
	.align 2, 0
_0803D440: .4byte gCurrentSprite
_0803D444:
	ldr r3, _0803D470 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0803D474 @ =sSpritesFallingSpeedSlow
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0803D478 @ =0x00007FFF
	cmp r1, r0
	bne _0803D47C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0803D486
	.align 2, 0
_0803D470: .4byte gCurrentSprite
_0803D474: .4byte sSpritesFallingSpeedSlow
_0803D478: .4byte 0x00007FFF
_0803D47C:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_0803D486:
	strh r0, [r3, #2]
_0803D488:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YardProjectileInit
YardProjectileInit: @ 0x0803D490
	push {r4, lr}
	ldr r0, _0803D4FC @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0803D500 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r2, #0xb
	movs r0, #0x10
	strb r0, [r2]
	ldr r0, _0803D504 @ =0x0000FFF8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _0803D508 @ =0x08355508
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0803D50C @ =gIoRegisters
	ldrb r1, [r1, #0xa]
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D4FC: .4byte gCurrentSprite
_0803D500: .4byte 0x0000FFFB
_0803D504: .4byte 0x0000FFF8
_0803D508: .4byte 0x08355508
_0803D50C: .4byte gIoRegisters

	thumb_func_start YardProjectileMoving
YardProjectileMoving: @ 0x0803D510
	push {lr}
	ldr r1, _0803D528 @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	bne _0803D52C
	ldrh r0, [r1, #2]
	subs r0, #3
	strh r0, [r1, #2]
	ldrh r0, [r1, #4]
	subs r0, #3
	b _0803D554
	.align 2, 0
_0803D528: .4byte gCurrentSprite
_0803D52C:
	cmp r0, #1
	bne _0803D53C
	ldrh r0, [r1, #2]
	adds r0, #3
	strh r0, [r1, #2]
	ldrh r0, [r1, #4]
	subs r0, #3
	b _0803D554
_0803D53C:
	cmp r0, #2
	bne _0803D546
	ldrh r0, [r1, #2]
	adds r0, #3
	b _0803D54E
_0803D546:
	cmp r0, #3
	bne _0803D556
	ldrh r0, [r1, #2]
	subs r0, #3
_0803D54E:
	strh r0, [r1, #2]
	ldrh r0, [r1, #4]
	adds r0, #3
_0803D554:
	strh r0, [r1, #4]
_0803D556:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YardProjectileExplodingInit
YardProjectileExplodingInit: @ 0x0803D55C
	ldr r3, _0803D578 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	ldr r0, _0803D57C @ =0x08355550
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_0803D578: .4byte gCurrentSprite
_0803D57C: .4byte 0x08355550

	thumb_func_start YardProjectileExploding
YardProjectileExploding: @ 0x0803D580
	push {r4, lr}
	ldr r4, _0803D5A0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803D598
	movs r0, #0
	strh r0, [r4]
_0803D598:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D5A0: .4byte gCurrentSprite

	thumb_func_start Yard
Yard: @ 0x0803D5A4
	push {r4, lr}
	ldr r4, _0803D5CC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803D5BC
	ldr r0, _0803D5D0 @ =0x00000197
	bl CheckPlayNotAlreadyPlayingSound
_0803D5BC:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803D5D4
	bl SpriteUpdateFreezeTimer
	b _0803D7C4
	.align 2, 0
_0803D5CC: .4byte gCurrentSprite
_0803D5D0: .4byte 0x00000197
_0803D5D4:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803D5E0
	b _0803D7C4
_0803D5E0:
	lsls r0, r0, #2
	ldr r1, _0803D5EC @ =_0803D5F0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803D5EC: .4byte _0803D5F0
_0803D5F0: @ jump table
	.4byte _0803D760 @ case 0
	.4byte _0803D766 @ case 1
	.4byte _0803D76A @ case 2
	.4byte _0803D776 @ case 3
	.4byte _0803D77A @ case 4
	.4byte _0803D780 @ case 5
	.4byte _0803D7C4 @ case 6
	.4byte _0803D7C4 @ case 7
	.4byte _0803D7C4 @ case 8
	.4byte _0803D7C4 @ case 9
	.4byte _0803D7C4 @ case 10
	.4byte _0803D7C4 @ case 11
	.4byte _0803D7C4 @ case 12
	.4byte _0803D7C4 @ case 13
	.4byte _0803D7C4 @ case 14
	.4byte _0803D7C4 @ case 15
	.4byte _0803D7C4 @ case 16
	.4byte _0803D7C4 @ case 17
	.4byte _0803D7C4 @ case 18
	.4byte _0803D7C4 @ case 19
	.4byte _0803D7C4 @ case 20
	.4byte _0803D786 @ case 21
	.4byte _0803D78A @ case 22
	.4byte _0803D7C4 @ case 23
	.4byte _0803D770 @ case 24
	.4byte _0803D7C4 @ case 25
	.4byte _0803D7C4 @ case 26
	.4byte _0803D7C4 @ case 27
	.4byte _0803D7C4 @ case 28
	.4byte _0803D7C4 @ case 29
	.4byte _0803D7C4 @ case 30
	.4byte _0803D7C4 @ case 31
	.4byte _0803D7C4 @ case 32
	.4byte _0803D7C4 @ case 33
	.4byte _0803D7C4 @ case 34
	.4byte _0803D7C4 @ case 35
	.4byte _0803D7C4 @ case 36
	.4byte _0803D7C4 @ case 37
	.4byte _0803D7C4 @ case 38
	.4byte _0803D7C4 @ case 39
	.4byte _0803D7C4 @ case 40
	.4byte _0803D7C4 @ case 41
	.4byte _0803D790 @ case 42
	.4byte _0803D7C4 @ case 43
	.4byte _0803D796 @ case 44
	.4byte _0803D7C4 @ case 45
	.4byte _0803D79C @ case 46
	.4byte _0803D7C4 @ case 47
	.4byte _0803D7C4 @ case 48
	.4byte _0803D7C4 @ case 49
	.4byte _0803D7C4 @ case 50
	.4byte _0803D7C4 @ case 51
	.4byte _0803D7C4 @ case 52
	.4byte _0803D7C4 @ case 53
	.4byte _0803D7C4 @ case 54
	.4byte _0803D7C4 @ case 55
	.4byte _0803D7A2 @ case 56
	.4byte _0803D7C4 @ case 57
	.4byte _0803D7C4 @ case 58
	.4byte _0803D7C4 @ case 59
	.4byte _0803D7C4 @ case 60
	.4byte _0803D7C4 @ case 61
	.4byte _0803D7C4 @ case 62
	.4byte _0803D7C4 @ case 63
	.4byte _0803D7C4 @ case 64
	.4byte _0803D7C4 @ case 65
	.4byte _0803D7C4 @ case 66
	.4byte _0803D7C4 @ case 67
	.4byte _0803D7C4 @ case 68
	.4byte _0803D7C4 @ case 69
	.4byte _0803D7C4 @ case 70
	.4byte _0803D7C4 @ case 71
	.4byte _0803D7C4 @ case 72
	.4byte _0803D7C4 @ case 73
	.4byte _0803D7C4 @ case 74
	.4byte _0803D7C4 @ case 75
	.4byte _0803D7C4 @ case 76
	.4byte _0803D7C4 @ case 77
	.4byte _0803D7C4 @ case 78
	.4byte _0803D7C4 @ case 79
	.4byte _0803D7C4 @ case 80
	.4byte _0803D7C4 @ case 81
	.4byte _0803D7C4 @ case 82
	.4byte _0803D7C4 @ case 83
	.4byte _0803D7C4 @ case 84
	.4byte _0803D7C4 @ case 85
	.4byte _0803D7C4 @ case 86
	.4byte _0803D7A8 @ case 87
	.4byte _0803D7AC @ case 88
	.4byte _0803D7B2 @ case 89
	.4byte _0803D7B6 @ case 90
	.4byte _0803D7BC @ case 91
_0803D760:
	bl YardInit
	b _0803D7C4
_0803D766:
	bl YardIdleInit
_0803D76A:
	bl YardIdle
	b _0803D7C4
_0803D770:
	bl YardStartled
	b _0803D7C4
_0803D776:
	bl YardTurningAroundInit
_0803D77A:
	bl YardTurningAround
	b _0803D7C4
_0803D780:
	bl YardTurningAroundSecondPart
	b _0803D7C4
_0803D786:
	bl YardFallingInit
_0803D78A:
	bl YardFalling
	b _0803D7C4
_0803D790:
	bl YardCharging
	b _0803D7C4
_0803D796:
	bl YardShooting
	b _0803D7C4
_0803D79C:
	bl YardRecoil
	b _0803D7C4
_0803D7A2:
	bl YardRolling
	b _0803D7C4
_0803D7A8:
	bl SpriteDyingInit
_0803D7AC:
	bl SpriteDying
	b _0803D7C4
_0803D7B2:
	bl YardInit
_0803D7B6:
	bl SpriteSpawningFromX
	b _0803D7C4
_0803D7BC:
	bl YardTurningIntoX
	bl XParasiteInit
_0803D7C4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YardProjectile
YardProjectile: @ 0x0803D7CC
	push {lr}
	ldr r0, _0803D7E4 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803D7F2
	cmp r0, #2
	bgt _0803D7E8
	cmp r0, #0
	beq _0803D7EE
	b _0803D7FE
	.align 2, 0
_0803D7E4: .4byte gCurrentSprite
_0803D7E8:
	cmp r0, #0x38
	beq _0803D7F8
	b _0803D7FE
_0803D7EE:
	bl YardProjectileInit
_0803D7F2:
	bl YardProjectileMoving
	b _0803D802
_0803D7F8:
	bl YardProjectileExploding
	b _0803D802
_0803D7FE:
	bl YardProjectileExplodingInit
_0803D802:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EvirCheckInShootingRange
EvirCheckInShootingRange: @ 0x0803D808
	push {r4, lr}
	movs r4, #0
	ldr r3, _0803D820 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0803D824
	movs r0, #0
	b _0803D854
	.align 2, 0
_0803D820: .4byte gCurrentSprite
_0803D824:
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	cmp r0, #0
	beq _0803D836
	subs r0, #1
	strb r0, [r2]
	movs r0, #0
	b _0803D854
_0803D836:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D852
	ldrh r0, [r3, #0x14]
	cmp r0, #0
	beq _0803D852
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0803D852:
	adds r0, r4, #0
_0803D854:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start EvirSpawningFromX
EvirSpawningFromX: @ 0x0803D85C
	push {lr}
	ldr r3, _0803D884 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0803D890
	ldr r2, _0803D888 @ =gWrittenToMosaic_H
	ldr r1, _0803D88C @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _0803D8A4
	.align 2, 0
_0803D884: .4byte gCurrentSprite
_0803D888: .4byte gWrittenToMosaic_H
_0803D88C: .4byte 0x083BDED6
_0803D890:
	ldrh r0, [r3]
	ldr r1, _0803D8A8 @ =0x00007FFF
	ands r1, r0
	adds r2, r3, #0
	adds r2, #0x24
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0803D8AC @ =0x0000FFDF
	ands r1, r0
	strh r1, [r3]
_0803D8A4:
	pop {r0}
	bx r0
	.align 2, 0
_0803D8A8: .4byte 0x00007FFF
_0803D8AC: .4byte 0x0000FFDF

	thumb_func_start EvirTurningIntoX
EvirTurningIntoX: @ 0x0803D8B0
	push {r4, lr}
	sub sp, #0x10
	ldr r2, _0803D8F0 @ =gCurrentSprite
	ldrh r0, [r2, #2]
	subs r0, #0x5c
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D8F4
	ldrb r1, [r2, #0x1d]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r2, #2]
	subs r0, #0x28
	str r0, [sp, #4]
	ldrh r0, [r2, #4]
	adds r0, #0x20
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	b _0803D918
	.align 2, 0
_0803D8F0: .4byte gCurrentSprite
_0803D8F4:
	ldrb r1, [r2, #0x1d]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r2, #2]
	subs r0, #0x28
	str r0, [sp, #4]
	ldrh r0, [r2, #4]
	subs r0, #0x20
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
_0803D918:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start EvirInit
EvirInit: @ 0x0803D920
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r3, _0803D98C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x27
	movs r5, #0
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	ldr r2, _0803D990 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r4, #0
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	movs r2, #2
	strb r2, [r0]
	ldr r0, _0803D994 @ =0x08356ABC
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r5, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r4, [r0]
	adds r0, #6
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0803D9B0
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0803D998
	strh r5, [r3]
	b _0803DA6A
	.align 2, 0
_0803D98C: .4byte gCurrentSprite
_0803D990: .4byte sPrimarySpriteStats
_0803D994: .4byte 0x08356ABC
_0803D998:
	adds r0, r3, #0
	adds r0, #0x36
	strb r2, [r0]
	ldr r0, _0803D9AC @ =0x0000FF80
	strh r0, [r3, #0xa]
	strh r5, [r3, #0xc]
	adds r0, #0x40
	strh r0, [r3, #0xe]
	movs r0, #0x40
	b _0803D9BE
	.align 2, 0
_0803D9AC: .4byte 0x0000FF80
_0803D9B0:
	ldr r0, _0803D9D8 @ =0x0000FFC0
	strh r0, [r3, #0xa]
	adds r0, #0x28
	strh r0, [r3, #0xc]
	subs r0, #8
	strh r0, [r3, #0xe]
	movs r0, #0x20
_0803D9BE:
	strh r0, [r3, #0x10]
	ldr r4, _0803D9DC @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803D9E0
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0803DA6A
	.align 2, 0
_0803D9D8: .4byte 0x0000FFC0
_0803D9DC: .4byte gCurrentSprite
_0803D9E0:
	movs r7, #0
	movs r0, #2
	strb r0, [r1]
	bl MakeSpriteFaceSamusXFlip
	bl SpriteUtilChooseRandomXDirection
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x60
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x3b
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _0803DA42
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0803DA46
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x18
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x3b
	movs r1, #1
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _0803DA6A
_0803DA42:
	strh r7, [r4]
	b _0803DA6A
_0803DA46:
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x18
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x3b
	movs r1, #1
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _0803DA6A
	strh r5, [r4]
_0803DA6A:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EvirShootingInit
EvirShootingInit: @ 0x0803DA74
	ldr r0, _0803DA90 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x2a
	strb r1, [r2]
	ldr r1, _0803DA94 @ =0x08356B04
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0x5a
	strb r1, [r0]
	bx lr
	.align 2, 0
_0803DA90: .4byte gCurrentSprite
_0803DA94: .4byte 0x08356B04

	thumb_func_start EvirShooting
EvirShooting: @ 0x0803DA98
	push {r4, lr}
	sub sp, #0xc
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803DAB4
	ldr r0, _0803DAB0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	b _0803DB36
	.align 2, 0
_0803DAB0: .4byte gCurrentSprite
_0803DAB4:
	ldr r1, _0803DAF0 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	mov ip, r1
	cmp r0, #4
	bne _0803DB16
	ldrb r0, [r1, #0x1c]
	cmp r0, #8
	bne _0803DB16
	ldrh r1, [r1]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _0803DAF4
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x48
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x1c
	str r0, [sp, #4]
	str r4, [sp, #8]
	b _0803DB0C
	.align 2, 0
_0803DAF0: .4byte gCurrentSprite
_0803DAF4:
	mov r4, ip
	ldrb r2, [r4, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x48
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x1c
	str r0, [sp, #4]
	str r1, [sp, #8]
_0803DB0C:
	movs r0, #0x3c
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0803DB36
_0803DB16:
	mov r1, ip
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0803DB36
	ldrb r0, [r1, #0x1c]
	cmp r0, #8
	bne _0803DB36
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803DB36
	movs r0, #0xd5
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803DB36:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EvirIdleInit
EvirIdleInit: @ 0x0803DB40
	ldr r1, _0803DB58 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0803DB5C @ =0x08356ABC
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0803DB58: .4byte gCurrentSprite
_0803DB5C: .4byte 0x08356ABC

	thumb_func_start EvirIdle
EvirIdle: @ 0x0803DB60
	push {r4, r5, r6, lr}
	bl EvirCheckInShootingRange
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803DB72
	bl EvirShootingInit
	b _0803DC90
_0803DB72:
	movs r6, #0
	ldr r4, _0803DBB8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803DBC4
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803DBBC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803DBEA
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803DBEA
	ldr r0, _0803DBC0 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0803DC06
	ldrh r0, [r4, #4]
	adds r0, #4
	b _0803DC04
	.align 2, 0
_0803DBB8: .4byte gCurrentSprite
_0803DBBC: .4byte gPreviousCollisionCheck
_0803DBC0: .4byte gFrameCounter8Bit
_0803DBC4:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803DBF0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803DBEA
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803DBF4
_0803DBEA:
	movs r6, #1
	b _0803DC06
	.align 2, 0
_0803DBF0: .4byte gPreviousCollisionCheck
_0803DBF4:
	ldr r0, _0803DC30 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0803DC06
	ldrh r0, [r4, #4]
	subs r0, #4
_0803DC04:
	strh r0, [r4, #4]
_0803DC06:
	ldr r4, _0803DC34 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803DC3C
	ldrh r0, [r4, #2]
	adds r0, #8
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803DC38 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _0803DC4E
	ldrh r0, [r4, #2]
	adds r0, #2
	b _0803DC60
	.align 2, 0
_0803DC30: .4byte gFrameCounter8Bit
_0803DC34: .4byte gCurrentSprite
_0803DC38: .4byte gPreviousCollisionCheck
_0803DC3C:
	ldrh r0, [r4, #2]
	subs r0, #0x80
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803DC58 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0803DC5C
_0803DC4E:
	ldrh r1, [r4]
	adds r0, r5, #0
	eors r0, r1
	strh r0, [r4]
	b _0803DC62
	.align 2, 0
_0803DC58: .4byte gPreviousCollisionCheck
_0803DC5C:
	ldrh r0, [r4, #2]
	subs r0, #2
_0803DC60:
	strh r0, [r4, #2]
_0803DC62:
	cmp r6, #0
	beq _0803DC74
	ldr r0, _0803DC70 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
	strb r1, [r0]
	b _0803DC90
	.align 2, 0
_0803DC70: .4byte gCurrentSprite
_0803DC74:
	ldr r2, _0803DC98 @ =gCurrentSprite
	ldrh r1, [r2, #0x16]
	cmp r1, #2
	bne _0803DC90
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _0803DC90
	ldrh r0, [r2]
	ands r1, r0
	cmp r1, #0
	beq _0803DC90
	ldr r0, _0803DC9C @ =0x000001A9
	bl CheckPlayNotAlreadyPlayingSound
_0803DC90:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803DC98: .4byte gCurrentSprite
_0803DC9C: .4byte 0x000001A9

	thumb_func_start EvirTurningAroundInit
EvirTurningAroundInit: @ 0x0803DCA0
	ldr r1, _0803DCB8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _0803DCBC @ =0x08356B44
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0803DCB8: .4byte gCurrentSprite
_0803DCBC: .4byte 0x08356B44

	thumb_func_start EvirTurningAround
EvirTurningAround: @ 0x0803DCC0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803DCE6
	ldr r2, _0803DCEC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0803DCF0 @ =0x08356B64
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0803DCE6:
	pop {r0}
	bx r0
	.align 2, 0
_0803DCEC: .4byte gCurrentSprite
_0803DCF0: .4byte 0x08356B64

	thumb_func_start EvirTurningAroundSecondPart
EvirTurningAroundSecondPart: @ 0x0803DCF4
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803DD06
	ldr r0, _0803DD0C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0803DD06:
	pop {r0}
	bx r0
	.align 2, 0
_0803DD0C: .4byte gCurrentSprite

	thumb_func_start EvirCollisionInit
EvirCollisionInit: @ 0x0803DD10
	push {r4, r5, lr}
	ldr r0, _0803DD98 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0803DD9C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0803DD3C
	mov r5, ip
	ldrh r1, [r5]
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r5]
_0803DD3C:
	mov r0, ip
	adds r0, #0x25
	movs r3, #0
	movs r2, #2
	strb r2, [r0]
	adds r0, #2
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	movs r4, #0
	ldr r0, _0803DDA0 @ =0x0000FFE0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r0, #0x20
	strh r0, [r1, #0xc]
	ldr r1, _0803DDA4 @ =sSecondarySpriteStats
	mov r5, ip
	ldrb r0, [r5, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	mov r0, ip
	adds r0, #0x24
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldr r0, _0803DDA8 @ =0x08356B84
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r3, [r5, #0x16]
	ldrb r0, [r5, #0x1e]
	cmp r0, #0
	beq _0803DDB0
	ldr r0, _0803DDAC @ =0x0000FFE8
	strh r0, [r5, #0xe]
	movs r0, #0x18
	strh r0, [r5, #0x10]
	b _0803DDBA
	.align 2, 0
_0803DD98: .4byte gCurrentSprite
_0803DD9C: .4byte gSpriteData
_0803DDA0: .4byte 0x0000FFE0
_0803DDA4: .4byte sSecondarySpriteStats
_0803DDA8: .4byte 0x08356B84
_0803DDAC: .4byte 0x0000FFE8
_0803DDB0:
	ldr r0, _0803DDC0 @ =0x0000FFC8
	mov r1, ip
	strh r0, [r1, #0xe]
	movs r0, #0x38
	strh r0, [r1, #0x10]
_0803DDBA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803DDC0: .4byte 0x0000FFC8

	thumb_func_start EvirCollisionIdle
EvirCollisionIdle: @ 0x0803DDC4
	push {r4, r5, r6, r7, lr}
	ldr r3, _0803DDF4 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldr r2, _0803DDF8 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r6, #0x80
	lsls r6, r6, #6
	adds r0, r6, #0
	ands r0, r1
	adds r4, r3, #0
	adds r7, r2, #0
	cmp r0, #0
	beq _0803DDFC
	ldrh r1, [r4]
	adds r0, r6, #0
	orrs r0, r1
	b _0803DE02
	.align 2, 0
_0803DDF4: .4byte gCurrentSprite
_0803DDF8: .4byte gSpriteData
_0803DDFC:
	ldrh r1, [r4]
	ldr r0, _0803DE48 @ =0x0000DFFF
	ands r0, r1
_0803DE02:
	strh r0, [r4]
	ldrh r6, [r4, #0x14]
	lsls r3, r5, #3
	cmp r6, #0
	bne _0803DE4C
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x56
	bhi _0803DE4C
	movs r0, #0x57
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	strb r0, [r1]
	movs r3, #0
	mov r0, ip
	strh r6, [r0, #0x14]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x10
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r3, [r0]
	subs r0, #0x12
	strb r3, [r0]
	strh r6, [r4]
	b _0803DEC6
	.align 2, 0
_0803DE48: .4byte 0x0000DFFF
_0803DE4C:
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _0803DE74
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r2, r0, r7
	ldrh r0, [r2, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803DE6E
	ldrh r0, [r2, #4]
	subs r0, #0x18
	b _0803DE82
_0803DE6E:
	ldrh r0, [r2, #4]
	adds r0, #0x18
	b _0803DE82
_0803DE74:
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r1, [r0, #2]
	subs r1, #0x60
	strh r1, [r4, #2]
	ldrh r0, [r0, #4]
_0803DE82:
	strh r0, [r4, #4]
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x58
	bgt _0803DE9A
	cmp r0, #0x57
	blt _0803DE9A
	movs r0, #0
	b _0803DEC4
_0803DE9A:
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0803DEBE
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r0, r1
	b _0803DEC4
_0803DEBE:
	ldrh r1, [r4]
	ldr r0, _0803DECC @ =0x00007FFF
	ands r0, r1
_0803DEC4:
	strh r0, [r4]
_0803DEC6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803DECC: .4byte 0x00007FFF

	thumb_func_start EvirProjectileInit
EvirProjectileInit: @ 0x0803DED0
	push {r4, r5, lr}
	ldr r0, _0803DF44 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x26
	movs r4, #0
	movs r3, #1
	strb r3, [r0]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r2, #0
	ldr r1, _0803DF48 @ =0x0000FFF4
	mov r5, ip
	strh r1, [r5, #0xa]
	movs r0, #0xc
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _0803DF4C @ =0x08356B84
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r4, [r5, #0x16]
	movs r1, #0x40
	movs r0, #0x40
	strh r0, [r5, #0x12]
	mov r0, ip
	adds r0, #0x2f
	strb r1, [r0]
	subs r0, #0xb
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x25
	movs r0, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x21
	strb r3, [r0]
	ldrh r0, [r5, #2]
	strh r0, [r5, #6]
	ldrh r0, [r5, #4]
	strh r0, [r5, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803DF44: .4byte gCurrentSprite
_0803DF48: .4byte 0x0000FFF4
_0803DF4C: .4byte 0x08356B84

	thumb_func_start EvirProjectileMovingInit
EvirProjectileMovingInit: @ 0x0803DF50
	ldr r1, _0803DF70 @ =gCurrentSprite
	ldr r2, _0803DF74 @ =sSecondarySpriteStats
	ldrb r0, [r1, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1, #0x14]
	ldrh r2, [r1]
	ldr r0, _0803DF78 @ =0x0000FFFB
	ands r0, r2
	strh r0, [r1]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803DF70: .4byte gCurrentSprite
_0803DF74: .4byte sSecondarySpriteStats
_0803DF78: .4byte 0x0000FFFB

	thumb_func_start EvirProjectileMoving
EvirProjectileMoving: @ 0x0803DF7C
	push {r4, r5, r6, lr}
	ldr r1, _0803DF90 @ =gCurrentSprite
	ldrh r0, [r1, #0x14]
	adds r3, r1, #0
	cmp r0, #0
	bne _0803DF94
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _0803E062
	.align 2, 0
_0803DF90: .4byte gCurrentSprite
_0803DF94:
	ldrh r1, [r3]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803DFA6
	strh r0, [r3]
	b _0803E062
_0803DFA6:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803DFB8
	adds r1, r3, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #4
	b _0803DFC0
_0803DFB8:
	adds r1, r3, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #4
_0803DFC0:
	strb r0, [r1]
	ldr r0, _0803E008 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803DFD4
	ldrh r0, [r3, #0x12]
	adds r0, #1
	strh r0, [r3, #0x12]
_0803DFD4:
	ldrh r4, [r3, #0x12]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r5, [r0]
	ldr r1, _0803E00C @ =0x080A4FA4
	lsls r0, r5, #1
	adds r0, r0, r1
	movs r6, #0
	ldrsh r2, [r0, r6]
	adds r6, r1, #0
	cmp r2, #0
	bge _0803E010
	rsbs r2, r2, #0
	lsls r1, r4, #0x10
	asrs r0, r1, #0x10
	muls r0, r2, r0
	adds r4, r1, #0
	cmp r0, #0
	bge _0803DFFC
	adds r0, #0xff
_0803DFFC:
	lsls r0, r0, #8
	lsrs r2, r0, #0x10
	ldrh r0, [r3, #6]
	subs r0, r0, r2
	b _0803E026
	.align 2, 0
_0803E008: .4byte gFrameCounter8Bit
_0803E00C: .4byte 0x080A4FA4
_0803E010:
	lsls r1, r4, #0x10
	asrs r0, r1, #0x10
	muls r0, r2, r0
	adds r4, r1, #0
	cmp r0, #0
	bge _0803E01E
	adds r0, #0xff
_0803E01E:
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	ldrh r1, [r3, #6]
	adds r0, r0, r1
_0803E026:
	strh r0, [r3, #2]
	adds r0, r5, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r6
	movs r2, #0
	ldrsh r1, [r0, r2]
	cmp r1, #0
	bge _0803E04E
	rsbs r1, r1, #0
	asrs r0, r4, #0x10
	muls r0, r1, r0
	cmp r0, #0
	bge _0803E044
	adds r0, #0xff
_0803E044:
	lsls r0, r0, #8
	lsrs r1, r0, #0x10
	ldrh r0, [r3, #8]
	subs r0, r0, r1
	b _0803E060
_0803E04E:
	asrs r0, r4, #0x10
	muls r0, r1, r0
	cmp r0, #0
	bge _0803E058
	adds r0, #0xff
_0803E058:
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	ldrh r6, [r3, #8]
	adds r0, r0, r6
_0803E060:
	strh r0, [r3, #4]
_0803E062:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start EvirProjectileExplodingInit
EvirProjectileExplodingInit: @ 0x0803E068
	ldr r3, _0803E09C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	subs r1, #2
	movs r0, #0x38
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	ldr r0, _0803E0A0 @ =0x08356BAC
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_0803E09C: .4byte gCurrentSprite
_0803E0A0: .4byte 0x08356BAC

	thumb_func_start EvirProjectileExploding
EvirProjectileExploding: @ 0x0803E0A4
	push {r4, lr}
	ldr r4, _0803E0C4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803E0BC
	movs r0, #0
	strh r0, [r4]
_0803E0BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803E0C4: .4byte gCurrentSprite

	thumb_func_start Evir
Evir: @ 0x0803E0C8
	push {r4, lr}
	ldr r4, _0803E100 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803E0E2
	movs r0, #0xd6
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803E0E2:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803E104
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x3b
	bl UpdateSecondarySpritesFreezeTimer
	b _0803E2E6
	.align 2, 0
_0803E100: .4byte gCurrentSprite
_0803E104:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803E110
	b _0803E2E6
_0803E110:
	lsls r0, r0, #2
	ldr r1, _0803E11C @ =_0803E120
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803E11C: .4byte _0803E120
_0803E120: @ jump table
	.4byte _0803E290 @ case 0
	.4byte _0803E296 @ case 1
	.4byte _0803E29A @ case 2
	.4byte _0803E2AA @ case 3
	.4byte _0803E2AE @ case 4
	.4byte _0803E2B4 @ case 5
	.4byte _0803E2E6 @ case 6
	.4byte _0803E2E6 @ case 7
	.4byte _0803E2E6 @ case 8
	.4byte _0803E2E6 @ case 9
	.4byte _0803E2E6 @ case 10
	.4byte _0803E2E6 @ case 11
	.4byte _0803E2E6 @ case 12
	.4byte _0803E2E6 @ case 13
	.4byte _0803E2E6 @ case 14
	.4byte _0803E2E6 @ case 15
	.4byte _0803E2E6 @ case 16
	.4byte _0803E2E6 @ case 17
	.4byte _0803E2E6 @ case 18
	.4byte _0803E2E6 @ case 19
	.4byte _0803E2E6 @ case 20
	.4byte _0803E2E6 @ case 21
	.4byte _0803E2E6 @ case 22
	.4byte _0803E2E6 @ case 23
	.4byte _0803E2E6 @ case 24
	.4byte _0803E2E6 @ case 25
	.4byte _0803E2E6 @ case 26
	.4byte _0803E2E6 @ case 27
	.4byte _0803E2E6 @ case 28
	.4byte _0803E2E6 @ case 29
	.4byte _0803E2E6 @ case 30
	.4byte _0803E2E6 @ case 31
	.4byte _0803E2E6 @ case 32
	.4byte _0803E2E6 @ case 33
	.4byte _0803E2E6 @ case 34
	.4byte _0803E2E6 @ case 35
	.4byte _0803E2E6 @ case 36
	.4byte _0803E2E6 @ case 37
	.4byte _0803E2E6 @ case 38
	.4byte _0803E2E6 @ case 39
	.4byte _0803E2E6 @ case 40
	.4byte _0803E2A0 @ case 41
	.4byte _0803E2A4 @ case 42
	.4byte _0803E2E6 @ case 43
	.4byte _0803E2E6 @ case 44
	.4byte _0803E2E6 @ case 45
	.4byte _0803E2E6 @ case 46
	.4byte _0803E2E6 @ case 47
	.4byte _0803E2E6 @ case 48
	.4byte _0803E2E6 @ case 49
	.4byte _0803E2E6 @ case 50
	.4byte _0803E2E6 @ case 51
	.4byte _0803E2E6 @ case 52
	.4byte _0803E2E6 @ case 53
	.4byte _0803E2E6 @ case 54
	.4byte _0803E2E6 @ case 55
	.4byte _0803E2E6 @ case 56
	.4byte _0803E2E6 @ case 57
	.4byte _0803E2E6 @ case 58
	.4byte _0803E2E6 @ case 59
	.4byte _0803E2E6 @ case 60
	.4byte _0803E2E6 @ case 61
	.4byte _0803E2E6 @ case 62
	.4byte _0803E2E6 @ case 63
	.4byte _0803E2E6 @ case 64
	.4byte _0803E2E6 @ case 65
	.4byte _0803E2E6 @ case 66
	.4byte _0803E2E6 @ case 67
	.4byte _0803E2E6 @ case 68
	.4byte _0803E2E6 @ case 69
	.4byte _0803E2E6 @ case 70
	.4byte _0803E2E6 @ case 71
	.4byte _0803E2E6 @ case 72
	.4byte _0803E2E6 @ case 73
	.4byte _0803E2E6 @ case 74
	.4byte _0803E2E6 @ case 75
	.4byte _0803E2E6 @ case 76
	.4byte _0803E2E6 @ case 77
	.4byte _0803E2E6 @ case 78
	.4byte _0803E2E6 @ case 79
	.4byte _0803E2E6 @ case 80
	.4byte _0803E2E6 @ case 81
	.4byte _0803E2E6 @ case 82
	.4byte _0803E2E6 @ case 83
	.4byte _0803E2E6 @ case 84
	.4byte _0803E2E6 @ case 85
	.4byte _0803E2E6 @ case 86
	.4byte _0803E2BA @ case 87
	.4byte _0803E2CA @ case 88
	.4byte _0803E2D4 @ case 89
	.4byte _0803E2D8 @ case 90
	.4byte _0803E2DE @ case 91
_0803E290:
	bl EvirInit
	b _0803E2E6
_0803E296:
	bl EvirIdleInit
_0803E29A:
	bl EvirIdle
	b _0803E2E6
_0803E2A0:
	bl EvirShootingInit
_0803E2A4:
	bl EvirShooting
	b _0803E2E6
_0803E2AA:
	bl EvirTurningAroundInit
_0803E2AE:
	bl EvirTurningAround
	b _0803E2E6
_0803E2B4:
	bl EvirTurningAroundSecondPart
	b _0803E2E6
_0803E2BA:
	ldr r0, _0803E2D0 @ =gCurrentSprite
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x3b
	bl UnfreezeSecondarySprites
	bl SpriteDyingInit
_0803E2CA:
	bl SpriteDying
	b _0803E2E6
	.align 2, 0
_0803E2D0: .4byte gCurrentSprite
_0803E2D4:
	bl EvirInit
_0803E2D8:
	bl EvirSpawningFromX
	b _0803E2E6
_0803E2DE:
	bl EvirTurningIntoX
	bl XParasiteInit
_0803E2E6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start EvirCollision
EvirCollision: @ 0x0803E2EC
	push {r4, r5, r6, r7, lr}
	ldr r7, _0803E350 @ =gSpriteData
	ldr r3, _0803E354 @ =gCurrentSprite
	movs r0, #0x23
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r5, r0, #0
	adds r5, #0x2c
	ldrb r4, [r5]
	movs r0, #0x7f
	adds r6, r3, #0
	adds r6, #0x2c
	ldrb r2, [r6]
	adds r1, r0, #0
	ands r1, r4
	ands r0, r2
	cmp r1, r0
	bhs _0803E33C
	movs r0, #0x80
	ands r0, r4
	strb r0, [r5]
	mov r1, ip
	ldrb r0, [r1]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r7
	adds r1, #0x2c
	ldrb r0, [r6]
	adds r0, #1
	movs r2, #0x7f
	ands r0, r2
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
_0803E33C:
	adds r0, r3, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803E358
	bl SpriteUpdateFreezeTimer
	bl UpdatePrimarySpriteFreezeTimer
	b _0803E36A
	.align 2, 0
_0803E350: .4byte gSpriteData
_0803E354: .4byte gCurrentSprite
_0803E358:
	adds r0, r3, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803E366
	bl EvirCollisionInit
_0803E366:
	bl EvirCollisionIdle
_0803E36A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start EvirProjectile
EvirProjectile: @ 0x0803E370
	push {lr}
	ldr r0, _0803E388 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #1
	beq _0803E39C
	cmp r0, #1
	bgt _0803E38C
	cmp r0, #0
	beq _0803E396
	b _0803E3AC
	.align 2, 0
_0803E388: .4byte gCurrentSprite
_0803E38C:
	cmp r0, #2
	beq _0803E3A0
	cmp r0, #0x38
	beq _0803E3A6
	b _0803E3AC
_0803E396:
	bl EvirProjectileInit
	b _0803E3B0
_0803E39C:
	bl EvirProjectileMovingInit
_0803E3A0:
	bl EvirProjectileMoving
	b _0803E3B0
_0803E3A6:
	bl EvirProjectileExploding
	b _0803E3B0
_0803E3AC:
	bl EvirProjectileExplodingInit
_0803E3B0:
	pop {r0}
	bx r0

	thumb_func_start BullInit
BullInit: @ 0x0803E3B4
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0803E3E0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803E3E4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803E3E4
	strh r0, [r2]
	b _0803E474
	.align 2, 0
_0803E3E0: .4byte gCurrentSprite
_0803E3E4:
	ldr r4, _0803E45C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r2, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r5, #0
	ldr r1, _0803E460 @ =0x0000FFE0
	strh r1, [r4, #0xa]
	movs r0, #0x20
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _0803E464 @ =0x08357540
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x2f
	strb r5, [r0]
	ldr r2, _0803E468 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl SpriteChooseRandomXFlip
	bl SpriteUtilChooseRandomXDirection
	ldr r0, _0803E46C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #8
	bls _0803E448
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
_0803E448:
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803E470
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0803E474
	.align 2, 0
_0803E45C: .4byte gCurrentSprite
_0803E460: .4byte 0x0000FFE0
_0803E464: .4byte 0x08357540
_0803E468: .4byte sPrimarySpriteStats
_0803E46C: .4byte gSpriteRandomNumber
_0803E470:
	movs r0, #1
	strb r0, [r1]
_0803E474:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BullIdleInit
BullIdleInit: @ 0x0803E47C
	ldr r0, _0803E498 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #2
	strb r1, [r2]
	ldr r1, _0803E49C @ =0x08357540
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_0803E498: .4byte gCurrentSprite
_0803E49C: .4byte 0x08357540

	thumb_func_start BullIdle
BullIdle: @ 0x0803E4A0
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r4, _0803E4EC @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803E4B8
	b _0803E5BC
_0803E4B8:
	movs r0, #3
	strb r0, [r1]
	ldrh r1, [r4]
	movs r6, #0x80
	lsls r6, r6, #2
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803E4FE
	ldrh r0, [r4, #2]
	movs r2, #0x10
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803E4F0 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803E4F8
	ldrh r1, [r4]
	ldr r0, _0803E4F4 @ =0x0000FDFF
	ands r0, r1
	b _0803E51E
	.align 2, 0
_0803E4EC: .4byte gCurrentSprite
_0803E4F0: .4byte gPreviousCollisionCheck
_0803E4F4: .4byte 0x0000FDFF
_0803E4F8:
	ldrh r0, [r4, #4]
	adds r0, #4
	b _0803E52C
_0803E4FE:
	ldrh r0, [r4, #2]
	movs r2, #0xe
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #4]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803E524 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803E528
	ldrh r1, [r4]
	adds r0, r6, #0
	orrs r0, r1
_0803E51E:
	strh r0, [r4]
	movs r5, #1
	b _0803E52E
	.align 2, 0
_0803E524: .4byte gPreviousCollisionCheck
_0803E528:
	ldrh r0, [r4, #4]
	subs r0, #4
_0803E52C:
	strh r0, [r4, #4]
_0803E52E:
	ldr r4, _0803E560 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0803E572
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803E564 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803E56C
	ldrh r0, [r4]
	ldr r1, _0803E568 @ =0x0000FBFF
	ands r1, r0
	b _0803E592
	.align 2, 0
_0803E560: .4byte gCurrentSprite
_0803E564: .4byte gPreviousCollisionCheck
_0803E568: .4byte 0x0000FBFF
_0803E56C:
	ldrh r0, [r4, #2]
	subs r0, #4
	b _0803E5A4
_0803E572:
	movs r1, #0xc
	ldrsh r0, [r4, r1]
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803E59C @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803E5A0
	ldrh r0, [r4]
	adds r1, r6, #0
	orrs r1, r0
_0803E592:
	strh r1, [r4]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _0803E5A6
	.align 2, 0
_0803E59C: .4byte gPreviousCollisionCheck
_0803E5A0:
	ldrh r0, [r4, #2]
	adds r0, #4
_0803E5A4:
	strh r0, [r4, #2]
_0803E5A6:
	cmp r5, #0
	beq _0803E5BC
	ldr r0, _0803E5C4 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803E5BC
	ldr r0, _0803E5C8 @ =0x00000199
	bl CheckPlayNotAlreadyPlayingSound
_0803E5BC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803E5C4: .4byte gCurrentSprite
_0803E5C8: .4byte 0x00000199

	thumb_func_start Bull
Bull: @ 0x0803E5CC
	push {r4, lr}
	sub sp, #0xc
	ldr r0, _0803E5E4 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803E5E8
	bl SpriteUpdateFreezeTimer
	b _0803E68E
	.align 2, 0
_0803E5E4: .4byte gCurrentSprite
_0803E5E8:
	mov r0, ip
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803E62C
	mov r0, ip
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803E62C
	mov r0, ip
	adds r0, #0x2f
	ldrb r1, [r0]
	cmp r1, #0
	bne _0803E62C
	mov r4, ip
	ldrb r2, [r4, #0x1f]
	subs r0, #0xc
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x3d
	movs r1, #0
	bl SpriteSpawnSecondary
	movs r0, #0xcd
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803E62C:
	ldr r0, _0803E648 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x57
	beq _0803E676
	cmp r0, #0x57
	bgt _0803E652
	cmp r0, #1
	beq _0803E66A
	cmp r0, #1
	bgt _0803E64C
	cmp r0, #0
	beq _0803E664
	b _0803E68E
	.align 2, 0
_0803E648: .4byte gCurrentSprite
_0803E64C:
	cmp r0, #2
	beq _0803E670
	b _0803E68E
_0803E652:
	cmp r0, #0x59
	beq _0803E680
	cmp r0, #0x59
	blt _0803E67A
	cmp r0, #0x5a
	beq _0803E684
	cmp r0, #0x5b
	beq _0803E68A
	b _0803E68E
_0803E664:
	bl BullInit
	b _0803E68E
_0803E66A:
	bl BullIdleInit
	b _0803E68E
_0803E670:
	bl BullIdle
	b _0803E68E
_0803E676:
	bl SpriteDyingInit
_0803E67A:
	bl SpriteDying
	b _0803E68E
_0803E680:
	bl BullInit
_0803E684:
	bl SpriteSpawningFromX
	b _0803E68E
_0803E68A:
	bl XParasiteInit
_0803E68E:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BullSmoke
BullSmoke: @ 0x0803E698
	push {r4, r5, r6, r7, lr}
	ldr r4, _0803E70C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r7, r5, #0
	movs r0, #0x24
	adds r0, r0, r4
	mov ip, r0
	ldrb r6, [r0]
	cmp r6, #0
	bne _0803E720
	ldrh r1, [r4]
	ldr r0, _0803E710 @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x21
	movs r3, #1
	strb r3, [r0]
	adds r2, r4, #0
	adds r2, #0x22
	movs r0, #3
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #2
	strb r2, [r0]
	ldr r0, _0803E714 @ =0x08357568
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0803E718 @ =0x0000FF80
	strh r1, [r4, #0xa]
	movs r0, #0x80
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r0, ip
	strb r2, [r0]
	ldr r1, _0803E71C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2f
	strb r3, [r0]
	b _0803E750
	.align 2, 0
_0803E70C: .4byte gCurrentSprite
_0803E710: .4byte 0x0000FFFB
_0803E714: .4byte 0x08357568
_0803E718: .4byte 0x0000FF80
_0803E71C: .4byte gSpriteData
_0803E720:
	ldrh r0, [r4, #0x16]
	subs r0, #2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #1
	bls _0803E734
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
_0803E734:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803E750
	movs r2, #0
	movs r0, #0
	strh r0, [r4]
	ldr r1, _0803E758 @ =gSpriteData
	lsls r0, r7, #3
	subs r0, r0, r7
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2f
	strb r2, [r0]
_0803E750:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E758: .4byte gSpriteData

	thumb_func_start MemuInit
MemuInit: @ 0x0803E75C
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0803E788 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803E78C
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803E78C
	strh r0, [r2]
	b _0803E814
	.align 2, 0
_0803E788: .4byte gCurrentSprite
_0803E78C:
	ldr r4, _0803E7FC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r2, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r5, #0
	ldr r1, _0803E800 @ =0x0000FFE0
	strh r1, [r4, #0xa]
	movs r0, #0x20
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _0803E804 @ =0x08357F14
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r2, _0803E808 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl SpriteUtilChooseRandomXDirection
	ldr r0, _0803E80C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #8
	bls _0803E7E6
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
_0803E7E6:
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803E810
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0803E814
	.align 2, 0
_0803E7FC: .4byte gCurrentSprite
_0803E800: .4byte 0x0000FFE0
_0803E804: .4byte 0x08357F14
_0803E808: .4byte sPrimarySpriteStats
_0803E80C: .4byte gSpriteRandomNumber
_0803E810:
	movs r0, #1
	strb r0, [r1]
_0803E814:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MemuIdleInit
MemuIdleInit: @ 0x0803E81C
	ldr r2, _0803E838 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0803E83C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x18
	adds r1, #0xc
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803E838: .4byte gCurrentSprite
_0803E83C: .4byte gSpriteRandomNumber

	thumb_func_start MemuIdle
MemuIdle: @ 0x0803E840
	push {r4, r5, r6, r7, lr}
	ldr r4, _0803E8B8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0803E8B0
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r3, _0803E8BC @ =0x083575B0
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _0803E8C0 @ =0x00007FFF
	cmp r0, r6
	bne _0803E86C
	ldrh r2, [r3]
	movs r1, #0
_0803E86C:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	strh r0, [r4, #2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r3, _0803E8C4 @ =0x08357632
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _0803E890
	ldrh r2, [r3]
	movs r1, #0
_0803E890:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _0803E8B0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_0803E8B0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E8B8: .4byte gCurrentSprite
_0803E8BC: .4byte 0x083575B0
_0803E8C0: .4byte 0x00007FFF
_0803E8C4: .4byte 0x08357632

	thumb_func_start MemuChasingSamusInit
MemuChasingSamusInit: @ 0x0803E8C8
	push {r4, r5, lr}
	ldr r4, _0803E920 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	ldr r0, _0803E924 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	movs r5, #0
	strh r0, [r4, #8]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #0xc
	strh r0, [r4, #0x12]
	ldr r0, _0803E928 @ =0x08357F3C
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r2, [r4, #0x16]
	bl MakeSpriteFaceSamusDirection
	ldrh r2, [r4, #2]
	ldr r1, _0803E92C @ =gSamusData
	movs r3, #0x26
	ldrsh r0, [r1, r3]
	ldrh r1, [r1, #0x18]
	adds r0, r0, r1
	cmp r2, r0
	ble _0803E934
	ldrh r1, [r4]
	ldr r0, _0803E930 @ =0x0000FBFF
	ands r0, r1
	b _0803E93E
	.align 2, 0
_0803E920: .4byte gCurrentSprite
_0803E924: .4byte gSpriteRandomNumber
_0803E928: .4byte 0x08357F3C
_0803E92C: .4byte gSamusData
_0803E930: .4byte 0x0000FBFF
_0803E934:
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
_0803E93E:
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MemuChasingSamus
MemuChasingSamus: @ 0x0803E948
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _0803E9D4 @ =gCurrentSprite
	ldrh r1, [r0, #2]
	mov ip, r1
	ldrh r3, [r0, #4]
	mov r8, r3
	movs r5, #0x18
	adds r0, #0x23
	ldrb r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x17
	bhi _0803EA22
	ldr r0, _0803E9D8 @ =gSpriteData
	mov sb, r0
_0803E96E:
	lsls r2, r4, #3
	subs r0, r2, r4
	lsls r0, r0, #3
	mov r1, sb
	adds r3, r0, r1
	ldrh r1, [r3]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803EA18
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0803EA18
	ldrb r0, [r3, #0x1d]
	cmp r0, #0x70
	bne _0803EA18
	ldrh r7, [r3, #2]
	ldrh r6, [r3, #4]
	mov r0, ip
	adds r1, r0, r5
	subs r0, r7, r5
	cmp r1, r0
	ble _0803EA18
	mov r0, ip
	subs r1, r0, r5
	adds r0, r7, r5
	cmp r1, r0
	bge _0803EA18
	mov r0, r8
	adds r1, r0, r5
	subs r0, r6, r5
	cmp r1, r0
	ble _0803EA18
	mov r0, r8
	subs r1, r0, r5
	adds r0, r6, r5
	cmp r1, r0
	bge _0803EA18
	adds r0, r3, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803EA22
	cmp ip, r7
	bls _0803E9DC
	subs r0, r7, #4
	b _0803E9DE
	.align 2, 0
_0803E9D4: .4byte gCurrentSprite
_0803E9D8: .4byte gSpriteData
_0803E9DC:
	adds r0, r7, #4
_0803E9DE:
	strh r0, [r3, #2]
	cmp r8, r6
	bls _0803E9F0
	subs r1, r2, r4
	lsls r1, r1, #3
	add r1, sb
	ldrh r0, [r1, #4]
	subs r0, #4
	b _0803E9FA
_0803E9F0:
	subs r1, r2, r4
	lsls r1, r1, #3
	add r1, sb
	ldrh r0, [r1, #4]
	adds r0, #4
_0803E9FA:
	strh r0, [r1, #4]
	subs r2, r2, r4
	lsls r2, r2, #3
	add r2, sb
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	eors r1, r0
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	eors r1, r0
	strh r1, [r2]
	b _0803EA22
_0803EA18:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x17
	bls _0803E96E
_0803EA22:
	ldr r4, _0803EA3C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803EA40
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	b _0803EA46
	.align 2, 0
_0803EA3C: .4byte gCurrentSprite
_0803EA40:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
_0803EA46:
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803EA70 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0803EA5A
	ldrh r1, [r4]
	adds r0, r5, #0
	eors r0, r1
	strh r0, [r4]
_0803EA5A:
	ldr r4, _0803EA74 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r5, #0x80
	lsls r5, r5, #3
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0803EA78
	ldrh r0, [r4, #2]
	adds r0, #0x20
	b _0803EA7C
	.align 2, 0
_0803EA70: .4byte gPreviousCollisionCheck
_0803EA74: .4byte gCurrentSprite
_0803EA78:
	ldrh r0, [r4, #2]
	subs r0, #0x20
_0803EA7C:
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803EAE0 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0803EA92
	ldrh r1, [r4]
	adds r0, r5, #0
	eors r0, r1
	strh r0, [r4]
_0803EA92:
	ldr r0, _0803EAE4 @ =gSamusData
	ldrh r1, [r0, #0x18]
	subs r1, #0x48
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	ldrh r6, [r0, #0x16]
	movs r0, #4
	mov r8, r0
	ldr r1, _0803EAE8 @ =gCurrentSprite
	ldrh r4, [r1]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r4
	adds r2, r1, #0
	cmp r0, #0
	beq _0803EB0C
	adds r3, r2, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	cmp r0, #0
	bne _0803EAEC
	ldrh r1, [r2, #4]
	subs r0, r6, #4
	cmp r1, r0
	bgt _0803EB1E
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #3
	bhi _0803EAD4
	adds r0, #1
	strb r0, [r1]
_0803EAD4:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r1, [r2, #4]
	adds r0, r0, r1
	strh r0, [r2, #4]
	b _0803EB60
	.align 2, 0
_0803EAE0: .4byte gPreviousCollisionCheck
_0803EAE4: .4byte gSamusData
_0803EAE8: .4byte gCurrentSprite
_0803EAEC:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0803EB00
	lsrs r0, r0, #0x1a
	ldrh r3, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	b _0803EB60
_0803EB00:
	ldr r0, _0803EB08 @ =0x0000FDFF
	ands r0, r4
	b _0803EB56
	.align 2, 0
_0803EB08: .4byte 0x0000FDFF
_0803EB0C:
	adds r3, r2, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	cmp r0, #0
	bne _0803EB3C
	ldrh r1, [r2, #4]
	adds r0, r6, #4
	cmp r1, r0
	bge _0803EB28
_0803EB1E:
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	strb r0, [r3]
	b _0803EB60
_0803EB28:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #3
	bhi _0803EB36
	adds r0, #1
	strb r0, [r1]
_0803EB36:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _0803EB4A
_0803EB3C:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0803EB52
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_0803EB4A:
	ldrh r0, [r2, #4]
	subs r0, r0, r1
	strh r0, [r2, #4]
	b _0803EB60
_0803EB52:
	adds r0, r5, #0
	orrs r0, r4
_0803EB56:
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
_0803EB60:
	ldrh r1, [r2]
	movs r4, #0x80
	lsls r4, r4, #3
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0803EBBC
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _0803EB9A
	ldrh r1, [r2, #2]
	subs r0, r7, #4
	cmp r1, r0
	bgt _0803EBCE
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r8
	bhs _0803EB8E
	adds r0, #1
	strb r0, [r1]
_0803EB8E:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r1, [r2, #2]
	adds r0, r0, r1
	strh r0, [r2, #2]
	b _0803EC12
_0803EB9A:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0803EBAE
	lsrs r0, r0, #0x1a
	ldrh r3, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	b _0803EC12
_0803EBAE:
	ldrh r0, [r2]
	ldr r1, _0803EBB8 @ =0x0000FBFF
	ands r1, r0
	b _0803EC08
	.align 2, 0
_0803EBB8: .4byte 0x0000FBFF
_0803EBBC:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _0803EBEC
	ldrh r1, [r2, #2]
	adds r0, r7, #4
	cmp r1, r0
	bge _0803EBD8
_0803EBCE:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r3]
	b _0803EC12
_0803EBD8:
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r8
	bhs _0803EBE6
	adds r0, #1
	strb r0, [r1]
_0803EBE6:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _0803EBFA
_0803EBEC:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0803EC02
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_0803EBFA:
	ldrh r0, [r2, #2]
	subs r0, r0, r1
	strh r0, [r2, #2]
	b _0803EC12
_0803EC02:
	ldrh r0, [r2]
	adds r1, r4, #0
	orrs r1, r0
_0803EC08:
	strh r1, [r2]
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
_0803EC12:
	ldrh r0, [r2, #0x12]
	subs r0, #1
	strh r0, [r2, #0x12]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0803EC32
	movs r0, #0xc
	strh r0, [r2, #0x12]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803EC32
	ldr r0, _0803EC40 @ =0x0000019B
	bl CheckPlayNotAlreadyPlayingSound
_0803EC32:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803EC40: .4byte 0x0000019B

	thumb_func_start Memu
Memu: @ 0x0803EC44
	push {r4, lr}
	ldr r4, _0803EC70 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803EC5E
	movs r0, #0xce
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803EC5E:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803EC74
	bl SpriteUpdateFreezeTimer
	b _0803EE34
	.align 2, 0
_0803EC70: .4byte gCurrentSprite
_0803EC74:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803EC80
	b _0803EE34
_0803EC80:
	lsls r0, r0, #2
	ldr r1, _0803EC8C @ =_0803EC90
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803EC8C: .4byte _0803EC90
_0803EC90: @ jump table
	.4byte _0803EE00 @ case 0
	.4byte _0803EE06 @ case 1
	.4byte _0803EE0C @ case 2
	.4byte _0803EE34 @ case 3
	.4byte _0803EE34 @ case 4
	.4byte _0803EE34 @ case 5
	.4byte _0803EE34 @ case 6
	.4byte _0803EE34 @ case 7
	.4byte _0803EE34 @ case 8
	.4byte _0803EE34 @ case 9
	.4byte _0803EE34 @ case 10
	.4byte _0803EE34 @ case 11
	.4byte _0803EE34 @ case 12
	.4byte _0803EE34 @ case 13
	.4byte _0803EE34 @ case 14
	.4byte _0803EE34 @ case 15
	.4byte _0803EE34 @ case 16
	.4byte _0803EE34 @ case 17
	.4byte _0803EE34 @ case 18
	.4byte _0803EE34 @ case 19
	.4byte _0803EE34 @ case 20
	.4byte _0803EE34 @ case 21
	.4byte _0803EE34 @ case 22
	.4byte _0803EE12 @ case 23
	.4byte _0803EE16 @ case 24
	.4byte _0803EE34 @ case 25
	.4byte _0803EE34 @ case 26
	.4byte _0803EE34 @ case 27
	.4byte _0803EE34 @ case 28
	.4byte _0803EE34 @ case 29
	.4byte _0803EE34 @ case 30
	.4byte _0803EE34 @ case 31
	.4byte _0803EE34 @ case 32
	.4byte _0803EE34 @ case 33
	.4byte _0803EE34 @ case 34
	.4byte _0803EE34 @ case 35
	.4byte _0803EE34 @ case 36
	.4byte _0803EE34 @ case 37
	.4byte _0803EE34 @ case 38
	.4byte _0803EE34 @ case 39
	.4byte _0803EE34 @ case 40
	.4byte _0803EE34 @ case 41
	.4byte _0803EE34 @ case 42
	.4byte _0803EE34 @ case 43
	.4byte _0803EE34 @ case 44
	.4byte _0803EE34 @ case 45
	.4byte _0803EE34 @ case 46
	.4byte _0803EE34 @ case 47
	.4byte _0803EE34 @ case 48
	.4byte _0803EE34 @ case 49
	.4byte _0803EE34 @ case 50
	.4byte _0803EE34 @ case 51
	.4byte _0803EE34 @ case 52
	.4byte _0803EE34 @ case 53
	.4byte _0803EE34 @ case 54
	.4byte _0803EE34 @ case 55
	.4byte _0803EE34 @ case 56
	.4byte _0803EE34 @ case 57
	.4byte _0803EE34 @ case 58
	.4byte _0803EE34 @ case 59
	.4byte _0803EE34 @ case 60
	.4byte _0803EE34 @ case 61
	.4byte _0803EE34 @ case 62
	.4byte _0803EE34 @ case 63
	.4byte _0803EE34 @ case 64
	.4byte _0803EE34 @ case 65
	.4byte _0803EE34 @ case 66
	.4byte _0803EE34 @ case 67
	.4byte _0803EE34 @ case 68
	.4byte _0803EE34 @ case 69
	.4byte _0803EE34 @ case 70
	.4byte _0803EE34 @ case 71
	.4byte _0803EE34 @ case 72
	.4byte _0803EE34 @ case 73
	.4byte _0803EE34 @ case 74
	.4byte _0803EE34 @ case 75
	.4byte _0803EE34 @ case 76
	.4byte _0803EE34 @ case 77
	.4byte _0803EE34 @ case 78
	.4byte _0803EE34 @ case 79
	.4byte _0803EE34 @ case 80
	.4byte _0803EE34 @ case 81
	.4byte _0803EE34 @ case 82
	.4byte _0803EE34 @ case 83
	.4byte _0803EE34 @ case 84
	.4byte _0803EE34 @ case 85
	.4byte _0803EE34 @ case 86
	.4byte _0803EE1C @ case 87
	.4byte _0803EE20 @ case 88
	.4byte _0803EE26 @ case 89
	.4byte _0803EE2A @ case 90
	.4byte _0803EE30 @ case 91
_0803EE00:
	bl MemuInit
	b _0803EE34
_0803EE06:
	bl MemuIdleInit
	b _0803EE34
_0803EE0C:
	bl MemuIdle
	b _0803EE34
_0803EE12:
	bl MemuChasingSamusInit
_0803EE16:
	bl MemuChasingSamus
	b _0803EE34
_0803EE1C:
	bl SpriteDyingInit
_0803EE20:
	bl SpriteDying
	b _0803EE34
_0803EE26:
	bl MemuInit
_0803EE2A:
	bl SpriteSpawningFromX
	b _0803EE34
_0803EE30:
	bl XParasiteInit
_0803EE34:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GerubossYMovement
GerubossYMovement: @ 0x0803EE3C
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r7, r6, #0
	ldr r4, _0803EE80 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0803EE88
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803EE84 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803EEAE
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803EEAE
	ldrh r0, [r4, #2]
	adds r0, r6, r0
	b _0803EEBC
	.align 2, 0
_0803EE80: .4byte gCurrentSprite
_0803EE84: .4byte gPreviousCollisionCheck
_0803EE88:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803EEB4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803EEAE
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803EEB8
_0803EEAE:
	movs r0, #1
	b _0803EEC0
	.align 2, 0
_0803EEB4: .4byte gPreviousCollisionCheck
_0803EEB8:
	ldrh r0, [r4, #2]
	subs r0, r0, r7
_0803EEBC:
	strh r0, [r4, #2]
	movs r0, #0
_0803EEC0:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start GerubossXMovement
GerubossXMovement: @ 0x0803EEC8
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r7, r6, #0
	ldr r4, _0803EF0C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803EF14
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803EF10 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803EF3A
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803EF3A
	ldrh r0, [r4, #4]
	adds r0, r6, r0
	b _0803EF48
	.align 2, 0
_0803EF0C: .4byte gCurrentSprite
_0803EF10: .4byte gPreviousCollisionCheck
_0803EF14:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803EF40 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803EF3A
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803EF44
_0803EF3A:
	movs r0, #1
	b _0803EF4C
	.align 2, 0
_0803EF40: .4byte gPreviousCollisionCheck
_0803EF44:
	ldrh r0, [r4, #4]
	subs r0, r0, r7
_0803EF48:
	strh r0, [r4, #4]
	movs r0, #0
_0803EF4C:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start GerubossTurningIntoX
GerubossTurningIntoX: @ 0x0803EF54
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _0803EF94 @ =gCurrentSprite
	ldrb r1, [r4, #0x1d]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #8
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0x24
	str r0, [sp, #8]
	movs r0, #0x40
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r4, #2]
	adds r0, #8
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x24
	strh r0, [r4, #4]
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803EF94: .4byte gCurrentSprite

	thumb_func_start GerubossInit
GerubossInit: @ 0x0803EF98
	push {lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0803EFC4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803EFC8
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803EFC8
	strh r0, [r2]
	b _0803F05A
	.align 2, 0
_0803EFC4: .4byte gCurrentSprite
_0803EFC8:
	bl MakeSpriteFaceSamusDirection
	ldr r3, _0803F038 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x27
	movs r2, #0
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _0803F03C @ =0x0000FFE0
	strh r0, [r3, #0xa]
	movs r0, #0x30
	strh r0, [r3, #0xc]
	ldr r0, _0803F040 @ =0x0000FFC8
	strh r0, [r3, #0xe]
	movs r0, #0x38
	strh r0, [r3, #0x10]
	ldr r0, _0803F044 @ =0x08358E14
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0803F048 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r2, _0803F04C @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803F050
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r3, #6]
	b _0803F05A
	.align 2, 0
_0803F038: .4byte gCurrentSprite
_0803F03C: .4byte 0x0000FFE0
_0803F040: .4byte 0x0000FFC8
_0803F044: .4byte 0x08358E14
_0803F048: .4byte gIoRegisters
_0803F04C: .4byte sPrimarySpriteStats
_0803F050:
	ldrh r0, [r3, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	movs r0, #1
	strb r0, [r1]
_0803F05A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GerubossIdleInit
GerubossIdleInit: @ 0x0803F060
	ldr r0, _0803F07C @ =gCurrentSprite
	adds r3, r0, #0
	adds r3, #0x24
	movs r2, #0
	movs r1, #2
	strb r1, [r3]
	strb r2, [r0, #0x1c]
	strh r2, [r0, #0x16]
	ldr r1, _0803F080 @ =0x08358E14
	str r1, [r0, #0x18]
	adds r0, #0x2e
	movs r1, #0x30
	strb r1, [r0]
	bx lr
	.align 2, 0
_0803F07C: .4byte gCurrentSprite
_0803F080: .4byte 0x08358E14

	thumb_func_start GerubossIdle
GerubossIdle: @ 0x0803F084
	push {r4, r5, lr}
	ldr r4, _0803F0C0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0803F154
	ldrh r0, [r4, #2]
	subs r0, #0x24
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803F0C4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803F0C8
	ldrh r0, [r4, #2]
	subs r0, #0x24
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803F0C8
	bl MakeSpriteFaceSamusDirection
	b _0803F14C
	.align 2, 0
_0803F0C0: .4byte gCurrentSprite
_0803F0C4: .4byte gPreviousCollisionCheck
_0803F0C8:
	ldr r4, _0803F0FC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0
	beq _0803F104
	adds r2, r4, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #8
	strb r0, [r2]
	strb r1, [r4, #0x1c]
	strh r1, [r4, #0x16]
	ldr r0, _0803F100 @ =0x08358DF4
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0xd0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0803F154
	.align 2, 0
_0803F0FC: .4byte gCurrentSprite
_0803F100: .4byte 0x08358DF4
_0803F104:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803F112
	subs r0, #1
	b _0803F152
_0803F112:
	ldr r0, _0803F13C @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #0x48
	ldrh r1, [r4, #2]
	cmp r0, r1
	blt _0803F154
	movs r5, #0x80
	lsls r5, r5, #2
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r5, #0
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bne _0803F140
	ldrh r1, [r4]
	adds r0, r5, #0
	orrs r0, r1
	b _0803F14A
	.align 2, 0
_0803F13C: .4byte gSamusData
_0803F140:
	cmp r0, #4
	bne _0803F154
	ldrh r1, [r4]
	ldr r0, _0803F15C @ =0x0000FDFF
	ands r0, r1
_0803F14A:
	strh r0, [r4]
_0803F14C:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
_0803F152:
	strb r0, [r1]
_0803F154:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803F15C: .4byte 0x0000FDFF

	thumb_func_start GerubossStalling
GerubossStalling: @ 0x0803F160
	push {lr}
	ldr r1, _0803F180 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803F17A
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_0803F17A:
	pop {r0}
	bx r0
	.align 2, 0
_0803F180: .4byte gCurrentSprite

	thumb_func_start GerubossLaunchingInit
GerubossLaunchingInit: @ 0x0803F184
	push {lr}
	ldr r1, _0803F1A4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803F1A8 @ =0x08358E3C
	str r0, [r1, #0x18]
	ldr r0, _0803F1AC @ =0x0000019D
	bl CheckPlayNotAlreadyPlayingSound
	pop {r0}
	bx r0
	.align 2, 0
_0803F1A4: .4byte gCurrentSprite
_0803F1A8: .4byte 0x08358E3C
_0803F1AC: .4byte 0x0000019D

	thumb_func_start GerubossCharging
GerubossCharging: @ 0x0803F1B0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803F1E8
	ldr r1, _0803F1EC @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x2c
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803F1F0 @ =0x08358E6C
	str r0, [r1, #0x18]
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r1]
	adds r1, #0x2e
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #0xcf
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803F1E8:
	pop {r0}
	bx r0
	.align 2, 0
_0803F1EC: .4byte gCurrentSprite
_0803F1F0: .4byte 0x08358E6C

	thumb_func_start GerubossGoingDown
GerubossGoingDown: @ 0x0803F1F4
	push {r4, lr}
	ldr r2, _0803F220 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803F228
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0803F242
	strb r1, [r2, #0x1c]
	movs r0, #0
	strh r1, [r2, #0x16]
	ldr r1, _0803F224 @ =0x08358E8C
	str r1, [r2, #0x18]
	adds r1, r2, #0
	adds r1, #0x2f
	strb r0, [r1]
	b _0803F242
	.align 2, 0
_0803F220: .4byte gCurrentSprite
_0803F224: .4byte 0x08358E8C
_0803F228:
	adds r4, r2, #0
	adds r4, #0x2f
	ldrb r1, [r4]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0803F23C
	ldr r0, _0803F270 @ =0x0000019F
	bl SoundPlay
_0803F23C:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_0803F242:
	movs r0, #2
	bl GerubossXMovement
	movs r0, #0xc
	bl GerubossYMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803F268
	ldr r1, _0803F274 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x2e
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803F278 @ =0x08358EEC
	str r0, [r1, #0x18]
_0803F268:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F270: .4byte 0x0000019F
_0803F274: .4byte gCurrentSprite
_0803F278: .4byte 0x08358EEC

	thumb_func_start GerubossChagningDirection
GerubossChagningDirection: @ 0x0803F27C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803F2B0
	ldr r1, _0803F2B4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x30
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803F2B8 @ =0x08358EAC
	str r0, [r1, #0x18]
	ldrh r2, [r1]
	ldr r0, _0803F2BC @ =0x0000F7FF
	ands r0, r2
	strh r0, [r1]
	adds r1, #0x2e
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #0xcf
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803F2B0:
	pop {r0}
	bx r0
	.align 2, 0
_0803F2B4: .4byte gCurrentSprite
_0803F2B8: .4byte 0x08358EAC
_0803F2BC: .4byte 0x0000F7FF

	thumb_func_start GerubossGoingUp
GerubossGoingUp: @ 0x0803F2C0
	push {r4, lr}
	ldr r2, _0803F2EC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803F2F4
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0803F30E
	strb r1, [r2, #0x1c]
	movs r0, #0
	strh r1, [r2, #0x16]
	ldr r1, _0803F2F0 @ =0x08358ECC
	str r1, [r2, #0x18]
	adds r1, r2, #0
	adds r1, #0x2f
	strb r0, [r1]
	b _0803F30E
	.align 2, 0
_0803F2EC: .4byte gCurrentSprite
_0803F2F0: .4byte 0x08358ECC
_0803F2F4:
	adds r4, r2, #0
	adds r4, #0x2f
	ldrb r1, [r4]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0803F308
	ldr r0, _0803F33C @ =0x0000019F
	bl SoundPlay
_0803F308:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_0803F30E:
	movs r0, #2
	bl GerubossXMovement
	movs r0, #0xc
	bl GerubossYMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803F334
	ldr r1, _0803F340 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x32
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803F344 @ =0x08358F3C
	str r0, [r1, #0x18]
_0803F334:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F33C: .4byte 0x0000019F
_0803F340: .4byte gCurrentSprite
_0803F344: .4byte 0x08358F3C

	thumb_func_start GerubossGrabbingCeiling
GerubossGrabbingCeiling: @ 0x0803F348
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803F35A
	ldr r0, _0803F360 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0803F35A:
	pop {r0}
	bx r0
	.align 2, 0
_0803F360: .4byte gCurrentSprite

	thumb_func_start Geruboss
Geruboss: @ 0x0803F364
	push {r4, lr}
	ldr r4, _0803F38C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803F37C
	ldr r0, _0803F390 @ =0x000001A1
	bl CheckPlayNotAlreadyPlayingSound
_0803F37C:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803F394
	bl SpriteUpdateFreezeTimer
	b _0803F574
	.align 2, 0
_0803F38C: .4byte gCurrentSprite
_0803F390: .4byte 0x000001A1
_0803F394:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803F3A0
	b _0803F574
_0803F3A0:
	lsls r0, r0, #2
	ldr r1, _0803F3AC @ =_0803F3B0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803F3AC: .4byte _0803F3B0
_0803F3B0: @ jump table
	.4byte _0803F520 @ case 0
	.4byte _0803F526 @ case 1
	.4byte _0803F52A @ case 2
	.4byte _0803F574 @ case 3
	.4byte _0803F574 @ case 4
	.4byte _0803F574 @ case 5
	.4byte _0803F574 @ case 6
	.4byte _0803F574 @ case 7
	.4byte _0803F530 @ case 8
	.4byte _0803F574 @ case 9
	.4byte _0803F574 @ case 10
	.4byte _0803F574 @ case 11
	.4byte _0803F574 @ case 12
	.4byte _0803F574 @ case 13
	.4byte _0803F574 @ case 14
	.4byte _0803F574 @ case 15
	.4byte _0803F574 @ case 16
	.4byte _0803F574 @ case 17
	.4byte _0803F574 @ case 18
	.4byte _0803F574 @ case 19
	.4byte _0803F574 @ case 20
	.4byte _0803F574 @ case 21
	.4byte _0803F574 @ case 22
	.4byte _0803F574 @ case 23
	.4byte _0803F574 @ case 24
	.4byte _0803F574 @ case 25
	.4byte _0803F574 @ case 26
	.4byte _0803F574 @ case 27
	.4byte _0803F574 @ case 28
	.4byte _0803F574 @ case 29
	.4byte _0803F574 @ case 30
	.4byte _0803F574 @ case 31
	.4byte _0803F574 @ case 32
	.4byte _0803F574 @ case 33
	.4byte _0803F574 @ case 34
	.4byte _0803F574 @ case 35
	.4byte _0803F574 @ case 36
	.4byte _0803F574 @ case 37
	.4byte _0803F574 @ case 38
	.4byte _0803F574 @ case 39
	.4byte _0803F574 @ case 40
	.4byte _0803F536 @ case 41
	.4byte _0803F53A @ case 42
	.4byte _0803F574 @ case 43
	.4byte _0803F540 @ case 44
	.4byte _0803F574 @ case 45
	.4byte _0803F546 @ case 46
	.4byte _0803F574 @ case 47
	.4byte _0803F54C @ case 48
	.4byte _0803F574 @ case 49
	.4byte _0803F552 @ case 50
	.4byte _0803F574 @ case 51
	.4byte _0803F574 @ case 52
	.4byte _0803F574 @ case 53
	.4byte _0803F574 @ case 54
	.4byte _0803F574 @ case 55
	.4byte _0803F574 @ case 56
	.4byte _0803F574 @ case 57
	.4byte _0803F574 @ case 58
	.4byte _0803F574 @ case 59
	.4byte _0803F574 @ case 60
	.4byte _0803F574 @ case 61
	.4byte _0803F574 @ case 62
	.4byte _0803F574 @ case 63
	.4byte _0803F574 @ case 64
	.4byte _0803F574 @ case 65
	.4byte _0803F574 @ case 66
	.4byte _0803F574 @ case 67
	.4byte _0803F574 @ case 68
	.4byte _0803F574 @ case 69
	.4byte _0803F574 @ case 70
	.4byte _0803F574 @ case 71
	.4byte _0803F574 @ case 72
	.4byte _0803F574 @ case 73
	.4byte _0803F574 @ case 74
	.4byte _0803F574 @ case 75
	.4byte _0803F574 @ case 76
	.4byte _0803F574 @ case 77
	.4byte _0803F574 @ case 78
	.4byte _0803F574 @ case 79
	.4byte _0803F574 @ case 80
	.4byte _0803F574 @ case 81
	.4byte _0803F574 @ case 82
	.4byte _0803F574 @ case 83
	.4byte _0803F574 @ case 84
	.4byte _0803F574 @ case 85
	.4byte _0803F574 @ case 86
	.4byte _0803F558 @ case 87
	.4byte _0803F55C @ case 88
	.4byte _0803F562 @ case 89
	.4byte _0803F566 @ case 90
	.4byte _0803F56C @ case 91
_0803F520:
	bl GerubossInit
	b _0803F574
_0803F526:
	bl GerubossIdleInit
_0803F52A:
	bl GerubossIdle
	b _0803F574
_0803F530:
	bl GerubossStalling
	b _0803F574
_0803F536:
	bl GerubossLaunchingInit
_0803F53A:
	bl GerubossCharging
	b _0803F574
_0803F540:
	bl GerubossGoingDown
	b _0803F574
_0803F546:
	bl GerubossChagningDirection
	b _0803F574
_0803F54C:
	bl GerubossGoingUp
	b _0803F574
_0803F552:
	bl GerubossGrabbingCeiling
	b _0803F574
_0803F558:
	bl SpriteDyingInit
_0803F55C:
	bl SpriteDying
	b _0803F574
_0803F562:
	bl GerubossInit
_0803F566:
	bl SpriteSpawningFromX
	b _0803F574
_0803F56C:
	bl GerubossTurningIntoX
	bl XParasiteInit
_0803F574:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ChootSetOpenHitbox
ChootSetOpenHitbox: @ 0x0803F57C
	ldr r1, _0803F590 @ =gCurrentSprite
	ldr r0, _0803F594 @ =0x0000FFE0
	strh r0, [r1, #0xa]
	movs r0, #4
	strh r0, [r1, #0xc]
	ldr r0, _0803F598 @ =0x0000FFC4
	strh r0, [r1, #0xe]
	movs r0, #0x3c
	strh r0, [r1, #0x10]
	bx lr
	.align 2, 0
_0803F590: .4byte gCurrentSprite
_0803F594: .4byte 0x0000FFE0
_0803F598: .4byte 0x0000FFC4

	thumb_func_start ChootSetClosedHitbox
ChootSetClosedHitbox: @ 0x0803F59C
	ldr r1, _0803F5B0 @ =gCurrentSprite
	ldr r0, _0803F5B4 @ =0x0000FFD0
	strh r0, [r1, #0xa]
	movs r0, #0xc
	strh r0, [r1, #0xc]
	ldr r0, _0803F5B8 @ =0x0000FFE0
	strh r0, [r1, #0xe]
	movs r0, #0x20
	strh r0, [r1, #0x10]
	bx lr
	.align 2, 0
_0803F5B0: .4byte gCurrentSprite
_0803F5B4: .4byte 0x0000FFD0
_0803F5B8: .4byte 0x0000FFE0

	thumb_func_start ChootInit
ChootInit: @ 0x0803F5BC
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0803F5E8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803F5EC
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803F5EC
	strh r0, [r2]
	b _0803F650
	.align 2, 0
_0803F5E8: .4byte gCurrentSprite
_0803F5EC:
	bl MakeSpriteFaceSamusXFlip
	ldr r5, _0803F640 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x27
	movs r4, #0
	movs r2, #0x10
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x28
	movs r0, #8
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x29
	strb r2, [r0]
	bl ChootSetOpenHitbox
	ldr r0, _0803F644 @ =0x083598FC
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	ldr r2, _0803F648 @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803F64C
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r5, #6]
	b _0803F650
	.align 2, 0
_0803F640: .4byte gCurrentSprite
_0803F644: .4byte 0x083598FC
_0803F648: .4byte sPrimarySpriteStats
_0803F64C:
	movs r0, #1
	strb r0, [r1]
_0803F650:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ChootIdleInit
ChootIdleInit: @ 0x0803F658
	ldr r1, _0803F670 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0803F674 @ =0x083598FC
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0803F670: .4byte gCurrentSprite
_0803F674: .4byte 0x083598FC

	thumb_func_start ChootIdle
ChootIdle: @ 0x0803F678
	push {r4, r5, lr}
	ldr r4, _0803F6D8 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0803F6D2
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803F6DC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803F6AA
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803F6CA
_0803F6AA:
	ldr r0, _0803F6E0 @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #0x48
	ldr r4, _0803F6D8 @ =gCurrentSprite
	ldrh r1, [r4, #2]
	cmp r0, r1
	bgt _0803F6D2
	movs r0, #0xa0
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803F6D2
_0803F6CA:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
_0803F6D2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803F6D8: .4byte gCurrentSprite
_0803F6DC: .4byte gPreviousCollisionCheck
_0803F6E0: .4byte gSamusData

	thumb_func_start ChootLaunchingInit
ChootLaunchingInit: @ 0x0803F6E4
	ldr r1, _0803F6F8 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r0, _0803F6FC @ =0x0835990C
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803F6F8: .4byte gCurrentSprite
_0803F6FC: .4byte 0x0835990C

	thumb_func_start ChootLaunching
ChootLaunching: @ 0x0803F700
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803F712
	ldr r0, _0803F718 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2b
	strb r1, [r0]
_0803F712:
	pop {r0}
	bx r0
	.align 2, 0
_0803F718: .4byte gCurrentSprite

	thumb_func_start ChootGoingUpInit
ChootGoingUpInit: @ 0x0803F71C
	push {r4, lr}
	ldr r4, _0803F758 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r4, #0x1c]
	movs r2, #0
	strh r0, [r4, #0x16]
	ldr r0, _0803F75C @ =0x08359924
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	strb r2, [r0]
	bl ChootSetClosedHitbox
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803F750
	movs r0, #0xd1
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803F750:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F758: .4byte gCurrentSprite
_0803F75C: .4byte 0x08359924

	thumb_func_start ShootGoingUp
ShootGoingUp: @ 0x0803F760
	push {r4, r5, r6, lr}
	ldr r4, _0803F7AC @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803F7B0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803F7A2
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _0803F7A2
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r1, _0803F7B4 @ =0x08358F64
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0803F7B8 @ =0x00007FFF
	cmp r1, r0
	bne _0803F7BC
_0803F7A2:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2d
	strb r0, [r1]
	b _0803F7C6
	.align 2, 0
_0803F7AC: .4byte gCurrentSprite
_0803F7B0: .4byte gPreviousCollisionCheck
_0803F7B4: .4byte 0x08358F64
_0803F7B8: .4byte 0x00007FFF
_0803F7BC:
	adds r0, r2, #1
	strb r0, [r5]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
	strh r0, [r4, #2]
_0803F7C6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start ChootOpeningInit
ChootOpeningInit: @ 0x0803F7CC
	push {lr}
	ldr r1, _0803F7E8 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r0, _0803F7EC @ =0x08359934
	str r0, [r1, #0x18]
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
	bl ChootSetOpenHitbox
	pop {r0}
	bx r0
	.align 2, 0
_0803F7E8: .4byte gCurrentSprite
_0803F7EC: .4byte 0x08359934

	thumb_func_start ChootOpening
ChootOpening: @ 0x0803F7F0
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803F802
	ldr r0, _0803F808 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2f
	strb r1, [r0]
_0803F802:
	pop {r0}
	bx r0
	.align 2, 0
_0803F808: .4byte gCurrentSprite

	thumb_func_start ChootGoingDownInit
ChootGoingDownInit: @ 0x0803F80C
	ldr r0, _0803F828 @ =gCurrentSprite
	movs r1, #0
	strb r1, [r0, #0x1c]
	movs r3, #0
	strh r1, [r0, #0x16]
	ldr r1, _0803F82C @ =0x0835995C
	str r1, [r0, #0x18]
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x30
	strb r1, [r2]
	adds r0, #0x2e
	strb r3, [r0]
	bx lr
	.align 2, 0
_0803F828: .4byte gCurrentSprite
_0803F82C: .4byte 0x0835995C

	thumb_func_start ChootGoingDown
ChootGoingDown: @ 0x0803F830
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r4, _0803F850 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803F854 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803F858
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	b _0803F8B8
	.align 2, 0
_0803F850: .4byte gCurrentSprite
_0803F854: .4byte gPreviousCollisionCheck
_0803F858:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _0803F870
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	b _0803F8B8
_0803F870:
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	movs r1, #0x3f
	ands r1, r0
	cmp r1, #0
	bne _0803F8B0
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x3e
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803F8B0
	ldr r0, _0803F8C4 @ =0x000001A3
	bl CheckPlayNotAlreadyPlayingSound
_0803F8B0:
	ldr r1, _0803F8C8 @ =gCurrentSprite
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
_0803F8B8:
	strb r0, [r1]
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803F8C4: .4byte 0x000001A3
_0803F8C8: .4byte gCurrentSprite

	thumb_func_start ChootSpitInit
ChootSpitInit: @ 0x0803F8CC
	push {r4, lr}
	ldr r0, _0803F934 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0803F938 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0803F93C @ =0x0000FFE0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r4, [r2, #0xc]
	adds r0, #0x10
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	mov r1, ip
	adds r1, #0x25
	movs r0, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r0, _0803F940 @ =0x08359984
	str r0, [r2, #0x18]
	adds r1, #0xc
	movs r0, #8
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F934: .4byte gCurrentSprite
_0803F938: .4byte 0x0000FFFB
_0803F93C: .4byte 0x0000FFE0
_0803F940: .4byte 0x08359984

	thumb_func_start ChootSpitSpawning
ChootSpitSpawning: @ 0x0803F944
	push {lr}
	ldr r2, _0803F97C @ =gCurrentSprite
	ldrh r0, [r2, #2]
	adds r0, #1
	movs r3, #0
	strh r0, [r2, #2]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0803F976
	strb r3, [r2, #0x1c]
	strh r0, [r2, #0x16]
	ldr r0, _0803F980 @ =0x08359994
	str r0, [r2, #0x18]
	subs r1, #0xa
	movs r0, #0x16
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r3, [r0]
_0803F976:
	pop {r0}
	bx r0
	.align 2, 0
_0803F97C: .4byte gCurrentSprite
_0803F980: .4byte 0x08359994

	thumb_func_start ChootSpitExplodingInit
ChootSpitExplodingInit: @ 0x0803F984
	push {r4, lr}
	ldr r4, _0803F9A4 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0803F9A8 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _0803F9B0
	ldr r0, _0803F9AC @ =0x083599CC
	b _0803F9B2
	.align 2, 0
_0803F9A4: .4byte gCurrentSprite
_0803F9A8: .4byte gPreviousCollisionCheck
_0803F9AC: .4byte 0x083599CC
_0803F9B0:
	ldr r0, _0803F9C8 @ =0x083599A4
_0803F9B2:
	str r0, [r4, #0x18]
	ldr r0, _0803F9CC @ =gCurrentSprite
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F9C8: .4byte 0x083599A4
_0803F9CC: .4byte gCurrentSprite

	thumb_func_start ChootSpitExploding
ChootSpitExploding: @ 0x0803F9D0
	push {r4, lr}
	ldr r4, _0803F9F0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0803F9E8
	movs r0, #0
	strh r0, [r4]
_0803F9E8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F9F0: .4byte gCurrentSprite

	thumb_func_start Choot
Choot: @ 0x0803F9F4
	push {r4, lr}
	ldr r4, _0803FA20 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0803FA0E
	movs r0, #0xd2
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0803FA0E:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803FA24
	bl SpriteUpdateFreezeTimer
	b _0803FC00
	.align 2, 0
_0803FA20: .4byte gCurrentSprite
_0803FA24:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0803FA30
	b _0803FC00
_0803FA30:
	lsls r0, r0, #2
	ldr r1, _0803FA3C @ =_0803FA40
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803FA3C: .4byte _0803FA40
_0803FA40: @ jump table
	.4byte _0803FBB0 @ case 0
	.4byte _0803FBB6 @ case 1
	.4byte _0803FBBA @ case 2
	.4byte _0803FC00 @ case 3
	.4byte _0803FC00 @ case 4
	.4byte _0803FC00 @ case 5
	.4byte _0803FC00 @ case 6
	.4byte _0803FC00 @ case 7
	.4byte _0803FC00 @ case 8
	.4byte _0803FC00 @ case 9
	.4byte _0803FC00 @ case 10
	.4byte _0803FC00 @ case 11
	.4byte _0803FC00 @ case 12
	.4byte _0803FC00 @ case 13
	.4byte _0803FC00 @ case 14
	.4byte _0803FC00 @ case 15
	.4byte _0803FC00 @ case 16
	.4byte _0803FC00 @ case 17
	.4byte _0803FC00 @ case 18
	.4byte _0803FC00 @ case 19
	.4byte _0803FC00 @ case 20
	.4byte _0803FC00 @ case 21
	.4byte _0803FC00 @ case 22
	.4byte _0803FC00 @ case 23
	.4byte _0803FC00 @ case 24
	.4byte _0803FC00 @ case 25
	.4byte _0803FC00 @ case 26
	.4byte _0803FC00 @ case 27
	.4byte _0803FC00 @ case 28
	.4byte _0803FC00 @ case 29
	.4byte _0803FC00 @ case 30
	.4byte _0803FC00 @ case 31
	.4byte _0803FC00 @ case 32
	.4byte _0803FC00 @ case 33
	.4byte _0803FC00 @ case 34
	.4byte _0803FC00 @ case 35
	.4byte _0803FC00 @ case 36
	.4byte _0803FC00 @ case 37
	.4byte _0803FC00 @ case 38
	.4byte _0803FC00 @ case 39
	.4byte _0803FC00 @ case 40
	.4byte _0803FBC0 @ case 41
	.4byte _0803FBC4 @ case 42
	.4byte _0803FBCA @ case 43
	.4byte _0803FBCE @ case 44
	.4byte _0803FBD4 @ case 45
	.4byte _0803FBD8 @ case 46
	.4byte _0803FBDE @ case 47
	.4byte _0803FBE2 @ case 48
	.4byte _0803FC00 @ case 49
	.4byte _0803FC00 @ case 50
	.4byte _0803FC00 @ case 51
	.4byte _0803FC00 @ case 52
	.4byte _0803FC00 @ case 53
	.4byte _0803FC00 @ case 54
	.4byte _0803FC00 @ case 55
	.4byte _0803FC00 @ case 56
	.4byte _0803FC00 @ case 57
	.4byte _0803FC00 @ case 58
	.4byte _0803FC00 @ case 59
	.4byte _0803FC00 @ case 60
	.4byte _0803FC00 @ case 61
	.4byte _0803FC00 @ case 62
	.4byte _0803FC00 @ case 63
	.4byte _0803FC00 @ case 64
	.4byte _0803FC00 @ case 65
	.4byte _0803FC00 @ case 66
	.4byte _0803FC00 @ case 67
	.4byte _0803FC00 @ case 68
	.4byte _0803FC00 @ case 69
	.4byte _0803FC00 @ case 70
	.4byte _0803FC00 @ case 71
	.4byte _0803FC00 @ case 72
	.4byte _0803FC00 @ case 73
	.4byte _0803FC00 @ case 74
	.4byte _0803FC00 @ case 75
	.4byte _0803FC00 @ case 76
	.4byte _0803FC00 @ case 77
	.4byte _0803FC00 @ case 78
	.4byte _0803FC00 @ case 79
	.4byte _0803FC00 @ case 80
	.4byte _0803FC00 @ case 81
	.4byte _0803FC00 @ case 82
	.4byte _0803FC00 @ case 83
	.4byte _0803FC00 @ case 84
	.4byte _0803FC00 @ case 85
	.4byte _0803FC00 @ case 86
	.4byte _0803FBE8 @ case 87
	.4byte _0803FBEC @ case 88
	.4byte _0803FBF2 @ case 89
	.4byte _0803FBF6 @ case 90
	.4byte _0803FBFC @ case 91
_0803FBB0:
	bl ChootInit
	b _0803FC00
_0803FBB6:
	bl ChootIdleInit
_0803FBBA:
	bl ChootIdle
	b _0803FC00
_0803FBC0:
	bl ChootLaunchingInit
_0803FBC4:
	bl ChootLaunching
	b _0803FC00
_0803FBCA:
	bl ChootGoingUpInit
_0803FBCE:
	bl ShootGoingUp
	b _0803FC00
_0803FBD4:
	bl ChootOpeningInit
_0803FBD8:
	bl ChootOpening
	b _0803FC00
_0803FBDE:
	bl ChootGoingDownInit
_0803FBE2:
	bl ChootGoingDown
	b _0803FC00
_0803FBE8:
	bl SpriteDyingInit
_0803FBEC:
	bl SpriteDying
	b _0803FC00
_0803FBF2:
	bl ChootInit
_0803FBF6:
	bl SpriteSpawningFromX
	b _0803FC00
_0803FBFC:
	bl XParasiteInit
_0803FC00:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ChootSpit
ChootSpit: @ 0x0803FC08
	push {lr}
	ldr r0, _0803FC20 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x37
	bls _0803FC16
	b _0803FD22
_0803FC16:
	lsls r0, r0, #2
	ldr r1, _0803FC24 @ =_0803FC28
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803FC20: .4byte gCurrentSprite
_0803FC24: .4byte _0803FC28
_0803FC28: @ jump table
	.4byte _0803FD08 @ case 0
	.4byte _0803FD22 @ case 1
	.4byte _0803FD0E @ case 2
	.4byte _0803FD22 @ case 3
	.4byte _0803FD22 @ case 4
	.4byte _0803FD22 @ case 5
	.4byte _0803FD22 @ case 6
	.4byte _0803FD14 @ case 7
	.4byte _0803FD18 @ case 8
	.4byte _0803FD22 @ case 9
	.4byte _0803FD22 @ case 10
	.4byte _0803FD22 @ case 11
	.4byte _0803FD22 @ case 12
	.4byte _0803FD22 @ case 13
	.4byte _0803FD22 @ case 14
	.4byte _0803FD22 @ case 15
	.4byte _0803FD22 @ case 16
	.4byte _0803FD22 @ case 17
	.4byte _0803FD22 @ case 18
	.4byte _0803FD22 @ case 19
	.4byte _0803FD22 @ case 20
	.4byte _0803FD22 @ case 21
	.4byte _0803FD1E @ case 22
	.4byte _0803FD22 @ case 23
	.4byte _0803FD22 @ case 24
	.4byte _0803FD22 @ case 25
	.4byte _0803FD22 @ case 26
	.4byte _0803FD22 @ case 27
	.4byte _0803FD22 @ case 28
	.4byte _0803FD22 @ case 29
	.4byte _0803FD22 @ case 30
	.4byte _0803FD22 @ case 31
	.4byte _0803FD22 @ case 32
	.4byte _0803FD22 @ case 33
	.4byte _0803FD22 @ case 34
	.4byte _0803FD22 @ case 35
	.4byte _0803FD22 @ case 36
	.4byte _0803FD22 @ case 37
	.4byte _0803FD22 @ case 38
	.4byte _0803FD22 @ case 39
	.4byte _0803FD22 @ case 40
	.4byte _0803FD22 @ case 41
	.4byte _0803FD22 @ case 42
	.4byte _0803FD22 @ case 43
	.4byte _0803FD22 @ case 44
	.4byte _0803FD22 @ case 45
	.4byte _0803FD22 @ case 46
	.4byte _0803FD22 @ case 47
	.4byte _0803FD22 @ case 48
	.4byte _0803FD22 @ case 49
	.4byte _0803FD22 @ case 50
	.4byte _0803FD22 @ case 51
	.4byte _0803FD22 @ case 52
	.4byte _0803FD22 @ case 53
	.4byte _0803FD22 @ case 54
	.4byte _0803FD14 @ case 55
_0803FD08:
	bl ChootSpitInit
	b _0803FD22
_0803FD0E:
	bl ChootSpitSpawning
	b _0803FD22
_0803FD14:
	bl ChootSpitExplodingInit
_0803FD18:
	bl ChootSpitExploding
	b _0803FD22
_0803FD1E:
	bl CurrentSpriteFalling
_0803FD22:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianGroundCheckInShootingRange
ZebesianGroundCheckInShootingRange: @ 0x0803FD28
	push {r4, lr}
	ldr r0, _0803FD70 @ =gSamusData
	movs r2, #0x26
	ldrsh r1, [r0, r2]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	ldrh r0, [r0, #0x18]
	adds r1, r1, r0
	ldr r4, _0803FD74 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	cmp r1, r0
	bgt _0803FD8C
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0xd0
	lsls r2, r2, #2
	movs r0, #0xc0
	bl CheckSamusNearSpriteFrontBehindX
	adds r3, r0, #0
	cmp r3, #3
	bne _0803FD78
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x17
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
	movs r0, #3
	b _0803FDCC
	.align 2, 0
_0803FD70: .4byte gSamusData
_0803FD74: .4byte gCurrentSprite
_0803FD78:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803FD90
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803FD90
_0803FD8C:
	movs r0, #0
	b _0803FDCC
_0803FD90:
	movs r0, #0xc0
	lsls r0, r0, #1
	movs r2, #0xd0
	lsls r2, r2, #2
	adds r1, r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	adds r3, r0, #0
	cmp r3, #3
	bne _0803FDB4
	ldr r0, _0803FDB0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x29
	strb r1, [r0]
	b _0803FDC8
	.align 2, 0
_0803FDB0: .4byte gCurrentSprite
_0803FDB4:
	cmp r3, #0xc
	bne _0803FDC8
	ldr r1, _0803FDD4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #3
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
_0803FDC8:
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
_0803FDCC:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0803FDD4: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundCheckCollidingWithAir
ZebesianGroundCheckCollidingWithAir: @ 0x0803FDD8
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0803FE0C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0803FE10 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803FE02
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0803FE02
	movs r6, #1
_0803FE02:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0803FE0C: .4byte gCurrentSprite
_0803FE10: .4byte gPreviousCollisionCheck

	thumb_func_start ZebesianGroundSetIdleHitbox
ZebesianGroundSetIdleHitbox: @ 0x0803FE14
	push {lr}
	ldr r2, _0803FE34 @ =gCurrentSprite
	movs r3, #0
	movs r1, #0
	ldr r0, _0803FE38 @ =0x0000FF40
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803FE40
	ldr r0, _0803FE3C @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x38
	b _0803FE46
	.align 2, 0
_0803FE34: .4byte gCurrentSprite
_0803FE38: .4byte 0x0000FF40
_0803FE3C: .4byte 0x0000FFE0
_0803FE40:
	ldr r0, _0803FE4C @ =0x0000FFC8
	strh r0, [r2, #0xe]
	movs r0, #0x20
_0803FE46:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_0803FE4C: .4byte 0x0000FFC8

	thumb_func_start ZebesianGroundSetShootingHitbox
ZebesianGroundSetShootingHitbox: @ 0x0803FE50
	push {lr}
	ldr r0, _0803FE64 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0803FE6C
	ldr r0, _0803FE68 @ =0x0000FF80
	b _0803FE6E
	.align 2, 0
_0803FE64: .4byte gCurrentSprite
_0803FE68: .4byte 0x0000FF80
_0803FE6C:
	ldr r0, _0803FE88 @ =0x0000FF40
_0803FE6E:
	strh r0, [r2, #0xa]
	movs r3, #0
	movs r0, #0
	strh r0, [r2, #0xc]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0803FE90
	ldr r0, _0803FE8C @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x70
	b _0803FE96
	.align 2, 0
_0803FE88: .4byte 0x0000FF40
_0803FE8C: .4byte 0x0000FFE0
_0803FE90:
	ldr r0, _0803FE9C @ =0x0000FF90
	strh r0, [r2, #0xe]
	movs r0, #0x20
_0803FE96:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_0803FE9C: .4byte 0x0000FF90

	thumb_func_start ZebesianGroundInit
ZebesianGroundInit: @ 0x0803FEA0
	push {r4, lr}
	ldr r4, _0803FEB8 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0803FEBC
	movs r0, #0x5a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x2c
	b _0803FF22
	.align 2, 0
_0803FEB8: .4byte gCurrentSprite
_0803FEBC:
	ldrb r0, [r4, #0x1d]
	cmp r0, #0xb4
	bne _0803FEE2
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0803FED4
	movs r0, #0
	strh r0, [r4]
	b _0803FF6E
_0803FED4:
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #2
	orrs r0, r1
	strb r0, [r2]
	b _0803FF10
_0803FEE2:
	bl TrySetAbsorbXFlag
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0803FF10
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0803FF0A
	strh r0, [r4]
	b _0803FF6E
_0803FF0A:
	adds r0, r4, #0
	adds r0, #0x36
	strb r2, [r0]
_0803FF10:
	bl SpriteChooseRandomXFlip
	ldr r1, _0803FF74 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #2
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x1e
_0803FF22:
	strb r0, [r1]
	ldr r0, _0803FF74 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x25
	movs r3, #0
	movs r0, #2
	strb r0, [r1]
	ldr r2, _0803FF78 @ =sPrimarySpriteStats
	mov r0, ip
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0
	mov r2, ip
	strh r0, [r2, #0x14]
	adds r2, #0x27
	movs r0, #0x38
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x28
	strb r1, [r0]
	adds r2, #2
	movs r0, #0x20
	strb r0, [r2]
	ldr r0, _0803FF7C @ =0x0835C190
	mov r2, ip
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r3, [r2, #0x16]
	mov r0, ip
	adds r0, #0x2f
	strb r1, [r0]
	bl ZebesianGroundSetIdleHitbox
_0803FF6E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803FF74: .4byte gCurrentSprite
_0803FF78: .4byte sPrimarySpriteStats
_0803FF7C: .4byte 0x0835C190

	thumb_func_start ZebesianGroundSpawningFromX
ZebesianGroundSpawningFromX: @ 0x0803FF80
	push {lr}
	ldr r3, _0803FFB4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0803FFC0
	ldr r2, _0803FFB8 @ =gWrittenToMosaic_H
	ldr r1, _0803FFBC @ =0x083BDED6
	mov r3, ip
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _0803FFFC
	.align 2, 0
_0803FFB4: .4byte gCurrentSprite
_0803FFB8: .4byte gWrittenToMosaic_H
_0803FFBC: .4byte 0x083BDED6
_0803FFC0:
	ldrb r0, [r3, #0x1d]
	cmp r0, #0xb4
	bne _0803FFE8
	strb r1, [r3, #0x1f]
	movs r0, #0xb3
	strb r0, [r3, #0x1d]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	ldrh r0, [r3, #2]
	subs r0, #0x40
	strh r0, [r3, #2]
	b _0803FFFC
_0803FFE8:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _08040000 @ =0x0000FFDF
	ands r0, r1
	ldr r1, _08040004 @ =0x00007FFF
	ands r0, r1
	strh r0, [r3]
_0803FFFC:
	pop {r0}
	bx r0
	.align 2, 0
_08040000: .4byte 0x0000FFDF
_08040004: .4byte 0x00007FFF

	thumb_func_start ZebesianPreAquaTurningintoX
ZebesianPreAquaTurningintoX: @ 0x08040008
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r4, _08040068 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0804006C
	ldrb r1, [r4, #0x1d]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x60
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0x20
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0xb9
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r1, [r4, #0x1d]
	ldrb r3, [r6]
	ldrb r0, [r5]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x98
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x10
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0xb9
	movs r2, #0
	bl SpriteSpawnNewXParasite
	b _080400B0
	.align 2, 0
_08040068: .4byte gCurrentSprite
_0804006C:
	ldrb r1, [r4, #0x1d]
	adds r7, r4, #0
	adds r7, #0x23
	ldrb r3, [r7]
	adds r6, r4, #0
	adds r6, #0x2a
	ldrb r0, [r6]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x60
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0xb9
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r1, [r4, #0x1d]
	ldrb r3, [r7]
	ldrb r0, [r6]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x98
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	adds r0, #0x10
	str r0, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0xb9
	movs r2, #0
	bl SpriteSpawnNewXParasite
_080400B0:
	ldr r1, _080400C0 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080400C0: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundTurningIntoX
ZebesianGroundTurningIntoX: @ 0x080400C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	ldr r6, _08040168 @ =gCurrentSprite
	ldrb r0, [r6, #0x1d]
	cmp r0, #0xa2
	bne _0804016C
	adds r1, r0, #0
	movs r0, #0x23
	adds r0, r0, r6
	mov r8, r0
	ldrb r3, [r0]
	adds r7, r6, #0
	adds r7, #0x2a
	ldrb r0, [r7]
	str r0, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x1c
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	subs r0, #0x18
	str r0, [sp, #8]
	movs r5, #0x40
	str r5, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r1, [r6, #0x1d]
	mov r0, r8
	ldrb r3, [r0]
	ldrb r0, [r7]
	str r0, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x38
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	adds r0, #0x18
	str r0, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r1, [r6, #0x1d]
	mov r0, r8
	ldrb r3, [r0]
	ldrb r0, [r7]
	str r0, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x54
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	subs r0, #0xc
	str r0, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrb r1, [r6, #0x1d]
	mov r0, r8
	ldrb r3, [r0]
	ldrb r0, [r7]
	str r0, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x70
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	adds r0, #0xc
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r6, #2]
	subs r0, #0x8c
	strh r0, [r6, #2]
	b _080401D4
	.align 2, 0
_08040168: .4byte gCurrentSprite
_0804016C:
	ldrh r1, [r6]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080401A2
	ldrb r1, [r6, #0x1d]
	adds r0, r6, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x60
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	adds r0, #0x20
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r6, #4]
	subs r0, #0x10
	b _080401CA
_080401A2:
	ldrb r1, [r6, #0x1d]
	adds r0, r6, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r6, #2]
	subs r0, #0x60
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	subs r0, #0x20
	str r0, [sp, #8]
	str r2, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r6, #4]
	adds r0, #0x10
_080401CA:
	strh r0, [r6, #4]
	ldr r1, _080401E0 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x98
	strh r0, [r1, #2]
_080401D4:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080401E0: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundFallingInit
ZebesianGroundFallingInit: @ 0x080401E4
	push {lr}
	ldr r3, _08040208 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	ldr r0, _0804020C @ =0x0835C200
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bl ZebesianGroundSetIdleHitbox
	pop {r0}
	bx r0
	.align 2, 0
_08040208: .4byte gCurrentSprite
_0804020C: .4byte 0x0835C200

	thumb_func_start ZebesianGroundIdleInit
ZebesianGroundIdleInit: @ 0x08040210
	push {r4, lr}
	ldr r4, _08040234 @ =gCurrentSprite
	ldr r0, _08040238 @ =0x0835C190
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bl ZebesianGroundSetIdleHitbox
	ldrh r0, [r4, #4]
	strh r0, [r4, #8]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08040234: .4byte gCurrentSprite
_08040238: .4byte 0x0835C190

	thumb_func_start ZebesianGroundIdle
ZebesianGroundIdle: @ 0x0804023C
	push {r4, r5, r6, r7, lr}
	ldr r4, _08040264 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _0804024E
	b _08040410
_0804024E:
	movs r7, #0
	bl ZebesianGroundCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08040268
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x15
	b _0804040E
	.align 2, 0
_08040264: .4byte gCurrentSprite
_08040268:
	bl unk_1129c
	ldr r0, _080402A4 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	movs r6, #0xf0
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08040344
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080402E0
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080402A8 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _080402AC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x60
	b _080402FC
	.align 2, 0
_080402A4: .4byte gPreviousVerticalCollisionCheck
_080402A8: .4byte gPreviousCollisionCheck
_080402AC:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _0804030C
	ldrh r0, [r4, #2]
	subs r0, #0xa0
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _0804030C
	ldrh r0, [r4, #4]
	adds r0, #4
	b _08040358
_080402E0:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08040310 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08040314
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x60
_080402FC:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	movs r7, #2
	cmp r0, #0
	bne _0804035A
_0804030C:
	movs r7, #1
	b _0804035A
	.align 2, 0
_08040310: .4byte gPreviousCollisionCheck
_08040314:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _0804030C
	ldrh r0, [r4, #2]
	subs r0, #0xa0
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _0804030C
	b _08040354
_08040344:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08040354
	ldrh r0, [r4, #4]
	adds r0, #4
	b _08040358
_08040354:
	ldrh r0, [r4, #4]
	subs r0, #4
_08040358:
	strh r0, [r4, #4]
_0804035A:
	ldr r2, _0804037C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08040396
	ldrh r0, [r2, #0x16]
	cmp r0, #2
	bne _08040384
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _08040384
	ldr r0, _08040380 @ =0x000001AF
	bl SoundPlay
	b _08040396
	.align 2, 0
_0804037C: .4byte gCurrentSprite
_08040380: .4byte 0x000001AF
_08040384:
	ldrh r0, [r2, #0x16]
	cmp r0, #6
	bne _08040396
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _08040396
	ldr r0, _080403B0 @ =0x000001AF
	bl SoundPlay
_08040396:
	bl ZebesianGroundCheckInShootingRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040410
	cmp r7, #1
	bne _080403B8
	ldr r0, _080403B4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #9
	strb r1, [r0]
	b _08040410
	.align 2, 0
_080403B0: .4byte 0x000001AF
_080403B4: .4byte gCurrentSprite
_080403B8:
	cmp r7, #2
	bne _080403D0
	ldr r1, _080403CC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x17
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #1
	b _0804040E
	.align 2, 0
_080403CC: .4byte gCurrentSprite
_080403D0:
	ldr r2, _080403F8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _08040410
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080403FC
	ldrh r0, [r2, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r2, #4]
	cmp r0, r1
	bge _08040410
	b _08040408
	.align 2, 0
_080403F8: .4byte gCurrentSprite
_080403FC:
	ldrh r0, [r2, #8]
	ldr r1, _08040418 @ =0xFFFFFF00
	adds r0, r0, r1
	ldrh r1, [r2, #4]
	cmp r0, r1
	ble _08040410
_08040408:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #9
_0804040E:
	strb r0, [r1]
_08040410:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040418: .4byte 0xFFFFFF00

	thumb_func_start ZebesianGroundTurningAroundInit
ZebesianGroundTurningAroundInit: @ 0x0804041C
	ldr r1, _08040434 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _08040438 @ =0x0835C328
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08040434: .4byte gCurrentSprite
_08040438: .4byte 0x0835C328

	thumb_func_start ZebesianGroundTurningAround
ZebesianGroundTurningAround: @ 0x0804043C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08040462
	ldr r2, _08040468 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0804046C @ =0x0835C348
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_08040462:
	pop {r0}
	bx r0
	.align 2, 0
_08040468: .4byte gCurrentSprite
_0804046C: .4byte 0x0835C348

	thumb_func_start ZebesianGroundTurningAroundSecondPart
ZebesianGroundTurningAroundSecondPart: @ 0x08040470
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804049A
	ldr r1, _08040490 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2f
	ldrb r0, [r2]
	cmp r0, #0
	beq _08040494
	movs r0, #0
	strb r0, [r2]
	adds r1, #0x24
	movs r0, #0x29
	b _08040498
	.align 2, 0
_08040490: .4byte gCurrentSprite
_08040494:
	adds r1, #0x24
	movs r0, #1
_08040498:
	strb r0, [r1]
_0804049A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianGroundJumpWarningInit
ZebesianGroundJumpWarningInit: @ 0x080404A0
	ldr r1, _080404B4 @ =gCurrentSprite
	ldr r0, _080404B8 @ =0x0835C2D8
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	bx lr
	.align 2, 0
_080404B4: .4byte gCurrentSprite
_080404B8: .4byte 0x0835C2D8

	thumb_func_start ZebesianGroundJumpWarning
ZebesianGroundJumpWarning: @ 0x080404BC
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080404F6
	ldr r3, _080404FC @ =gCurrentSprite
	ldr r0, _08040500 @ =0x0835C300
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r2, #0
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	ldr r0, _08040504 @ =0x0000FF60
	strh r0, [r3, #0xa]
	ldrh r1, [r3]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080404F6
	ldr r0, _08040508 @ =0x000001AD
	bl CheckPlayNotAlreadyPlayingSound
_080404F6:
	pop {r0}
	bx r0
	.align 2, 0
_080404FC: .4byte gCurrentSprite
_08040500: .4byte 0x0835C300
_08040504: .4byte 0x0000FF60
_08040508: .4byte 0x000001AD

	thumb_func_start ZebesianGroundJumping
ZebesianGroundJumping: @ 0x0804050C
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _08040548 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08040550
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804054C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08040576
	ldrh r0, [r4, #2]
	subs r0, #0x50
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08040576
	ldrh r0, [r4, #4]
	adds r0, #0xa
	b _08040584
	.align 2, 0
_08040548: .4byte gCurrentSprite
_0804054C: .4byte gPreviousCollisionCheck
_08040550:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804057C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08040576
	ldrh r0, [r4, #2]
	subs r0, #0x50
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _08040580
_08040576:
	movs r6, #1
	b _08040586
	.align 2, 0
_0804057C: .4byte gPreviousCollisionCheck
_08040580:
	ldrh r0, [r4, #4]
	subs r0, #0xa
_08040584:
	strh r0, [r4, #4]
_08040586:
	ldr r1, _080405B4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r4, r1, #0
	cmp r0, #0
	beq _080405BC
	ldr r0, _080405B8 @ =0x08359A10
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r1, [r2]
	lsrs r1, r1, #1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r1
	strh r0, [r4, #2]
	ldrb r0, [r2]
	cmp r0, #0x12
	bhi _080405DC
	b _080405D8
	.align 2, 0
_080405B4: .4byte gCurrentSprite
_080405B8: .4byte 0x08359A10
_080405BC:
	ldr r0, _080405FC @ =0x083599FC
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r1, [r2]
	lsrs r1, r1, #2
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r1
	strh r0, [r4, #2]
	ldrb r0, [r2]
	cmp r0, #0x26
	bhi _080405DC
_080405D8:
	adds r0, #1
	strb r0, [r2]
_080405DC:
	lsls r0, r1, #0x10
	cmp r0, #0
	ble _08040640
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r5, _08040600 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _08040604
	strh r1, [r4, #2]
	bl ZebesianGroundLandingInit
	b _0804067A
	.align 2, 0
_080405FC: .4byte 0x083599FC
_08040600: .4byte gPreviousVerticalCollisionCheck
_08040604:
	cmp r6, #0
	bne _0804067A
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _08040632
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804062E
	movs r6, #1
_0804062E:
	cmp r6, #0
	beq _0804067A
_08040632:
	ldr r0, _0804063C @ =gCurrentSprite
	strh r1, [r0, #2]
	bl ZebesianGroundLandingInit
	b _0804067A
	.align 2, 0
_0804063C: .4byte gCurrentSprite
_08040640:
	movs r6, #0
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08040680 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0x11
	beq _08040676
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0x11
	bne _08040672
	movs r6, #1
_08040672:
	cmp r6, #0
	beq _0804067A
_08040676:
	bl ZebesianGroundFallingInit
_0804067A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08040680: .4byte gPreviousCollisionCheck

	thumb_func_start ZebesianGroundLandingInit
ZebesianGroundLandingInit: @ 0x08040684
	push {lr}
	ldr r1, _080406B0 @ =gCurrentSprite
	ldr r0, _080406B4 @ =0x0835C310
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080406AC
	movs r0, #0xd7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080406AC:
	pop {r0}
	bx r0
	.align 2, 0
_080406B0: .4byte gCurrentSprite
_080406B4: .4byte 0x0835C310

	thumb_func_start ZebesianGroundLanding
ZebesianGroundLanding: @ 0x080406B8
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804077C
	ldr r4, _080406DC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080406E0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _0804077C
	.align 2, 0
_080406DC: .4byte gCurrentSprite
_080406E0:
	bl ZebesianGroundCheckInShootingRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804077C
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804072C
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08040728 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08040762
	ldrh r0, [r4, #2]
	subs r0, #0xa0
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0804075E
	b _08040762
	.align 2, 0
_08040728: .4byte gPreviousCollisionCheck
_0804072C:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804076C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08040762
	ldrh r0, [r4, #2]
	subs r0, #0xa0
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0804075E
	movs r7, #1
_0804075E:
	cmp r7, #0
	beq _08040774
_08040762:
	ldr r0, _08040770 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
	b _0804077A
	.align 2, 0
_0804076C: .4byte gPreviousCollisionCheck
_08040770: .4byte gCurrentSprite
_08040774:
	ldr r0, _08040784 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
_0804077A:
	strb r1, [r0]
_0804077C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040784: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundWaitingInit
ZebesianGroundWaitingInit: @ 0x08040788
	push {lr}
	ldr r1, _080407A4 @ =gCurrentSprite
	ldr r0, _080407A8 @ =0x0835C1D8
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bl ZebesianGroundSetIdleHitbox
	pop {r0}
	bx r0
	.align 2, 0
_080407A4: .4byte gCurrentSprite
_080407A8: .4byte 0x0835C1D8

	thumb_func_start ZebesianGroundWaiting
ZebesianGroundWaiting: @ 0x080407AC
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080407BE
	ldr r0, _080407C4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_080407BE:
	pop {r0}
	bx r0
	.align 2, 0
_080407C4: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundStandingInit
ZebesianGroundStandingInit: @ 0x080407C8
	ldr r1, _080407EC @ =gCurrentSprite
	ldr r0, _080407F0 @ =0x0835C1D8
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0xa
	strb r0, [r2]
	ldr r0, _080407F4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #2
	adds r0, #2
	adds r1, #0x2f
	strb r0, [r1]
	bx lr
	.align 2, 0
_080407EC: .4byte gCurrentSprite
_080407F0: .4byte 0x0835C1D8
_080407F4: .4byte gSpriteRandomNumber

	thumb_func_start ZebesianGroundStanding
ZebesianGroundStanding: @ 0x080407F8
	push {lr}
	bl ZebesianGroundCheckInShootingRange
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040824
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08040824
	ldr r1, _08040828 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2f
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040824
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
_08040824:
	pop {r0}
	bx r0
	.align 2, 0
_08040828: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundShootingInit
ZebesianGroundShootingInit: @ 0x0804082C
	push {r4, lr}
	ldr r4, _08040858 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x46
	strb r0, [r1]
	bl SamusCheckCrouchingOrMorphed
	cmp r0, #0
	beq _08040860
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0804085C @ =0x0835C278
	b _0804086A
	.align 2, 0
_08040858: .4byte gCurrentSprite
_0804085C: .4byte 0x0835C278
_08040860:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08040878 @ =0x0835C210
_0804086A:
	str r0, [r4, #0x18]
	bl ZebesianGroundSetShootingHitbox
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08040878: .4byte 0x0835C210

	thumb_func_start ZebesianGroundShooting
ZebesianGroundShooting: @ 0x0804087C
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r4, _080408DC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08040912
	ldrh r0, [r4, #0x16]
	cmp r0, #6
	beq _08040894
	b _080409A0
_08040894:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	beq _0804089C
	b _080409A0
_0804089C:
	ldrh r1, [r4]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080408E0
	ldrb r2, [r4, #0x1f]
	adds r5, r4, #0
	adds r5, #0x23
	ldrb r3, [r5]
	ldrh r0, [r4, #2]
	subs r0, #0x50
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x58
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x3f
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #2]
	subs r0, #0x30
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x18
	b _0804095A
	.align 2, 0
_080408DC: .4byte gCurrentSprite
_080408E0:
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x50
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x58
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x3f
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x30
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x18
	str r0, [sp, #4]
	str r5, [sp, #8]
	b _0804095E
_08040912:
	ldrh r0, [r4, #0x16]
	cmp r0, #7
	bne _080409A0
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	bne _080409A0
	ldrh r1, [r4]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08040968
	ldrb r2, [r4, #0x1f]
	adds r5, r4, #0
	adds r5, #0x23
	ldrb r3, [r5]
	ldrh r0, [r4, #2]
	subs r0, #0x78
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x60
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x3f
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #2]
	subs r0, #0x68
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x10
_0804095A:
	str r0, [sp, #4]
	str r6, [sp, #8]
_0804095E:
	movs r0, #0x3f
	movs r1, #0
	bl SpriteSpawnSecondary
	b _080409A0
_08040968:
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x78
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x60
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x3f
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x68
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x10
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x3f
	movs r1, #0
	bl SpriteSpawnSecondary
_080409A0:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080409B0
	ldr r0, _080409B8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2b
	strb r1, [r0]
_080409B0:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080409B8: .4byte gCurrentSprite

	thumb_func_start ZebesianGroundShootingEndInit
ZebesianGroundShootingEndInit: @ 0x080409BC
	push {lr}
	ldr r1, _080409D8 @ =gCurrentSprite
	ldr r0, _080409DC @ =0x0835C1D8
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	bl ZebesianGroundSetIdleHitbox
	pop {r0}
	bx r0
	.align 2, 0
_080409D8: .4byte gCurrentSprite
_080409DC: .4byte 0x0835C1D8

	thumb_func_start ZebesianGroundShootingEnd
ZebesianGroundShootingEnd: @ 0x080409E0
	push {r4, r5, r6, lr}
	ldr r0, _08040A24 @ =gSamusData
	movs r2, #0x26
	ldrsh r1, [r0, r2]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	ldrh r0, [r0, #0x18]
	adds r1, r1, r0
	ldr r4, _08040A28 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	cmp r1, r0
	bgt _08040A6E
	movs r1, #0x80
	lsls r1, r1, #1
	movs r6, #0xd0
	lsls r6, r6, #2
	movs r0, #0xc0
	adds r2, r6, #0
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #3
	bne _08040A2C
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x17
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
	b _08040A76
	.align 2, 0
_08040A24: .4byte gSamusData
_08040A28: .4byte gCurrentSprite
_08040A2C:
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #0
	beq _08040A3A
	subs r0, #1
	strb r0, [r5]
_08040A3A:
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r1, r6, #0
	adds r2, r6, #0
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #3
	bne _08040A58
	ldrb r0, [r5]
	cmp r0, #0
	bne _08040A76
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	b _08040A74
_08040A58:
	cmp r0, #0xc
	bne _08040A6E
	ldrb r0, [r5]
	cmp r0, #0
	bne _08040A76
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	adds r1, #0xb
	b _08040A72
_08040A6E:
	adds r1, r4, #0
	adds r1, #0x24
_08040A72:
	movs r0, #1
_08040A74:
	strb r0, [r1]
_08040A76:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start ZebesianGroundBeamInit
ZebesianGroundBeamInit: @ 0x08040A7C
	push {r4, r5, r6, lr}
	ldr r0, _08040AEC @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r3, _08040AF0 @ =0x0000FFFB
	ands r3, r0
	movs r5, #0
	movs r4, #0
	mov r1, ip
	strh r3, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	movs r2, #0x30
	strb r2, [r0]
	ldr r0, _08040AF4 @ =0x0000FFF8
	mov r6, ip
	strh r0, [r6, #0xa]
	strh r1, [r6, #0xc]
	ldr r0, _08040AF8 @ =0x0835C398
	str r0, [r6, #0x18]
	strb r5, [r6, #0x1c]
	strh r4, [r6, #0x16]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	subs r1, #1
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x40
	ands r0, r3
	mov r1, ip
	cmp r0, #0
	beq _08040AFC
	movs r0, #0x10
	strh r0, [r1, #0xe]
	strh r2, [r1, #0x10]
	b _08040B04
	.align 2, 0
_08040AEC: .4byte gCurrentSprite
_08040AF0: .4byte 0x0000FFFB
_08040AF4: .4byte 0x0000FFF8
_08040AF8: .4byte 0x0835C398
_08040AFC:
	ldr r0, _08040B1C @ =0x0000FFD0
	strh r0, [r1, #0xe]
	adds r0, #0x20
	strh r0, [r1, #0x10]
_08040B04:
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08040B14
	ldr r0, _08040B20 @ =0x0000015D
	bl CheckPlayNotAlreadyPlayingSound
_08040B14:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08040B1C: .4byte 0x0000FFD0
_08040B20: .4byte 0x0000015D

	thumb_func_start ZebesianGroundBeamSpawning
ZebesianGroundBeamSpawning: @ 0x08040B24
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08040B64
	ldr r2, _08040B54 @ =gCurrentSprite
	ldr r0, _08040B58 @ =0x0835C3C0
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08040B5C
	movs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0x60
	b _08040B62
	.align 2, 0
_08040B54: .4byte gCurrentSprite
_08040B58: .4byte 0x0835C3C0
_08040B5C:
	ldr r0, _08040B68 @ =0x0000FFA0
	strh r0, [r2, #0xe]
	adds r0, #0x40
_08040B62:
	strh r0, [r2, #0x10]
_08040B64:
	pop {r0}
	bx r0
	.align 2, 0
_08040B68: .4byte 0x0000FFA0

	thumb_func_start ZebesianGroundBeamFired
ZebesianGroundBeamFired: @ 0x08040B6C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08040BAC
	ldr r2, _08040B9C @ =gCurrentSprite
	ldr r0, _08040BA0 @ =0x0835C368
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08040BA4
	movs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0xa0
	b _08040BAA
	.align 2, 0
_08040B9C: .4byte gCurrentSprite
_08040BA0: .4byte 0x0835C368
_08040BA4:
	ldr r0, _08040BB0 @ =0x0000FF60
	strh r0, [r2, #0xe]
	adds r0, #0x80
_08040BAA:
	strh r0, [r2, #0x10]
_08040BAC:
	pop {r0}
	bx r0
	.align 2, 0
_08040BB0: .4byte 0x0000FF60

	thumb_func_start ZebesianGroundCheckSkipMovement
ZebesianGroundCheckSkipMovement: @ 0x08040BB4
	push {lr}
	ldr r2, _08040BD4 @ =gCurrentSprite
	ldrb r0, [r2, #0x1d]
	cmp r0, #0xb4
	bne _08040BDC
	ldr r0, _08040BD8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08040BDC
	ldrb r0, [r2, #0x1c]
	subs r0, #1
	strb r0, [r2, #0x1c]
	movs r0, #1
	b _08040BDE
	.align 2, 0
_08040BD4: .4byte gCurrentSprite
_08040BD8: .4byte gFrameCounter8Bit
_08040BDC:
	movs r0, #0
_08040BDE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ZebesianGround
ZebesianGround: @ 0x08040BE4
	push {r4, lr}
	ldr r4, _08040C1C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08040BFE
	movs r0, #0xaf
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08040BFE:
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xbf
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08040C20
	bl SpriteUpdateFreezeTimer
	b _08040EF6
	.align 2, 0
_08040C1C: .4byte gCurrentSprite
_08040C20:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08040C2C
	b _08040EB8
_08040C2C:
	lsls r0, r0, #2
	ldr r1, _08040C38 @ =_08040C3C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08040C38: .4byte _08040C3C
_08040C3C: @ jump table
	.4byte _08040DAC @ case 0
	.4byte _08040DB2 @ case 1
	.4byte _08040DB6 @ case 2
	.4byte _08040DF4 @ case 3
	.4byte _08040DF8 @ case 4
	.4byte _08040E08 @ case 5
	.4byte _08040EB8 @ case 6
	.4byte _08040DC8 @ case 7
	.4byte _08040DCC @ case 8
	.4byte _08040DDE @ case 9
	.4byte _08040DE2 @ case 10
	.4byte _08040EB8 @ case 11
	.4byte _08040EB8 @ case 12
	.4byte _08040EB8 @ case 13
	.4byte _08040EB8 @ case 14
	.4byte _08040EB8 @ case 15
	.4byte _08040EB8 @ case 16
	.4byte _08040EB8 @ case 17
	.4byte _08040EB8 @ case 18
	.4byte _08040EB8 @ case 19
	.4byte _08040EB8 @ case 20
	.4byte _08040E18 @ case 21
	.4byte _08040E1C @ case 22
	.4byte _08040E2C @ case 23
	.4byte _08040E30 @ case 24
	.4byte _08040EB8 @ case 25
	.4byte _08040E40 @ case 26
	.4byte _08040EB8 @ case 27
	.4byte _08040E50 @ case 28
	.4byte _08040EB8 @ case 29
	.4byte _08040EB8 @ case 30
	.4byte _08040EB8 @ case 31
	.4byte _08040EB8 @ case 32
	.4byte _08040EB8 @ case 33
	.4byte _08040EB8 @ case 34
	.4byte _08040EB8 @ case 35
	.4byte _08040EB8 @ case 36
	.4byte _08040EB8 @ case 37
	.4byte _08040EB8 @ case 38
	.4byte _08040EB8 @ case 39
	.4byte _08040EB8 @ case 40
	.4byte _08040E60 @ case 41
	.4byte _08040E64 @ case 42
	.4byte _08040E74 @ case 43
	.4byte _08040E78 @ case 44
	.4byte _08040EB8 @ case 45
	.4byte _08040EB8 @ case 46
	.4byte _08040EB8 @ case 47
	.4byte _08040EB8 @ case 48
	.4byte _08040EB8 @ case 49
	.4byte _08040EB8 @ case 50
	.4byte _08040EB8 @ case 51
	.4byte _08040EB8 @ case 52
	.4byte _08040EB8 @ case 53
	.4byte _08040EB8 @ case 54
	.4byte _08040EB8 @ case 55
	.4byte _08040EB8 @ case 56
	.4byte _08040EB8 @ case 57
	.4byte _08040EB8 @ case 58
	.4byte _08040EB8 @ case 59
	.4byte _08040EB8 @ case 60
	.4byte _08040EB8 @ case 61
	.4byte _08040EB8 @ case 62
	.4byte _08040EB8 @ case 63
	.4byte _08040EB8 @ case 64
	.4byte _08040EB8 @ case 65
	.4byte _08040EB8 @ case 66
	.4byte _08040EB8 @ case 67
	.4byte _08040EB8 @ case 68
	.4byte _08040EB8 @ case 69
	.4byte _08040EB8 @ case 70
	.4byte _08040EB8 @ case 71
	.4byte _08040EB8 @ case 72
	.4byte _08040EB8 @ case 73
	.4byte _08040EB8 @ case 74
	.4byte _08040EB8 @ case 75
	.4byte _08040EB8 @ case 76
	.4byte _08040EB8 @ case 77
	.4byte _08040EB8 @ case 78
	.4byte _08040EB8 @ case 79
	.4byte _08040EB8 @ case 80
	.4byte _08040EB8 @ case 81
	.4byte _08040EB8 @ case 82
	.4byte _08040EB8 @ case 83
	.4byte _08040EB8 @ case 84
	.4byte _08040EB8 @ case 85
	.4byte _08040EB8 @ case 86
	.4byte _08040E88 @ case 87
	.4byte _08040E8C @ case 88
	.4byte _08040E92 @ case 89
	.4byte _08040E96 @ case 90
	.4byte _08040E9C @ case 91
_08040DAC:
	bl ZebesianGroundInit
	b _08040EB8
_08040DB2:
	bl ZebesianGroundIdleInit
_08040DB6:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08040DC2
	b _08040EF6
_08040DC2:
	bl ZebesianGroundIdle
	b _08040EB8
_08040DC8:
	bl ZebesianGroundWaitingInit
_08040DCC:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08040DD8
	b _08040EF6
_08040DD8:
	bl ZebesianGroundWaiting
	b _08040EB8
_08040DDE:
	bl ZebesianGroundStandingInit
_08040DE2:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08040DEE
	b _08040EF6
_08040DEE:
	bl ZebesianGroundStanding
	b _08040EB8
_08040DF4:
	bl ZebesianGroundTurningAroundInit
_08040DF8:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundTurningAround
	b _08040EB8
_08040E08:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundTurningAroundSecondPart
	b _08040EB8
_08040E18:
	bl ZebesianGroundFallingInit
_08040E1C:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl CurrentSpriteFalling
	b _08040EB8
_08040E2C:
	bl ZebesianGroundJumpWarningInit
_08040E30:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundJumpWarning
	b _08040EB8
_08040E40:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundJumping
	b _08040EB8
_08040E50:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundLanding
	b _08040EB8
_08040E60:
	bl ZebesianGroundShootingInit
_08040E64:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundShooting
	b _08040EB8
_08040E74:
	bl ZebesianGroundShootingEndInit
_08040E78:
	bl ZebesianGroundCheckSkipMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08040EF6
	bl ZebesianGroundShootingEnd
	b _08040EB8
_08040E88:
	bl SpriteDyingInit
_08040E8C:
	bl SpriteDying
	b _08040EB8
_08040E92:
	bl ZebesianGroundInit
_08040E96:
	bl ZebesianGroundSpawningFromX
	b _08040EB8
_08040E9C:
	ldr r0, _08040EAC @ =gCurrentSprite
	ldrb r0, [r0, #0x1d]
	cmp r0, #0xb4
	bne _08040EB0
	bl ZebesianPreAquaTurningintoX
	b _08040EB8
	.align 2, 0
_08040EAC: .4byte gCurrentSprite
_08040EB0:
	bl ZebesianGroundTurningIntoX
	bl XParasiteInit
_08040EB8:
	ldr r2, _08040ED8 @ =gCurrentSprite
	ldrb r0, [r2, #0x1d]
	cmp r0, #0xa2
	bne _08040EF6
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08040EE0
	ldr r0, _08040EDC @ =gSamusData
	ldrh r1, [r0, #0x12]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _08040EF6
	b _08040EEC
	.align 2, 0
_08040ED8: .4byte gCurrentSprite
_08040EDC: .4byte gSamusData
_08040EE0:
	ldr r0, _08040EFC @ =gSamusData
	ldrh r1, [r0, #0x12]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08040EF6
_08040EEC:
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
_08040EF6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08040EFC: .4byte gSamusData

	thumb_func_start ZebesianGroundBeam
ZebesianGroundBeam: @ 0x08040F00
	push {lr}
	ldr r0, _08040F18 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08040F28
	cmp r0, #2
	bgt _08040F1C
	cmp r0, #0
	beq _08040F22
	b _08040F32
	.align 2, 0
_08040F18: .4byte gCurrentSprite
_08040F1C:
	cmp r0, #0x18
	beq _08040F2E
	b _08040F32
_08040F22:
	bl ZebesianGroundBeamInit
	b _08040F32
_08040F28:
	bl ZebesianGroundBeamSpawning
	b _08040F32
_08040F2E:
	bl ZebesianGroundBeamFired
_08040F32:
	ldr r2, _08040F44 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08040F48
	ldrh r0, [r2, #4]
	adds r0, #0xa
	b _08040F4C
	.align 2, 0
_08040F44: .4byte gCurrentSprite
_08040F48:
	ldrh r0, [r2, #4]
	subs r0, #0xa
_08040F4C:
	strh r0, [r2, #4]
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BlueXSetTrail
BlueXSetTrail: @ 0x08040F54
	push {lr}
	ldr r0, _08040F74 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08040F6E
	ldr r1, _08040F78 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	movs r2, #0x1f
	bl ParticleSet
_08040F6E:
	pop {r0}
	bx r0
	.align 2, 0
_08040F74: .4byte gFrameCounter8Bit
_08040F78: .4byte gCurrentSprite

	thumb_func_start BlueXCheckStun
BlueXCheckStun: @ 0x08040F7C
	push {lr}
	ldr r3, _08040F94 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0
	bne _08040F98
	movs r0, #0
	b _08040FB2
	.align 2, 0
_08040F94: .4byte gCurrentSprite
_08040F98:
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #8
	strb r0, [r1]
	ldr r0, _08040FB8 @ =0x0835F3B8
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	adds r1, #0xa
	movs r0, #0xf0
	strb r0, [r1]
	movs r0, #1
_08040FB2:
	pop {r1}
	bx r1
	.align 2, 0
_08040FB8: .4byte 0x0835F3B8

	thumb_func_start BlueXGetAbsorbed
BlueXGetAbsorbed: @ 0x08040FBC
	push {r4, lr}
	sub sp, #0xc
	ldr r2, _08041018 @ =gEquipment
	ldrb r1, [r2, #0xc]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0804102C
	ldrh r0, [r2]
	adds r0, #0x1e
	strh r0, [r2]
	ldrh r1, [r2, #2]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r1
	bls _08040FDE
	strh r1, [r2]
_08040FDE:
	ldr r1, _0804101C @ =0x030012F0
	movs r0, #0x30
	strb r0, [r1, #3]
	ldr r0, _08041020 @ =gCurrentSprite
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	ldr r4, _08041024 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r4, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r1, [r4, #0x18]
	adds r0, r0, r1
	str r0, [sp]
	ldrh r0, [r4, #0x16]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x40
	movs r1, #0
	bl SpriteSpawnSecondary
	ldr r0, _08041028 @ =0x000001BB
	bl SoundPlay
	b _0804104C
	.align 2, 0
_08041018: .4byte gEquipment
_0804101C: .4byte 0x030012F0
_08041020: .4byte gCurrentSprite
_08041024: .4byte gSamusData
_08041028: .4byte 0x000001BB
_0804102C:
	ldr r2, _08041054 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r1, [r2, #0x18]
	adds r0, r0, r1
	ldrh r1, [r2, #0x16]
	movs r2, #0x1e
	bl ParticleSet
	movs r0, #0xdd
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804104C:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08041054: .4byte gSamusData

	thumb_func_start BlueXAbsorbedInit
BlueXAbsorbedInit: @ 0x08041058
	push {lr}
	ldr r3, _0804109C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x1a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x26
	movs r1, #1
	strb r1, [r0]
	adds r0, #9
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	ldrh r1, [r3]
	movs r0, #0x80
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x2b
	strb r2, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #0x12]
	bl BlueXGetAbsorbed
	pop {r0}
	bx r0
	.align 2, 0
_0804109C: .4byte gCurrentSprite

	thumb_func_start BlueXInit
BlueXInit: @ 0x080410A0
	push {r4, r5, lr}
	ldr r4, _080410F0 @ =gCurrentSprite
	ldrh r0, [r4, #4]
	adds r0, #0x20
	strh r0, [r4, #4]
	ldr r0, _080410F4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x21
	strb r0, [r5]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080410F8 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	beq _080410FC
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xc
	b _08041108
	.align 2, 0
_080410F0: .4byte gCurrentSprite
_080410F4: .4byte gIoRegisters
_080410F8: .4byte gPreviousCollisionCheck
_080410FC:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	subs r1, #2
	movs r0, #4
_08041108:
	strb r0, [r1]
	ldr r4, _0804116C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r2, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r5, #0
	ldr r1, _08041170 @ =0x0000FFE8
	strh r1, [r4, #0xa]
	movs r0, #0x18
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08041174 @ =0x0835F1F8
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r2, _08041178 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0x13
	strb r0, [r1]
	bl SpriteUtilChooseRandomXDirection
	ldr r0, _0804117C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #8
	bls _08041164
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
_08041164:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804116C: .4byte gCurrentSprite
_08041170: .4byte 0x0000FFE8
_08041174: .4byte 0x0835F1F8
_08041178: .4byte sPrimarySpriteStats
_0804117C: .4byte gSpriteRandomNumber

	thumb_func_start BlueXHiding
BlueXHiding: @ 0x08041180
	push {r4, lr}
	ldr r4, _080411C4 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080411C8 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _080411BC
	ldrh r1, [r4]
	ldr r0, _080411CC @ =0x00007FFF
	ands r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080411D0 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
_080411BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080411C4: .4byte gCurrentSprite
_080411C8: .4byte gPreviousCollisionCheck
_080411CC: .4byte 0x00007FFF
_080411D0: .4byte gIoRegisters

	thumb_func_start BlueXIdleInit
BlueXIdleInit: @ 0x080411D4
	ldr r2, _080411F0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _080411F4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x18
	adds r1, #0xc
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_080411F0: .4byte gCurrentSprite
_080411F4: .4byte gSpriteRandomNumber

	thumb_func_start BlueXIdle
BlueXIdle: @ 0x080411F8
	push {r4, r5, r6, r7, lr}
	bl BlueXCheckStun
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804126A
	bl BlueXSetTrail
	ldr r4, _08041270 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r3, _08041274 @ =0x0835DD74
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _08041278 @ =0x00007FFF
	cmp r0, r6
	bne _08041226
	ldrh r2, [r3]
	movs r1, #0
_08041226:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	strh r0, [r4, #2]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r3, _0804127C @ =0x0835DDF6
	lsls r0, r1, #1
	adds r0, r0, r3
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _0804124A
	ldrh r2, [r3]
	movs r1, #0
_0804124A:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _0804126A
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_0804126A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08041270: .4byte gCurrentSprite
_08041274: .4byte 0x0835DD74
_08041278: .4byte 0x00007FFF
_0804127C: .4byte 0x0835DDF6

	thumb_func_start BlueXMovingInit
BlueXMovingInit: @ 0x08041280
	push {r4, lr}
	ldr r4, _080412CC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _080412D0 @ =0x0835F1C0
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	movs r0, #0x96
	strh r0, [r4, #6]
	bl MakeSpriteFaceSamusDirection
	ldrh r2, [r4, #2]
	ldr r1, _080412D4 @ =gSamusData
	movs r3, #0x26
	ldrsh r0, [r1, r3]
	ldrh r1, [r1, #0x18]
	adds r0, r0, r1
	cmp r2, r0
	ble _080412DC
	ldrh r1, [r4]
	ldr r0, _080412D8 @ =0x0000FBFF
	ands r0, r1
	b _080412E6
	.align 2, 0
_080412CC: .4byte gCurrentSprite
_080412D0: .4byte 0x0835F1C0
_080412D4: .4byte gSamusData
_080412D8: .4byte 0x0000FBFF
_080412DC:
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
_080412E6:
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BlueXMoving
BlueXMoving: @ 0x080412F0
	push {r4, r5, r6, lr}
	bl BlueXCheckStun
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080412FE
	b _080414F4
_080412FE:
	ldr r4, _08041314 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08041318
	bl BlueXAbsorbedInit
	b _080414F4
	.align 2, 0
_08041314: .4byte gCurrentSprite
_08041318:
	bl BlueXSetTrail
	bl EventCheckAfter_ReachedTopOfRoomAfterVaria
	cmp r0, #0
	beq _0804134C
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _08041334
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	b _080414F4
_08041334:
	subs r0, #1
	strh r0, [r4, #6]
	ldr r0, _08041344 @ =gXParasiteTargetYPosition
	ldrh r4, [r0]
	ldr r0, _08041348 @ =gXParasiteTargetXPosition
	ldrh r3, [r0]
	b _08041358
	.align 2, 0
_08041344: .4byte gXParasiteTargetYPosition
_08041348: .4byte gXParasiteTargetXPosition
_0804134C:
	ldr r1, _08041398 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldrh r3, [r1, #0x16]
_08041358:
	movs r6, #0x1e
	movs r5, #0
	ldr r2, _0804139C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080413B6
	movs r0, #0x2f
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _080413A0
	ldrh r1, [r2, #4]
	subs r0, r3, #4
	cmp r1, r0
	bgt _080413CA
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0x1d
	bhi _0804138C
	adds r0, #1
	strb r0, [r1]
_0804138C:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r3, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	b _08041404
	.align 2, 0
_08041398: .4byte gSamusData
_0804139C: .4byte gCurrentSprite
_080413A0:
	subs r1, r0, #1
	mov r0, ip
	strb r1, [r0]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _08041408
	lsrs r0, r0, #0x1a
	ldrh r1, [r2, #4]
	adds r0, r0, r1
	strh r0, [r2, #4]
	b _08041404
_080413B6:
	movs r0, #0x2f
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _080413EA
	ldrh r1, [r2, #4]
	adds r0, r3, #4
	cmp r1, r0
	bge _080413D6
_080413CA:
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	b _08041404
_080413D6:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0x1d
	bhi _080413E4
	adds r0, #1
	strb r0, [r1]
_080413E4:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _080413FA
_080413EA:
	subs r1, r0, #1
	mov r3, ip
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _08041402
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_080413FA:
	ldrh r0, [r2, #4]
	subs r0, r0, r1
	strh r0, [r2, #4]
	b _08041404
_08041402:
	movs r5, #1
_08041404:
	cmp r5, #0
	beq _0804142A
_08041408:
	ldr r1, _08041468 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	eors r2, r0
	strh r2, [r1]
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
	movs r0, #2
	ands r2, r0
	cmp r2, #0
	beq _0804142A
	ldr r0, _0804146C @ =0x000001B9
	bl CheckPlayNotAlreadyPlayingSound
_0804142A:
	movs r5, #0
	ldr r2, _08041468 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08041484
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _08041470
	ldrh r1, [r2, #2]
	subs r0, r4, #4
	cmp r1, r0
	bgt _08041496
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r6
	bhs _0804145A
	adds r0, #1
	strb r0, [r1]
_0804145A:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r1, [r2, #2]
	adds r0, r0, r1
	strh r0, [r2, #2]
	b _080414CC
	.align 2, 0
_08041468: .4byte gCurrentSprite
_0804146C: .4byte 0x000001B9
_08041470:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _080414D0
	lsrs r0, r0, #0x1a
	ldrh r3, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	b _080414CC
_08041484:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _080414B4
	ldrh r1, [r2, #2]
	adds r0, r4, #4
	cmp r1, r0
	bge _080414A0
_08041496:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r3]
	b _080414CC
_080414A0:
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r6
	bhs _080414AE
	adds r0, #1
	strb r0, [r1]
_080414AE:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _080414C2
_080414B4:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _080414CA
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_080414C2:
	ldrh r0, [r2, #2]
	subs r0, r0, r1
	strh r0, [r2, #2]
	b _080414CC
_080414CA:
	movs r5, #1
_080414CC:
	cmp r5, #0
	beq _080414F4
_080414D0:
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080414F4
	ldr r0, _080414FC @ =0x000001B9
	bl CheckPlayNotAlreadyPlayingSound
_080414F4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080414FC: .4byte 0x000001B9

	thumb_func_start BlueXAbsorbed
BlueXAbsorbed: @ 0x08041500
	push {r4, r5, lr}
	ldr r0, _08041524 @ =sPrimarySpriteStats
	ldr r1, _08041528 @ =0x0000065A
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r4, _0804152C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl XParasiteStickToSamus
	ldrh r0, [r4, #0x12]
	cmp r0, #0x50
	bls _08041530
	subs r0, #8
	strh r0, [r4, #0x12]
	b _08041534
	.align 2, 0
_08041524: .4byte sPrimarySpriteStats
_08041528: .4byte 0x0000065A
_0804152C: .4byte gCurrentSprite
_08041530:
	movs r0, #0
	strh r0, [r4]
_08041534:
	ldr r2, _08041570 @ =gEquipment
	ldrb r1, [r2, #0xc]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _08041594
	ldr r3, _08041574 @ =gCurrentSprite
	ldrh r0, [r3, #0x12]
	movs r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08041594
	ldrh r0, [r2]
	cmp r0, r5
	bls _08041580
	subs r0, r0, r5
	strh r0, [r2]
	ldrh r0, [r3]
	cmp r0, #0
	bne _08041594
	ldr r1, _08041578 @ =0x0828FD04
	ldr r0, _0804157C @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xfa
	bl _call_via_r1
	b _08041594
	.align 2, 0
_08041570: .4byte gEquipment
_08041574: .4byte gCurrentSprite
_08041578: .4byte 0x0828FD04
_0804157C: .4byte gSamusData
_08041580:
	strh r1, [r2]
	ldr r1, _0804159C @ =0x0828FD04
	ldr r0, _080415A0 @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xfa
	bl _call_via_r1
_08041594:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804159C: .4byte 0x0828FD04
_080415A0: .4byte gSamusData

	thumb_func_start BlueXStunned
BlueXStunned: @ 0x080415A4
	push {lr}
	bl BlueXCheckStun
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080415DE
	ldr r2, _080415C4 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080415C8
	bl BlueXAbsorbedInit
	b _080415DE
	.align 2, 0
_080415C4: .4byte gCurrentSprite
_080415C8:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080415DE
	subs r1, #0xa
	movs r0, #0x17
	strb r0, [r1]
_080415DE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BlueXFleeing
BlueXFleeing: @ 0x080415E4
	push {r4, lr}
	bl BlueXCheckStun
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804167A
	ldr r4, _08041604 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08041608
	bl BlueXAbsorbedInit
	b _0804167A
	.align 2, 0
_08041604: .4byte gCurrentSprite
_08041608:
	bl BlueXSetTrail
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0xc7
	bhi _0804161A
	adds r0, #1
	strb r0, [r1]
_0804161A:
	ldrb r0, [r1]
	lsrs r2, r0, #3
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08041630
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	b _08041634
_08041630:
	ldrh r0, [r4, #4]
	subs r0, r0, r2
_08041634:
	strh r0, [r4, #4]
	ldr r0, _08041660 @ =gCurrentSprite
	adds r3, r0, #0
	adds r3, #0x31
	ldrb r2, [r3]
	adds r4, r0, #0
	cmp r2, #0xc7
	bhi _08041648
	adds r0, r2, #1
	strb r0, [r3]
_08041648:
	ldrb r0, [r3]
	lsrs r2, r0, #3
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08041664
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	b _08041668
	.align 2, 0
_08041660: .4byte gCurrentSprite
_08041664:
	ldrh r0, [r4, #2]
	subs r0, r0, r2
_08041668:
	strh r0, [r4, #2]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804167A
	strh r0, [r4]
_0804167A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start BlueXAbsorbtionInit
BlueXAbsorbtionInit: @ 0x08041680
	push {r4, lr}
	ldr r0, _080416E8 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _080416EC @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	ldr r1, _080416F0 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	ldr r0, _080416F4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r2, #3
	adds r0, r2, #0
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x22
	strb r2, [r0]
	adds r0, #5
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _080416F8 @ =0x0835F230
	str r0, [r4, #0x18]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0x1c
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080416E8: .4byte gCurrentSprite
_080416EC: .4byte 0x0000FFFB
_080416F0: .4byte 0x0000FFFC
_080416F4: .4byte gIoRegisters
_080416F8: .4byte 0x0835F230

	thumb_func_start BlueXAbsorbtionAbsorbing
BlueXAbsorbtionAbsorbing: @ 0x080416FC
	push {lr}
	ldr r1, _08041724 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08041720
	ldr r0, _08041728 @ =0x0835F338
	str r0, [r1, #0x18]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_08041720:
	pop {r0}
	bx r0
	.align 2, 0
_08041724: .4byte gCurrentSprite
_08041728: .4byte 0x0835F338

	thumb_func_start BlueXAbsorbtionFadingAway
BlueXAbsorbtionFadingAway: @ 0x0804172C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804173C
	ldr r1, _08041740 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_0804173C:
	pop {r0}
	bx r0
	.align 2, 0
_08041740: .4byte gCurrentSprite

	thumb_func_start BlueX
BlueX: @ 0x08041744
	push {lr}
	ldr r1, _08041758 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804175C
	bl SpriteUpdateFreezeTimer
	b _08041822
	.align 2, 0
_08041758: .4byte gCurrentSprite
_0804175C:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1e
	bhi _08041822
	lsls r0, r0, #2
	ldr r1, _08041770 @ =_08041774
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08041770: .4byte _08041774
_08041774: @ jump table
	.4byte _080417F0 @ case 0
	.4byte _080417F6 @ case 1
	.4byte _080417FC @ case 2
	.4byte _08041822 @ case 3
	.4byte _08041822 @ case 4
	.4byte _08041822 @ case 5
	.4byte _08041822 @ case 6
	.4byte _08041822 @ case 7
	.4byte _0804181E @ case 8
	.4byte _08041822 @ case 9
	.4byte _08041822 @ case 10
	.4byte _08041822 @ case 11
	.4byte _08041822 @ case 12
	.4byte _08041822 @ case 13
	.4byte _08041822 @ case 14
	.4byte _08041822 @ case 15
	.4byte _08041822 @ case 16
	.4byte _08041822 @ case 17
	.4byte _08041822 @ case 18
	.4byte _08041822 @ case 19
	.4byte _08041822 @ case 20
	.4byte _08041822 @ case 21
	.4byte _08041822 @ case 22
	.4byte _08041802 @ case 23
	.4byte _08041806 @ case 24
	.4byte _08041822 @ case 25
	.4byte _0804180C @ case 26
	.4byte _08041822 @ case 27
	.4byte _08041812 @ case 28
	.4byte _08041822 @ case 29
	.4byte _08041818 @ case 30
_080417F0:
	bl BlueXInit
	b _08041822
_080417F6:
	bl BlueXIdleInit
	b _08041822
_080417FC:
	bl BlueXIdle
	b _08041822
_08041802:
	bl BlueXMovingInit
_08041806:
	bl BlueXMoving
	b _08041822
_0804180C:
	bl BlueXAbsorbed
	b _08041822
_08041812:
	bl BlueXHiding
	b _08041822
_08041818:
	bl BlueXFleeing
	b _08041822
_0804181E:
	bl BlueXStunned
_08041822:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BlueXAbsorbtion
BlueXAbsorbtion: @ 0x08041828
	push {lr}
	ldr r0, _08041848 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08041858
	cmp r0, #2
	bgt _0804184C
	cmp r0, #0
	beq _08041852
	b _08041862
	.align 2, 0
_08041848: .4byte gCurrentSprite
_0804184C:
	cmp r0, #0x18
	beq _0804185E
	b _08041862
_08041852:
	bl BlueXAbsorbtionInit
	b _08041862
_08041858:
	bl BlueXAbsorbtionAbsorbing
	b _08041862
_0804185E:
	bl BlueXAbsorbtionFadingAway
_08041862:
	ldr r3, _08041884 @ =gCurrentSprite
	ldrb r0, [r3, #0x1e]
	cmp r0, #0
	bne _0804188C
	ldr r2, _08041888 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r1, [r2, #0x18]
	adds r0, r0, r1
	strh r0, [r3, #2]
	ldrh r0, [r2, #0x16]
	strh r0, [r3, #4]
	b _08041892
	.align 2, 0
_08041884: .4byte gCurrentSprite
_08041888: .4byte gSamusData
_0804188C:
	ldrh r0, [r3, #2]
	adds r0, #1
	strh r0, [r3, #2]
_08041892:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MissileHatchSetCollision
MissileHatchSetCollision: @ 0x08041898
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080418E0 @ =gCurrentSprite
	ldrh r5, [r0, #2]
	ldrh r6, [r0, #4]
	ldr r0, _080418E4 @ =gCurrentClipdataAffectingAction
	mov r8, r0
	strb r4, [r0]
	adds r0, r5, #0
	subs r0, #0x40
	adds r6, #0x20
	adds r1, r6, #0
	bl ProcessClipdata
	mov r0, r8
	strb r4, [r0]
	adds r0, r5, #0
	adds r1, r6, #0
	bl ProcessClipdata
	mov r0, r8
	strb r4, [r0]
	adds r5, #0x40
	adds r0, r5, #0
	adds r1, r6, #0
	bl ProcessClipdata
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080418E0: .4byte gCurrentSprite
_080418E4: .4byte gCurrentClipdataAffectingAction

	thumb_func_start MissileHatchInit
MissileHatchInit: @ 0x080418E8
	push {r4, lr}
	ldr r0, _080418FC @ =gMissilesHatchDestroyed
	ldrb r4, [r0]
	cmp r4, #0
	beq _08041904
	ldr r1, _08041900 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0804196A
	.align 2, 0
_080418FC: .4byte gMissilesHatchDestroyed
_08041900: .4byte gCurrentSprite
_08041904:
	ldr r0, _08041970 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #2]
	subs r0, #0x20
	movs r3, #0
	mov r1, ip
	strh r0, [r1, #2]
	ldrh r0, [r1, #4]
	adds r0, #0x20
	strh r0, [r1, #4]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r0, #2
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	ldr r0, _08041974 @ =0x0000FFA0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r0, #0x60
	strh r0, [r1, #0xc]
	ldr r0, _08041978 @ =0x0000FFE0
	strh r0, [r1, #0xe]
	movs r0, #0x20
	strh r0, [r1, #0x10]
	ldr r2, _0804197C @ =sPrimarySpriteStats
	ldrb r1, [r1, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08041980 @ =0x0835FC84
	mov r1, ip
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r4, [r1, #0x16]
	movs r0, #2
	bl MissileHatchSetCollision
_0804196A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08041970: .4byte gCurrentSprite
_08041974: .4byte 0x0000FFA0
_08041978: .4byte 0x0000FFE0
_0804197C: .4byte sPrimarySpriteStats
_08041980: .4byte 0x0835FC84

	thumb_func_start MissileHatchIdle
MissileHatchIdle: @ 0x08041984
	push {r4, lr}
	ldr r2, _080419B4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x26
	movs r4, #1
	strb r4, [r0]
	ldrh r3, [r2, #0x14]
	cmp r3, #0
	bne _080419AE
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2e
	strb r3, [r0]
	ldr r0, _080419B8 @ =gMissilesHatchDestroyed
	strb r4, [r0]
	movs r0, #1
	bl MissileHatchSetCollision
_080419AE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080419B4: .4byte gCurrentSprite
_080419B8: .4byte gMissilesHatchDestroyed

	thumb_func_start MissileHatchExploding
MissileHatchExploding: @ 0x080419BC
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r2, _080419F4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	movs r0, #0x2e
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r0, #1
	mov r5, ip
	strb r1, [r5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r5, r2, #0
	cmp r0, #0x18
	bls _080419E8
	b _08041BE4
_080419E8:
	lsls r0, r0, #2
	ldr r1, _080419F8 @ =_080419FC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080419F4: .4byte gCurrentSprite
_080419F8: .4byte _080419FC
_080419FC: @ jump table
	.4byte _08041A60 @ case 0
	.4byte _08041BE4 @ case 1
	.4byte _08041A74 @ case 2
	.4byte _08041BE4 @ case 3
	.4byte _08041AA4 @ case 4
	.4byte _08041BE4 @ case 5
	.4byte _08041AD4 @ case 6
	.4byte _08041BE4 @ case 7
	.4byte _08041ADE @ case 8
	.4byte _08041BE4 @ case 9
	.4byte _08041B14 @ case 10
	.4byte _08041BE4 @ case 11
	.4byte _08041B3E @ case 12
	.4byte _08041BE4 @ case 13
	.4byte _08041B78 @ case 14
	.4byte _08041BE4 @ case 15
	.4byte _08041B82 @ case 16
	.4byte _08041BE4 @ case 17
	.4byte _08041BB8 @ case 18
	.4byte _08041BE4 @ case 19
	.4byte _08041BC0 @ case 20
	.4byte _08041BE4 @ case 21
	.4byte _08041BC6 @ case 22
	.4byte _08041BE4 @ case 23
	.4byte _08041BD4 @ case 24
_08041A60:
	adds r0, r3, #0
	adds r1, r4, #0
	movs r2, #0x25
	bl ParticleSet
	movs r0, #0x83
	lsls r0, r0, #1
	bl SoundPlay
	b _08041BE4
_08041A74:
	adds r0, r3, #0
	subs r0, #0x20
	adds r1, r4, #0
	adds r1, #0x10
	movs r2, #0x26
	bl ParticleSet
	ldr r1, _08041AA0 @ =gCurrentSprite
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x40
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #8
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	b _08041B34
	.align 2, 0
_08041AA0: .4byte gCurrentSprite
_08041AA4:
	adds r0, r3, #0
	adds r0, #0x1e
	adds r1, r4, #0
	subs r1, #0x10
	movs r2, #0x26
	bl ParticleSet
	ldr r1, _08041AD0 @ =gCurrentSprite
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x10
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #8
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	b _08041B34
	.align 2, 0
_08041AD0: .4byte gCurrentSprite
_08041AD4:
	adds r0, r3, #0
	adds r0, #0x38
	adds r1, r4, #0
	adds r1, #0xc
	b _08041BCC
_08041ADE:
	adds r0, r3, #0
	subs r0, #0x3c
	adds r1, r4, #0
	subs r1, #0xc
	movs r2, #0x25
	bl ParticleSet
	ldr r1, _08041B10 @ =gCurrentSprite
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0xc
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x41
	movs r1, #2
	bl SpriteSpawnSecondary
	b _08041BE4
	.align 2, 0
_08041B10: .4byte gCurrentSprite
_08041B14:
	ldrh r1, [r5]
	movs r0, #4
	movs r4, #0
	orrs r0, r1
	strh r0, [r5]
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r5, #4]
	subs r0, #8
	str r0, [sp, #4]
	str r4, [sp, #8]
_08041B34:
	movs r0, #0x41
	movs r1, #0
	bl SpriteSpawnSecondary
	b _08041BE4
_08041B3E:
	adds r0, r3, #0
	adds r1, r4, #0
	movs r2, #0x24
	bl ParticleSet
	ldr r1, _08041B70 @ =gCurrentSprite
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	adds r0, #0x60
	str r0, [sp]
	ldrh r0, [r1, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x41
	movs r1, #3
	bl SpriteSpawnSecondary
	ldr r0, _08041B74 @ =0x00000145
	bl SoundPlay
	b _08041BE4
	.align 2, 0
_08041B70: .4byte gCurrentSprite
_08041B74: .4byte 0x00000145
_08041B78:
	adds r0, r3, #0
	adds r0, #0x10
	adds r1, r4, #0
	subs r1, #0xa
	b _08041BCC
_08041B82:
	adds r0, r3, #0
	subs r0, #0x10
	adds r1, r4, #0
	adds r1, #0x14
	movs r2, #0x25
	bl ParticleSet
	ldr r1, _08041BB4 @ =gCurrentSprite
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x20
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #8
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x41
	movs r1, #1
	bl SpriteSpawnSecondary
	b _08041BE4
	.align 2, 0
_08041BB4: .4byte gCurrentSprite
_08041BB8:
	adds r0, r3, #0
	adds r0, #0x30
	subs r1, r4, #4
	b _08041BCC
_08041BC0:
	adds r0, r3, #0
	subs r0, #0x30
	b _08041BCA
_08041BC6:
	adds r0, r3, #0
	adds r0, #0x40
_08041BCA:
	adds r1, r4, #4
_08041BCC:
	movs r2, #0x25
	bl ParticleSet
	b _08041BE4
_08041BD4:
	adds r0, r3, #0
	adds r1, r4, #0
	movs r2, #0x25
	bl ParticleSet
	ldr r1, _08041BEC @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08041BE4:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08041BEC: .4byte gCurrentSprite

	thumb_func_start MissileHatchDebrisInit
MissileHatchDebrisInit: @ 0x08041BF0
	push {r4, lr}
	ldr r0, _08041C58 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08041C5C @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #2
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	mov r4, ip
	adds r4, #0x29
	movs r0, #8
	strb r0, [r4]
	ldr r0, _08041C60 @ =0x0000FFE0
	mov r4, ip
	strh r0, [r4, #0xa]
	strh r3, [r4, #0xc]
	adds r0, #0x10
	strh r0, [r4, #0xe]
	strh r1, [r4, #0x10]
	mov r0, ip
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
	subs r0, #2
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r1, #2
	movs r0, #0x6c
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldrb r0, [r4, #0x1e]
	cmp r0, #1
	bne _08041C68
	ldr r0, _08041C64 @ =0x0835FCDC
	str r0, [r4, #0x18]
	b _08041C8A
	.align 2, 0
_08041C58: .4byte gCurrentSprite
_08041C5C: .4byte 0x0000FFFB
_08041C60: .4byte 0x0000FFE0
_08041C64: .4byte 0x0835FCDC
_08041C68:
	cmp r0, #2
	bne _08041C74
	ldr r0, _08041C70 @ =0x0835FCEC
	b _08041C86
	.align 2, 0
_08041C70: .4byte 0x0835FCEC
_08041C74:
	cmp r0, #3
	bne _08041C84
	ldr r0, _08041C80 @ =0x0835FCFC
	mov r4, ip
	str r0, [r4, #0x18]
	b _08041C8A
	.align 2, 0
_08041C80: .4byte 0x0835FCFC
_08041C84:
	ldr r0, _08041C90 @ =0x0835FC94
_08041C86:
	mov r1, ip
	str r0, [r1, #0x18]
_08041C8A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08041C90: .4byte 0x0835FC94

	thumb_func_start MissileHatchDebrisFalling
MissileHatchDebrisFalling: @ 0x08041C94
	push {r4, r5, r6, r7, lr}
	ldr r4, _08041CE0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08041CB4
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x27
	bl ParticleSet
_08041CB4:
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _08041CF6
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r2, [r6]
	ldr r5, _08041CE4 @ =0x0835F3E0
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08041CE8 @ =0x00007FFF
	cmp r1, r0
	bne _08041CEC
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #4]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08041CF4
	.align 2, 0
_08041CE0: .4byte gCurrentSprite
_08041CE4: .4byte 0x0835F3E0
_08041CE8: .4byte 0x00007FFF
_08041CEC:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #4]
	adds r0, r0, r3
_08041CF4:
	strh r0, [r4, #4]
_08041CF6:
	ldr r4, _08041D28 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08041D2C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08041D34
	movs r0, #0
	strh r1, [r4, #2]
	strh r0, [r4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x25
	bl ParticleSet
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _08041E0E
	ldr r0, _08041D30 @ =0x00000107
	bl SoundPlay
	b _08041E0E
	.align 2, 0
_08041D28: .4byte gCurrentSprite
_08041D2C: .4byte gPreviousVerticalCollisionCheck
_08041D30: .4byte 0x00000107
_08041D34:
	ldrb r0, [r4, #0x1e]
	cmp r0, #3
	bne _08041D68
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08041D60 @ =sSpritesFallingSpeedMissileHatchDebris
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08041D64 @ =0x00007FFF
	cmp r1, r0
	bne _08041E04
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08041E0C
	.align 2, 0
_08041D60: .4byte sSpritesFallingSpeedMissileHatchDebris
_08041D64: .4byte 0x00007FFF
_08041D68:
	cmp r0, #2
	bne _08041D9C
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08041D94 @ =sSpritesFallingSpeedHovering
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08041D98 @ =0x00007FFF
	cmp r1, r0
	bne _08041E04
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08041E0C
	.align 2, 0
_08041D94: .4byte sSpritesFallingSpeedHovering
_08041D98: .4byte 0x00007FFF
_08041D9C:
	cmp r0, #1
	bne _08041DD4
	ldrh r0, [r4, #4]
	subs r0, #1
	strh r0, [r4, #4]
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08041DCC @ =sSpritesFallingSpeed_2e499c
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08041DD0 @ =0x00007FFF
	cmp r1, r0
	bne _08041E04
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08041E0C
	.align 2, 0
_08041DCC: .4byte sSpritesFallingSpeed_2e499c
_08041DD0: .4byte 0x00007FFF
_08041DD4:
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08041DFC @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08041E00 @ =0x00007FFF
	cmp r1, r0
	bne _08041E04
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08041E0C
	.align 2, 0
_08041DFC: .4byte sSpritesFallingSpeed
_08041E00: .4byte 0x00007FFF
_08041E04:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_08041E0C:
	strh r0, [r4, #2]
_08041E0E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start MissileHatch
MissileHatch: @ 0x08041E14
	push {lr}
	ldr r0, _08041E34 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08041E44
	cmp r0, #2
	bgt _08041E38
	cmp r0, #0
	beq _08041E3E
	b _08041E4E
	.align 2, 0
_08041E34: .4byte gCurrentSprite
_08041E38:
	cmp r0, #0x18
	beq _08041E4A
	b _08041E4E
_08041E3E:
	bl MissileHatchInit
	b _08041E4E
_08041E44:
	bl MissileHatchIdle
	b _08041E4E
_08041E4A:
	bl MissileHatchExploding
_08041E4E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MissileHatchDebris
MissileHatchDebris: @ 0x08041E54
	push {lr}
	ldr r0, _08041E70 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08041E74
	cmp r0, #2
	beq _08041E7A
	b _08041E7E
	.align 2, 0
_08041E70: .4byte gCurrentSprite
_08041E74:
	bl MissileHatchDebrisInit
	b _08041E7E
_08041E7A:
	bl MissileHatchDebrisFalling
_08041E7E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierCoreSuperInit
XBarrierCoreSuperInit: @ 0x08041E84
	push {r4, r5, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r2, _08041EA4 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #0x59
	bne _08041EA8
	movs r0, #0x5a
	strb r0, [r3]
	movs r0, #0x2c
	strh r0, [r2, #6]
	b _08041ED4
	.align 2, 0
_08041EA4: .4byte gCurrentSprite
_08041EA8:
	ldrb r1, [r2, #0x1d]
	adds r0, r1, #0
	subs r0, #0x78
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	ldr r0, _08041ECC @ =gSuperXBarrierCoresDestroyed
	ldrh r0, [r0]
	asrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08041ED0
	movs r0, #0
	strh r0, [r2]
	b _08041FA6
	.align 2, 0
_08041ECC: .4byte gSuperXBarrierCoresDestroyed
_08041ED0:
	movs r0, #2
	strb r0, [r3]
_08041ED4:
	ldr r4, _08041F38 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r3, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r2, _08041F3C @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r1, #3
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _08041F40 @ =0x08360664
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	beq _08041F60
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08041F44
	strh r0, [r4]
	b _08041FA6
	.align 2, 0
_08041F38: .4byte gCurrentSprite
_08041F3C: .4byte sPrimarySpriteStats
_08041F40: .4byte 0x08360664
_08041F44:
	ldr r0, _08041F58 @ =0x0000FFC0
	strh r0, [r4, #0xa]
	movs r0, #0x40
	strh r0, [r4, #0xc]
	ldr r0, _08041F5C @ =0x0000FFD0
	strh r0, [r4, #0xe]
	movs r0, #0x30
	strh r0, [r4, #0x10]
	b _08041FA6
	.align 2, 0
_08041F58: .4byte 0x0000FFC0
_08041F5C: .4byte 0x0000FFD0
_08041F60:
	ldr r0, _08041F98 @ =0x0000FFD0
	strh r0, [r4, #0xa]
	movs r0, #0x30
	strh r0, [r4, #0xc]
	ldr r0, _08041F9C @ =0x0000FFD8
	strh r0, [r4, #0xe]
	movs r0, #0x28
	strh r0, [r4, #0x10]
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x42
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _08041FA0
	strh r5, [r4]
	b _08041FA6
	.align 2, 0
_08041F98: .4byte 0x0000FFD0
_08041F9C: .4byte 0x0000FFD8
_08041FA0:
	movs r0, #3
	bl XBarrierCoreSetCollision
_08041FA6:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierCoreSuperIdleInit
XBarrierCoreSuperIdleInit: @ 0x08041FB0
	ldr r1, _08041FC8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08041FCC @ =0x08360664
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08041FC8: .4byte gCurrentSprite
_08041FCC: .4byte 0x08360664

	thumb_func_start XBarrierCoreSuperIdle
XBarrierCoreSuperIdle: @ 0x08041FD0
	bx lr
	.align 2, 0

	thumb_func_start XBarrierCoreSuperDying
XBarrierCoreSuperDying: @ 0x08041FD4
	push {lr}
	ldr r0, _08041FFC @ =gCurrentSprite
	ldrb r0, [r0, #0x1d]
	subs r0, #0x78
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #9
	lsls r1, r0
	lsrs r1, r1, #0x10
	ldr r2, _08042000 @ =gSuperXBarrierCoresDestroyed
	ldrh r0, [r2]
	orrs r1, r0
	strh r1, [r2]
	movs r0, #1
	bl XBarrierCoreSetCollision
	pop {r0}
	bx r0
	.align 2, 0
_08041FFC: .4byte gCurrentSprite
_08042000: .4byte gSuperXBarrierCoresDestroyed

	thumb_func_start XBarrierCoreSuper
XBarrierCoreSuper: @ 0x08042004
	push {r4, lr}
	ldr r4, _0804203C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804201E
	movs r0, #0xb0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804201E:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08042040
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x42
	bl UpdateSecondarySpritesFreezeTimer
	b _080420AC
	.align 2, 0
_0804203C: .4byte gCurrentSprite
_08042040:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x57
	beq _08042084
	cmp r0, #0x57
	bgt _08042062
	cmp r0, #1
	beq _0804207A
	cmp r0, #1
	bgt _0804205C
	cmp r0, #0
	beq _08042074
	b _080420AC
_0804205C:
	cmp r0, #2
	beq _0804207E
	b _080420AC
_08042062:
	cmp r0, #0x59
	beq _0804209E
	cmp r0, #0x59
	blt _08042098
	cmp r0, #0x5a
	beq _080420A2
	cmp r0, #0x5b
	beq _080420A8
	b _080420AC
_08042074:
	bl XBarrierCoreSuperInit
	b _080420AC
_0804207A:
	bl XBarrierCoreSuperIdleInit
_0804207E:
	bl XBarrierCoreSuperIdle
	b _080420AC
_08042084:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x42
	bl UnfreezeSecondarySprites
	bl XBarrierCoreSuperDying
	bl SpriteDyingInit
_08042098:
	bl SpriteDying
	b _080420AC
_0804209E:
	bl XBarrierCoreSuperInit
_080420A2:
	bl SpriteSpawningFromX
	b _080420AC
_080420A8:
	bl XParasiteInit
_080420AC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierCoreSuperStem
XBarrierCoreSuperStem: @ 0x080420B4
	push {r4, r5, r6, lr}
	ldr r4, _080420CC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r6, [r0]
	cmp r6, #0
	beq _080420D0
	bl SpriteUpdateFreezeTimer
	bl UpdatePrimarySpriteFreezeTimer
	b _080421E2
	.align 2, 0
_080420CC: .4byte gCurrentSprite
_080420D0:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r3, r4, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #2
	beq _08042160
	cmp r0, #2
	bgt _080420EC
	cmp r0, #0
	beq _080420F4
	lsls r2, r5, #3
	b _080421A8
_080420EC:
	cmp r0, #0x18
	beq _08042194
	lsls r2, r5, #3
	b _080421A8
_080420F4:
	ldrh r1, [r4]
	ldr r0, _0804214C @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	movs r0, #2
	strb r0, [r3]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	ldr r0, _08042150 @ =0x0000FF80
	strh r0, [r4, #0xa]
	movs r0, #0x80
	strh r0, [r4, #0xc]
	ldr r0, _08042154 @ =0x0000FFF0
	strh r0, [r4, #0xe]
	movs r0, #0x10
	strh r0, [r4, #0x10]
	ldr r1, _08042158 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	adds r1, #3
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _0804215C @ =0x08360614
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r6, [r4, #0x16]
	lsls r2, r5, #3
	b _080421A8
	.align 2, 0
_0804214C: .4byte 0x0000FFFB
_08042150: .4byte 0x0000FF80
_08042154: .4byte 0x0000FFF0
_08042158: .4byte sSecondarySpriteStats
_0804215C: .4byte 0x08360614
_08042160:
	ldr r2, _0804218C @ =gSpriteData
	lsls r1, r5, #3
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0, #0x14]
	adds r2, r1, #0
	cmp r0, #0
	bne _080421A8
	movs r0, #0x18
	strb r0, [r3]
	ldr r0, _08042190 @ =0x0836063C
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
	strh r6, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	b _080421A8
	.align 2, 0
_0804218C: .4byte gSpriteData
_08042190: .4byte 0x0836063C
_08042194:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	lsls r2, r5, #3
	cmp r0, #0
	beq _080421A8
	strh r6, [r4]
_080421A8:
	ldr r1, _080421D0 @ =gSpriteData
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080421D8
	ldr r1, _080421D4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r2, [r1]
	movs r0, #0x20
	orrs r0, r2
	strh r0, [r1]
	b _080421E2
	.align 2, 0
_080421D0: .4byte gSpriteData
_080421D4: .4byte gCurrentSprite
_080421D8:
	ldr r2, _080421E8 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _080421EC @ =0x0000FFDF
	ands r0, r1
	strh r0, [r2]
_080421E2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080421E8: .4byte gCurrentSprite
_080421EC: .4byte 0x0000FFDF

	thumb_func_start XBarrierCorePowerInit
XBarrierCorePowerInit: @ 0x080421F0
	push {r4, r5, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r2, _08042210 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #0x59
	bne _08042214
	movs r0, #0x5a
	strb r0, [r3]
	movs r0, #0x2c
	strh r0, [r2, #6]
	b _08042240
	.align 2, 0
_08042210: .4byte gCurrentSprite
_08042214:
	ldrb r1, [r2, #0x1d]
	adds r0, r1, #0
	subs r0, #0x78
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	ldr r0, _08042238 @ =gPowerBombXBarrierCoresDestroyed
	ldrh r0, [r0]
	asrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0804223C
	movs r0, #0
	strh r0, [r2]
	b _08042316
	.align 2, 0
_08042238: .4byte gPowerBombXBarrierCoresDestroyed
_0804223C:
	movs r0, #2
	strb r0, [r3]
_08042240:
	ldr r4, _080422A8 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r3, #0
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r2, _080422AC @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r1, #0x13
	movs r0, #1
	strb r0, [r1]
	subs r1, #0x10
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _080422B0 @ =0x08361958
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	beq _080422D0
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _080422B4
	strh r0, [r4]
	b _08042316
	.align 2, 0
_080422A8: .4byte gCurrentSprite
_080422AC: .4byte sPrimarySpriteStats
_080422B0: .4byte 0x08361958
_080422B4:
	ldr r0, _080422C8 @ =0x0000FFC0
	strh r0, [r4, #0xa]
	movs r0, #0x40
	strh r0, [r4, #0xc]
	ldr r0, _080422CC @ =0x0000FFC8
	strh r0, [r4, #0xe]
	movs r0, #0x38
	strh r0, [r4, #0x10]
	b _08042316
	.align 2, 0
_080422C8: .4byte 0x0000FFC0
_080422CC: .4byte 0x0000FFC8
_080422D0:
	ldr r0, _08042308 @ =0x0000FFC0
	strh r0, [r4, #0xa]
	movs r0, #0x40
	strh r0, [r4, #0xc]
	ldr r0, _0804230C @ =0x0000FFD0
	strh r0, [r4, #0xe]
	movs r0, #0x30
	strh r0, [r4, #0x10]
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x43
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _08042310
	strh r5, [r4]
	b _08042316
	.align 2, 0
_08042308: .4byte 0x0000FFC0
_0804230C: .4byte 0x0000FFD0
_08042310:
	movs r0, #3
	bl XBarrierCoreSetCollision
_08042316:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierCorePowerIdleInit
XBarrierCorePowerIdleInit: @ 0x08042320
	ldr r1, _08042338 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0804233C @ =0x08361958
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08042338: .4byte gCurrentSprite
_0804233C: .4byte 0x08361958

	thumb_func_start XBarrierCorePowerIdle
XBarrierCorePowerIdle: @ 0x08042340
	push {lr}
	ldr r1, _0804235C @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0x24
	bne _08042358
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _08042358
	movs r0, #0xd8
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08042358:
	pop {r0}
	bx r0
	.align 2, 0
_0804235C: .4byte gCurrentSprite

	thumb_func_start XBarrierCorePowerDying
XBarrierCorePowerDying: @ 0x08042360
	push {lr}
	ldr r0, _08042388 @ =gCurrentSprite
	ldrb r0, [r0, #0x1d]
	subs r0, #0x78
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #9
	lsls r1, r0
	lsrs r1, r1, #0x10
	ldr r2, _0804238C @ =gPowerBombXBarrierCoresDestroyed
	ldrh r0, [r2]
	orrs r1, r0
	strh r1, [r2]
	movs r0, #1
	bl XBarrierCoreSetCollision
	pop {r0}
	bx r0
	.align 2, 0
_08042388: .4byte gCurrentSprite
_0804238C: .4byte gPowerBombXBarrierCoresDestroyed

	thumb_func_start XBarrierCorePower
XBarrierCorePower: @ 0x08042390
	push {r4, lr}
	ldr r4, _080423C8 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _080423AA
	movs r0, #0xb0
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080423AA:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _080423CC
	bl SpriteUpdateFreezeTimer
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x43
	bl UpdateSecondarySpritesFreezeTimer
	b _08042438
	.align 2, 0
_080423C8: .4byte gCurrentSprite
_080423CC:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x57
	beq _08042410
	cmp r0, #0x57
	bgt _080423EE
	cmp r0, #1
	beq _08042406
	cmp r0, #1
	bgt _080423E8
	cmp r0, #0
	beq _08042400
	b _08042438
_080423E8:
	cmp r0, #2
	beq _0804240A
	b _08042438
_080423EE:
	cmp r0, #0x59
	beq _0804242A
	cmp r0, #0x59
	blt _08042424
	cmp r0, #0x5a
	beq _0804242E
	cmp r0, #0x5b
	beq _08042434
	b _08042438
_08042400:
	bl XBarrierCorePowerInit
	b _08042438
_08042406:
	bl XBarrierCorePowerIdleInit
_0804240A:
	bl XBarrierCorePowerIdle
	b _08042438
_08042410:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x43
	bl UnfreezeSecondarySprites
	bl XBarrierCorePowerDying
	bl SpriteDyingInit
_08042424:
	bl SpriteDying
	b _08042438
_0804242A:
	bl XBarrierCorePowerInit
_0804242E:
	bl SpriteSpawningFromX
	b _08042438
_08042434:
	bl XParasiteInit
_08042438:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start XBarrierCorePowerStem
XBarrierCorePowerStem: @ 0x08042440
	push {r4, r5, r6, lr}
	ldr r4, _08042458 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r6, [r0]
	cmp r6, #0
	beq _0804245C
	bl SpriteUpdateFreezeTimer
	bl UpdatePrimarySpriteFreezeTimer
	b _0804256E
	.align 2, 0
_08042458: .4byte gCurrentSprite
_0804245C:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r3, r4, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #2
	beq _080424EC
	cmp r0, #2
	bgt _08042478
	cmp r0, #0
	beq _08042480
	lsls r2, r5, #3
	b _08042534
_08042478:
	cmp r0, #0x18
	beq _08042520
	lsls r2, r5, #3
	b _08042534
_08042480:
	ldrh r1, [r4]
	ldr r0, _080424D8 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r4]
	movs r0, #2
	strb r0, [r3]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r3, r4, #0
	adds r3, #0x29
	movs r0, #0x10
	strb r0, [r3]
	ldr r0, _080424DC @ =0x0000FF80
	strh r0, [r4, #0xa]
	movs r0, #0x80
	strh r0, [r4, #0xc]
	ldr r0, _080424E0 @ =0x0000FFE0
	strh r0, [r4, #0xe]
	strh r1, [r4, #0x10]
	ldr r1, _080424E4 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	adds r1, #3
	movs r0, #0xd
	strb r0, [r1]
	ldr r0, _080424E8 @ =0x083617E0
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r6, [r4, #0x16]
	lsls r2, r5, #3
	b _08042534
	.align 2, 0
_080424D8: .4byte 0x0000FFFB
_080424DC: .4byte 0x0000FF80
_080424E0: .4byte 0x0000FFE0
_080424E4: .4byte sSecondarySpriteStats
_080424E8: .4byte 0x083617E0
_080424EC:
	ldr r2, _08042518 @ =gSpriteData
	lsls r1, r5, #3
	subs r0, r1, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r0, [r0, #0x14]
	adds r2, r1, #0
	cmp r0, #0
	bne _08042534
	movs r0, #0x18
	strb r0, [r3]
	ldr r0, _0804251C @ =0x08361928
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
	strh r6, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	b _08042534
	.align 2, 0
_08042518: .4byte gSpriteData
_0804251C: .4byte 0x08361928
_08042520:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	lsls r2, r5, #3
	cmp r0, #0
	beq _08042534
	strh r6, [r4]
_08042534:
	ldr r1, _0804255C @ =gSpriteData
	subs r0, r2, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08042564
	ldr r1, _08042560 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r2, [r1]
	movs r0, #0x20
	orrs r0, r2
	strh r0, [r1]
	b _0804256E
	.align 2, 0
_0804255C: .4byte gSpriteData
_08042560: .4byte gCurrentSprite
_08042564:
	ldr r2, _08042574 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08042578 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r2]
_0804256E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08042574: .4byte gCurrentSprite
_08042578: .4byte 0x0000FFDF

	thumb_func_start RipperInit
RipperInit: @ 0x0804257C
	push {r4, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _080425AC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _080425C4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _080425B0
	strh r0, [r2]
	b _08042634
	.align 2, 0
_080425AC: .4byte gCurrentSprite
_080425B0:
	movs r1, #0
	ldr r0, _080425C0 @ =0x0000FFC8
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	adds r0, #8
	strh r0, [r2, #0xe]
	movs r0, #0x30
	b _080425D0
	.align 2, 0
_080425C0: .4byte 0x0000FFC8
_080425C4:
	ldr r0, _08042620 @ =0x0000FFD0
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	adds r0, #0x10
	strh r0, [r2, #0xe]
	movs r0, #0x20
_080425D0:
	strh r0, [r2, #0x10]
	ldr r4, _08042624 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0
	movs r2, #0x10
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _08042628 @ =0x083622F4
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r1, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	ldr r2, _0804262C @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	bl SpriteChooseRandomXFlip
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08042630
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _08042634
	.align 2, 0
_08042620: .4byte 0x0000FFD0
_08042624: .4byte gCurrentSprite
_08042628: .4byte 0x083622F4
_0804262C: .4byte sPrimarySpriteStats
_08042630:
	movs r0, #1
	strb r0, [r1]
_08042634:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RipperIdleInit
RipperIdleInit: @ 0x0804263C
	ldr r1, _08042654 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08042658 @ =0x083622F4
	str r0, [r1, #0x18]
	movs r0, #0
	strh r3, [r1, #0x16]
	strb r0, [r1, #0x1c]
	bx lr
	.align 2, 0
_08042654: .4byte gCurrentSprite
_08042658: .4byte 0x083622F4

	thumb_func_start RipperIdle
RipperIdle: @ 0x0804265C
	push {r4, lr}
	ldr r4, _08042684 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804268C
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08042688 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _080426A0
	ldrh r0, [r4, #4]
	adds r0, #2
	b _080426B4
	.align 2, 0
_08042684: .4byte gCurrentSprite
_08042688: .4byte gPreviousCollisionCheck
_0804268C:
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x28
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080426AC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _080426B0
_080426A0:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _080426B6
	.align 2, 0
_080426AC: .4byte gPreviousCollisionCheck
_080426B0:
	ldrh r0, [r4, #4]
	subs r0, #2
_080426B4:
	strh r0, [r4, #4]
_080426B6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RipperTurningAroundInit
RipperTurningAroundInit: @ 0x080426BC
	ldr r1, _080426D4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _080426D8 @ =0x0836231C
	str r0, [r1, #0x18]
	movs r0, #0
	strh r3, [r1, #0x16]
	strb r0, [r1, #0x1c]
	bx lr
	.align 2, 0
_080426D4: .4byte gCurrentSprite
_080426D8: .4byte 0x0836231C

	thumb_func_start RipperTurningAround
RipperTurningAround: @ 0x080426DC
	push {r4, lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08042700
	ldr r2, _08042708 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	eors r1, r0
	movs r3, #0
	movs r4, #0
	strh r1, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #5
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
_08042700:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042708: .4byte gCurrentSprite

	thumb_func_start RipperTurningAroundSecondPart
RipperTurningAroundSecondPart: @ 0x0804270C
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804271E
	ldr r0, _08042724 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804271E:
	pop {r0}
	bx r0
	.align 2, 0
_08042724: .4byte gCurrentSprite

	thumb_func_start Ripper
Ripper: @ 0x08042728
	push {r4, lr}
	ldr r4, _08042750 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08042740
	ldr r0, _08042754 @ =0x000001D3
	bl CheckPlayNotAlreadyPlayingSound
_08042740:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08042758
	bl SpriteUpdateFreezeTimer
	b _08042924
	.align 2, 0
_08042750: .4byte gCurrentSprite
_08042754: .4byte 0x000001D3
_08042758:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08042764
	b _08042924
_08042764:
	lsls r0, r0, #2
	ldr r1, _08042770 @ =_08042774
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08042770: .4byte _08042774
_08042774: @ jump table
	.4byte _080428E4 @ case 0
	.4byte _080428EA @ case 1
	.4byte _080428EE @ case 2
	.4byte _080428F4 @ case 3
	.4byte _080428F8 @ case 4
	.4byte _080428FE @ case 5
	.4byte _08042924 @ case 6
	.4byte _08042924 @ case 7
	.4byte _08042924 @ case 8
	.4byte _08042924 @ case 9
	.4byte _08042924 @ case 10
	.4byte _08042924 @ case 11
	.4byte _08042924 @ case 12
	.4byte _08042924 @ case 13
	.4byte _08042924 @ case 14
	.4byte _08042924 @ case 15
	.4byte _08042924 @ case 16
	.4byte _08042924 @ case 17
	.4byte _08042924 @ case 18
	.4byte _08042924 @ case 19
	.4byte _08042924 @ case 20
	.4byte _08042924 @ case 21
	.4byte _08042924 @ case 22
	.4byte _08042924 @ case 23
	.4byte _08042924 @ case 24
	.4byte _08042924 @ case 25
	.4byte _08042924 @ case 26
	.4byte _08042924 @ case 27
	.4byte _08042924 @ case 28
	.4byte _08042924 @ case 29
	.4byte _08042924 @ case 30
	.4byte _08042924 @ case 31
	.4byte _08042924 @ case 32
	.4byte _08042924 @ case 33
	.4byte _08042924 @ case 34
	.4byte _08042924 @ case 35
	.4byte _08042924 @ case 36
	.4byte _08042924 @ case 37
	.4byte _08042924 @ case 38
	.4byte _08042924 @ case 39
	.4byte _08042924 @ case 40
	.4byte _08042924 @ case 41
	.4byte _08042924 @ case 42
	.4byte _08042924 @ case 43
	.4byte _08042924 @ case 44
	.4byte _08042924 @ case 45
	.4byte _08042924 @ case 46
	.4byte _08042924 @ case 47
	.4byte _08042924 @ case 48
	.4byte _08042924 @ case 49
	.4byte _08042924 @ case 50
	.4byte _08042924 @ case 51
	.4byte _08042924 @ case 52
	.4byte _08042924 @ case 53
	.4byte _08042924 @ case 54
	.4byte _08042924 @ case 55
	.4byte _08042924 @ case 56
	.4byte _08042924 @ case 57
	.4byte _08042924 @ case 58
	.4byte _08042924 @ case 59
	.4byte _08042924 @ case 60
	.4byte _08042924 @ case 61
	.4byte _08042924 @ case 62
	.4byte _08042924 @ case 63
	.4byte _08042924 @ case 64
	.4byte _08042924 @ case 65
	.4byte _08042924 @ case 66
	.4byte _08042924 @ case 67
	.4byte _08042924 @ case 68
	.4byte _08042924 @ case 69
	.4byte _08042924 @ case 70
	.4byte _08042924 @ case 71
	.4byte _08042924 @ case 72
	.4byte _08042924 @ case 73
	.4byte _08042924 @ case 74
	.4byte _08042924 @ case 75
	.4byte _08042924 @ case 76
	.4byte _08042924 @ case 77
	.4byte _08042924 @ case 78
	.4byte _08042924 @ case 79
	.4byte _08042924 @ case 80
	.4byte _08042924 @ case 81
	.4byte _08042924 @ case 82
	.4byte _08042924 @ case 83
	.4byte _08042924 @ case 84
	.4byte _08042924 @ case 85
	.4byte _08042924 @ case 86
	.4byte _08042904 @ case 87
	.4byte _08042908 @ case 88
	.4byte _0804290E @ case 89
	.4byte _08042912 @ case 90
	.4byte _08042918 @ case 91
_080428E4:
	bl RipperInit
	b _08042924
_080428EA:
	bl RipperIdleInit
_080428EE:
	bl RipperIdle
	b _08042924
_080428F4:
	bl RipperTurningAroundInit
_080428F8:
	bl RipperTurningAround
	b _08042924
_080428FE:
	bl RipperTurningAroundSecondPart
	b _08042924
_08042904:
	bl SpriteDyingInit
_08042908:
	bl SpriteDying
	b _08042924
_0804290E:
	bl RipperInit
_08042912:
	bl SpriteSpawningFromX
	b _08042924
_08042918:
	bl XParasiteInit
	ldr r1, _0804292C @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x1c
	strh r0, [r1, #2]
_08042924:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804292C: .4byte gCurrentSprite

	thumb_func_start ZoroCocoonSetHitboxesAndDrawDistance
ZoroCocoonSetHitboxesAndDrawDistance: @ 0x08042930
	push {lr}
	ldr r1, _08042958 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	beq _08042970
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08042960
	ldr r0, _0804295C @ =0x0000FFC4
	strh r0, [r2, #0xa]
	movs r1, #0x3c
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	movs r0, #4
	b _0804299C
	.align 2, 0
_08042958: .4byte gCurrentSprite
_0804295C: .4byte 0x0000FFC4
_08042960:
	ldr r0, _0804296C @ =0x0000FFC4
	strh r0, [r2, #0xa]
	movs r1, #0x3c
	strh r1, [r2, #0xc]
	adds r0, #0x38
	b _08042986
	.align 2, 0
_0804296C: .4byte 0x0000FFC4
_08042970:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08042990
	movs r0, #4
	strh r0, [r2, #0xa]
	movs r1, #0x3c
	strh r1, [r2, #0xc]
	ldr r0, _0804298C @ =0x0000FFC4
_08042986:
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	b _0804299E
	.align 2, 0
_0804298C: .4byte 0x0000FFC4
_08042990:
	ldr r0, _080429B4 @ =0x0000FFC4
	strh r0, [r2, #0xa]
	movs r1, #4
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	movs r0, #0x3c
_0804299C:
	strh r0, [r2, #0x10]
_0804299E:
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080429B4: .4byte 0x0000FFC4

	thumb_func_start ZoroCocoonSetOam
ZoroCocoonSetOam: @ 0x080429B8
	push {lr}
	bl EventCheckAfter_EscapedSaXTro1
	cmp r0, #0
	beq _080429F4
	ldr r0, _080429D4 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _080429DC
	ldr r0, _080429D8 @ =0x08363430
	b _080429DE
	.align 2, 0
_080429D4: .4byte gCurrentSprite
_080429D8: .4byte 0x08363430
_080429DC:
	ldr r0, _080429EC @ =0x08363490
_080429DE:
	str r0, [r2, #0x18]
	ldr r0, _080429F0 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	b _08042A16
	.align 2, 0
_080429EC: .4byte 0x08363490
_080429F0: .4byte gSpriteRandomNumber
_080429F4:
	ldr r0, _08042A08 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _08042A10
	ldr r0, _08042A0C @ =0x08363480
	b _08042A12
	.align 2, 0
_08042A08: .4byte gCurrentSprite
_08042A0C: .4byte 0x08363480
_08042A10:
	ldr r0, _08042A20 @ =0x083634E0
_08042A12:
	str r0, [r2, #0x18]
	movs r0, #0
_08042A16:
	strh r0, [r2, #0x16]
	movs r0, #0
	strb r0, [r2, #0x1c]
	pop {r0}
	bx r0
	.align 2, 0
_08042A20: .4byte 0x083634E0

	thumb_func_start ZoroCocoonInit
ZoroCocoonInit: @ 0x08042A24
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _08042A94 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x25
	movs r1, #1
	mov r8, r1
	mov r2, r8
	strb r2, [r0]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	ldr r2, _08042A98 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r7, #0
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bl SpriteChooseRandomXDirectionWithRoomSlot
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08042A9C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf0
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08042AA0
	adds r0, r4, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08042B40
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
	b _08042B40
	.align 2, 0
_08042A94: .4byte gCurrentSprite
_08042A98: .4byte sPrimarySpriteStats
_08042A9C: .4byte gPreviousCollisionCheck
_08042AA0:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08042AE0
	adds r0, r4, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r1, r0
	orrs r1, r7
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08042B40
	movs r0, #0x40
	orrs r1, r0
	strh r1, [r4]
	b _08042B40
_08042AE0:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08042B0A
	adds r0, r4, #0
	adds r0, #0x2d
	mov r1, r8
	strb r1, [r0]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	b _08042B3E
_08042B0A:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	adds r2, r6, #0
	ands r2, r0
	cmp r2, #0
	bne _08042B24
	strh r2, [r4]
	b _08042B48
_08042B24:
	adds r0, r4, #0
	adds r0, #0x2d
	mov r2, r8
	strb r2, [r0]
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x20
_08042B3E:
	strh r0, [r4, #4]
_08042B40:
	bl ZoroCocoonSetOam
	bl ZoroCocoonSetHitboxesAndDrawDistance
_08042B48:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZoroCocoon
ZoroCocoon: @ 0x08042B54
	push {r4, lr}
	ldr r4, _08042B68 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08042B6C
	bl SpriteUpdateFreezeTimer
	b _08042BF6
	.align 2, 0
_08042B68: .4byte gCurrentSprite
_08042B6C:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _08042B7A
	bl ZoroCocoonInit
_08042B7A:
	bl EventCheckAfter_EscapedSaXTro1
	cmp r0, #0
	beq _08042BA0
	ldrh r0, [r4, #0x16]
	cmp r0, #1
	bne _08042BA0
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	bne _08042BA0
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08042BA0
	movs r0, #0xe9
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_08042BA0:
	ldr r2, _08042BC4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08042BD4
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08042BC8
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	subs r1, #0x20
	bl unk_12008
	b _08042BF6
	.align 2, 0
_08042BC4: .4byte gCurrentSprite
_08042BC8:
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	adds r1, #0x20
	bl unk_12008
	b _08042BF6
_08042BD4:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08042BEC
	ldrh r0, [r2, #2]
	adds r0, #0x20
	ldrh r1, [r2, #4]
	bl unk_12008
	b _08042BF6
_08042BEC:
	ldrh r0, [r2, #2]
	subs r0, #0x20
	ldrh r1, [r2, #4]
	bl unk_12008
_08042BF6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start ZoroHuskSetOam
ZoroHuskSetOam: @ 0x08042BFC
	push {lr}
	ldr r0, _08042C10 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _08042C18
	ldr r0, _08042C14 @ =0x08363D2C
	b _08042C1A
	.align 2, 0
_08042C10: .4byte gCurrentSprite
_08042C14: .4byte 0x08363D2C
_08042C18:
	ldr r0, _08042C28 @ =0x08363D3C
_08042C1A:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08042C28: .4byte 0x08363D3C

	thumb_func_start ZoroHuskInit
ZoroHuskInit: @ 0x08042C2C
	push {r4, r5, r6, r7, lr}
	ldr r4, _08042C9C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r7, #0
	ldr r1, _08042CA0 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x25
	strb r7, [r0]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	bl SpriteChooseRandomXDirectionWithRoomSlot
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08042CA4 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	movs r6, #0xf0
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08042CA8
	adds r0, r4, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08042D48
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
	b _08042D48
	.align 2, 0
_08042C9C: .4byte gCurrentSprite
_08042CA0: .4byte 0x0000FFFC
_08042CA4: .4byte gPreviousCollisionCheck
_08042CA8:
	ldrh r0, [r4, #2]
	subs r0, #0x44
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08042CE8
	adds r0, r4, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r1, r0
	orrs r1, r7
	strh r1, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	strh r0, [r4, #2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08042D48
	movs r0, #0x40
	orrs r1, r0
	strh r1, [r4]
	b _08042D48
_08042CE8:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08042D12
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	b _08042D46
_08042D12:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	adds r2, r6, #0
	ands r2, r0
	cmp r2, #0
	bne _08042D2C
	strh r2, [r4]
	b _08042D4C
_08042D2C:
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4]
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	adds r0, #0x20
_08042D46:
	strh r0, [r4, #4]
_08042D48:
	bl ZoroHuskSetOam
_08042D4C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZoroHusk
ZoroHusk: @ 0x08042D54
	push {lr}
	ldr r0, _08042D70 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _08042D6C
	bl ZoroHuskInit
_08042D6C:
	pop {r0}
	bx r0
	.align 2, 0
_08042D70: .4byte gCurrentSprite

	thumb_func_start GadoraSetCollision
GadoraSetCollision: @ 0x08042D74
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08042DBC @ =gCurrentSprite
	ldrh r7, [r0, #2]
	ldrh r6, [r0, #4]
	ldr r5, _08042DC0 @ =gCurrentClipdataAffectingAction
	strb r4, [r5]
	adds r0, r7, #0
	subs r0, #0x20
	adds r1, r6, #0
	bl ProcessClipdata
	strb r4, [r5]
	adds r0, r7, #0
	subs r0, #0x60
	adds r1, r6, #0
	bl ProcessClipdata
	strb r4, [r5]
	adds r0, r7, #0
	adds r0, #0x20
	adds r1, r6, #0
	bl ProcessClipdata
	strb r4, [r5]
	adds r0, r7, #0
	adds r0, #0x60
	adds r1, r6, #0
	bl ProcessClipdata
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08042DBC: .4byte gCurrentSprite
_08042DC0: .4byte gCurrentClipdataAffectingAction

	thumb_func_start GadoraSetDirectionAndPosition
GadoraSetDirectionAndPosition: @ 0x08042DC4
	push {lr}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r1, _08042DE0 @ =gCurrentSprite
	ldrb r0, [r1, #0x1d]
	subs r0, #0x8f
	adds r2, r1, #0
	cmp r0, #9
	bhi _08042E6E
	lsls r0, r0, #2
	ldr r1, _08042DE4 @ =_08042DE8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08042DE0: .4byte gCurrentSprite
_08042DE4: .4byte _08042DE8
_08042DE8: @ jump table
	.4byte _08042E10 @ case 0
	.4byte _08042E28 @ case 1
	.4byte _08042E10 @ case 2
	.4byte _08042E10 @ case 3
	.4byte _08042E10 @ case 4
	.4byte _08042E28 @ case 5
	.4byte _08042E10 @ case 6
	.4byte _08042E28 @ case 7
	.4byte _08042E3C @ case 8
	.4byte _08042E54 @ case 9
_08042E10:
	cmp r3, #2
	bne _08042E72
	ldrh r0, [r2]
	ldr r1, _08042E24 @ =0x0000FFBF
	ands r1, r0
	strh r1, [r2]
	ldrh r0, [r2, #4]
	subs r0, #0xc
	strh r0, [r2, #4]
	b _08042E72
	.align 2, 0
_08042E24: .4byte 0x0000FFBF
_08042E28:
	cmp r3, #2
	bne _08042E72
	ldrh r0, [r2]
	movs r1, #0x40
	orrs r1, r0
	strh r1, [r2]
	ldrh r0, [r2, #4]
	adds r0, #0xc
	strh r0, [r2, #4]
	b _08042E72
_08042E3C:
	cmp r3, #2
	bne _08042E66
	ldrh r0, [r2]
	ldr r1, _08042E50 @ =0x0000FFBF
	ands r1, r0
	strh r1, [r2]
	ldrh r0, [r2, #4]
	subs r0, #0xc
	b _08042E64
	.align 2, 0
_08042E50: .4byte 0x0000FFBF
_08042E54:
	cmp r3, #2
	bne _08042E66
	ldrh r0, [r2]
	movs r1, #0x40
	orrs r1, r0
	strh r1, [r2]
	ldrh r0, [r2, #4]
	adds r0, #0xc
_08042E64:
	strh r0, [r2, #4]
_08042E66:
	adds r0, r3, #0
	bl GadoraSetCollision
	b _08042E72
_08042E6E:
	movs r0, #0
	strh r0, [r1]
_08042E72:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GadoraDeath
GadoraDeath: @ 0x08042E78
	push {r4, lr}
	ldr r4, _08042EAC @ =gCurrentSprite
	ldrb r0, [r4, #0x1d]
	adds r0, #0x71
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0x80
	lsls r1, r1, #9
	lsls r1, r0
	lsrs r1, r1, #0x10
	ldr r2, _08042EB0 @ =gGadorasDestroyed
	ldrh r0, [r2]
	orrs r1, r0
	strh r1, [r2]
	movs r0, #1
	bl GadoraSetDirectionAndPosition
	ldrh r1, [r4, #2]
	ldrh r0, [r4, #4]
	movs r2, #1
	bl UpdateGadoraHatch
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042EAC: .4byte gCurrentSprite
_08042EB0: .4byte gGadorasDestroyed

	thumb_func_start GadoraInit
GadoraInit: @ 0x08042EB4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	bl TrySetAbsorbXFlag
	ldr r5, _08042ED8 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08042EDC
	movs r0, #0
	strh r0, [r5]
	b _08042FF8
	.align 2, 0
_08042ED8: .4byte gCurrentSprite
_08042EDC:
	adds r1, r5, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08042EF0
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r5, #6]
	b _08042F94
_08042EF0:
	ldrb r1, [r5, #0x1d]
	adds r0, r1, #0
	adds r0, #0x71
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	ldr r0, _08042F10 @ =gGadorasDestroyed
	ldrh r0, [r0]
	asrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08042F14
	strh r2, [r5]
	b _08042FF8
	.align 2, 0
_08042F10: .4byte gGadorasDestroyed
_08042F14:
	movs r0, #2
	bl GadoraSetDirectionAndPosition
	ldrh r7, [r5, #2]
	ldrh r6, [r5, #4]
	adds r0, r6, #0
	adds r1, r7, #0
	movs r2, #0
	bl UpdateGadoraHatch
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	str r7, [sp]
	str r6, [sp, #4]
	ldrh r1, [r5]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #8]
	movs r0, #0x45
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrh r0, [r5]
	ands r4, r0
	cmp r4, #0
	beq _08042F58
	adds r0, r6, #0
	adds r0, #0x10
	b _08042F5C
_08042F58:
	adds r0, r6, #0
	subs r0, #0x10
_08042F5C:
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	ldr r4, _08042F88 @ =gCurrentSprite
	ldrb r1, [r4, #0x1e]
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	str r7, [sp]
	str r6, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r0, #0x47
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0xff
	bne _08042F8C
	strh r5, [r4]
	b _08042FF8
	.align 2, 0
_08042F88: .4byte gCurrentSprite
_08042F8C:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_08042F94:
	ldr r3, _08043000 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x27
	movs r2, #0
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	movs r1, #0
	ldr r0, _08043004 @ =0x0000FF80
	strh r0, [r3, #0xa]
	movs r0, #0x80
	strh r0, [r3, #0xc]
	ldr r0, _08043008 @ =0x0000FFE0
	strh r0, [r3, #0xe]
	movs r0, #0x20
	strh r0, [r3, #0x10]
	ldr r0, _0804300C @ =0x08365040
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #3
	movs r0, #5
	strb r0, [r1]
	ldr r0, _08043010 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r2, _08043014 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
_08042FF8:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043000: .4byte gCurrentSprite
_08043004: .4byte 0x0000FF80
_08043008: .4byte 0x0000FFE0
_0804300C: .4byte 0x08365040
_08043010: .4byte gIoRegisters
_08043014: .4byte sPrimarySpriteStats

	thumb_func_start GadoraIdleInit
GadoraIdleInit: @ 0x08043018
	ldr r1, _0804303C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08043040 @ =0x08365040
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _08043044 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x3d
	adds r1, #0x2e
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804303C: .4byte gCurrentSprite
_08043040: .4byte 0x08365040
_08043044: .4byte gSpriteRandomNumber

	thumb_func_start GadoraIdle
GadoraIdle: @ 0x08043048
	push {r4, r5, lr}
	ldr r5, _08043078 @ =gCurrentSprite
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08043086
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0
	bl CheckSamusNearSpriteFrontBehindX
	cmp r0, #3
	bne _0804307C
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	b _08043086
	.align 2, 0
_08043078: .4byte gCurrentSprite
_0804307C:
	ldr r0, _0804308C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x3d
	strb r0, [r4]
_08043086:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804308C: .4byte gSpriteRandomNumber

	thumb_func_start GadoraOpeningEyeInit
GadoraOpeningEyeInit: @ 0x08043090
	push {lr}
	ldr r1, _080430BC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x18
	strb r0, [r2]
	ldr r0, _080430C0 @ =0x08365058
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080430B8
	movs r0, #0xd9
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080430B8:
	pop {r0}
	bx r0
	.align 2, 0
_080430BC: .4byte gCurrentSprite
_080430C0: .4byte 0x08365058

	thumb_func_start GadoraOpeningEye
GadoraOpeningEye: @ 0x080430C4
	push {r4, lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08043136
	ldr r0, _08043108 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	ldr r4, _0804310C @ =gCurrentSprite
	cmp r0, #6
	bls _08043118
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #3
	bhi _08043118
	adds r0, #1
	strb r0, [r1]
	subs r1, #0xb
	movs r0, #0x1c
	strb r0, [r1]
	ldr r0, _08043110 @ =0x08365078
	str r0, [r4, #0x18]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08043100
	ldr r0, _08043114 @ =0x000001B5
	bl CheckPlayNotAlreadyPlayingSound
_08043100:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x30
	b _0804312E
	.align 2, 0
_08043108: .4byte gSpriteRandomNumber
_0804310C: .4byte gCurrentSprite
_08043110: .4byte 0x08365078
_08043114: .4byte 0x000001B5
_08043118:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	subs r1, #0xb
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _0804313C @ =0x083650A0
	str r0, [r4, #0x18]
	adds r1, #0xa
	movs r0, #0x50
_0804312E:
	strb r0, [r1]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
_08043136:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804313C: .4byte 0x083650A0

	thumb_func_start GadoraVulnerable
GadoraVulnerable: @ 0x08043140
	push {lr}
	ldr r2, _08043170 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r3, r0, #0
	cmp r3, #0
	bne _0804317C
	subs r1, #0xa
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _08043174 @ =0x08365068
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08043180
	ldr r0, _08043178 @ =0x000001B3
	bl CheckPlayNotAlreadyPlayingSound
	b _08043180
	.align 2, 0
_08043170: .4byte gCurrentSprite
_08043174: .4byte 0x08365068
_08043178: .4byte 0x000001B3
_0804317C:
	subs r0, #1
	strb r0, [r1]
_08043180:
	pop {r0}
	bx r0

	thumb_func_start GadoraShooting
GadoraShooting: @ 0x08043184
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r1, _080431B4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	adds r5, r1, #0
	cmp r0, #0
	bne _08043200
	ldrh r1, [r5]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080431B8
	ldrh r0, [r5, #4]
	adds r0, #0x10
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	movs r6, #0x40
	b _080431C2
	.align 2, 0
_080431B4: .4byte gCurrentSprite
_080431B8:
	ldrh r0, [r5, #4]
	subs r0, #0x10
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	movs r6, #0
_080431C2:
	adds r4, r5, #0
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	str r0, [sp]
	str r1, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x46
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080431EE
	movs r0, #0xdb
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080431EE:
	adds r1, r5, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _08043208 @ =0x08365068
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r2, [r5, #0x16]
_08043200:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08043208: .4byte 0x08365068

	thumb_func_start GadoraClosingEye
GadoraClosingEye: @ 0x0804320C
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804321E
	ldr r0, _08043224 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804321E:
	pop {r0}
	bx r0
	.align 2, 0
_08043224: .4byte gCurrentSprite

	thumb_func_start Gadora
Gadora: @ 0x08043228
	push {lr}
	ldr r0, _08043240 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _08043236
	b _08043400
_08043236:
	lsls r0, r0, #2
	ldr r1, _08043244 @ =_08043248
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08043240: .4byte gCurrentSprite
_08043244: .4byte _08043248
_08043248: @ jump table
	.4byte _080433B8 @ case 0
	.4byte _080433BE @ case 1
	.4byte _080433C2 @ case 2
	.4byte _08043400 @ case 3
	.4byte _08043400 @ case 4
	.4byte _08043400 @ case 5
	.4byte _08043400 @ case 6
	.4byte _08043400 @ case 7
	.4byte _08043400 @ case 8
	.4byte _08043400 @ case 9
	.4byte _08043400 @ case 10
	.4byte _08043400 @ case 11
	.4byte _08043400 @ case 12
	.4byte _08043400 @ case 13
	.4byte _08043400 @ case 14
	.4byte _08043400 @ case 15
	.4byte _08043400 @ case 16
	.4byte _08043400 @ case 17
	.4byte _08043400 @ case 18
	.4byte _08043400 @ case 19
	.4byte _08043400 @ case 20
	.4byte _08043400 @ case 21
	.4byte _08043400 @ case 22
	.4byte _080433C8 @ case 23
	.4byte _080433CC @ case 24
	.4byte _08043400 @ case 25
	.4byte _080433D2 @ case 26
	.4byte _08043400 @ case 27
	.4byte _080433D8 @ case 28
	.4byte _08043400 @ case 29
	.4byte _08043400 @ case 30
	.4byte _08043400 @ case 31
	.4byte _080433DE @ case 32
	.4byte _08043400 @ case 33
	.4byte _08043400 @ case 34
	.4byte _08043400 @ case 35
	.4byte _08043400 @ case 36
	.4byte _08043400 @ case 37
	.4byte _08043400 @ case 38
	.4byte _08043400 @ case 39
	.4byte _08043400 @ case 40
	.4byte _08043400 @ case 41
	.4byte _08043400 @ case 42
	.4byte _08043400 @ case 43
	.4byte _08043400 @ case 44
	.4byte _08043400 @ case 45
	.4byte _08043400 @ case 46
	.4byte _08043400 @ case 47
	.4byte _08043400 @ case 48
	.4byte _08043400 @ case 49
	.4byte _08043400 @ case 50
	.4byte _08043400 @ case 51
	.4byte _08043400 @ case 52
	.4byte _08043400 @ case 53
	.4byte _08043400 @ case 54
	.4byte _08043400 @ case 55
	.4byte _08043400 @ case 56
	.4byte _08043400 @ case 57
	.4byte _08043400 @ case 58
	.4byte _08043400 @ case 59
	.4byte _08043400 @ case 60
	.4byte _08043400 @ case 61
	.4byte _08043400 @ case 62
	.4byte _08043400 @ case 63
	.4byte _08043400 @ case 64
	.4byte _08043400 @ case 65
	.4byte _08043400 @ case 66
	.4byte _08043400 @ case 67
	.4byte _08043400 @ case 68
	.4byte _08043400 @ case 69
	.4byte _08043400 @ case 70
	.4byte _08043400 @ case 71
	.4byte _08043400 @ case 72
	.4byte _08043400 @ case 73
	.4byte _08043400 @ case 74
	.4byte _08043400 @ case 75
	.4byte _08043400 @ case 76
	.4byte _08043400 @ case 77
	.4byte _08043400 @ case 78
	.4byte _08043400 @ case 79
	.4byte _08043400 @ case 80
	.4byte _08043400 @ case 81
	.4byte _08043400 @ case 82
	.4byte _08043400 @ case 83
	.4byte _08043400 @ case 84
	.4byte _08043400 @ case 85
	.4byte _08043400 @ case 86
	.4byte _080433E4 @ case 87
	.4byte _080433EC @ case 88
	.4byte _080433F2 @ case 89
	.4byte _080433F6 @ case 90
	.4byte _080433FC @ case 91
_080433B8:
	bl GadoraInit
	b _08043400
_080433BE:
	bl GadoraIdleInit
_080433C2:
	bl GadoraIdle
	b _08043400
_080433C8:
	bl GadoraOpeningEyeInit
_080433CC:
	bl GadoraOpeningEye
	b _08043400
_080433D2:
	bl GadoraVulnerable
	b _08043400
_080433D8:
	bl GadoraShooting
	b _08043400
_080433DE:
	bl GadoraClosingEye
	b _08043400
_080433E4:
	bl GadoraDeath
	bl SpriteDyingInit
_080433EC:
	bl SpriteDying
	b _08043400
_080433F2:
	bl GadoraInit
_080433F6:
	bl SpriteSpawningFromX
	b _08043400
_080433FC:
	bl XParasiteInit
_08043400:
	pop {r0}
	bx r0

	thumb_func_start GadoraEye
GadoraEye: @ 0x08043404
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r4, _080434B8 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x26
	movs r1, #1
	mov sb, r1
	mov r3, sb
	strb r3, [r0]
	adds r0, #6
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804342E
	movs r0, #0xdc
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804342E:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r6, [r0]
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r3, [r5]
	cmp r3, #0
	bne _08043490
	ldr r0, _080434BC @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r1, _080434C0 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0xc
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #6
	strb r0, [r1]
	ldr r0, _080434C4 @ =0x0000FFD0
	strh r0, [r4, #0xa]
	movs r0, #0x30
	strh r0, [r4, #0xc]
	ldr r0, _080434C8 @ =0x0000FFF0
	strh r0, [r4, #0xe]
	movs r0, #0x10
	strh r0, [r4, #0x10]
	ldr r0, _080434CC @ =0x082E6214
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r5]
_08043490:
	ldr r2, _080434D0 @ =gSpriteData
	lsls r3, r6, #3
	subs r0, r3, r6
	lsls r0, r0, #3
	adds r0, r0, r2
	mov ip, r0
	ldrh r1, [r0]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r0, r5, #0
	ands r0, r1
	mov r8, r2
	adds r2, r3, #0
	cmp r0, #0
	beq _080434D4
	ldrh r1, [r4]
	adds r0, r5, #0
	orrs r0, r1
	strh r0, [r4]
	b _0804358A
	.align 2, 0
_080434B8: .4byte gCurrentSprite
_080434BC: .4byte gIoRegisters
_080434C0: .4byte sSecondarySpriteStats
_080434C4: .4byte 0x0000FFD0
_080434C8: .4byte 0x0000FFF0
_080434CC: .4byte 0x082E6214
_080434D0: .4byte gSpriteData
_080434D4:
	ldrh r1, [r4]
	ldr r0, _08043524 @ =0x0000DFFF
	ands r0, r1
	movs r7, #0
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x20
	ldrb r0, [r0]
	mov r5, ip
	adds r5, #0x20
	strb r0, [r5]
	ldrh r3, [r4, #0x14]
	cmp r3, #0
	bne _08043528
	mov r1, ip
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x56
	bhi _08043528
	movs r0, #0x57
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x26
	mov r1, sb
	strb r1, [r0]
	mov r0, ip
	strh r3, [r0, #0x14]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r7, [r0]
	strb r7, [r5]
	strh r3, [r4]
	b _0804358A
	.align 2, 0
_08043524: .4byte 0x0000DFFF
_08043528:
	subs r0, r2, r6
	lsls r0, r0, #3
	mov r1, r8
	adds r3, r0, r1
	adds r0, r3, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1a
	beq _08043554
	cmp r0, #0x1a
	blt _0804357C
	cmp r0, #0x58
	bgt _0804357C
	cmp r0, #0x57
	blt _0804357C
	ldr r1, _08043550 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0804358A
	.align 2, 0
_08043550: .4byte gCurrentSprite
_08043554:
	ldr r1, _08043574 @ =gCurrentSprite
	ldrh r2, [r1]
	ldr r0, _08043578 @ =0x00007FFF
	ands r0, r2
	strh r0, [r1]
	adds r1, #0x2c
	ldrb r1, [r1]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0
	beq _0804358A
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
	b _0804358A
	.align 2, 0
_08043574: .4byte gCurrentSprite
_08043578: .4byte 0x00007FFF
_0804357C:
	ldr r2, _08043598 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
_0804358A:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043598: .4byte gCurrentSprite

	thumb_func_start GadoraRoots
GadoraRoots: @ 0x0804359C
	push {r4, r5, r6, lr}
	ldr r3, _08043628 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r5, [r0]
	adds r6, r3, #0
	adds r6, #0x24
	ldrb r4, [r6]
	cmp r4, #0
	bne _08043602
	ldrh r1, [r3]
	ldr r0, _0804362C @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r1, _08043630 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r6]
	ldr r0, _08043634 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r0, _08043638 @ =0x08365010
	str r0, [r3, #0x18]
_08043602:
	ldr r1, _0804363C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r2, r0, r1
	ldrh r1, [r2]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _08043640
	ldrh r1, [r3]
	adds r0, r5, #0
	orrs r0, r1
	strh r0, [r3]
	b _08043688
	.align 2, 0
_08043628: .4byte gCurrentSprite
_0804362C: .4byte 0x0000FFFB
_08043630: .4byte 0x0000FFFC
_08043634: .4byte gIoRegisters
_08043638: .4byte 0x08365010
_0804363C: .4byte gSpriteData
_08043640:
	ldrh r1, [r3]
	ldr r0, _08043668 @ =0x0000DFFF
	ands r0, r1
	movs r5, #0
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
	adds r0, #4
	ldrb r0, [r0]
	cmp r0, #0x17
	beq _08043680
	cmp r0, #0x17
	bgt _0804366C
	cmp r0, #1
	beq _08043678
	b _08043688
	.align 2, 0
_08043668: .4byte 0x0000DFFF
_0804366C:
	cmp r0, #0x58
	bgt _08043688
	cmp r0, #0x57
	blt _08043688
	strh r4, [r3]
	b _08043688
_08043678:
	ldr r0, _0804367C @ =0x08365010
	b _08043682
	.align 2, 0
_0804367C: .4byte 0x08365010
_08043680:
	ldr r0, _08043690 @ =0x083650E0
_08043682:
	str r0, [r3, #0x18]
	strb r5, [r3, #0x1c]
	strh r4, [r3, #0x16]
_08043688:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08043690: .4byte 0x083650E0

	thumb_func_start GadoraBeam
GadoraBeam: @ 0x08043694
	push {r4, r5, r6, lr}
	ldr r0, _080436AC @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x24
	ldrb r5, [r6]
	adds r4, r0, #0
	cmp r5, #0
	beq _080436B0
	cmp r5, #2
	beq _08043712
	b _08043776
	.align 2, 0
_080436AC: .4byte gCurrentSprite
_080436B0:
	ldrh r1, [r4]
	ldr r0, _08043724 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	strh r0, [r4]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08043728 @ =0x0000FFC4
	strh r0, [r4, #0xa]
	movs r0, #0x44
	strh r0, [r4, #0xc]
	ldr r0, _0804372C @ =0x0000FFE0
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	ldr r0, _08043730 @ =0x083650B8
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r5, [r4, #0x16]
	movs r0, #2
	strb r0, [r6]
	subs r1, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	ldr r1, _08043734 @ =gIoRegisters
	ldrb r1, [r1, #0xa]
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r1, #0x14
	movs r0, #1
	strb r0, [r1]
_08043712:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08043738
	ldrh r0, [r4, #4]
	adds r0, #0xc
	b _0804373C
	.align 2, 0
_08043724: .4byte 0x0000FFFB
_08043728: .4byte 0x0000FFC4
_0804372C: .4byte 0x0000FFE0
_08043730: .4byte 0x083650B8
_08043734: .4byte gIoRegisters
_08043738:
	ldrh r0, [r4, #4]
	subs r0, #0xc
_0804373C:
	strh r0, [r4, #4]
	ldr r1, _0804377C @ =gCurrentClipdataAffectingAction
	movs r0, #5
	strb r0, [r1]
	adds r5, r4, #0
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08043780 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08043776
	ldrh r0, [r5, #2]
	adds r0, #0x30
	ldrh r1, [r5, #4]
	movs r2, #0x2f
	bl ParticleSet
	ldrh r1, [r5]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08043772
	ldr r0, _08043784 @ =0x000001B7
	bl CheckPlayNotAlreadyPlayingSound
_08043772:
	movs r0, #0
	strh r0, [r4]
_08043776:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804377C: .4byte gCurrentClipdataAffectingAction
_08043780: .4byte gPreviousCollisionCheck
_08043784: .4byte 0x000001B7

	thumb_func_start Gadora_UnusedSprite
Gadora_UnusedSprite: @ 0x08043788
	bx lr
	.align 2, 0

	thumb_func_start DestroyedDataPad
DestroyedDataPad: @ 0x0804378C
	push {r4, r5, r6, lr}
	ldr r1, _080437B4 @ =gCurrentSprite
	ldrh r2, [r1, #2]
	ldrh r3, [r1, #4]
	adds r4, r1, #0
	adds r4, #0x26
	movs r0, #1
	strb r0, [r4]
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	adds r4, r1, #0
	cmp r0, #0x1e
	bls _080437AA
	b _08043A80
_080437AA:
	lsls r0, r0, #2
	ldr r1, _080437B8 @ =_080437BC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080437B4: .4byte gCurrentSprite
_080437B8: .4byte _080437BC
_080437BC: @ jump table
	.4byte _08043838 @ case 0
	.4byte _08043A80 @ case 1
	.4byte _0804389C @ case 2
	.4byte _08043A80 @ case 3
	.4byte _08043A80 @ case 4
	.4byte _08043A80 @ case 5
	.4byte _08043A80 @ case 6
	.4byte _08043A80 @ case 7
	.4byte _08043A80 @ case 8
	.4byte _08043A80 @ case 9
	.4byte _08043A80 @ case 10
	.4byte _08043A80 @ case 11
	.4byte _08043A80 @ case 12
	.4byte _08043A80 @ case 13
	.4byte _08043A80 @ case 14
	.4byte _08043A80 @ case 15
	.4byte _08043A80 @ case 16
	.4byte _08043A80 @ case 17
	.4byte _08043A80 @ case 18
	.4byte _08043A80 @ case 19
	.4byte _08043A80 @ case 20
	.4byte _08043A80 @ case 21
	.4byte _08043A80 @ case 22
	.4byte _08043A80 @ case 23
	.4byte _080438CC @ case 24
	.4byte _08043A80 @ case 25
	.4byte _080438EC @ case 26
	.4byte _08043A80 @ case 27
	.4byte _080439FE @ case 28
	.4byte _08043A80 @ case 29
	.4byte _08043A62 @ case 30
_08043838:
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x30
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x28
	strb r0, [r1]
	movs r3, #0
	ldr r1, _08043888 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	strb r3, [r4, #0x1c]
	strh r2, [r4, #0x16]
	bl EventCheckOn_EscapedSaXNoc
	cmp r0, #0
	beq _08043890
	ldr r0, _0804388C @ =0x08321AFC
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #2
	b _08043A7E
	.align 2, 0
_08043888: .4byte 0x0000FFFC
_0804388C: .4byte 0x08321AFC
_08043890:
	ldr r0, _08043898 @ =0x08365A04
	str r0, [r4, #0x18]
	b _08043A78
	.align 2, 0
_08043898: .4byte 0x08365A04
_0804389C:
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _080438B0
	b _08043A80
_080438B0:
	ldr r0, _080438C8 @ =0x08321AEC
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r1, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #0xa
	strb r0, [r2]
	b _08043A80
	.align 2, 0
_080438C8: .4byte 0x08321AEC
_080438CC:
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080438DE
	b _08043A80
_080438DE:
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
	movs r0, #0x79
	strb r0, [r2]
	b _08043A80
_080438EC:
	adds r6, r4, #0
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	subs r0, #1
	movs r1, #0
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x78
	bne _0804391C
	adds r0, r2, #0
	adds r0, #0x10
	adds r1, r3, #0
	movs r2, #0x2f
	bl ParticleSet
	ldr r0, _08043918 @ =0x00000232
	bl unk_3b1c
	b _08043A80
	.align 2, 0
_08043918: .4byte 0x00000232
_0804391C:
	cmp r0, #0x6e
	bne _08043928
	adds r1, r3, #0
	subs r1, #0x3c
	adds r0, r2, #0
	b _0804395E
_08043928:
	cmp r0, #0x64
	bne _08043936
	adds r0, r2, #0
	subs r0, #8
	adds r1, r3, #0
	adds r1, #0x40
	b _0804395E
_08043936:
	cmp r0, #0x5a
	bne _08043944
	adds r0, r2, #0
	subs r0, #0x48
	adds r1, r3, #0
	subs r1, #0x34
	b _0804395E
_08043944:
	cmp r0, #0x50
	bne _08043952
	adds r0, r2, #0
	subs r0, #0x58
	adds r1, r3, #0
	adds r1, #0x3c
	b _0804395E
_08043952:
	cmp r0, #0x46
	bne _08043966
	adds r0, r2, #0
	adds r0, #0x20
	adds r1, r3, #0
	subs r1, #8
_0804395E:
	movs r2, #0x2f
	bl ParticleSet
	b _08043A80
_08043966:
	cmp r0, #0x45
	bne _0804396C
	b _08043A80
_0804396C:
	cmp r0, #0x44
	bne _08043972
	b _08043A80
_08043972:
	cmp r0, #0x43
	bne _08043978
	b _08043A80
_08043978:
	cmp r0, #0x42
	bne _0804397E
	b _08043A80
_0804397E:
	cmp r0, #0x41
	bne _08043994
	ldr r0, _08043990 @ =0x08365A04
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r1, [r4, #0x16]
	movs r0, #7
	strb r0, [r4, #0x1f]
	b _08043A80
	.align 2, 0
_08043990: .4byte 0x08365A04
_08043994:
	cmp r0, #0x3c
	bne _080439A2
	adds r0, r2, #0
	adds r0, #0x18
	adds r1, r3, #0
	subs r1, #0x40
	b _080439D6
_080439A2:
	cmp r0, #0x32
	bne _080439B0
	adds r0, r2, #0
	adds r0, #0x10
	adds r1, r3, #0
	adds r1, #0x40
	b _080439D6
_080439B0:
	cmp r0, #0x28
	bne _080439BA
	adds r0, r2, #0
	adds r1, r3, #0
	b _080439D6
_080439BA:
	ldrb r0, [r5]
	cmp r0, #0x1e
	bne _080439CA
	adds r0, r2, #0
	subs r0, #0x44
	adds r1, r3, #0
	adds r1, #0x3c
	b _080439D6
_080439CA:
	cmp r0, #0x14
	bne _080439DE
	adds r0, r2, #0
	subs r0, #0x40
	adds r1, r3, #0
	subs r1, #0x48
_080439D6:
	movs r2, #0x30
	bl ParticleSet
	b _08043A80
_080439DE:
	cmp r0, #0xa
	bne _08043A80
	adds r0, r2, #0
	adds r0, #0x20
	adds r1, r3, #0
	subs r1, #8
	movs r2, #0x30
	bl ParticleSet
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	movs r0, #0x1e
	strb r0, [r5]
	b _08043A80
_080439FE:
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bne _08043A18
	subs r0, r2, #4
	adds r1, r3, #0
	subs r1, #0x3c
	b _08043A2E
_08043A18:
	cmp r0, #0x14
	bne _08043A24
	adds r1, r3, #0
	adds r1, #0x46
	adds r0, r2, #0
	b _08043A40
_08043A24:
	cmp r0, #0xf
	bne _08043A36
	adds r1, r3, #0
	adds r1, #0x46
	adds r0, r2, #0
_08043A2E:
	movs r2, #0x35
	bl ParticleSet
	b _08043A80
_08043A36:
	cmp r0, #0xa
	bne _08043A48
	adds r0, r2, #4
	adds r1, r3, #0
	subs r1, #0x3c
_08043A40:
	movs r2, #0x31
	bl ParticleSet
	b _08043A80
_08043A48:
	cmp r0, #5
	bne _08043A80
	adds r0, r2, #0
	adds r1, r3, #0
	movs r2, #0x31
	bl ParticleSet
	movs r0, #0x3c
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	b _08043A7E
_08043A62:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08043A80
	movs r0, #0x32
	bl EventCheckAdvance
_08043A78:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #8
_08043A7E:
	strb r0, [r1]
_08043A80:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NettoriRemoveCollision
NettoriRemoveCollision: @ 0x08043A88
	push {r4, r5, r6, r7, lr}
	movs r6, #1
	ldr r0, _08043AFC @ =gCurrentSprite
	ldrh r7, [r0, #2]
	ldrh r4, [r0, #4]
	ldr r5, _08043B00 @ =gCurrentClipdataAffectingAction
	strb r6, [r5]
	adds r0, r7, #0
	subs r0, #0x20
	adds r4, #0x20
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	adds r0, r7, #0
	subs r0, #0x60
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	adds r0, r7, #0
	subs r0, #0xa0
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	adds r0, r7, #0
	subs r0, #0xe0
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	ldr r1, _08043B04 @ =0xFFFFFEE0
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	ldr r1, _08043B08 @ =0xFFFFFEA0
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	ldr r1, _08043B0C @ =0xFFFFFE60
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r6, [r5]
	ldr r1, _08043B10 @ =0xFFFFFE20
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043AFC: .4byte gCurrentSprite
_08043B00: .4byte gCurrentClipdataAffectingAction
_08043B04: .4byte 0xFFFFFEE0
_08043B08: .4byte 0xFFFFFEA0
_08043B0C: .4byte 0xFFFFFE60
_08043B10: .4byte 0xFFFFFE20

	thumb_func_start NettoriDestroySamusEaterAndSpores
NettoriDestroySamusEaterAndSpores: @ 0x08043B14
	push {r4, lr}
	movs r3, #0
	ldr r4, _08043B4C @ =gSpriteData
_08043B1A:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r4
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08043B5A
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08043B50
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x26
	bne _08043B5A
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x45
	strb r0, [r1]
	b _08043B5A
	.align 2, 0
_08043B4C: .4byte gSpriteData
_08043B50:
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x52
	bne _08043B5A
	movs r0, #0
	strh r0, [r2]
_08043B5A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _08043B1A
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SamusEaterCheckNettoriHealthThreshold
SamusEaterCheckNettoriHealthThreshold: @ 0x08043B6C
	push {r4, r5, lr}
	movs r3, #0
	ldr r4, _08043BA8 @ =gSpriteData
	ldr r5, _08043BAC @ =0x082E51E4
_08043B74:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r4
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08043BB0
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08043BB0
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x54
	bne _08043BB0
	ldrh r0, [r5]
	ldrh r1, [r2, #0x14]
	lsrs r0, r0, #1
	cmp r1, r0
	bhs _08043BBA
	movs r0, #1
	b _08043BBC
	.align 2, 0
_08043BA8: .4byte gSpriteData
_08043BAC: .4byte 0x082E51E4
_08043BB0:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _08043B74
_08043BBA:
	movs r0, #0
_08043BBC:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start NettoriUpdateGlowingPalette
NettoriUpdateGlowingPalette: @ 0x08043BC4
	push {lr}
	ldr r1, _08043BFC @ =gBossWork3
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08043C48
	movs r0, #0x10
	strb r0, [r1]
	ldr r1, _08043C00 @ =gBossWork2
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #5
	bls _08043BEC
	strb r2, [r1]
_08043BEC:
	ldrb r0, [r1]
	cmp r0, #5
	bhi _08043C3A
	lsls r0, r0, #2
	ldr r1, _08043C04 @ =_08043C08
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08043BFC: .4byte gBossWork3
_08043C00: .4byte gBossWork2
_08043C04: .4byte _08043C08
_08043C08: @ jump table
	.4byte _08043C20 @ case 0
	.4byte _08043C38 @ case 1
	.4byte _08043C30 @ case 2
	.4byte _08043C28 @ case 3
	.4byte _08043C30 @ case 4
	.4byte _08043C38 @ case 5
_08043C20:
	ldr r3, _08043C24 @ =0x08369BD4
	b _08043C3A
	.align 2, 0
_08043C24: .4byte 0x08369BD4
_08043C28:
	ldr r3, _08043C2C @ =0x0836A500
	b _08043C3A
	.align 2, 0
_08043C2C: .4byte 0x0836A500
_08043C30:
	ldr r3, _08043C34 @ =0x0836A4E0
	b _08043C3A
	.align 2, 0
_08043C34: .4byte 0x0836A4E0
_08043C38:
	ldr r3, _08043C4C @ =0x0836A4C0
_08043C3A:
	ldr r1, _08043C50 @ =0x040000D4
	str r3, [r1]
	ldr r0, _08043C54 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _08043C58 @ =0x80000008
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08043C48:
	pop {r0}
	bx r0
	.align 2, 0
_08043C4C: .4byte 0x0836A4C0
_08043C50: .4byte 0x040000D4
_08043C54: .4byte 0x05000300
_08043C58: .4byte 0x80000008

	thumb_func_start NettoriUpdatePalette
NettoriUpdatePalette: @ 0x08043C5C
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	ldr r0, _08043C84 @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	ldr r2, _08043C88 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r4, _08043C8C @ =gBossWork1
	ldrb r1, [r4]
	cmp r1, #1
	beq _08043CC0
	cmp r1, #1
	bgt _08043C90
	cmp r1, #0
	beq _08043C96
	b _08043CF2
	.align 2, 0
_08043C84: .4byte gCurrentSprite
_08043C88: .4byte sPrimarySpriteStats
_08043C8C: .4byte gBossWork1
_08043C90:
	cmp r1, #2
	beq _08043CDC
	b _08043CF2
_08043C96:
	ldr r6, _08043CB0 @ =0x08369BD4
	ldr r1, _08043CB4 @ =0x040000D4
	str r6, [r1]
	ldr r0, _08043CB8 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _08043CBC @ =0x80000008
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	b _08043CF2
	.align 2, 0
_08043CB0: .4byte 0x08369BD4
_08043CB4: .4byte 0x040000D4
_08043CB8: .4byte 0x05000300
_08043CBC: .4byte 0x80000008
_08043CC0:
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhi _08043CF2
	ldr r6, _08043CD8 @ =0x0836A480
	movs r0, #2
	strb r0, [r4]
	b _08043CF6
	.align 2, 0
_08043CD8: .4byte 0x0836A480
_08043CDC:
	movs r1, #6
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhi _08043CF2
	ldr r6, _08043D0C @ =0x0836A4A0
	movs r0, #3
	strb r0, [r4]
	movs r7, #1
_08043CF2:
	cmp r7, #0
	beq _08043D04
_08043CF6:
	ldr r1, _08043D10 @ =0x040000D4
	str r6, [r1]
	ldr r0, _08043D14 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _08043D18 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08043D04:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043D0C: .4byte 0x0836A4A0
_08043D10: .4byte 0x040000D4
_08043D14: .4byte 0x05000300
_08043D18: .4byte 0x80000010

	thumb_func_start NettoriInit
NettoriInit: @ 0x08043D1C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r0, _08043D3C @ =gEquipment
	ldrb r1, [r0, #0xa]
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _08043D44
	ldr r1, _08043D40 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _08043E44
	.align 2, 0
_08043D3C: .4byte gEquipment
_08043D40: .4byte gCurrentSprite
_08043D44:
	ldr r0, _08043E50 @ =gBossWork1
	strb r7, [r0]
	ldr r0, _08043E54 @ =gBossWork2
	strb r7, [r0]
	ldr r1, _08043E58 @ =gBossWork3
	movs r0, #0x10
	strb r0, [r1]
	ldr r6, _08043E5C @ =gCurrentSprite
	ldr r2, _08043E60 @ =sPrimarySpriteStats
	ldrb r1, [r6, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0
	strh r0, [r6, #0x14]
	adds r0, r6, #0
	adds r0, #0x25
	movs r2, #2
	strb r2, [r0]
	adds r3, r6, #0
	adds r3, #0x27
	movs r0, #0x60
	strb r0, [r3]
	adds r0, r6, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r3, #2
	movs r0, #0x20
	strb r0, [r3]
	ldr r0, _08043E64 @ =0x0000FE90
	strh r0, [r6, #0xa]
	strh r7, [r6, #0xc]
	ldr r0, _08043E68 @ =0x0000FFC0
	strh r0, [r6, #0xe]
	movs r0, #0x10
	strh r0, [r6, #0x10]
	adds r0, r6, #0
	adds r0, #0x24
	strb r2, [r0]
	adds r0, #9
	strb r1, [r0]
	ldr r0, _08043E6C @ =0x0836A008
	str r0, [r6, #0x18]
	strb r1, [r6, #0x1c]
	strh r7, [r6, #0x16]
	adds r1, r6, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	ldrh r0, [r6, #4]
	adds r0, #0x20
	strh r0, [r6, #4]
	ldrh r4, [r6, #2]
	ldrh r5, [r6, #4]
	ldrb r2, [r6, #0x1f]
	movs r0, #0x23
	adds r0, r0, r6
	mov r8, r0
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #3
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	mov r0, r8
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x4c
	movs r1, #6
	bl SpriteSpawnSecondary
_08043E44:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043E50: .4byte gBossWork1
_08043E54: .4byte gBossWork2
_08043E58: .4byte gBossWork3
_08043E5C: .4byte gCurrentSprite
_08043E60: .4byte sPrimarySpriteStats
_08043E64: .4byte 0x0000FE90
_08043E68: .4byte 0x0000FFC0
_08043E6C: .4byte 0x0836A008

	thumb_func_start NettoriIdle
NettoriIdle: @ 0x08043E70
	push {r4, lr}
	ldr r0, _08043E94 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x2d
	ldrb r2, [r2]
	adds r3, r0, #0
	cmp r2, #0
	beq _08043EA0
	ldr r1, [r3, #0x18]
	ldr r0, _08043E98 @ =0x0836A008
	cmp r1, r0
	bne _08043EB0
	ldr r0, _08043E9C @ =0x0836A030
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	b _08043EB0
	.align 2, 0
_08043E94: .4byte gCurrentSprite
_08043E98: .4byte 0x0836A008
_08043E9C: .4byte 0x0836A030
_08043EA0:
	ldr r1, [r3, #0x18]
	ldr r0, _08043EF8 @ =0x0836A030
	cmp r1, r0
	bne _08043EB0
	ldr r0, _08043EFC @ =0x0836A008
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
_08043EB0:
	ldrh r0, [r3, #0x14]
	cmp r0, #0
	bne _08043F1E
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x45
	strb r0, [r1]
	movs r3, #0
	ldr r4, _08043F00 @ =gSpriteData
_08043EC2:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r4
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08043F14
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08043F04
	ldrb r0, [r2, #0x1d]
	subs r0, #0x26
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08043F14
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x45
	strb r0, [r1]
	b _08043F14
	.align 2, 0
_08043EF8: .4byte 0x0836A030
_08043EFC: .4byte 0x0836A008
_08043F00: .4byte gSpriteData
_08043F04:
	ldrb r0, [r2, #0x1d]
	subs r0, #0x52
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08043F14
	movs r0, #0
	strh r0, [r2]
_08043F14:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _08043EC2
_08043F1E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NettoriDyingInit
NettoriDyingInit: @ 0x08043F24
	push {lr}
	ldr r3, _08043F58 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r2, _08043F5C @ =0x00008020
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r3, #6]
	bl NettoriRemoveCollision
	movs r0, #0x43
	movs r1, #7
	bl PlayMusic
	pop {r0}
	bx r0
	.align 2, 0
_08043F58: .4byte gCurrentSprite
_08043F5C: .4byte 0x00008020

	thumb_func_start NettoriTransformingIntoCoreX
NettoriTransformingIntoCoreX: @ 0x08043F60
	push {r4, lr}
	ldr r2, _08043FB4 @ =gWrittenToMosaic_H
	ldr r1, _08043FB8 @ =0x083BDED6
	ldr r4, _08043FBC @ =gCurrentSprite
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x13
	bhi _08043FC0
	ldrh r2, [r4, #6]
	movs r0, #0x58
	movs r1, #0
	bl SpriteLoadGfx
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _08043FCE
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	movs r0, #0x58
	strb r0, [r4, #0x1d]
	ldrh r0, [r4, #2]
	subs r0, #0xc0
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	subs r0, #0x30
	strh r0, [r4, #4]
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	b _08043FCE
	.align 2, 0
_08043FB4: .4byte gWrittenToMosaic_H
_08043FB8: .4byte 0x083BDED6
_08043FBC: .4byte gCurrentSprite
_08043FC0:
	cmp r0, #0x14
	bne _08043FCE
	movs r0, #0x58
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_08043FCE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NettoriPartInit
NettoriPartInit: @ 0x08043FD4
	push {r4, lr}
	ldr r0, _0804401C @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08044020 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	ldr r1, _08044024 @ =0x0000FFFC
	mov r3, ip
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrb r0, [r3, #0x1e]
	cmp r0, #6
	bls _08044010
	b _08044164
_08044010:
	lsls r0, r0, #2
	ldr r1, _08044028 @ =_0804402C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804401C: .4byte gCurrentSprite
_08044020: .4byte 0x0000FFFB
_08044024: .4byte 0x0000FFFC
_08044028: .4byte _0804402C
_0804402C: @ jump table
	.4byte _08044048 @ case 0
	.4byte _0804406C @ case 1
	.4byte _08044084 @ case 2
	.4byte _080440AC @ case 3
	.4byte _080440D4 @ case 4
	.4byte _080440FC @ case 5
	.4byte _08044124 @ case 6
_08044048:
	ldr r0, _08044068 @ =0x0836A068
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x27
	movs r1, #0
	movs r0, #0xa0
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x30
	strb r0, [r1]
	b _08044168
	.align 2, 0
_08044068: .4byte 0x0836A068
_0804406C:
	ldr r0, _08044080 @ =0x0836A148
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x22
	movs r1, #0
	movs r0, #3
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x30
	b _080440BE
	.align 2, 0
_08044080: .4byte 0x0836A148
_08044084:
	ldr r0, _080440A8 @ =0x0836A058
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x22
	movs r1, #0
	movs r0, #5
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x38
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x28
	strb r0, [r1]
	b _08044168
	.align 2, 0
_080440A8: .4byte 0x0836A058
_080440AC:
	ldr r0, _080440D0 @ =0x0836A228
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x22
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x40
_080440BE:
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	b _08044168
	.align 2, 0
_080440D0: .4byte 0x0836A228
_080440D4:
	ldr r0, _080440F8 @ =0x0836A078
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x22
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x60
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x20
	strb r0, [r1]
	b _08044168
	.align 2, 0
_080440F8: .4byte 0x0836A078
_080440FC:
	ldr r0, _08044120 @ =0x0836A158
	str r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x22
	movs r1, #0
	movs r0, #1
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x30
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	b _08044168
	.align 2, 0
_08044120: .4byte 0x0836A158
_08044124:
	ldr r0, _08044160 @ =0x0836A0C8
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x22
	movs r1, #0
	movs r2, #3
	strb r2, [r0]
	movs r4, #0x27
	movs r0, #0x60
	strb r0, [r4, r3]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x20
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x35
	strb r2, [r0]
	ldrh r1, [r3]
	movs r0, #4
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	b _08044168
	.align 2, 0
_08044160: .4byte 0x0836A0C8
_08044164:
	mov r0, ip
	strh r4, [r0]
_08044168:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NettoriPartIdle
NettoriPartIdle: @ 0x08044170
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	movs r0, #0
	mov r8, r0
	ldr r2, _080441B0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldr r0, _080441B4 @ =sPrimarySpriteStats
	movs r1, #0x93
	lsls r1, r1, #3
	adds r0, r0, r1
	ldrh r3, [r0]
	ldr r1, _080441B8 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r6, [r0, #0x14]
	ldrb r0, [r2, #0x1e]
	adds r4, r2, #0
	adds r7, r1, #0
	cmp r0, #6
	bls _080441A6
	b _080444E8
_080441A6:
	lsls r0, r0, #2
	ldr r1, _080441BC @ =_080441C0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080441B0: .4byte gCurrentSprite
_080441B4: .4byte sPrimarySpriteStats
_080441B8: .4byte gSpriteData
_080441BC: .4byte _080441C0
_080441C0: @ jump table
	.4byte _080441DC @ case 0
	.4byte _08044206 @ case 1
	.4byte _0804421E @ case 2
	.4byte _08044238 @ case 3
	.4byte _08044268 @ case 4
	.4byte _080442C0 @ case 5
	.4byte _08044338 @ case 6
_080441DC:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
	lsrs r0, r3, #1
	cmp r6, r0
	blo _080441F6
	b _080444EC
_080441F6:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	bl NettoriDestroySamusEaterAndSpores
	b _080444EC
_08044206:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r3
	b _08044254
_0804421E:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #1
	b _08044254
_08044238:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
	lsls r0, r3, #3
	subs r0, r0, r3
	cmp r0, #0
	bge _08044254
	adds r0, #7
_08044254:
	asrs r0, r0, #3
	cmp r6, r0
	blt _0804425C
	b _080444EC
_0804425C:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	b _080444EC
_08044268:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r1, r0, r7
	adds r0, r1, #0
	adds r0, #0x20
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x20
	movs r3, #0
	strb r0, [r2]
	cmp r6, #0
	beq _080442DA
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r2, [r0]
	cmp r2, #1
	bne _080442A4
	ldr r1, [r4, #0x18]
	ldr r0, _0804429C @ =0x0836A078
	cmp r1, r0
	beq _08044296
	b _080444EC
_08044296:
	ldr r0, _080442A0 @ =0x0836A0A0
	b _08044302
	.align 2, 0
_0804429C: .4byte 0x0836A078
_080442A0: .4byte 0x0836A0A0
_080442A4:
	cmp r2, #0
	beq _080442AA
	b _080444EC
_080442AA:
	ldr r1, [r4, #0x18]
	ldr r0, _080442B8 @ =0x0836A0A0
	cmp r1, r0
	beq _080442B4
	b _080444EC
_080442B4:
	ldr r0, _080442BC @ =0x0836A078
	b _08044326
	.align 2, 0
_080442B8: .4byte 0x0836A0A0
_080442BC: .4byte 0x0836A078
_080442C0:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r1, r0, r7
	adds r0, r1, #0
	adds r0, #0x20
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x20
	movs r3, #0
	strb r0, [r2]
	cmp r6, #0
	bne _080442EC
_080442DA:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	strb r6, [r2]
	b _080444EC
_080442EC:
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r2, [r0]
	cmp r2, #2
	bne _08044314
	ldr r1, [r4, #0x18]
	ldr r0, _0804430C @ =0x0836A158
	cmp r1, r0
	beq _08044300
	b _080444EC
_08044300:
	ldr r0, _08044310 @ =0x0836A180
_08044302:
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r3, [r4, #0x16]
	b _080444EC
	.align 2, 0
_0804430C: .4byte 0x0836A158
_08044310: .4byte 0x0836A180
_08044314:
	cmp r2, #0
	beq _0804431A
	b _080444EC
_0804431A:
	ldr r1, [r4, #0x18]
	ldr r0, _08044330 @ =0x0836A180
	cmp r1, r0
	beq _08044324
	b _080444EC
_08044324:
	ldr r0, _08044334 @ =0x0836A158
_08044326:
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	b _080444EC
	.align 2, 0
_08044330: .4byte 0x0836A180
_08044334: .4byte 0x0836A158
_08044338:
	cmp r6, #0
	bne _08044340
	strh r6, [r4]
	b _080444EC
_08044340:
	lsrs r0, r3, #1
	cmp r6, r0
	blo _08044348
	b _08044494
_08044348:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x14
	bne _080443E4
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _08044378 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	ldr r0, [r4, #0x18]
	ldr r2, _0804437C @ =0x0836A0C8
	cmp r0, r2
	bne _08044380
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x2d
	movs r1, #1
	b _0804438C
	.align 2, 0
_08044378: .4byte 0x0000FFFB
_0804437C: .4byte 0x0836A0C8
_08044380:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r7
	adds r0, #0x2d
	movs r1, #2
_0804438C:
	strb r1, [r0]
	ldr r1, _080443BC @ =gCurrentSprite
	ldr r0, [r1, #0x18]
	cmp r0, r2
	bne _080443C4
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	ldr r4, _080443C0 @ =0xFFFFFEE8
	adds r0, r0, r4
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x48
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x53
	movs r1, #0
	bl SpriteSpawnSecondary
	b _080443E4
	.align 2, 0
_080443BC: .4byte gCurrentSprite
_080443C0: .4byte 0xFFFFFEE8
_080443C4:
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0xa8
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x20
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x53
	movs r1, #0
	bl SpriteSpawnSecondary
_080443E4:
	ldr r1, _080443FC @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	adds r4, r1, #0
	cmp r0, #0
	beq _080443F2
	cmp r0, #2
	bne _08044400
_080443F2:
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #1
	strb r0, [r1]
	b _08044484
	.align 2, 0
_080443FC: .4byte gCurrentSprite
_08044400:
	cmp r0, #4
	beq _08044408
	cmp r0, #6
	bne _08044412
_08044408:
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #2
	strb r0, [r1]
	b _08044484
_08044412:
	cmp r0, #8
	beq _0804441E
	cmp r0, #0xa
	beq _0804441E
	cmp r0, #0xc
	bne _08044428
_0804441E:
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #3
	strb r0, [r1]
	b _08044484
_08044428:
	cmp r0, #0xe
	bne _08044484
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #0
	strb r1, [r0]
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0x5a
	bne _08044484
	ldrh r1, [r4]
	movs r0, #4
	movs r2, #0
	orrs r0, r1
	strh r0, [r4]
	ldr r1, _08044464 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	strb r2, [r0]
	strb r2, [r3]
	bl SamusCheckCrouchingOrMorphed
	cmp r0, #0
	beq _0804446C
	ldr r0, _08044468 @ =0x0836A1A8
	b _08044482
	.align 2, 0
_08044464: .4byte gSpriteData
_08044468: .4byte 0x0836A1A8
_0804446C:
	ldr r0, _08044478 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #9
	bls _08044480
	ldr r0, _0804447C @ =0x0836A1A8
	b _08044482
	.align 2, 0
_08044478: .4byte gSpriteRandomNumber
_0804447C: .4byte 0x0836A1A8
_08044480:
	ldr r0, _08044490 @ =0x0836A0C8
_08044482:
	str r0, [r4, #0x18]
_08044484:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _080444EC
	.align 2, 0
_08044490: .4byte 0x0836A0C8
_08044494:
	bl SamusCheckCrouchingOrMorphed
	cmp r0, #0
	beq _080444AC
	ldr r1, _080444A4 @ =gCurrentSprite
	ldr r0, _080444A8 @ =0x0836A1A8
	str r0, [r1, #0x18]
	b _080444EC
	.align 2, 0
_080444A4: .4byte gCurrentSprite
_080444A8: .4byte 0x0836A1A8
_080444AC:
	ldr r0, _080444CC @ =gSamusData
	ldrh r1, [r0, #0x18]
	ldr r2, _080444D0 @ =gCurrentSprite
	ldrh r0, [r2, #2]
	subs r0, #0xe0
	cmp r1, r0
	blt _080444DC
	ldr r0, _080444D4 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080444DC
	ldr r0, _080444D8 @ =0x0836A1A8
	str r0, [r2, #0x18]
	b _080444EC
	.align 2, 0
_080444CC: .4byte gSamusData
_080444D0: .4byte gCurrentSprite
_080444D4: .4byte gSpriteRandomNumber
_080444D8: .4byte 0x0836A1A8
_080444DC:
	ldr r0, _080444E4 @ =0x0836A0C8
	str r0, [r2, #0x18]
	b _080444EC
	.align 2, 0
_080444E4: .4byte 0x0836A0C8
_080444E8:
	mov r0, r8
	strh r0, [r2]
_080444EC:
	mov r1, r8
	cmp r1, #0
	beq _08044502
	ldr r0, _08044510 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x31
	movs r1, #0
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #0x38
	strb r1, [r0]
_08044502:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08044510: .4byte gCurrentSprite

	thumb_func_start NettoriPartFalling
NettoriPartFalling: @ 0x08044514
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08044534 @ =gCurrentSprite
	ldrh r4, [r0, #2]
	ldrh r5, [r0, #4]
	ldrb r1, [r0, #0x1e]
	mov r8, r0
	cmp r1, #1
	beq _08044568
	cmp r1, #1
	bgt _08044538
	cmp r1, #0
	beq _08044542
	b _080445C4
	.align 2, 0
_08044534: .4byte gCurrentSprite
_08044538:
	cmp r1, #2
	beq _0804457E
	cmp r1, #3
	beq _080445A0
	b _080445C4
_08044542:
	ldr r1, _08044560 @ =0xFFFFFF00
	adds r0, r4, r1
	lsls r0, r0, #0x10
	adds r1, r5, #0
	subs r1, #0x60
	lsls r1, r1, #0x10
	lsrs r4, r0, #0x10
	ldr r2, _08044564 @ =0xFFE00000
	adds r0, r0, r2
	lsrs r3, r0, #0x10
	lsrs r5, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #0xe
	b _080445BA
	.align 2, 0
_08044560: .4byte 0xFFFFFF00
_08044564: .4byte 0xFFE00000
_08044568:
	adds r0, r4, #0
	subs r0, #0x80
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r0, r5, #0
	subs r0, #0x28
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r3, r4, #0
	adds r2, r5, #0
	b _080445CA
_0804457E:
	adds r0, r4, #0
	subs r0, #0x80
	lsls r0, r0, #0x10
	adds r1, r5, #0
	subs r1, #0x70
	lsls r1, r1, #0x10
	lsrs r4, r0, #0x10
	ldr r2, _0804459C @ =0xFFC00000
	adds r0, r0, r2
	lsrs r3, r0, #0x10
	lsrs r5, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #0xd
	b _080445BA
	.align 2, 0
_0804459C: .4byte 0xFFC00000
_080445A0:
	adds r0, r4, #0
	subs r0, #0x80
	lsls r0, r0, #0x10
	adds r1, r5, #0
	subs r1, #0x40
	lsls r1, r1, #0x10
	lsrs r4, r0, #0x10
	ldr r2, _080445C0 @ =0xFFA00000
	adds r0, r0, r2
	lsrs r3, r0, #0x10
	lsrs r5, r1, #0x10
	movs r0, #0xc0
	lsls r0, r0, #0xd
_080445BA:
	adds r1, r1, r0
	lsrs r2, r1, #0x10
	b _080445CA
	.align 2, 0
_080445C0: .4byte 0xFFA00000
_080445C4:
	movs r0, #0
	mov r1, r8
	strh r0, [r1]
_080445CA:
	mov r6, r8
	adds r7, r6, #0
	adds r7, #0x31
	ldrb r1, [r7]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _080445E4
	adds r0, r3, #0
	adds r1, r2, #0
	movs r2, #0x27
	bl ParticleSet
_080445E4:
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	ldr r0, _0804461C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08044620
	adds r1, r6, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x3a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0x32
	bl ParticleSet
	movs r0, #0xa6
	lsls r0, r0, #2
	bl SoundPlay
	b _08044658
	.align 2, 0
_0804461C: .4byte gPreviousVerticalCollisionCheck
_08044620:
	ldrb r2, [r7]
	ldr r4, _08044644 @ =sSpritesFallingSpeedSlow
	lsls r0, r2, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _08044648 @ =0x00007FFF
	cmp r1, r0
	bne _0804464C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r4
	ldrh r0, [r6, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r6, #2]
	b _08044658
	.align 2, 0
_08044644: .4byte sSpritesFallingSpeedSlow
_08044648: .4byte 0x00007FFF
_0804464C:
	adds r0, r2, #1
	strb r0, [r7]
	mov r1, r8
	ldrh r0, [r1, #2]
	adds r0, r0, r3
	strh r0, [r1, #2]
_08044658:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NettoriPartExploding
NettoriPartExploding: @ 0x08044664
	push {lr}
	ldr r3, _08044694 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0804467E
	ldrh r0, [r3]
	movs r1, #4
	eors r0, r1
	strh r0, [r3]
_0804467E:
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0804468E
	strh r0, [r3]
_0804468E:
	pop {r0}
	bx r0
	.align 2, 0
_08044694: .4byte gCurrentSprite

	thumb_func_start NettoriPlasmaBeamInit
NettoriPlasmaBeamInit: @ 0x08044698
	push {r4, lr}
	ldr r0, _08044710 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08044714 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08044718 @ =0x0000FFE4
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _0804471C @ =0x0000FFCC
	strh r0, [r2, #0xe]
	movs r0, #0x34
	strh r0, [r2, #0x10]
	ldr r0, _08044720 @ =0x0836A3B0
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r2, #0x22
	movs r0, #3
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #1
	mov r2, ip
	strh r0, [r2, #0x14]
	mov r0, ip
	adds r0, #0x35
	strb r1, [r0]
	ldr r0, _08044724 @ =0x0000029A
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08044710: .4byte gCurrentSprite
_08044714: .4byte 0x0000FFFB
_08044718: .4byte 0x0000FFE4
_0804471C: .4byte 0x0000FFCC
_08044720: .4byte 0x0836A3B0
_08044724: .4byte 0x0000029A

	thumb_func_start NettoriPlasmaBeamEmerging
NettoriPlasmaBeamEmerging: @ 0x08044728
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804475A
	ldr r3, _08044760 @ =gCurrentSprite
	ldr r0, _08044764 @ =0x0836A468
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2e
	movs r2, #2
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	ldr r0, _08044768 @ =0x0000029B
	bl SoundPlay
_0804475A:
	pop {r0}
	bx r0
	.align 2, 0
_08044760: .4byte gCurrentSprite
_08044764: .4byte 0x0836A468
_08044768: .4byte 0x0000029B

	thumb_func_start NettoriPlasmaBeamMovingInit
NettoriPlasmaBeamMovingInit: @ 0x0804476C
	push {lr}
	ldr r2, _08044794 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804478A
	ldr r0, _08044798 @ =0x0836A398
	str r0, [r2, #0x18]
	subs r1, #0xa
	movs r0, #0x1a
	strb r0, [r1]
_0804478A:
	ldrh r0, [r2, #4]
	subs r0, #0x14
	strh r0, [r2, #4]
	pop {r0}
	bx r0
	.align 2, 0
_08044794: .4byte gCurrentSprite
_08044798: .4byte 0x0836A398

	thumb_func_start NettoriPlasmaBeamMoving
NettoriPlasmaBeamMoving: @ 0x0804479C
	push {r4, lr}
	ldr r4, _080447C8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080447CC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080447D4
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	movs r2, #0x2f
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	ldr r0, _080447D0 @ =0x0000029E
	bl SoundPlay
	b _080447DA
	.align 2, 0
_080447C8: .4byte gCurrentSprite
_080447CC: .4byte gPreviousCollisionCheck
_080447D0: .4byte 0x0000029E
_080447D4:
	ldrh r0, [r4, #4]
	subs r0, #0x14
	strh r0, [r4, #4]
_080447DA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SamusEaterInit
SamusEaterInit: @ 0x080447E0
	push {r4, r5, lr}
	ldr r5, _08044860 @ =gCurrentSprite
	ldr r2, _08044864 @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #0xb
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x27
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08044868 @ =0x0000FFA0
	strh r1, [r5, #0xa]
	movs r0, #0x10
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	movs r0, #0x60
	strh r0, [r5, #0x10]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0804486C @ =0x0836A238
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	ldr r4, _08044870 @ =gFrameCounter8Bit
	ldrb r2, [r4]
	movs r1, #3
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r5, #0x16]
	ldr r0, _08044874 @ =gIoRegisters
	ldrb r0, [r0, #0xa]
	ands r1, r0
	adds r0, r5, #0
	adds r0, #0x21
	strb r1, [r0]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	bl SpriteChooseRandomXFlip
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, #0x5a
	adds r1, r5, #0
	adds r1, #0x2e
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08044860: .4byte gCurrentSprite
_08044864: .4byte sPrimarySpriteStats
_08044868: .4byte 0x0000FFA0
_0804486C: .4byte 0x0836A238
_08044870: .4byte gSpriteRandomNumber
_08044874: .4byte gIoRegisters

	thumb_func_start SamusEaterIdleInit
SamusEaterIdleInit: @ 0x08044878
	ldr r1, _08044890 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08044894 @ =0x0836A238
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08044890: .4byte gCurrentSprite
_08044894: .4byte 0x0836A238

	thumb_func_start SamusEaterIdle
SamusEaterIdle: @ 0x08044898
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r4, _080448C0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080448C8
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r1]
	ldr r0, _080448C4 @ =0x0836A260
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	b _0804492C
	.align 2, 0
_080448C0: .4byte gCurrentSprite
_080448C4: .4byte 0x0836A260
_080448C8:
	bl SamusEaterCheckNettoriHealthThreshold
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804492C
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	bne _0804492C
	ldr r0, _08044934 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x5a
	strb r0, [r1]
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x60
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #0x52
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x60
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x52
	movs r1, #1
	bl SpriteSpawnSecondary
	movs r0, #0xa7
	lsls r0, r0, #2
	bl CheckPlayNotAlreadyPlayingSound
_0804492C:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08044934: .4byte gSpriteRandomNumber

	thumb_func_start SamusEaterEatingSamus
SamusEaterEatingSamus: @ 0x08044938
	push {lr}
	ldr r1, _08044960 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804494E
	ldrb r0, [r1, #0x1c]
	cmp r0, #2
	bne _0804494E
	ldr r0, _08044964 @ =0x00000297
	bl SoundPlay
_0804494E:
	ldr r0, _08044960 @ =gCurrentSprite
	ldrh r2, [r0, #4]
	subs r0, r2, #4
	ldr r3, _08044968 @ =gSamusData
	ldrh r1, [r3, #0x16]
	cmp r0, r1
	ble _0804496C
	adds r0, r1, #4
	b _08044974
	.align 2, 0
_08044960: .4byte gCurrentSprite
_08044964: .4byte 0x00000297
_08044968: .4byte gSamusData
_0804496C:
	adds r0, r2, #4
	cmp r0, r1
	bge _08044976
	subs r0, r1, #4
_08044974:
	strh r0, [r3, #0x16]
_08044976:
	movs r0, #0xa0
	movs r1, #0x80
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldr r3, _080449A4 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	bne _080449A0
	cmp r2, #0
	bne _080449A0
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	ldr r0, _080449A8 @ =0x00000297
	bl StopSound
_080449A0:
	pop {r0}
	bx r0
	.align 2, 0
_080449A4: .4byte gCurrentSprite
_080449A8: .4byte 0x00000297

	thumb_func_start SamusEaterDyingInit
SamusEaterDyingInit: @ 0x080449AC
	ldr r3, _080449D4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x46
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0xa
	movs r0, #0x10
	strb r0, [r1]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	bx lr
	.align 2, 0
_080449D4: .4byte gCurrentSprite

	thumb_func_start SamusEaterDying
SamusEaterDying: @ 0x080449D8
	push {lr}
	ldr r2, _08044A1C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r1, [r3]
	ands r0, r1
	cmp r0, #0
	bne _080449F8
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_080449F8:
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08044A18
	strh r0, [r2]
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x2d
	bl ParticleSet
	ldr r0, _08044A20 @ =0x0000029D
	bl CheckPlayNotAlreadyPlayingSound
_08044A18:
	pop {r0}
	bx r0
	.align 2, 0
_08044A1C: .4byte gCurrentSprite
_08044A20: .4byte 0x0000029D

	thumb_func_start SamusEaterBudSetSidesHitboxes
SamusEaterBudSetSidesHitboxes: @ 0x08044A24
	push {lr}
	ldr r2, _08044A3C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08044A44
	ldr r0, _08044A40 @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x38
	b _08044A4A
	.align 2, 0
_08044A3C: .4byte gCurrentSprite
_08044A40: .4byte 0x0000FFF0
_08044A44:
	ldr r0, _08044A50 @ =0x0000FFC8
	strh r0, [r2, #0xe]
	movs r0, #0x10
_08044A4A:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_08044A50: .4byte 0x0000FFC8

	thumb_func_start SamusEaterBudInit
SamusEaterBudInit: @ 0x08044A54
	push {r4, r5, r6, r7, lr}
	ldr r7, _08044AC4 @ =gCurrentSprite
	ldrh r0, [r7, #2]
	subs r0, #0x40
	movs r5, #0
	movs r6, #0
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	adds r0, #0x20
	strh r0, [r7, #4]
	bl MakeSpriteFaceSamusXFlip
	ldr r2, _08044AC8 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r7, #0x14]
	adds r0, r7, #0
	adds r0, #0x25
	movs r4, #2
	strb r4, [r0]
	adds r0, #2
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08044ACC @ =0x0000FFE0
	strh r0, [r7, #0xa]
	movs r0, #0x28
	strh r0, [r7, #0xc]
	bl SamusEaterBudSetSidesHitboxes
	adds r0, r7, #0
	adds r0, #0x24
	strb r4, [r0]
	ldr r0, _08044AD0 @ =0x0836A2D0
	str r0, [r7, #0x18]
	strb r5, [r7, #0x1c]
	strh r6, [r7, #0x16]
	adds r1, r7, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	bl SpriteChooseRandomXFlip
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08044AC4: .4byte gCurrentSprite
_08044AC8: .4byte sPrimarySpriteStats
_08044ACC: .4byte 0x0000FFE0
_08044AD0: .4byte 0x0836A2D0

	thumb_func_start SamusEaterBudIdleInit
SamusEaterBudIdleInit: @ 0x08044AD4
	push {lr}
	ldr r1, _08044AF4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _08044AF8 @ =0x0836A2D0
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bl SamusEaterBudSetSidesHitboxes
	pop {r0}
	bx r0
	.align 2, 0
_08044AF4: .4byte gCurrentSprite
_08044AF8: .4byte 0x0836A2D0

	thumb_func_start SamusEaterBudIdle
SamusEaterBudIdle: @ 0x08044AFC
	push {r4, lr}
	movs r4, #0
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #2
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldr r3, _08044B2C @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08044B34
	cmp r2, #0
	beq _08044B52
	ldr r1, _08044B30 @ =gSamusData
	ldrh r0, [r3, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08044B56
	b _08044B42
	.align 2, 0
_08044B2C: .4byte gCurrentSprite
_08044B30: .4byte gSamusData
_08044B34:
	cmp r2, #0
	beq _08044B52
	ldr r1, _08044B4C @ =gSamusData
	ldrh r0, [r3, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _08044B50
_08044B42:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _08044B52
	.align 2, 0
_08044B4C: .4byte gSamusData
_08044B50:
	movs r4, #1
_08044B52:
	cmp r4, #0
	beq _08044B80
_08044B56:
	ldr r4, _08044B88 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	movs r0, #0x52
	bl CountSecondarySpriteWithRamSlot
	cmp r0, #1
	bgt _08044B80
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r1]
	ldr r0, _08044B8C @ =0x0836A2F8
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r0, _08044B90 @ =0x00000296
	bl CheckPlayNotAlreadyPlayingSound
_08044B80:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08044B88: .4byte gCurrentSprite
_08044B8C: .4byte 0x0836A2F8
_08044B90: .4byte 0x00000296

	thumb_func_start SamusEaterBudTurningAroundInit
SamusEaterBudTurningAroundInit: @ 0x08044B94
	ldr r1, _08044BB4 @ =gCurrentSprite
	ldr r0, _08044BB8 @ =0x0836A340
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #4
	strb r0, [r2]
	ldr r0, _08044BBC @ =0x0000FFEC
	strh r0, [r1, #0xe]
	movs r0, #0x14
	strh r0, [r1, #0x10]
	bx lr
	.align 2, 0
_08044BB4: .4byte gCurrentSprite
_08044BB8: .4byte 0x0836A340
_08044BBC: .4byte 0x0000FFEC

	thumb_func_start SamusEaterBudTurningAround
SamusEaterBudTurningAround: @ 0x08044BC0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08044BDA
	ldr r2, _08044BE0 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x24
	movs r0, #5
	strb r0, [r2]
_08044BDA:
	pop {r0}
	bx r0
	.align 2, 0
_08044BE0: .4byte gCurrentSprite

	thumb_func_start SamusEaterBudTurningAroundSecondPart
SamusEaterBudTurningAroundSecondPart: @ 0x08044BE4
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08044BF6
	ldr r0, _08044BFC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_08044BF6:
	pop {r0}
	bx r0
	.align 2, 0
_08044BFC: .4byte gCurrentSprite

	thumb_func_start SamusEaterBudShooting
SamusEaterBudShooting: @ 0x08044C00
	push {r4, lr}
	sub sp, #0xc
	ldr r0, _08044C48 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0, #0x16]
	cmp r0, #3
	bne _08044C6C
	mov r1, ip
	ldrb r0, [r1, #0x1c]
	cmp r0, #4
	bne _08044C6C
	ldrh r1, [r1]
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _08044C4C
	mov r0, ip
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	mov r1, ip
	ldrh r0, [r1, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r1, #4]
	adds r0, #0x2c
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x52
	movs r1, #0
	bl SpriteSpawnSecondary
	b _08044C6C
	.align 2, 0
_08044C48: .4byte gCurrentSprite
_08044C4C:
	mov r4, ip
	ldrb r2, [r4, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x20
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x2c
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x52
	movs r1, #0
	bl SpriteSpawnSecondary
_08044C6C:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08044C7C
	ldr r0, _08044C84 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_08044C7C:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08044C84: .4byte gCurrentSprite

	thumb_func_start SamusEaterBudDyingInit
SamusEaterBudDyingInit: @ 0x08044C88
	ldr r3, _08044CB0 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x46
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0xa
	movs r0, #8
	strb r0, [r1]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	bx lr
	.align 2, 0
_08044CB0: .4byte gCurrentSprite

	thumb_func_start SamusEaterBudDying
SamusEaterBudDying: @ 0x08044CB4
	push {lr}
	ldr r2, _08044CF8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r1, [r3]
	ands r0, r1
	cmp r0, #0
	bne _08044CD4
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_08044CD4:
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08044CF4
	strh r0, [r2]
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x2d
	bl ParticleSet
	ldr r0, _08044CFC @ =0x00000299
	bl CheckPlayNotAlreadyPlayingSound
_08044CF4:
	pop {r0}
	bx r0
	.align 2, 0
_08044CF8: .4byte gCurrentSprite
_08044CFC: .4byte 0x00000299

	thumb_func_start SamusEaterSporeInit
SamusEaterSporeInit: @ 0x08044D00
	push {r4, lr}
	ldr r0, _08044D88 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08044D8C @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08044D90 @ =0x0000FFF8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r1, _08044D94 @ =sSecondarySpriteStats
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2, #0x14]
	ldr r0, _08044D98 @ =0x0836A350
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	subs r0, #1
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldr r1, _08044D9C @ =gIoRegisters
	ldrb r1, [r1, #0xa]
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	adds r1, #4
	movs r0, #4
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r3, [r0]
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	beq _08044DA0
	subs r1, #1
	movs r0, #0x18
	b _08044DA6
	.align 2, 0
_08044D88: .4byte gCurrentSprite
_08044D8C: .4byte 0x0000FFFB
_08044D90: .4byte 0x0000FFF8
_08044D94: .4byte sSecondarySpriteStats
_08044D98: .4byte 0x0836A350
_08044D9C: .4byte gIoRegisters
_08044DA0:
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
_08044DA6:
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SamusEaterSporeFloating
SamusEaterSporeFloating: @ 0x08044DB0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r3, _08044DEC @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x31
	ldrb r2, [r6]
	ldr r5, _08044DF0 @ =0x08365A14
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08044DF4 @ =0x00007FFF
	cmp r1, r0
	bne _08044DD4
	ldrh r4, [r5]
	movs r2, #0
_08044DD4:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r3, #2]
	adds r1, r0, r4
	strh r1, [r3, #2]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08044DF8
	adds r0, r1, #2
	b _08044DFA
	.align 2, 0
_08044DEC: .4byte gCurrentSprite
_08044DF0: .4byte 0x08365A14
_08044DF4: .4byte 0x00007FFF
_08044DF8:
	adds r0, r1, #1
_08044DFA:
	strh r0, [r3, #2]
	ldr r4, _08044E3C @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	mov r8, r0
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08044E48
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r2, [r6]
	ldr r5, _08044E40 @ =0x08365A94
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08044E44 @ =0x00007FFF
	cmp r1, r0
	bne _08044E28
	ldrh r3, [r5]
	movs r2, #0
_08044E28:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #4]
	adds r0, r0, r3
	adds r0, #3
	strh r0, [r4, #4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x10
	b _08044E76
	.align 2, 0
_08044E3C: .4byte gCurrentSprite
_08044E40: .4byte 0x08365A94
_08044E44: .4byte 0x00007FFF
_08044E48:
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r2, [r6]
	ldr r5, _08044ECC @ =0x08365B14
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08044ED0 @ =0x00007FFF
	cmp r1, r0
	bne _08044E64
	ldrh r3, [r5]
	movs r2, #0
_08044E64:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #4]
	adds r0, r0, r3
	subs r0, #3
	strh r0, [r4, #4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x10
_08044E76:
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08044ED4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08044E96
	ldrh r0, [r4]
	mov r1, r8
	eors r0, r1
	strh r0, [r4]
	movs r0, #0
	strb r0, [r6]
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
_08044E96:
	ldr r4, _08044ED8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	adds r0, #0x10
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08044EDC @ =gCurrentAffectingClipdata
	ldrh r0, [r0, #2]
	cmp r0, #1
	beq _08044EB8
	ldr r0, _08044ED4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08044EB8
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _08044EC0
_08044EB8:
	ldr r0, _08044ED8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x37
	strb r1, [r0]
_08044EC0:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08044ECC: .4byte 0x08365B14
_08044ED0: .4byte 0x00007FFF
_08044ED4: .4byte gPreviousCollisionCheck
_08044ED8: .4byte gCurrentSprite
_08044EDC: .4byte gCurrentAffectingClipdata

	thumb_func_start SamusEaterSporeMoving
SamusEaterSporeMoving: @ 0x08044EE0
	push {r4, r5, r6, lr}
	ldr r2, _08044F10 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r6, _08044F14 @ =0x08365B94
	lsls r0, r3, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r4, #0
	ldrsh r1, [r0, r4]
	ldr r0, _08044F18 @ =0x00007FFF
	adds r4, r2, #0
	cmp r1, r0
	bne _08044F1C
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08044F26
	.align 2, 0
_08044F10: .4byte gCurrentSprite
_08044F14: .4byte 0x08365B94
_08044F18: .4byte 0x00007FFF
_08044F1C:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
_08044F26:
	strh r0, [r4, #2]
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08044F38
	ldrh r0, [r4, #4]
	adds r0, #4
	b _08044F3C
_08044F38:
	ldrh r0, [r4, #4]
	subs r0, #4
_08044F3C:
	strh r0, [r4, #4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08044F6C @ =gCurrentAffectingClipdata
	ldrh r0, [r0, #2]
	cmp r0, #1
	beq _08044F5C
	ldr r0, _08044F70 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08044F5C
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _08044F64
_08044F5C:
	ldr r0, _08044F74 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x37
	strb r1, [r0]
_08044F64:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08044F6C: .4byte gCurrentAffectingClipdata
_08044F70: .4byte gPreviousCollisionCheck
_08044F74: .4byte gCurrentSprite

	thumb_func_start SamusEaterSporeExplodingInit
SamusEaterSporeExplodingInit: @ 0x08044F78
	ldr r0, _08044FA8 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x38
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	mov r2, ip
	ldrh r1, [r2]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	ldr r0, _08044FAC @ =0x0836A378
	str r0, [r1, #0x18]
	strb r2, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_08044FA8: .4byte gCurrentSprite
_08044FAC: .4byte 0x0836A378

	thumb_func_start SamusEaterSporeExploding
SamusEaterSporeExploding: @ 0x08044FB0
	push {r4, lr}
	ldr r4, _08044FD0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08044FC8
	movs r0, #0
	strh r0, [r4]
_08044FC8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08044FD0: .4byte gCurrentSprite

	thumb_func_start Nettori
Nettori: @ 0x08044FD4
	push {lr}
	ldr r0, _08044FEC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08045000
	cmp r0, #2
	bgt _08044FF0
	cmp r0, #0
	beq _08044FFA
	b _0804500E
	.align 2, 0
_08044FEC: .4byte gCurrentSprite
_08044FF0:
	cmp r0, #0x45
	beq _08045006
	cmp r0, #0x46
	beq _0804500A
	b _0804500E
_08044FFA:
	bl NettoriInit
	b _0804500E
_08045000:
	bl NettoriIdle
	b _0804500E
_08045006:
	bl NettoriDyingInit
_0804500A:
	bl NettoriTransformingIntoCoreX
_0804500E:
	ldr r1, _08045028 @ =gCurrentSprite
	ldr r0, _0804502C @ =sPrimarySpriteStats
	movs r2, #0x93
	lsls r2, r2, #3
	adds r0, r0, r2
	ldrh r0, [r0]
	ldrh r1, [r1, #0x14]
	lsrs r0, r0, #1
	cmp r1, r0
	blo _08045030
	bl NettoriUpdateGlowingPalette
	b _08045034
	.align 2, 0
_08045028: .4byte gCurrentSprite
_0804502C: .4byte sPrimarySpriteStats
_08045030:
	bl NettoriUpdatePalette
_08045034:
	pop {r0}
	bx r0

	thumb_func_start NettoriPart
NettoriPart: @ 0x08045038
	push {lr}
	ldr r0, _08045058 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0804506C
	cmp r0, #2
	bgt _0804505C
	cmp r0, #0
	beq _08045066
	b _0804507C
	.align 2, 0
_08045058: .4byte gCurrentSprite
_0804505C:
	cmp r0, #0x38
	beq _08045072
	cmp r0, #0x3a
	beq _08045078
	b _0804507C
_08045066:
	bl NettoriPartInit
	b _0804507C
_0804506C:
	bl NettoriPartIdle
	b _0804507C
_08045072:
	bl NettoriPartFalling
	b _0804507C
_08045078:
	bl NettoriPartExploding
_0804507C:
	pop {r0}
	bx r0

	thumb_func_start NettoriPlasmaBeam
NettoriPlasmaBeam: @ 0x08045080
	push {lr}
	ldr r0, _08045098 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _080450AC
	cmp r0, #2
	bgt _0804509C
	cmp r0, #0
	beq _080450A6
	b _080450BC
	.align 2, 0
_08045098: .4byte gCurrentSprite
_0804509C:
	cmp r0, #0x18
	beq _080450B2
	cmp r0, #0x1a
	beq _080450B8
	b _080450BC
_080450A6:
	bl NettoriPlasmaBeamInit
	b _080450BC
_080450AC:
	bl NettoriPlasmaBeamEmerging
	b _080450BC
_080450B2:
	bl NettoriPlasmaBeamMovingInit
	b _080450BC
_080450B8:
	bl NettoriPlasmaBeamMoving
_080450BC:
	pop {r0}
	bx r0

	thumb_func_start SamusEater
SamusEater: @ 0x080450C0
	push {lr}
	ldr r1, _080450E0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x32
	ldrb r0, [r2]
	cmp r0, #0
	beq _080450EC
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x45
	beq _080450E4
	bl SpriteUpdateFreezeTimer
	b _08045144
	.align 2, 0
_080450E0: .4byte gCurrentSprite
_080450E4:
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	strb r0, [r2]
_080450EC:
	ldr r0, _08045104 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08045126
	cmp r0, #2
	bgt _08045108
	cmp r0, #0
	beq _0804511C
	cmp r0, #1
	beq _08045122
	b _0804513A
	.align 2, 0
_08045104: .4byte gCurrentSprite
_08045108:
	cmp r0, #0x45
	beq _08045132
	cmp r0, #0x45
	bgt _08045116
	cmp r0, #0x2a
	beq _0804512C
	b _0804513A
_08045116:
	cmp r0, #0x46
	beq _08045136
	b _0804513A
_0804511C:
	bl SamusEaterInit
	b _0804513A
_08045122:
	bl SamusEaterIdleInit
_08045126:
	bl SamusEaterIdle
	b _0804513A
_0804512C:
	bl SamusEaterEatingSamus
	b _0804513A
_08045132:
	bl SamusEaterDyingInit
_08045136:
	bl SamusEaterDying
_0804513A:
	ldr r2, _08045148 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _0804514C @ =0x0000F7FF
	ands r0, r1
	strh r0, [r2]
_08045144:
	pop {r0}
	bx r0
	.align 2, 0
_08045148: .4byte gCurrentSprite
_0804514C: .4byte 0x0000F7FF

	thumb_func_start SamusEaterBud
SamusEaterBud: @ 0x08045150
	push {lr}
	ldr r1, _08045170 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x32
	ldrb r0, [r3]
	adds r2, r1, #0
	cmp r0, #0
	beq _0804517E
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x45
	beq _08045174
	bl SpriteUpdateFreezeTimer
	b _080452E2
	.align 2, 0
_08045170: .4byte gCurrentSprite
_08045174:
	adds r1, r2, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	strb r0, [r3]
_0804517E:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bls _0804518A
	b _080452E2
_0804518A:
	lsls r0, r0, #2
	ldr r1, _08045194 @ =_08045198
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08045194: .4byte _08045198
_08045198: @ jump table
	.4byte _080452B4 @ case 0
	.4byte _080452BA @ case 1
	.4byte _080452BE @ case 2
	.4byte _080452C4 @ case 3
	.4byte _080452C8 @ case 4
	.4byte _080452CE @ case 5
	.4byte _080452E2 @ case 6
	.4byte _080452E2 @ case 7
	.4byte _080452E2 @ case 8
	.4byte _080452E2 @ case 9
	.4byte _080452E2 @ case 10
	.4byte _080452E2 @ case 11
	.4byte _080452E2 @ case 12
	.4byte _080452E2 @ case 13
	.4byte _080452E2 @ case 14
	.4byte _080452E2 @ case 15
	.4byte _080452E2 @ case 16
	.4byte _080452E2 @ case 17
	.4byte _080452E2 @ case 18
	.4byte _080452E2 @ case 19
	.4byte _080452E2 @ case 20
	.4byte _080452E2 @ case 21
	.4byte _080452E2 @ case 22
	.4byte _080452E2 @ case 23
	.4byte _080452E2 @ case 24
	.4byte _080452E2 @ case 25
	.4byte _080452E2 @ case 26
	.4byte _080452E2 @ case 27
	.4byte _080452E2 @ case 28
	.4byte _080452E2 @ case 29
	.4byte _080452E2 @ case 30
	.4byte _080452E2 @ case 31
	.4byte _080452E2 @ case 32
	.4byte _080452E2 @ case 33
	.4byte _080452E2 @ case 34
	.4byte _080452E2 @ case 35
	.4byte _080452E2 @ case 36
	.4byte _080452E2 @ case 37
	.4byte _080452E2 @ case 38
	.4byte _080452E2 @ case 39
	.4byte _080452E2 @ case 40
	.4byte _080452E2 @ case 41
	.4byte _080452D4 @ case 42
	.4byte _080452E2 @ case 43
	.4byte _080452E2 @ case 44
	.4byte _080452E2 @ case 45
	.4byte _080452E2 @ case 46
	.4byte _080452E2 @ case 47
	.4byte _080452E2 @ case 48
	.4byte _080452E2 @ case 49
	.4byte _080452E2 @ case 50
	.4byte _080452E2 @ case 51
	.4byte _080452E2 @ case 52
	.4byte _080452E2 @ case 53
	.4byte _080452E2 @ case 54
	.4byte _080452E2 @ case 55
	.4byte _080452E2 @ case 56
	.4byte _080452E2 @ case 57
	.4byte _080452E2 @ case 58
	.4byte _080452E2 @ case 59
	.4byte _080452E2 @ case 60
	.4byte _080452E2 @ case 61
	.4byte _080452E2 @ case 62
	.4byte _080452E2 @ case 63
	.4byte _080452E2 @ case 64
	.4byte _080452E2 @ case 65
	.4byte _080452E2 @ case 66
	.4byte _080452E2 @ case 67
	.4byte _080452E2 @ case 68
	.4byte _080452DA @ case 69
	.4byte _080452DE @ case 70
_080452B4:
	bl SamusEaterBudInit
	b _080452E2
_080452BA:
	bl SamusEaterBudIdleInit
_080452BE:
	bl SamusEaterBudIdle
	b _080452E2
_080452C4:
	bl SamusEaterBudTurningAroundInit
_080452C8:
	bl SamusEaterBudTurningAround
	b _080452E2
_080452CE:
	bl SamusEaterBudTurningAroundSecondPart
	b _080452E2
_080452D4:
	bl SamusEaterBudShooting
	b _080452E2
_080452DA:
	bl SamusEaterBudDyingInit
_080452DE:
	bl SamusEaterBudDying
_080452E2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SamusEaterSpore
SamusEaterSpore: @ 0x080452E8
	push {lr}
	ldr r0, _08045300 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08045314
	cmp r0, #2
	bgt _08045304
	cmp r0, #0
	beq _0804530E
	b _08045326
	.align 2, 0
_08045300: .4byte gCurrentSprite
_08045304:
	cmp r0, #0x18
	beq _0804531A
	cmp r0, #0x38
	beq _08045320
	b _08045326
_0804530E:
	bl SamusEaterSporeInit
	b _0804532A
_08045314:
	bl SamusEaterSporeFloating
	b _0804532A
_0804531A:
	bl SamusEaterSporeMoving
	b _0804532A
_08045320:
	bl SamusEaterSporeExploding
	b _0804532A
_08045326:
	bl SamusEaterSporeExplodingInit
_0804532A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZazabiSyncSubSprites
ZazabiSyncSubSprites: @ 0x08045330
	push {r4, r5, lr}
	ldr r2, _0804535C @ =gSubSpriteData1
	ldrh r0, [r2, #4]
	ldr r1, [r2]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r5, [r0]
	ldr r3, _08045360 @ =gCurrentSprite
	ldrb r1, [r3, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r1, [r0]
	adds r4, r1, #0
	ldrh r0, [r2, #0xc]
	cmp r0, #0x28
	bne _08045368
	ldr r0, _08045364 @ =0x0879B374
	lsls r1, r1, #2
	b _0804538C
	.align 2, 0
_0804535C: .4byte gSubSpriteData1
_08045360: .4byte gCurrentSprite
_08045364: .4byte 0x0879B374
_08045368:
	cmp r0, #0x3c
	bne _08045378
	ldr r0, _08045374 @ =0x0879B290
	lsls r1, r1, #2
	b _0804538C
	.align 2, 0
_08045374: .4byte 0x0879B290
_08045378:
	cmp r0, #0x50
	bne _08045388
	ldr r0, _08045384 @ =0x0879B1AC
	lsls r1, r1, #2
	b _0804538C
	.align 2, 0
_08045384: .4byte 0x0879B1AC
_08045388:
	ldr r0, _080453C8 @ =0x0879B0C8
	lsls r1, r4, #2
_0804538C:
	adds r1, r1, r0
	ldr r0, [r3, #0x18]
	ldr r1, [r1]
	cmp r0, r1
	beq _0804539E
	str r1, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
_0804539E:
	ldrb r1, [r3, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0, #2]
	ldrh r1, [r2, #8]
	adds r0, r0, r1
	strh r0, [r3, #2]
	ldrb r1, [r3, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0, #4]
	ldrh r2, [r2, #0xa]
	adds r0, r0, r2
	strh r0, [r3, #4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080453C8: .4byte 0x0879B0C8

	thumb_func_start ZazabiProjectileCollision
ZazabiProjectileCollision: @ 0x080453CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r2, _08045410 @ =gCurrentSprite
	ldrh r0, [r2, #0x14]
	cmp r0, #0
	bne _08045414
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080453EE
	b _0804550C
_080453EE:
	movs r0, #4
	ands r1, r0
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08045408
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_08045408:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
	b _0804550C
	.align 2, 0
_08045410: .4byte gCurrentSprite
_08045414:
	movs r5, #0
	mov sl, r5
_08045418:
	ldr r0, _0804548C @ =gProjectileData
	mov r2, sl
	lsls r1, r2, #5
	adds r4, r1, r0
	ldrb r2, [r4]
	movs r0, #1
	ands r0, r2
	mov sb, r1
	cmp r0, #0
	beq _080454FE
	movs r0, #0x10
	ands r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #0
	bne _080454FE
	ldrb r7, [r4, #0x12]
	cmp r7, #1
	bls _080454FE
	ldrh r3, [r4, #0xa]
	ldr r0, _08045490 @ =gCurrentSprite
	ldrh r2, [r0, #4]
	movs r5, #0x40
	subs r1, r2, r5
	mov ip, r0
	cmp r3, r1
	ble _080454FE
	adds r0, r2, #0
	adds r0, #0x40
	cmp r3, r0
	bge _080454FE
	ldrh r1, [r4, #8]
	mov r0, ip
	ldrh r2, [r0, #2]
	movs r5, #0x34
	subs r0, r2, r5
	cmp r1, r0
	ble _080454FE
	adds r0, r2, #0
	adds r0, #0x34
	cmp r1, r0
	bge _080454FE
	adds r5, r1, #0
	adds r6, r3, #0
	ldrb r0, [r4, #0xf]
	cmp r0, #0xa
	bne _08045494
	cmp r7, #7
	beq _080454FE
	movs r0, #0xa
	bl ProjectileDealDamageToZazabi
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #8
	b _080454AA
	.align 2, 0
_0804548C: .4byte gProjectileData
_08045490: .4byte gCurrentSprite
_08045494:
	cmp r0, #6
	bne _080454D4
	ldrb r0, [r4, #0x13]
	cmp r0, #0
	beq _080454D4
	movs r0, #0xa
	bl ProjectileDealDamageToZazabi
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #4
_080454AA:
	bl ParticleSet
	ldr r1, _080454CC @ =0x030006E8
	ldrb r0, [r1]
	movs r1, #0x80
	ands r1, r0
	movs r0, #0x29
	orrs r1, r0
	ldr r2, _080454CC @ =0x030006E8
	strb r1, [r2]
	ldr r0, _080454D0 @ =0x00000285
	bl CheckPlayNotAlreadyPlayingSound
	mov r5, r8
	strb r5, [r4]
	b _080454FE
	.align 2, 0
_080454CC: .4byte 0x030006E8
_080454D0: .4byte 0x00000285
_080454D4:
	mov r2, ip
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #1
	bhi _080454EC
	movs r0, #0x80
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
_080454EC:
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #7
	bl ParticleSet
	ldr r0, _0804551C @ =gProjectileData
	add r0, sb
	movs r1, #0
	strb r1, [r0]
_080454FE:
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	cmp r0, #0xf
	bls _08045418
_0804550C:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804551C: .4byte gProjectileData

	thumb_func_start ZazabiEnableProjectilesToPassThrough
ZazabiEnableProjectilesToPassThrough: @ 0x08045520
	push {r4, r5, r6, r7, lr}
	ldr r0, _08045574 @ =gCurrentSprite
	ldrh r5, [r0, #2]
	ldrh r0, [r0, #4]
	mov ip, r0
	movs r4, #0
	ldr r7, _08045578 @ =gProjectileData
	movs r6, #0x10
_08045530:
	lsls r0, r4, #5
	adds r2, r0, r7
	ldrb r3, [r2]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0804558E
	ldrb r0, [r2, #0x12]
	cmp r0, #1
	bls _0804558E
	ldrb r0, [r2, #0x10]
	cmp r0, #4
	bne _0804558E
	ldrh r1, [r2, #0xa]
	mov r0, ip
	subs r0, #0x24
	cmp r1, r0
	ble _0804558E
	adds r0, #0x48
	cmp r1, r0
	bge _0804558E
	ldrh r1, [r2, #8]
	adds r0, r5, #0
	adds r0, #0x20
	cmp r1, r0
	ble _0804557C
	adds r0, r6, #0
	ands r0, r3
	cmp r0, #0
	beq _0804558E
	movs r0, #0xef
	ands r0, r3
	b _0804558C
	.align 2, 0
_08045574: .4byte gCurrentSprite
_08045578: .4byte gProjectileData
_0804557C:
	cmp r1, r5
	bhs _0804558E
	adds r0, r6, #0
	ands r0, r3
	cmp r0, #0
	bne _0804558E
	movs r0, #0x80
	orrs r0, r3
_0804558C:
	strb r0, [r2]
_0804558E:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0xf
	bls _08045530
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Zazabi_Empty
Zazabi_Empty: @ 0x080455A0
	bx lr
	.align 2, 0

	thumb_func_start ZazabiXMovement
ZazabiXMovement: @ 0x080455A4
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r7, r5, #0
	movs r6, #0
	ldr r0, _080455DC @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080455E8
	ldr r4, _080455E0 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r4, #0xa]
	adds r1, #0x64
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080455E4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045602
	ldrh r0, [r4, #0xa]
	adds r0, r5, r0
	b _08045614
	.align 2, 0
_080455DC: .4byte gCurrentSprite
_080455E0: .4byte gSubSpriteData1
_080455E4: .4byte gPreviousCollisionCheck
_080455E8:
	ldr r4, _08045608 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r4, #0xa]
	subs r1, #0x64
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804560C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08045610
_08045602:
	movs r6, #1
	b _08045616
	.align 2, 0
_08045608: .4byte gSubSpriteData1
_0804560C: .4byte gPreviousCollisionCheck
_08045610:
	ldrh r0, [r4, #0xa]
	subs r0, r0, r7
_08045614:
	strh r0, [r4, #0xa]
_08045616:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ZazabiSpawningFromX
ZazabiSpawningFromX: @ 0x08045620
	push {lr}
	ldr r3, _08045648 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08045654
	ldr r2, _0804564C @ =gWrittenToMosaic_H
	ldr r1, _08045650 @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _08045664
	.align 2, 0
_08045648: .4byte gCurrentSprite
_0804564C: .4byte gWrittenToMosaic_H
_08045650: .4byte 0x083BDED6
_08045654:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _08045668 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r3]
_08045664:
	pop {r0}
	bx r0
	.align 2, 0
_08045668: .4byte 0x0000FFDF

	thumb_func_start ZazabiInit
ZazabiInit: @ 0x0804566C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	ldr r0, _0804570C @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x25
	movs r4, #0
	strb r4, [r0]
	mov r2, ip
	ldrh r1, [r2]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	ldr r0, _08045710 @ =0x0000FFD0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x30
	strh r0, [r2, #0xc]
	ldr r0, _08045714 @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x20
	strh r0, [r2, #0x10]
	subs r1, #7
	movs r0, #0xc
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x30
	strb r3, [r0]
	movs r0, #5
	strb r0, [r2, #0x1e]
	ldr r2, _08045718 @ =sPrimarySpriteStats
	mov r0, ip
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	ldr r1, _0804571C @ =gSubSpriteData1
	strh r0, [r1, #0xc]
	mov r2, ip
	ldrh r0, [r2, #2]
	strh r0, [r1, #8]
	ldrh r0, [r2, #4]
	strh r0, [r1, #0xa]
	ldr r0, _08045720 @ =0x0836B450
	str r0, [r1]
	strb r3, [r1, #6]
	strh r4, [r1, #4]
	adds r2, #0x24
	ldrb r0, [r2]
	mov r8, ip
	mov sb, r1
	cmp r0, #0x59
	bne _08045724
	movs r0, #0x5a
	strb r0, [r2]
	movs r0, #0x2c
	mov r1, r8
	strh r0, [r1, #6]
	b _08045728
	.align 2, 0
_0804570C: .4byte gCurrentSprite
_08045710: .4byte 0x0000FFD0
_08045714: .4byte 0x0000FFE0
_08045718: .4byte sPrimarySpriteStats
_0804571C: .4byte gSubSpriteData1
_08045720: .4byte 0x0836B450
_08045724:
	movs r0, #7
	strb r0, [r2]
_08045728:
	mov r4, r8
	ldrb r2, [r4, #0x1f]
	adds r7, r4, #0
	adds r7, #0x23
	ldrb r3, [r7]
	mov r6, sb
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08045804
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #1
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08045804
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #2
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08045804
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #3
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08045804
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #4
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08045804
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #6
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _08045804
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r6, #8]
	str r0, [sp]
	ldrh r0, [r6, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #7
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _08045808
_08045804:
	strh r5, [r4]
	b _08045834
_08045808:
	mov r0, r8
	ldrb r2, [r0, #0x1f]
	ldrb r3, [r7]
	mov r1, sb
	ldrh r0, [r1, #8]
	str r0, [sp]
	ldrh r0, [r1, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x5a
	movs r1, #8
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _08045830
	mov r2, r8
	strh r5, [r2]
	b _08045834
_08045830:
	ldr r0, _08045844 @ =gBossWork0
	strb r5, [r0]
_08045834:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08045844: .4byte gBossWork0

	thumb_func_start ZazabiIdleInit
ZazabiIdleInit: @ 0x08045848
	push {r4, r5, lr}
	ldr r3, _08045864 @ =gCurrentSprite
	ldrh r2, [r3, #0x14]
	adds r5, r2, #0
	ldr r0, _08045868 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r4, r0, #0
	cmp r1, #0x50
	bne _0804586C
	cmp r2, #0x3c
	bhi _0804588E
	movs r0, #0x3c
	b _0804588A
	.align 2, 0
_08045864: .4byte gCurrentSprite
_08045868: .4byte gSubSpriteData1
_0804586C:
	cmp r1, #0x3c
	bne _08045878
	cmp r2, #0x28
	bhi _0804588E
	movs r0, #0x28
	b _0804588A
_08045878:
	cmp r1, #0x28
	bne _08045884
	cmp r2, #0
	bne _0804588E
	strh r2, [r4, #0xc]
	b _0804588E
_08045884:
	cmp r5, #0x50
	bhi _0804588E
	movs r0, #0x50
_0804588A:
	strh r0, [r4, #0xc]
	strh r0, [r3, #0x14]
_0804588E:
	ldrh r0, [r4, #0xc]
	cmp r0, #0x28
	beq _08045898
	cmp r0, #0
	bne _080458A8
_08045898:
	ldr r0, _080458A4 @ =0x0836D9B8
	str r0, [r4]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #1
	b _080458DA
	.align 2, 0
_080458A4: .4byte 0x0836D9B8
_080458A8:
	cmp r0, #0x3c
	bne _080458BC
	ldr r0, _080458B8 @ =0x0836D154
	str r0, [r4]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #1
	b _080458DA
	.align 2, 0
_080458B8: .4byte 0x0836D154
_080458BC:
	cmp r0, #0x50
	bne _080458D0
	ldr r0, _080458CC @ =0x0836C488
	str r0, [r4]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #2
	b _080458DA
	.align 2, 0
_080458CC: .4byte 0x0836C488
_080458D0:
	ldr r0, _080458F0 @ =0x0836B450
	str r0, [r4]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #3
_080458DA:
	strb r0, [r1]
	movs r0, #0
	strb r0, [r4, #6]
	strh r0, [r4, #4]
	ldrh r0, [r4, #0xc]
	cmp r0, #0
	beq _080458F4
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #8
	b _080458FA
	.align 2, 0
_080458F0: .4byte 0x0836B450
_080458F4:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x45
_080458FA:
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZazabiIdle
ZazabiIdle: @ 0x08045904
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08045926
	ldr r1, _0804592C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08045926
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_08045926:
	pop {r0}
	bx r0
	.align 2, 0
_0804592C: .4byte gCurrentSprite

	thumb_func_start ZazabiCrawlingInit
ZazabiCrawlingInit: @ 0x08045930
	push {lr}
	ldr r0, _08045940 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x28
	bne _08045948
	ldr r0, _08045944 @ =0x0836D9E0
	b _08045962
	.align 2, 0
_08045940: .4byte gSubSpriteData1
_08045944: .4byte 0x0836D9E0
_08045948:
	cmp r1, #0x3c
	bne _08045954
	ldr r0, _08045950 @ =0x0836D17C
	b _08045962
	.align 2, 0
_08045950: .4byte 0x0836D17C
_08045954:
	cmp r1, #0x50
	bne _08045960
	ldr r0, _0804595C @ =0x0836C4B0
	b _08045962
	.align 2, 0
_0804595C: .4byte 0x0836C4B0
_08045960:
	ldr r0, _08045988 @ =0x0836B478
_08045962:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r3, _0804598C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r0, [r2, #0xc]
	cmp r0, #0x28
	bne _08045994
	ldr r0, _08045990 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, #0x3c
	adds r1, #0xa
	b _0804599A
	.align 2, 0
_08045988: .4byte 0x0836B478
_0804598C: .4byte gCurrentSprite
_08045990: .4byte gSpriteRandomNumber
_08045994:
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x78
_0804599A:
	strb r0, [r1]
	pop {r0}
	bx r0

	thumb_func_start ZazabiCrawling
ZazabiCrawling: @ 0x080459A0
	push {r4, r5, lr}
	ldr r0, _080459B8 @ =gSubSpriteData1
	ldrh r1, [r0, #4]
	adds r2, r0, #0
	cmp r1, #7
	bhi _080459FC
	lsls r0, r1, #2
	ldr r1, _080459BC @ =_080459C0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080459B8: .4byte gSubSpriteData1
_080459BC: .4byte _080459C0
_080459C0: @ jump table
	.4byte _080459FC @ case 0
	.4byte _080459E0 @ case 1
	.4byte _080459F4 @ case 2
	.4byte _080459F8 @ case 3
	.4byte _080459FC @ case 4
	.4byte _080459F8 @ case 5
	.4byte _080459F4 @ case 6
	.4byte _080459F8 @ case 7
_080459E0:
	ldrb r0, [r2, #6]
	cmp r0, #1
	bne _080459F8
	ldr r0, _080459F0 @ =0x0000027B
	bl SoundPlay
	b _080459F8
	.align 2, 0
_080459F0: .4byte 0x0000027B
_080459F4:
	movs r0, #4
	b _080459FE
_080459F8:
	movs r0, #2
	b _080459FE
_080459FC:
	movs r0, #0
_080459FE:
	bl ZazabiXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08045A16
	ldr r0, _08045A28 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
_08045A16:
	ldr r4, _08045A28 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r5, r0, #0
	cmp r5, #0
	beq _08045A2C
	subs r0, #1
	b _08045A7E
	.align 2, 0
_08045A28: .4byte gCurrentSprite
_08045A2C:
	ldr r0, _08045A54 @ =gSubSpriteData1
	ldrh r2, [r0, #0xc]
	cmp r2, #0x28
	bne _08045A58
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #0xc0
	lsls r1, r1, #1
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08045A80
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x17
	strb r1, [r0]
	adds r0, #0xc
	strb r5, [r0]
	b _08045A80
	.align 2, 0
_08045A54: .4byte gSubSpriteData1
_08045A58:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	ldr r0, _08045A74 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #2
	adds r1, #0xc
	strb r0, [r1]
	cmp r2, #0x3c
	bne _08045A78
	adds r0, #2
	b _08045A7E
	.align 2, 0
_08045A74: .4byte gSpriteRandomNumber
_08045A78:
	cmp r2, #0x50
	bne _08045A80
	adds r0, #1
_08045A7E:
	strb r0, [r1]
_08045A80:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZazabiJumpWarningInit
ZazabiJumpWarningInit: @ 0x08045A88
	push {lr}
	ldr r0, _08045A98 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x28
	bne _08045AA0
	ldr r0, _08045A9C @ =0x0836DA28
	b _08045ABA
	.align 2, 0
_08045A98: .4byte gSubSpriteData1
_08045A9C: .4byte 0x0836DA28
_08045AA0:
	cmp r1, #0x3c
	bne _08045AAC
	ldr r0, _08045AA8 @ =0x0836D1C4
	b _08045ABA
	.align 2, 0
_08045AA8: .4byte 0x0836D1C4
_08045AAC:
	cmp r1, #0x50
	bne _08045AB8
	ldr r0, _08045AB4 @ =0x0836C4F8
	b _08045ABA
	.align 2, 0
_08045AB4: .4byte 0x0836C4F8
_08045AB8:
	ldr r0, _08045AD0 @ =0x0836B4C0
_08045ABA:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _08045AD4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08045AD0: .4byte 0x0836B4C0
_08045AD4: .4byte gCurrentSprite

	thumb_func_start ZazabiJumpWarning
ZazabiJumpWarning: @ 0x08045AD8
	push {r4, r5, lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08045B0C
	ldr r0, _08045B14 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	strb r1, [r0]
	ldr r4, _08045B18 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	movs r5, #0xaa
	lsls r5, r5, #1
	adds r0, r0, r5
	ldrh r1, [r4, #0xa]
	subs r1, #0x4c
	movs r2, #0x31
	bl ParticleSet
	ldrh r0, [r4, #8]
	adds r0, r0, r5
	ldrh r1, [r4, #0xa]
	adds r1, #0x4c
	movs r2, #0x31
	bl ParticleSet
_08045B0C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045B14: .4byte gCurrentSprite
_08045B18: .4byte gSubSpriteData1

	thumb_func_start ZazabiJumpingInit
ZazabiJumpingInit: @ 0x08045B1C
	push {r4, r5, lr}
	movs r0, #0x9f
	lsls r0, r0, #2
	bl SoundPlay
	ldr r1, _08045B5C @ =gSubSpriteData1
	movs r0, #0
	strb r0, [r1, #6]
	movs r5, #0
	strh r0, [r1, #4]
	ldr r4, _08045B60 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	strb r5, [r0]
	bl MakeSpriteFaceSamusDirection
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #0x80
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08045B64
	adds r0, r4, #0
	adds r0, #0x2f
	strb r5, [r0]
	b _08045B6C
	.align 2, 0
_08045B5C: .4byte gSubSpriteData1
_08045B60: .4byte gCurrentSprite
_08045B64:
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
_08045B6C:
	ldr r1, _08045B88 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045BC0
	ldr r1, _08045B8C @ =gSubSpriteData1
	ldrh r0, [r1, #0xc]
	cmp r0, #0x28
	bne _08045B94
	ldr r0, _08045B90 @ =0x0836DA40
	str r0, [r1]
	b _08045C40
	.align 2, 0
_08045B88: .4byte gCurrentSprite
_08045B8C: .4byte gSubSpriteData1
_08045B90: .4byte 0x0836DA40
_08045B94:
	cmp r0, #0x3c
	bne _08045BA4
	ldr r0, _08045BA0 @ =0x0836D1DC
	str r0, [r1]
	b _08045C40
	.align 2, 0
_08045BA0: .4byte 0x0836D1DC
_08045BA4:
	cmp r0, #0x50
	bne _08045BB4
	ldr r0, _08045BB0 @ =0x0836C510
	str r0, [r1]
	b _08045C40
	.align 2, 0
_08045BB0: .4byte 0x0836C510
_08045BB4:
	ldr r0, _08045BBC @ =0x0836B4D8
	str r0, [r1]
	b _08045C40
	.align 2, 0
_08045BBC: .4byte 0x0836B4D8
_08045BC0:
	ldr r2, _08045BD8 @ =gSubSpriteData1
	ldrh r0, [r2, #0xc]
	cmp r0, #0x28
	bne _08045BE8
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045BE0
	ldr r0, _08045BDC @ =0x0836DA60
	b _08045C3E
	.align 2, 0
_08045BD8: .4byte gSubSpriteData1
_08045BDC: .4byte 0x0836DA60
_08045BE0:
	ldr r0, _08045BE4 @ =0x0836DA80
	b _08045C3E
	.align 2, 0
_08045BE4: .4byte 0x0836DA80
_08045BE8:
	cmp r0, #0x3c
	bne _08045C08
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045C00
	ldr r0, _08045BFC @ =0x0836D1FC
	b _08045C3E
	.align 2, 0
_08045BFC: .4byte 0x0836D1FC
_08045C00:
	ldr r0, _08045C04 @ =0x0836D21C
	b _08045C3E
	.align 2, 0
_08045C04: .4byte 0x0836D21C
_08045C08:
	cmp r0, #0x50
	bne _08045C28
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045C20
	ldr r0, _08045C1C @ =0x0836C530
	b _08045C3E
	.align 2, 0
_08045C1C: .4byte 0x0836C530
_08045C20:
	ldr r0, _08045C24 @ =0x0836C550
	b _08045C3E
	.align 2, 0
_08045C24: .4byte 0x0836C550
_08045C28:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045C3C
	ldr r0, _08045C38 @ =0x0836B4F8
	b _08045C3E
	.align 2, 0
_08045C38: .4byte 0x0836B4F8
_08045C3C:
	ldr r0, _08045C48 @ =0x0836B518
_08045C3E:
	str r0, [r2]
_08045C40:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045C48: .4byte 0x0836B518

	thumb_func_start ZazabiJumping
ZazabiJumping: @ 0x08045C4C
	push {r4, r5, lr}
	ldr r1, _08045C80 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov ip, r1
	cmp r0, #0
	bne _08045CB0
	mov r4, ip
	adds r4, #0x31
	ldrb r2, [r4]
	ldr r1, _08045C84 @ =0x0836DBB8
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _08045C88 @ =0x00007FFF
	cmp r1, r0
	bne _08045C8C
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	b _08045C98
	.align 2, 0
_08045C80: .4byte gCurrentSprite
_08045C84: .4byte 0x0836DBB8
_08045C88: .4byte 0x00007FFF
_08045C8C:
	adds r0, r2, #1
	strb r0, [r4]
	ldr r1, _08045CAC @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r3
	strh r0, [r1, #8]
_08045C98:
	mov r0, ip
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08045D1E
	movs r0, #4
	bl ZazabiXMovement
	b _08045D1E
	.align 2, 0
_08045CAC: .4byte gSubSpriteData1
_08045CB0:
	mov r0, ip
	adds r0, #0x31
	ldrb r2, [r0]
	ldr r0, _08045CC4 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r4, r0, #0
	cmp r1, #0x50
	bne _08045CCC
	ldr r1, _08045CC8 @ =0x0836DCB8
	b _08045CDA
	.align 2, 0
_08045CC4: .4byte gSubSpriteData1
_08045CC8: .4byte 0x0836DCB8
_08045CCC:
	cmp r1, #0x3c
	bne _08045CD8
	ldr r1, _08045CD4 @ =0x0836DC68
	b _08045CDA
	.align 2, 0
_08045CD4: .4byte 0x0836DC68
_08045CD8:
	ldr r1, _08045CF0 @ =0x0836DC18
_08045CDA:
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	ldr r0, _08045CF4 @ =0x00007FFF
	cmp r3, r0
	bne _08045CF8
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	b _08045D06
	.align 2, 0
_08045CF0: .4byte 0x0836DC18
_08045CF4: .4byte 0x00007FFF
_08045CF8:
	adds r0, r2, #1
	mov r1, ip
	adds r1, #0x31
	strb r0, [r1]
	ldrh r0, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
_08045D06:
	mov r0, ip
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08045D18
	movs r0, #8
	bl ZazabiXMovement
	b _08045D1E
_08045D18:
	movs r0, #2
	bl ZazabiXMovement
_08045D1E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start ZazabiFallingInit
ZazabiFallingInit: @ 0x08045D24
	push {r4, lr}
	ldr r4, _08045D5C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045D38
	ldr r0, _08045D60 @ =0x0000027E
	bl SoundPlay
_08045D38:
	ldr r2, _08045D64 @ =gSubSpriteData1
	movs r0, #0
	strb r0, [r2, #6]
	movs r3, #0
	strh r0, [r2, #4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	strb r3, [r0]
	ldrh r0, [r2, #0xc]
	cmp r0, #0x28
	bne _08045D68
	adds r1, #0xa
	movs r0, #0xa
	b _08045D86
	.align 2, 0
_08045D5C: .4byte gCurrentSprite
_08045D60: .4byte 0x0000027E
_08045D64: .4byte gSubSpriteData1
_08045D68:
	cmp r0, #0x3c
	bne _08045D74
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x14
	b _08045D86
_08045D74:
	cmp r0, #0x50
	bne _08045D80
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x28
	b _08045D86
_08045D80:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x3c
_08045D86:
	strb r0, [r1]
	ldr r1, _08045DA0 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045E04
	ldrh r0, [r2, #0xc]
	cmp r0, #0x28
	bne _08045DA8
	ldr r0, _08045DA4 @ =0x0836DAA0
	b _08045F1E
	.align 2, 0
_08045DA0: .4byte gCurrentSprite
_08045DA4: .4byte 0x0836DAA0
_08045DA8:
	cmp r0, #0x3c
	bne _08045DC8
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045DC0
	ldr r0, _08045DBC @ =0x0836D274
	b _08045F1E
	.align 2, 0
_08045DBC: .4byte 0x0836D274
_08045DC0:
	ldr r0, _08045DC4 @ =0x0836D23C
	b _08045F1E
	.align 2, 0
_08045DC4: .4byte 0x0836D23C
_08045DC8:
	cmp r0, #0x50
	bne _08045DE8
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045DE0
	ldr r0, _08045DDC @ =0x0836C5A8
	b _08045F1E
	.align 2, 0
_08045DDC: .4byte 0x0836C5A8
_08045DE0:
	ldr r0, _08045DE4 @ =0x0836C570
	b _08045F1E
	.align 2, 0
_08045DE4: .4byte 0x0836C570
_08045DE8:
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045DFC
	ldr r0, _08045DF8 @ =0x0836B570
	b _08045F1E
	.align 2, 0
_08045DF8: .4byte 0x0836B570
_08045DFC:
	ldr r0, _08045E00 @ =0x0836B538
	b _08045F1E
	.align 2, 0
_08045E00: .4byte 0x0836B538
_08045E04:
	adds r3, r2, #0
	ldrh r0, [r3, #0xc]
	cmp r0, #0x28
	bne _08045E30
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045E24
	ldr r0, _08045E20 @ =0x0836DB20
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045E20: .4byte 0x0836DB20
_08045E24:
	ldr r0, _08045E2C @ =0x0836DAD8
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045E2C: .4byte 0x0836DAD8
_08045E30:
	cmp r0, #0x3c
	bne _08045E84
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045E60
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045E54
	ldr r0, _08045E50 @ =0x0836D384
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045E50: .4byte 0x0836D384
_08045E54:
	ldr r0, _08045E5C @ =0x0836D2F4
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045E5C: .4byte 0x0836D2F4
_08045E60:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045E78
	ldr r0, _08045E74 @ =0x0836D33C
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045E74: .4byte 0x0836D33C
_08045E78:
	ldr r0, _08045E80 @ =0x0836D2AC
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045E80: .4byte 0x0836D2AC
_08045E84:
	cmp r0, #0x50
	bne _08045ED8
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045EB4
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045EA8
	ldr r0, _08045EA4 @ =0x0836C6B8
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045EA4: .4byte 0x0836C6B8
_08045EA8:
	ldr r0, _08045EB0 @ =0x0836C628
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045EB0: .4byte 0x0836C628
_08045EB4:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045ECC
	ldr r0, _08045EC8 @ =0x0836C670
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045EC8: .4byte 0x0836C670
_08045ECC:
	ldr r0, _08045ED4 @ =0x0836C5E0
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045ED4: .4byte 0x0836C5E0
_08045ED8:
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045F04
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045EF8
	ldr r0, _08045EF4 @ =0x0836B680
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045EF4: .4byte 0x0836B680
_08045EF8:
	ldr r0, _08045F00 @ =0x0836B5F0
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045F00: .4byte 0x0836B5F0
_08045F04:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08045F1C
	ldr r0, _08045F18 @ =0x0836B638
	str r0, [r3]
	b _08045F20
	.align 2, 0
_08045F18: .4byte 0x0836B638
_08045F1C:
	ldr r0, _08045F28 @ =0x0836B5A8
_08045F1E:
	str r0, [r2]
_08045F20:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08045F28: .4byte 0x0836B5A8

	thumb_func_start ZazabiFalling
ZazabiFalling: @ 0x08045F2C
	push {r4, r5, r6, lr}
	ldr r1, _08045F50 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r4, r1, #0
	cmp r0, #0
	beq _08045F3E
	b _08046074
_08045F3E:
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08045F58
	subs r0, #1
	strb r0, [r1]
	ldr r5, _08045F54 @ =gSubSpriteData1
	b _08045FA4
	.align 2, 0
_08045F50: .4byte gCurrentSprite
_08045F54: .4byte gSubSpriteData1
_08045F58:
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08045F88 @ =0x0836DC08
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08045F8C @ =0x00007FFF
	cmp r1, r0
	bne _08045F94
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r5
	ldr r2, _08045F90 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #8]
	adds r5, r2, #0
	b _08045FA4
	.align 2, 0
_08045F88: .4byte 0x0836DC08
_08045F8C: .4byte 0x00007FFF
_08045F90: .4byte gSubSpriteData1
_08045F94:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _08045FD4 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r3
	strh r0, [r1, #8]
	adds r5, r1, #0
_08045FA4:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r4, [r0]
	cmp r4, #0
	beq _08045FE4
	ldrh r0, [r5, #4]
	cmp r0, #4
	bhi _08046014
	ldrh r0, [r5, #8]
	movs r2, #0xaf
	lsls r2, r2, #1
	adds r0, r0, r2
	ldrh r1, [r5, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08045FD8 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	cmp r1, #0
	beq _08045FDC
	movs r0, #0
	strb r0, [r5, #6]
	movs r0, #5
	strh r0, [r5, #4]
	b _08046014
	.align 2, 0
_08045FD4: .4byte gSubSpriteData1
_08045FD8: .4byte gPreviousCollisionCheck
_08045FDC:
	ldrh r0, [r5, #4]
	cmp r0, #4
	bne _08046014
	b _08046012
_08045FE4:
	ldrh r0, [r5, #4]
	cmp r0, #2
	bhi _08046014
	ldrh r0, [r5, #8]
	movs r6, #0xaf
	lsls r6, r6, #1
	adds r0, r0, r6
	ldrh r1, [r5, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08046008 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	cmp r1, #0
	beq _0804600C
	strb r4, [r5, #6]
	movs r0, #3
	strh r0, [r5, #4]
	b _08046014
	.align 2, 0
_08046008: .4byte gPreviousCollisionCheck
_0804600C:
	ldrh r0, [r5, #4]
	cmp r0, #2
	bne _08046014
_08046012:
	strb r1, [r5, #6]
_08046014:
	ldrh r0, [r5, #8]
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r5, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _08046064 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804602E
	b _08046198
_0804602E:
	ldr r2, _08046068 @ =0xFFFFFEC0
	adds r0, r1, r2
	strh r0, [r5, #8]
	ldr r0, _0804606C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1d
	strb r1, [r0]
	ldrh r0, [r5, #8]
	movs r4, #0xaa
	lsls r4, r4, #1
	adds r0, r0, r4
	ldrh r1, [r5, #0xa]
	subs r1, #0x4c
	movs r2, #0x31
	bl ParticleSet
	ldrh r0, [r5, #8]
	adds r0, r0, r4
	ldrh r1, [r5, #0xa]
	adds r1, #0x4c
	movs r2, #0x31
	bl ParticleSet
	ldr r0, _08046070 @ =0x0000027D
	bl SoundPlay
	b _08046198
	.align 2, 0
_08046064: .4byte gPreviousVerticalCollisionCheck
_08046068: .4byte 0xFFFFFEC0
_0804606C: .4byte gCurrentSprite
_08046070: .4byte 0x0000027D
_08046074:
	movs r6, #0x31
	adds r6, r6, r4
	mov ip, r6
	ldrb r2, [r6]
	ldr r5, _080460A0 @ =0x0836DD08
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080460A4 @ =0x00007FFF
	cmp r1, r0
	bne _080460AC
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r5
	ldr r2, _080460A8 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #8]
	b _080460BA
	.align 2, 0
_080460A0: .4byte 0x0836DD08
_080460A4: .4byte 0x00007FFF
_080460A8: .4byte gSubSpriteData1
_080460AC:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _080460F4 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r3
	strh r0, [r1, #8]
_080460BA:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r5, [r0]
	cmp r5, #0
	beq _08046104
	movs r0, #8
	bl ZazabiXMovement
	ldr r4, _080460F4 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	cmp r0, #4
	bhi _08046140
	ldrh r0, [r4, #8]
	movs r2, #0xbe
	lsls r2, r2, #1
	adds r0, r0, r2
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080460F8 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	cmp r1, #0
	beq _080460FC
	movs r0, #0
	strb r0, [r4, #6]
	movs r0, #5
	strh r0, [r4, #4]
	b _08046140
	.align 2, 0
_080460F4: .4byte gSubSpriteData1
_080460F8: .4byte gPreviousCollisionCheck
_080460FC:
	ldrh r0, [r4, #4]
	cmp r0, #4
	bne _08046140
	b _0804613E
_08046104:
	movs r0, #2
	bl ZazabiXMovement
	ldr r4, _08046130 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	cmp r0, #2
	bhi _08046140
	ldrh r0, [r4, #8]
	movs r6, #0xbe
	lsls r6, r6, #1
	adds r0, r0, r6
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08046134 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	cmp r1, #0
	beq _08046138
	strb r5, [r4, #6]
	movs r0, #3
	strh r0, [r4, #4]
	b _08046140
	.align 2, 0
_08046130: .4byte gSubSpriteData1
_08046134: .4byte gPreviousCollisionCheck
_08046138:
	ldrh r0, [r4, #4]
	cmp r0, #2
	bne _08046140
_0804613E:
	strb r1, [r4, #6]
_08046140:
	ldr r5, _080461A0 @ =gSubSpriteData1
	ldrh r0, [r5, #8]
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r5, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _080461A4 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08046198
	ldr r2, _080461A8 @ =0xFFFFFEC0
	adds r0, r1, r2
	strh r0, [r5, #8]
	ldr r1, _080461AC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1f
	strb r0, [r2]
	adds r1, #0x30
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldrh r0, [r5, #8]
	movs r4, #0xa8
	lsls r4, r4, #1
	adds r0, r0, r4
	ldrh r1, [r5, #0xa]
	subs r1, #0x1c
	movs r2, #0x31
	bl ParticleSet
	ldrh r0, [r5, #8]
	adds r0, r0, r4
	ldrh r1, [r5, #0xa]
	adds r1, #0x1c
	movs r2, #0x31
	bl ParticleSet
	ldr r0, _080461B0 @ =0x0000027D
	bl SoundPlay
_08046198:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080461A0: .4byte gSubSpriteData1
_080461A4: .4byte gPreviousVerticalCollisionCheck
_080461A8: .4byte 0xFFFFFEC0
_080461AC: .4byte gCurrentSprite
_080461B0: .4byte 0x0000027D

	thumb_func_start ZazabiLandingMouthOpenInit
ZazabiLandingMouthOpenInit: @ 0x080461B4
	push {lr}
	ldr r0, _080461D4 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x3c
	bne _080461C6
	movs r0, #0xa0
	lsls r0, r0, #2
	bl SoundPlay
_080461C6:
	ldr r0, _080461D8 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x28
	bne _080461E0
	ldr r0, _080461DC @ =0x0836DB68
	b _080461FA
	.align 2, 0
_080461D4: .4byte gSamusData
_080461D8: .4byte gSubSpriteData1
_080461DC: .4byte 0x0836DB68
_080461E0:
	cmp r1, #0x3c
	bne _080461EC
	ldr r0, _080461E8 @ =0x0836D3CC
	b _080461FA
	.align 2, 0
_080461E8: .4byte 0x0836D3CC
_080461EC:
	cmp r1, #0x50
	bne _080461F8
	ldr r0, _080461F4 @ =0x0836C700
	b _080461FA
	.align 2, 0
_080461F4: .4byte 0x0836C700
_080461F8:
	ldr r0, _08046210 @ =0x0836B6C8
_080461FA:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _08046214 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1e
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08046210: .4byte 0x0836B6C8
_08046214: .4byte gCurrentSprite

	thumb_func_start ZazabiLandingMouthOpen
ZazabiLandingMouthOpen: @ 0x08046218
	push {lr}
	ldr r2, _08046254 @ =gSubSpriteData1
	ldr r0, [r2, #4]
	ldr r1, _08046258 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _0804625C @ =0x00010001
	cmp r0, r1
	bne _08046234
	ldrh r0, [r2, #0xc]
	cmp r0, #0x28
	beq _08046234
	ldr r0, _08046260 @ =0x0000027F
	bl SoundPlay
_08046234:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08046290
	ldr r0, _08046264 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x3c
	bne _08046288
	ldr r0, _08046254 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x3c
	bne _0804626C
	ldr r0, _08046268 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3f
	b _0804628E
	.align 2, 0
_08046254: .4byte gSubSpriteData1
_08046258: .4byte 0x00FFFFFF
_0804625C: .4byte 0x00010001
_08046260: .4byte 0x0000027F
_08046264: .4byte gSamusData
_08046268: .4byte gCurrentSprite
_0804626C:
	cmp r0, #0x50
	bne _0804627C
	ldr r0, _08046278 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3b
	b _0804628E
	.align 2, 0
_08046278: .4byte gCurrentSprite
_0804627C:
	ldr r0, _08046284 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x37
	b _0804628E
	.align 2, 0
_08046284: .4byte gCurrentSprite
_08046288:
	ldr r0, _08046294 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
_0804628E:
	strb r1, [r0]
_08046290:
	pop {r0}
	bx r0
	.align 2, 0
_08046294: .4byte gCurrentSprite

	thumb_func_start ZazabiLandingInit
ZazabiLandingInit: @ 0x08046298
	push {lr}
	ldr r0, _080462A8 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x28
	bne _080462B0
	ldr r0, _080462AC @ =0x0836DBA0
	b _080462CA
	.align 2, 0
_080462A8: .4byte gSubSpriteData1
_080462AC: .4byte 0x0836DBA0
_080462B0:
	cmp r1, #0x3c
	bne _080462BC
	ldr r0, _080462B8 @ =0x0836D404
	b _080462CA
	.align 2, 0
_080462B8: .4byte 0x0836D404
_080462BC:
	cmp r1, #0x50
	bne _080462C8
	ldr r0, _080462C4 @ =0x0836C738
	b _080462CA
	.align 2, 0
_080462C4: .4byte 0x0836C738
_080462C8:
	ldr r0, _080462E0 @ =0x0836B700
_080462CA:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _080462E4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x20
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080462E0: .4byte 0x0836B700
_080462E4: .4byte gCurrentSprite

	thumb_func_start ZazabiLanding
ZazabiLanding: @ 0x080462E8
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080462FA
	ldr r0, _08046300 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	strb r1, [r0]
_080462FA:
	pop {r0}
	bx r0
	.align 2, 0
_08046300: .4byte gCurrentSprite

	thumb_func_start ZazabiEatingSamus1Init
ZazabiEatingSamus1Init: @ 0x08046304
	ldr r1, _08046324 @ =gSubSpriteData1
	ldr r0, _08046328 @ =0x0836B778
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _0804632C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x38
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	bx lr
	.align 2, 0
_08046324: .4byte gSubSpriteData1
_08046328: .4byte 0x0836B778
_0804632C: .4byte gCurrentSprite

	thumb_func_start ZazabiEatingSamus1
ZazabiEatingSamus1: @ 0x08046330
	push {lr}
	bl TakeConstantDamage
	ldr r1, _08046350 @ =gBossWork0
	ldrb r0, [r1]
	cmp r0, #0
	beq _08046358
	movs r0, #0
	strb r0, [r1]
	bl Zazabi_Empty
	ldr r0, _08046354 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x41
	strb r1, [r0]
	b _08046378
	.align 2, 0
_08046350: .4byte gBossWork0
_08046354: .4byte gCurrentSprite
_08046358:
	ldr r2, _0804637C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08046378
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x39
	strb r1, [r0]
	ldr r0, _08046380 @ =0x00000281
	bl SoundPlay
_08046378:
	pop {r0}
	bx r0
	.align 2, 0
_0804637C: .4byte gCurrentSprite
_08046380: .4byte 0x00000281

	thumb_func_start ZazabiEatingSamus2Init
ZazabiEatingSamus2Init: @ 0x08046384
	ldr r1, _0804639C @ =gSubSpriteData1
	ldr r0, _080463A0 @ =0x0836B7A0
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _080463A4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3a
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804639C: .4byte gSubSpriteData1
_080463A0: .4byte 0x0836B7A0
_080463A4: .4byte gCurrentSprite

	thumb_func_start ZazabiEatingSamus2
ZazabiEatingSamus2: @ 0x080463A8
	push {lr}
	bl TakeConstantDamage
	ldr r1, _080463C8 @ =gBossWork0
	ldrb r0, [r1]
	cmp r0, #0
	beq _080463D0
	movs r0, #0
	strb r0, [r1]
	bl Zazabi_Empty
	ldr r0, _080463CC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x37
	strb r1, [r0]
	b _080463E6
	.align 2, 0
_080463C8: .4byte gBossWork0
_080463CC: .4byte gCurrentSprite
_080463D0:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080463E6
	ldr r0, _080463EC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3b
	strb r1, [r0]
	ldr r0, _080463F0 @ =0x00000281
	bl SoundPlay
_080463E6:
	pop {r0}
	bx r0
	.align 2, 0
_080463EC: .4byte gCurrentSprite
_080463F0: .4byte 0x00000281

	thumb_func_start ZazabiEatingSamus3Init
ZazabiEatingSamus3Init: @ 0x080463F4
	push {lr}
	ldr r0, _08046404 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x50
	bne _0804640C
	ldr r0, _08046408 @ =0x0836C7B0
	b _0804640E
	.align 2, 0
_08046404: .4byte gSubSpriteData1
_08046408: .4byte 0x0836C7B0
_0804640C:
	ldr r0, _08046428 @ =0x0836B7C8
_0804640E:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _0804642C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	movs r2, #0x3c
	strb r2, [r1]
	adds r0, #0x2e
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08046428: .4byte 0x0836B7C8
_0804642C: .4byte gCurrentSprite

	thumb_func_start ZazabiEatingSamus3
ZazabiEatingSamus3: @ 0x08046430
	push {lr}
	bl TakeConstantDamage
	ldr r1, _08046458 @ =gBossWork0
	ldrb r0, [r1]
	cmp r0, #0
	beq _08046474
	movs r0, #0
	strb r0, [r1]
	bl Zazabi_Empty
	ldr r0, _0804645C @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x50
	bne _08046464
	ldr r0, _08046460 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x41
	strb r1, [r0]
	b _08046494
	.align 2, 0
_08046458: .4byte gBossWork0
_0804645C: .4byte gSubSpriteData1
_08046460: .4byte gCurrentSprite
_08046464:
	ldr r0, _08046470 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x37
	strb r1, [r0]
	b _08046494
	.align 2, 0
_08046470: .4byte gCurrentSprite
_08046474:
	ldr r2, _08046498 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08046494
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x3d
	strb r1, [r0]
	ldr r0, _0804649C @ =0x00000281
	bl SoundPlay
_08046494:
	pop {r0}
	bx r0
	.align 2, 0
_08046498: .4byte gCurrentSprite
_0804649C: .4byte 0x00000281

	thumb_func_start ZazabiEatingSamus4Init
ZazabiEatingSamus4Init: @ 0x080464A0
	push {lr}
	ldr r0, _080464B0 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x50
	bne _080464B8
	ldr r0, _080464B4 @ =0x0836C7D8
	b _080464BA
	.align 2, 0
_080464B0: .4byte gSubSpriteData1
_080464B4: .4byte 0x0836C7D8
_080464B8:
	ldr r0, _080464D0 @ =0x0836B7F0
_080464BA:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _080464D4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3e
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080464D0: .4byte 0x0836B7F0
_080464D4: .4byte gCurrentSprite

	thumb_func_start ZazabiEatingSamus4
ZazabiEatingSamus4: @ 0x080464D8
	push {lr}
	bl TakeConstantDamage
	ldr r1, _080464F8 @ =gBossWork0
	ldrb r0, [r1]
	cmp r0, #0
	beq _08046500
	movs r0, #0
	strb r0, [r1]
	bl Zazabi_Empty
	ldr r0, _080464FC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3b
	strb r1, [r0]
	b _08046516
	.align 2, 0
_080464F8: .4byte gBossWork0
_080464FC: .4byte gCurrentSprite
_08046500:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08046516
	ldr r0, _0804651C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3f
	strb r1, [r0]
	ldr r0, _08046520 @ =0x00000281
	bl SoundPlay
_08046516:
	pop {r0}
	bx r0
	.align 2, 0
_0804651C: .4byte gCurrentSprite
_08046520: .4byte 0x00000281

	thumb_func_start ZazabiEatingSamus5Init
ZazabiEatingSamus5Init: @ 0x08046524
	push {lr}
	ldr r0, _08046534 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x3c
	bne _0804653C
	ldr r0, _08046538 @ =0x0836D47C
	b _0804654A
	.align 2, 0
_08046534: .4byte gSubSpriteData1
_08046538: .4byte 0x0836D47C
_0804653C:
	cmp r1, #0x50
	bne _08046548
	ldr r0, _08046544 @ =0x0836C800
	b _0804654A
	.align 2, 0
_08046544: .4byte 0x0836C800
_08046548:
	ldr r0, _08046560 @ =0x0836B818
_0804654A:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _08046564 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x40
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08046560: .4byte 0x0836B818
_08046564: .4byte gCurrentSprite

	thumb_func_start ZazabiEatingSamus5
ZazabiEatingSamus5: @ 0x08046568
	push {lr}
	bl TakeConstantDamage
	ldr r1, _08046590 @ =gBossWork0
	ldrb r0, [r1]
	cmp r0, #0
	beq _080465A4
	movs r0, #0
	strb r0, [r1]
	bl Zazabi_Empty
	ldr r0, _08046594 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x3c
	bne _0804659C
	ldr r0, _08046598 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x41
	b _080465A2
	.align 2, 0
_08046590: .4byte gBossWork0
_08046594: .4byte gSubSpriteData1
_08046598: .4byte gCurrentSprite
_0804659C:
	ldr r0, _080465A8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3b
_080465A2:
	strb r1, [r0]
_080465A4:
	pop {r0}
	bx r0
	.align 2, 0
_080465A8: .4byte gCurrentSprite

	thumb_func_start ZazabiSpittingSamusInit
ZazabiSpittingSamusInit: @ 0x080465AC
	push {lr}
	ldr r0, _080465C0 @ =0x00000283
	bl CheckPlayNotAlreadyPlayingSound
	ldr r1, _080465C4 @ =gSubSpriteData1
	ldrh r0, [r1, #0xc]
	cmp r0, #0x3c
	bne _080465CC
	ldr r0, _080465C8 @ =0x0836D41C
	b _080465DA
	.align 2, 0
_080465C0: .4byte 0x00000283
_080465C4: .4byte gSubSpriteData1
_080465C8: .4byte 0x0836D41C
_080465CC:
	cmp r0, #0x50
	bne _080465D8
	ldr r0, _080465D4 @ =0x0836C750
	b _080465DA
	.align 2, 0
_080465D4: .4byte 0x0836C750
_080465D8:
	ldr r0, _080465F0 @ =0x0836B718
_080465DA:
	str r0, [r1]
	ldr r1, _080465F4 @ =gSubSpriteData1
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _080465F8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x42
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080465F0: .4byte 0x0836B718
_080465F4: .4byte gSubSpriteData1
_080465F8: .4byte gCurrentSprite

	thumb_func_start ZazabiSpittingSamus
ZazabiSpittingSamus: @ 0x080465FC
	push {lr}
	ldr r0, _08046620 @ =gSubSpriteData1
	ldr r0, [r0, #4]
	ldr r1, _08046624 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _08046628 @ =0x00010003
	cmp r0, r1
	bne _08046646
	ldr r0, _0804662C @ =gAbilityRestingXPosition
	ldr r1, _08046630 @ =gSamusData
	ldrh r0, [r0]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08046634
	movs r0, #0xa
	bl SamusBombBounce
	b _0804663A
	.align 2, 0
_08046620: .4byte gSubSpriteData1
_08046624: .4byte 0x00FFFFFF
_08046628: .4byte 0x00010003
_0804662C: .4byte gAbilityRestingXPosition
_08046630: .4byte gSamusData
_08046634:
	movs r0, #0xc
	bl SamusBombBounce
_0804663A:
	ldr r1, _0804665C @ =gSamusData
	movs r2, #0
	movs r0, #0x14
	strb r0, [r1, #5]
	ldr r0, _08046660 @ =gBossWork0
	strb r2, [r0]
_08046646:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08046656
	ldr r0, _08046664 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x43
	strb r1, [r0]
_08046656:
	pop {r0}
	bx r0
	.align 2, 0
_0804665C: .4byte gSamusData
_08046660: .4byte gBossWork0
_08046664: .4byte gCurrentSprite

	thumb_func_start ZazabiLandingAfterSpittingInit
ZazabiLandingAfterSpittingInit: @ 0x08046668
	push {lr}
	ldr r0, _08046678 @ =gSubSpriteData1
	ldrh r1, [r0, #0xc]
	adds r2, r0, #0
	cmp r1, #0x3c
	bne _08046680
	ldr r0, _0804667C @ =0x0836D454
	b _0804668E
	.align 2, 0
_08046678: .4byte gSubSpriteData1
_0804667C: .4byte 0x0836D454
_08046680:
	cmp r1, #0x50
	bne _0804668C
	ldr r0, _08046688 @ =0x0836C788
	b _0804668E
	.align 2, 0
_08046688: .4byte 0x0836C788
_0804668C:
	ldr r0, _080466A4 @ =0x0836B750
_0804668E:
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
	ldr r0, _080466A8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x44
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080466A4: .4byte 0x0836B750
_080466A8: .4byte gCurrentSprite

	thumb_func_start ZazabiLandingAfterSpitting
ZazabiLandingAfterSpitting: @ 0x080466AC
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080466BE
	ldr r0, _080466C4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
_080466BE:
	pop {r0}
	bx r0
	.align 2, 0
_080466C4: .4byte gCurrentSprite

	thumb_func_start ZazabiDyingInit
ZazabiDyingInit: @ 0x080466C8
	push {lr}
	ldr r3, _08046708 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	ldrh r1, [r3]
	movs r0, #0x20
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	movs r1, #1
	strh r1, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x2c
	strb r2, [r0]
	subs r0, #0xc
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r3, #6]
	strh r1, [r3, #8]
	ldrh r0, [r3, #2]
	ldrh r1, [r3, #4]
	movs r2, #0x2f
	bl ParticleSet
	ldr r0, _0804670C @ =0x00000286
	bl unk_3b1c
	pop {r0}
	bx r0
	.align 2, 0
_08046708: .4byte gCurrentSprite
_0804670C: .4byte 0x00000286

	thumb_func_start ZazabiDying
ZazabiDying: @ 0x08046710
	push {r4, r5, lr}
	ldr r2, _08046758 @ =gWrittenToMosaic_H
	ldr r1, _0804675C @ =0x083BDED6
	ldr r3, _08046760 @ =gCurrentSprite
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	ldr r1, _08046764 @ =gSubSpriteData1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r2, [r1, #8]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldrh r5, [r1, #0xa]
	ldrh r0, [r3, #8]
	adds r2, r3, #0
	cmp r0, #0
	bne _08046744
	b _0804685E
_08046744:
	ldrh r0, [r3, #6]
	cmp r0, #0x28
	bls _0804674C
	b _080469C0
_0804674C:
	lsls r0, r0, #2
	ldr r1, _08046768 @ =_0804676C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08046758: .4byte gWrittenToMosaic_H
_0804675C: .4byte 0x083BDED6
_08046760: .4byte gCurrentSprite
_08046764: .4byte gSubSpriteData1
_08046768: .4byte _0804676C
_0804676C: @ jump table
	.4byte _08046854 @ case 0
	.4byte _080469C0 @ case 1
	.4byte _080469C0 @ case 2
	.4byte _080469C0 @ case 3
	.4byte _080469C0 @ case 4
	.4byte _080469C0 @ case 5
	.4byte _080469C0 @ case 6
	.4byte _080469C0 @ case 7
	.4byte _080469C0 @ case 8
	.4byte _080469C0 @ case 9
	.4byte _0804683E @ case 10
	.4byte _080469C0 @ case 11
	.4byte _080469C0 @ case 12
	.4byte _080469C0 @ case 13
	.4byte _080469C0 @ case 14
	.4byte _080469C0 @ case 15
	.4byte _080469C0 @ case 16
	.4byte _080469C0 @ case 17
	.4byte _080469C0 @ case 18
	.4byte _080469C0 @ case 19
	.4byte _0804682E @ case 20
	.4byte _080469C0 @ case 21
	.4byte _080469C0 @ case 22
	.4byte _080469C0 @ case 23
	.4byte _080469C0 @ case 24
	.4byte _080469C0 @ case 25
	.4byte _080469C0 @ case 26
	.4byte _080469C0 @ case 27
	.4byte _080469C0 @ case 28
	.4byte _080469C0 @ case 29
	.4byte _08046824 @ case 30
	.4byte _080469C0 @ case 31
	.4byte _080469C0 @ case 32
	.4byte _080469C0 @ case 33
	.4byte _080469C0 @ case 34
	.4byte _080469C0 @ case 35
	.4byte _080469C0 @ case 36
	.4byte _080469C0 @ case 37
	.4byte _080469C0 @ case 38
	.4byte _080469C0 @ case 39
	.4byte _08046810 @ case 40
_08046810:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	movs r2, #0x25
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0x80
	adds r1, r5, #0
	b _08046836
_08046824:
	adds r0, r4, #0
	subs r0, #0xc0
	adds r1, r5, #0
	adds r1, #0x20
	b _08046846
_0804682E:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x10
_08046836:
	movs r2, #0x26
	bl ParticleSet
	b _080469C0
_0804683E:
	ldr r1, _08046850 @ =0xFFFFFF00
	adds r0, r4, r1
	adds r1, r5, #0
	adds r1, #0x10
_08046846:
	movs r2, #0x25
	bl ParticleSet
	b _080469C0
	.align 2, 0
_08046850: .4byte 0xFFFFFF00
_08046854:
	movs r0, #0
	strh r0, [r2, #8]
	movs r0, #0x2c
	strh r0, [r2, #6]
	b _080469C0
_0804685E:
	ldrh r0, [r3, #6]
	cmp r0, #0x28
	bls _08046866
	b _08046992
_08046866:
	lsls r0, r0, #2
	ldr r1, _08046870 @ =_08046874
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08046870: .4byte _08046874
_08046874: @ jump table
	.4byte _08046982 @ case 0
	.4byte _08046992 @ case 1
	.4byte _08046992 @ case 2
	.4byte _08046992 @ case 3
	.4byte _08046992 @ case 4
	.4byte _08046992 @ case 5
	.4byte _08046992 @ case 6
	.4byte _08046992 @ case 7
	.4byte _08046992 @ case 8
	.4byte _08046992 @ case 9
	.4byte _08046964 @ case 10
	.4byte _08046992 @ case 11
	.4byte _08046992 @ case 12
	.4byte _08046992 @ case 13
	.4byte _08046992 @ case 14
	.4byte _08046992 @ case 15
	.4byte _08046992 @ case 16
	.4byte _08046992 @ case 17
	.4byte _08046992 @ case 18
	.4byte _08046992 @ case 19
	.4byte _0804694C @ case 20
	.4byte _08046992 @ case 21
	.4byte _08046992 @ case 22
	.4byte _08046992 @ case 23
	.4byte _08046992 @ case 24
	.4byte _08046992 @ case 25
	.4byte _08046992 @ case 26
	.4byte _08046992 @ case 27
	.4byte _08046992 @ case 28
	.4byte _08046992 @ case 29
	.4byte _08046930 @ case 30
	.4byte _08046992 @ case 31
	.4byte _08046992 @ case 32
	.4byte _08046992 @ case 33
	.4byte _08046992 @ case 34
	.4byte _08046992 @ case 35
	.4byte _08046992 @ case 36
	.4byte _08046992 @ case 37
	.4byte _08046992 @ case 38
	.4byte _08046992 @ case 39
	.4byte _08046918 @ case 40
_08046918:
	adds r0, r4, #0
	subs r0, #0xc0
	adds r1, r5, #0
	subs r1, #0x40
	movs r2, #0x26
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x40
	b _0804697A
_08046930:
	ldr r2, _08046948 @ =0xFFFFFF00
	adds r0, r4, r2
	adds r1, r5, #0
	adds r1, #0x1c
	movs r2, #0x26
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x20
	b _0804697A
	.align 2, 0
_08046948: .4byte 0xFFFFFF00
_0804694C:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x40
	movs r2, #0x26
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0xc0
	adds r1, r5, #0
	subs r1, #0x40
	b _0804697A
_08046964:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x1c
	movs r2, #0x26
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x20
_0804697A:
	movs r2, #0x25
	bl ParticleSet
	b _08046992
_08046982:
	ldr r2, _080469A8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	ldr r0, _080469AC @ =0x030006AD
	ldrb r0, [r0]
	strb r0, [r2, #0x1d]
_08046992:
	ldr r1, _080469A8 @ =gCurrentSprite
	ldrh r0, [r1, #6]
	cmp r0, #0x13
	bhi _080469B0
	ldr r0, _080469AC @ =0x030006AD
	ldrb r0, [r0]
	ldrh r2, [r1, #6]
	movs r1, #0
	bl SpriteLoadGfx
	b _080469C0
	.align 2, 0
_080469A8: .4byte gCurrentSprite
_080469AC: .4byte 0x030006AD
_080469B0:
	cmp r0, #0x14
	bne _080469C0
	ldr r0, _080469C8 @ =0x030006AD
	ldrb r0, [r0]
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_080469C0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080469C8: .4byte 0x030006AD

	thumb_func_start ZazabiPartInit
ZazabiPartInit: @ 0x080469CC
	push {r4, lr}
	ldr r0, _08046A14 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r1, _08046A18 @ =0x0000FFFB
	ands r1, r0
	mov r3, ip
	adds r3, #0x34
	ldrb r2, [r3]
	movs r0, #0x40
	orrs r0, r2
	strb r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r1, r0
	movs r0, #0x20
	orrs r1, r0
	mov r4, ip
	strh r1, [r4]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #1
	strh r0, [r4, #0x14]
	ldrb r0, [r4, #0x1e]
	cmp r0, #4
	bhi _08046A1C
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xb
	b _08046A22
	.align 2, 0
_08046A14: .4byte gCurrentSprite
_08046A18: .4byte 0x0000FFFB
_08046A1C:
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xd
_08046A22:
	strb r0, [r1]
	mov r1, ip
	ldrb r0, [r1, #0x1e]
	cmp r0, #8
	bls _08046A2E
	b _08046BD4
_08046A2E:
	lsls r0, r0, #2
	ldr r1, _08046A38 @ =_08046A3C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08046A38: .4byte _08046A3C
_08046A3C: @ jump table
	.4byte _08046A60 @ case 0
	.4byte _08046A88 @ case 1
	.4byte _08046AB0 @ case 2
	.4byte _08046AE0 @ case 3
	.4byte _08046B10 @ case 4
	.4byte _08046BD4 @ case 5
	.4byte _08046B4C @ case 6
	.4byte _08046B78 @ case 7
	.4byte _08046BA4 @ case 8
_08046A60:
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	movs r1, #0x20
	strb r1, [r0]
	ldr r0, _08046A84 @ =0x0000FFE0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	subs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0x40
	strh r0, [r2, #0x10]
	b _08046BDA
	.align 2, 0
_08046A84: .4byte 0x0000FFE0
_08046A88:
	mov r1, ip
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r3, #0
	ldr r1, _08046AAC @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r2, #4
	movs r0, #4
	b _08046B32
	.align 2, 0
_08046AAC: .4byte 0x0000FFFC
_08046AB0:
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	mov r2, ip
	adds r2, #0x29
	movs r0, #0x28
	strb r0, [r2]
	ldr r0, _08046ADC @ =0x0000FFC0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	subs r0, #0x20
	strh r0, [r2, #0xe]
	movs r0, #0x60
	strh r0, [r2, #0x10]
	b _08046BDA
	.align 2, 0
_08046ADC: .4byte 0x0000FFC0
_08046AE0:
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08046B08 @ =0x0000FFA0
	mov r4, ip
	strh r0, [r4, #0xa]
	movs r0, #0x60
	strh r0, [r4, #0xc]
	ldr r0, _08046B0C @ =0x0000FFC0
	strh r0, [r4, #0xe]
	movs r0, #0x40
	strh r0, [r4, #0x10]
	b _08046BDA
	.align 2, 0
_08046B08: .4byte 0x0000FFA0
_08046B0C: .4byte 0x0000FFC0
_08046B10:
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	movs r3, #0
	ldr r1, _08046B48 @ =0x0000FFFC
	mov r0, ip
	strh r1, [r0, #0xa]
	movs r2, #4
	movs r0, #4
	mov r4, ip
_08046B32:
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	ldrh r0, [r4]
	orrs r0, r2
	strh r0, [r4]
	b _08046BDA
	.align 2, 0
_08046B48: .4byte 0x0000FFFC
_08046B4C:
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08046B70 @ =0x0000FFE0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r0, #0x20
	strh r0, [r1, #0xc]
	ldr r0, _08046B74 @ =0x0000FFD8
	strh r0, [r1, #0xe]
	movs r0, #0x28
	strh r0, [r1, #0x10]
	b _08046BDA
	.align 2, 0
_08046B70: .4byte 0x0000FFE0
_08046B74: .4byte 0x0000FFD8
_08046B78:
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08046B9C @ =0x0000FFE4
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x18
	strh r0, [r2, #0xc]
	ldr r0, _08046BA0 @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x20
	strh r0, [r2, #0x10]
	b _08046BDA
	.align 2, 0
_08046B9C: .4byte 0x0000FFE4
_08046BA0: .4byte 0x0000FFE0
_08046BA4:
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08046BCC @ =0x0000FFE8
	mov r4, ip
	strh r0, [r4, #0xa]
	movs r0, #0x14
	strh r0, [r4, #0xc]
	ldr r0, _08046BD0 @ =0x0000FFE0
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	b _08046BDA
	.align 2, 0
_08046BCC: .4byte 0x0000FFE8
_08046BD0: .4byte 0x0000FFE0
_08046BD4:
	movs r0, #0
	mov r1, ip
	strh r0, [r1]
_08046BDA:
	bl ZazabiSyncSubSprites
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start ZazabiPartDefault
ZazabiPartDefault: @ 0x08046BE4
	push {r4, lr}
	ldr r2, _08046C10 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldr r0, _08046C14 @ =gSpriteData
	lsls r1, r3, #3
	subs r1, r1, r3
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r1, [r1]
	subs r1, #7
	adds r4, r0, #0
	cmp r1, #0x53
	bls _08046C06
	b _08046F54
_08046C06:
	lsls r0, r1, #2
	ldr r1, _08046C18 @ =_08046C1C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08046C10: .4byte gCurrentSprite
_08046C14: .4byte gSpriteData
_08046C18: .4byte _08046C1C
_08046C1C: @ jump table
	.4byte _08046DA0 @ case 0
	.4byte _08046DA0 @ case 1
	.4byte _08046F54 @ case 2
	.4byte _08046F54 @ case 3
	.4byte _08046F54 @ case 4
	.4byte _08046F54 @ case 5
	.4byte _08046F54 @ case 6
	.4byte _08046F54 @ case 7
	.4byte _08046F54 @ case 8
	.4byte _08046F54 @ case 9
	.4byte _08046F54 @ case 10
	.4byte _08046F54 @ case 11
	.4byte _08046F54 @ case 12
	.4byte _08046F54 @ case 13
	.4byte _08046F54 @ case 14
	.4byte _08046F54 @ case 15
	.4byte _08046F54 @ case 16
	.4byte _08046F54 @ case 17
	.4byte _08046F54 @ case 18
	.4byte _08046F54 @ case 19
	.4byte _08046DC4 @ case 20
	.4byte _08046DC4 @ case 21
	.4byte _08046E58 @ case 22
	.4byte _08046EB0 @ case 23
	.4byte _08046F54 @ case 24
	.4byte _08046F54 @ case 25
	.4byte _08046F54 @ case 26
	.4byte _08046F54 @ case 27
	.4byte _08046F54 @ case 28
	.4byte _08046F54 @ case 29
	.4byte _08046F54 @ case 30
	.4byte _08046F54 @ case 31
	.4byte _08046F54 @ case 32
	.4byte _08046F54 @ case 33
	.4byte _08046F54 @ case 34
	.4byte _08046F54 @ case 35
	.4byte _08046F54 @ case 36
	.4byte _08046F54 @ case 37
	.4byte _08046F54 @ case 38
	.4byte _08046F54 @ case 39
	.4byte _08046F54 @ case 40
	.4byte _08046F54 @ case 41
	.4byte _08046F54 @ case 42
	.4byte _08046F54 @ case 43
	.4byte _08046F54 @ case 44
	.4byte _08046F54 @ case 45
	.4byte _08046F54 @ case 46
	.4byte _08046F54 @ case 47
	.4byte _08046EB8 @ case 48
	.4byte _08046EB8 @ case 49
	.4byte _08046EC0 @ case 50
	.4byte _08046EC0 @ case 51
	.4byte _08046EDC @ case 52
	.4byte _08046EDC @ case 53
	.4byte _08046EE4 @ case 54
	.4byte _08046EE4 @ case 55
	.4byte _08046F00 @ case 56
	.4byte _08046F00 @ case 57
	.4byte _08046F20 @ case 58
	.4byte _08046F20 @ case 59
	.4byte _08046F54 @ case 60
	.4byte _08046F54 @ case 61
	.4byte _08046D72 @ case 62
	.4byte _08046D72 @ case 63
	.4byte _08046F54 @ case 64
	.4byte _08046F54 @ case 65
	.4byte _08046F54 @ case 66
	.4byte _08046F54 @ case 67
	.4byte _08046F54 @ case 68
	.4byte _08046F54 @ case 69
	.4byte _08046F54 @ case 70
	.4byte _08046F54 @ case 71
	.4byte _08046F54 @ case 72
	.4byte _08046F54 @ case 73
	.4byte _08046F54 @ case 74
	.4byte _08046F54 @ case 75
	.4byte _08046F54 @ case 76
	.4byte _08046F54 @ case 77
	.4byte _08046F54 @ case 78
	.4byte _08046F54 @ case 79
	.4byte _08046F54 @ case 80
	.4byte _08046F54 @ case 81
	.4byte _08046D6C @ case 82
	.4byte _08046D72 @ case 83
_08046D6C:
	movs r0, #0
	strh r0, [r2]
	b _08046F54
_08046D72:
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r4
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08046D96
	ldrh r1, [r2]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r2]
	b _08046F54
_08046D96:
	ldrh r1, [r2]
	ldr r0, _08046D9C @ =0x0000FFDF
	b _08046DB4
	.align 2, 0
_08046D9C: .4byte 0x0000FFDF
_08046DA0:
	ldrh r0, [r2]
	ldr r1, _08046DBC @ =0x0000FFDF
	ands r1, r0
	strh r1, [r2]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08046DB2
	b _08046F54
_08046DB2:
	ldr r0, _08046DC0 @ =0x00007FFF
_08046DB4:
	ands r0, r1
	strh r0, [r2]
	b _08046F54
	.align 2, 0
_08046DBC: .4byte 0x0000FFDF
_08046DC0: .4byte 0x00007FFF
_08046DC4:
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	beq _08046DCC
	b _08046F54
_08046DCC:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r4
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _08046DDE
	b _08046F54
_08046DDE:
	ldr r0, _08046E00 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x28
	bne _08046E10
	ldr r1, [r2, #0x18]
	ldr r0, _08046E04 @ =0x083729F8
	cmp r1, r0
	bne _08046E42
	ldr r0, _08046E08 @ =0x0000FFD0
	strh r0, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	ldr r0, _08046E0C @ =0x0000FFC0
	strh r0, [r2, #0xe]
	movs r0, #0x40
	strh r0, [r2, #0x10]
	b _08046E42
	.align 2, 0
_08046E00: .4byte gSubSpriteData1
_08046E04: .4byte 0x083729F8
_08046E08: .4byte 0x0000FFD0
_08046E0C: .4byte 0x0000FFC0
_08046E10:
	ldr r1, [r2, #0x18]
	ldr r0, _08046E48 @ =0x08372A18
	cmp r1, r0
	bne _08046E30
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0x14
	strb r0, [r1]
	ldr r0, _08046E4C @ =0x0000FFC0
	strh r0, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	ldr r0, _08046E50 @ =0x0000FFB0
	strh r0, [r2, #0xe]
	movs r0, #0x50
	strh r0, [r2, #0x10]
_08046E30:
	ldr r1, _08046E54 @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x3c
	bne _08046E42
	ldrh r0, [r2, #2]
	adds r0, #0x20
	strh r0, [r1, #0x18]
	ldrh r0, [r2, #4]
	strh r0, [r1, #0x16]
_08046E42:
	bl ZazabiEnableProjectilesToPassThrough
	b _08046F54
	.align 2, 0
_08046E48: .4byte 0x08372A18
_08046E4C: .4byte 0x0000FFC0
_08046E50: .4byte 0x0000FFB0
_08046E54: .4byte gSamusData
_08046E58:
	ldrb r0, [r2, #0x1e]
	ldr r3, _08046E9C @ =gSamusData
	cmp r0, #0
	bne _08046E88
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08046EA0 @ =0x0000FFE0
	strh r0, [r2, #0xa]
	movs r0, #0x20
	strh r0, [r2, #0xc]
	ldr r0, _08046EA4 @ =0x0000FFC0
	strh r0, [r2, #0xe]
	movs r0, #0x40
	strh r0, [r2, #0x10]
	ldrb r0, [r3, #1]
	cmp r0, #0x3c
	bne _08046F54
	ldrh r0, [r2, #2]
	adds r0, #0x20
	strh r0, [r3, #0x18]
	ldrh r0, [r2, #4]
	strh r0, [r3, #0x16]
_08046E88:
	ldrb r0, [r3, #1]
	cmp r0, #0x3c
	bne _08046F54
	ldrb r0, [r2, #0x1e]
	cmp r0, #4
	bhi _08046EA8
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #3
	b _08046F52
	.align 2, 0
_08046E9C: .4byte gSamusData
_08046EA0: .4byte 0x0000FFE0
_08046EA4: .4byte 0x0000FFC0
_08046EA8:
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #5
	b _08046F52
_08046EB0:
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	bne _08046F54
	b _08046F06
_08046EB8:
	ldrb r0, [r2, #0x1e]
	cmp r0, #8
	bne _08046F54
	b _08046F06
_08046EC0:
	ldrb r0, [r2, #0x1e]
	cmp r0, #8
	bne _08046F54
	ldr r1, _08046ED8 @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x3c
	bne _08046F54
	ldrh r0, [r2, #0x16]
	cmp r0, #0
	beq _08046F0E
	ldrh r0, [r2, #2]
	b _08046F12
	.align 2, 0
_08046ED8: .4byte gSamusData
_08046EDC:
	ldrb r0, [r2, #0x1e]
	cmp r0, #7
	bne _08046F54
	b _08046F06
_08046EE4:
	ldrb r0, [r2, #0x1e]
	cmp r0, #7
	bne _08046F54
	ldr r1, _08046EFC @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x3c
	bne _08046F54
	ldrh r0, [r2, #0x16]
	cmp r0, #0
	beq _08046F0E
	ldrh r0, [r2, #2]
	b _08046F12
	.align 2, 0
_08046EFC: .4byte gSamusData
_08046F00:
	ldrb r0, [r2, #0x1e]
	cmp r0, #6
	bne _08046F54
_08046F06:
	ldr r1, _08046F1C @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x3c
	bne _08046F54
_08046F0E:
	ldrh r0, [r2, #2]
	adds r0, #0x20
_08046F12:
	strh r0, [r1, #0x18]
	ldrh r0, [r2, #4]
	strh r0, [r1, #0x16]
	b _08046F54
	.align 2, 0
_08046F1C: .4byte gSamusData
_08046F20:
	ldrb r0, [r2, #0x1e]
	cmp r0, #8
	bne _08046F38
	ldr r1, _08046F48 @ =gSamusData
	ldrb r0, [r1, #1]
	cmp r0, #0x3c
	bne _08046F38
	ldrh r0, [r2, #2]
	adds r0, #0x40
	strh r0, [r1, #0x18]
	ldrh r0, [r2, #4]
	strh r0, [r1, #0x16]
_08046F38:
	ldrb r0, [r2, #0x1e]
	cmp r0, #4
	bhi _08046F4C
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #0xb
	b _08046F52
	.align 2, 0
_08046F48: .4byte gSamusData
_08046F4C:
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #0xd
_08046F52:
	strb r0, [r1]
_08046F54:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZazabiPartMouth
ZazabiPartMouth: @ 0x08046F5C
	push {r4, lr}
	ldr r2, _08046F8C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r4, [r0]
	ldr r3, _08046F90 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08046F94
	ldrh r1, [r2]
	movs r0, #0x20
	orrs r0, r1
	b _08046F9A
	.align 2, 0
_08046F8C: .4byte gCurrentSprite
_08046F90: .4byte gSpriteData
_08046F94:
	ldrh r1, [r2]
	ldr r0, _08046FB0 @ =0x0000FFDF
	ands r0, r1
_08046F9A:
	strh r0, [r2]
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r3
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x59
	bne _08046FB4
	movs r0, #0
	b _08046FDA
	.align 2, 0
_08046FB0: .4byte 0x0000FFDF
_08046FB4:
	bl ZazabiSyncSubSprites
	ldr r2, _08046FCC @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _08046FD0 @ =0x08372C80
	cmp r1, r0
	bne _08046FD4
	ldrh r1, [r2]
	movs r0, #4
	orrs r0, r1
	b _08046FDA
	.align 2, 0
_08046FCC: .4byte gCurrentSprite
_08046FD0: .4byte 0x08372C80
_08046FD4:
	ldrh r1, [r2]
	ldr r0, _08046FE4 @ =0x0000FFFB
	ands r0, r1
_08046FDA:
	strh r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08046FE4: .4byte 0x0000FFFB

	thumb_func_start ZazabiPartEye
ZazabiPartEye: @ 0x08046FE8
	push {r4, lr}
	ldr r2, _0804701C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r3, _08047020 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	adds r0, #0x24
	ldrb r0, [r0]
	adds r4, r2, #0
	cmp r0, #8
	bgt _08047024
	cmp r0, #7
	bge _08047034
	cmp r0, #2
	bgt _08047078
	cmp r0, #1
	blt _08047078
	b _08047034
	.align 2, 0
_0804701C: .4byte gCurrentSprite
_08047020: .4byte gSpriteData
_08047024:
	cmp r0, #0x45
	blt _08047078
	cmp r0, #0x46
	ble _08047030
	cmp r0, #0x59
	bne _08047078
_08047030:
	movs r0, #0
	b _08047090
_08047034:
	ldr r0, [r4, #0x18]
	ldr r1, _08047048 @ =0x08372A60
	cmp r0, r1
	bne _0804704C
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08047092
	b _08047080
	.align 2, 0
_08047048: .4byte 0x08372A60
_0804704C:
	ldr r0, _0804706C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xf
	bne _08047092
	str r1, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _08047070 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	ldr r0, _08047074 @ =0x00000287
	bl CheckPlayNotAlreadyPlayingSound
	b _08047092
	.align 2, 0
_0804706C: .4byte gSpriteRandomNumber
_08047070: .4byte 0x0000FFFB
_08047074: .4byte 0x00000287
_08047078:
	ldr r1, [r4, #0x18]
	ldr r0, _08047098 @ =0x08372A60
	cmp r1, r0
	bne _08047092
_08047080:
	ldr r0, _0804709C @ =0x08372C70
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldrh r1, [r4]
	movs r0, #4
	orrs r0, r1
_08047090:
	strh r0, [r4]
_08047092:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08047098: .4byte 0x08372A60
_0804709C: .4byte 0x08372C70

	thumb_func_start Zazabi
Zazabi: @ 0x080470A0
	push {r4, lr}
	ldr r4, _080470C4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl ZazabiProjectileCollision
	adds r4, #0x24
	ldrb r0, [r4]
	cmp r0, #0x5a
	bls _080470BA
	b _080472DC
_080470BA:
	lsls r0, r0, #2
	ldr r1, _080470C8 @ =_080470CC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080470C4: .4byte gCurrentSprite
_080470C8: .4byte _080470CC
_080470CC: @ jump table
	.4byte _08047242 @ case 0
	.4byte _08047252 @ case 1
	.4byte _08047256 @ case 2
	.4byte _080472DC @ case 3
	.4byte _080472DC @ case 4
	.4byte _080472DC @ case 5
	.4byte _080472DC @ case 6
	.4byte _08047248 @ case 7
	.4byte _0804724C @ case 8
	.4byte _080472DC @ case 9
	.4byte _080472DC @ case 10
	.4byte _080472DC @ case 11
	.4byte _080472DC @ case 12
	.4byte _080472DC @ case 13
	.4byte _080472DC @ case 14
	.4byte _080472DC @ case 15
	.4byte _080472DC @ case 16
	.4byte _080472DC @ case 17
	.4byte _080472DC @ case 18
	.4byte _080472DC @ case 19
	.4byte _080472DC @ case 20
	.4byte _080472DC @ case 21
	.4byte _080472DC @ case 22
	.4byte _0804725C @ case 23
	.4byte _08047260 @ case 24
	.4byte _08047266 @ case 25
	.4byte _0804726A @ case 26
	.4byte _08047270 @ case 27
	.4byte _08047274 @ case 28
	.4byte _0804727A @ case 29
	.4byte _0804727E @ case 30
	.4byte _08047284 @ case 31
	.4byte _08047288 @ case 32
	.4byte _080472DC @ case 33
	.4byte _080472DC @ case 34
	.4byte _080472DC @ case 35
	.4byte _080472DC @ case 36
	.4byte _080472DC @ case 37
	.4byte _080472DC @ case 38
	.4byte _080472DC @ case 39
	.4byte _080472DC @ case 40
	.4byte _080472DC @ case 41
	.4byte _080472DC @ case 42
	.4byte _080472DC @ case 43
	.4byte _080472DC @ case 44
	.4byte _080472DC @ case 45
	.4byte _080472DC @ case 46
	.4byte _080472DC @ case 47
	.4byte _080472DC @ case 48
	.4byte _080472DC @ case 49
	.4byte _080472DC @ case 50
	.4byte _080472DC @ case 51
	.4byte _080472DC @ case 52
	.4byte _080472DC @ case 53
	.4byte _080472DC @ case 54
	.4byte _0804728E @ case 55
	.4byte _08047292 @ case 56
	.4byte _08047298 @ case 57
	.4byte _0804729C @ case 58
	.4byte _080472A2 @ case 59
	.4byte _080472A6 @ case 60
	.4byte _080472AC @ case 61
	.4byte _080472B0 @ case 62
	.4byte _080472B6 @ case 63
	.4byte _080472BA @ case 64
	.4byte _080472C0 @ case 65
	.4byte _080472C4 @ case 66
	.4byte _080472CA @ case 67
	.4byte _080472CE @ case 68
	.4byte _080472D4 @ case 69
	.4byte _080472D8 @ case 70
	.4byte _080472DC @ case 71
	.4byte _080472DC @ case 72
	.4byte _080472DC @ case 73
	.4byte _080472DC @ case 74
	.4byte _080472DC @ case 75
	.4byte _080472DC @ case 76
	.4byte _080472DC @ case 77
	.4byte _080472DC @ case 78
	.4byte _080472DC @ case 79
	.4byte _080472DC @ case 80
	.4byte _080472DC @ case 81
	.4byte _080472DC @ case 82
	.4byte _080472DC @ case 83
	.4byte _080472DC @ case 84
	.4byte _080472DC @ case 85
	.4byte _080472DC @ case 86
	.4byte _080472DC @ case 87
	.4byte _080472DC @ case 88
	.4byte _08047238 @ case 89
	.4byte _0804723C @ case 90
_08047238:
	bl ZazabiInit
_0804723C:
	bl ZazabiSpawningFromX
	b _080472DC
_08047242:
	bl ZazabiInit
	b _080472DC
_08047248:
	bl ZazabiIdleInit
_0804724C:
	bl ZazabiIdle
	b _080472DC
_08047252:
	bl ZazabiCrawlingInit
_08047256:
	bl ZazabiCrawling
	b _080472DC
_0804725C:
	bl ZazabiJumpWarningInit
_08047260:
	bl ZazabiJumpWarning
	b _080472DC
_08047266:
	bl ZazabiJumpingInit
_0804726A:
	bl ZazabiJumping
	b _080472DC
_08047270:
	bl ZazabiFallingInit
_08047274:
	bl ZazabiFalling
	b _080472DC
_0804727A:
	bl ZazabiLandingMouthOpenInit
_0804727E:
	bl ZazabiLandingMouthOpen
	b _080472DC
_08047284:
	bl ZazabiLandingInit
_08047288:
	bl ZazabiLanding
	b _080472DC
_0804728E:
	bl ZazabiEatingSamus1Init
_08047292:
	bl ZazabiEatingSamus1
	b _080472DC
_08047298:
	bl ZazabiEatingSamus2Init
_0804729C:
	bl ZazabiEatingSamus2
	b _080472DC
_080472A2:
	bl ZazabiEatingSamus3Init
_080472A6:
	bl ZazabiEatingSamus3
	b _080472DC
_080472AC:
	bl ZazabiEatingSamus4Init
_080472B0:
	bl ZazabiEatingSamus4
	b _080472DC
_080472B6:
	bl ZazabiEatingSamus5Init
_080472BA:
	bl ZazabiEatingSamus5
	b _080472DC
_080472C0:
	bl ZazabiSpittingSamusInit
_080472C4:
	bl ZazabiSpittingSamus
	b _080472DC
_080472CA:
	bl ZazabiLandingAfterSpittingInit
_080472CE:
	bl ZazabiLandingAfterSpitting
	b _080472DC
_080472D4:
	bl ZazabiDyingInit
_080472D8:
	bl ZazabiDying
_080472DC:
	bl UpdateSubSpriteData1Animation
	bl ZazabiSyncSubSprites
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZazabiPart
ZazabiPart: @ 0x080472EC
	push {r4, lr}
	ldr r0, _08047310 @ =gSamusData
	ldrb r0, [r0, #1]
	ldr r4, _08047314 @ =gCurrentSprite
	cmp r0, #0x3c
	bne _08047300
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #0x10
	strb r0, [r1]
_08047300:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _08047318
	bl ZazabiPartInit
	b _080473B6
	.align 2, 0
_08047310: .4byte gSamusData
_08047314: .4byte gCurrentSprite
_08047318:
	ldrb r0, [r4, #0x1e]
	subs r0, #1
	cmp r0, #7
	bhi _080473AE
	lsls r0, r0, #2
	ldr r1, _0804732C @ =_08047330
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804732C: .4byte _08047330
_08047330: @ jump table
	.4byte _0804735A @ case 0
	.4byte _080473AE @ case 1
	.4byte _080473AE @ case 2
	.4byte _08047350 @ case 3
	.4byte _080473AE @ case 4
	.4byte _08047360 @ case 5
	.4byte _08047370 @ case 6
	.4byte _08047380 @ case 7
_08047350:
	bl ZazabiPartEye
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080473B6
_0804735A:
	bl ZazabiPartMouth
	b _080473B6
_08047360:
	ldr r0, _0804736C @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x28
	beq _08047388
	b _080473A4
	.align 2, 0
_0804736C: .4byte gSubSpriteData1
_08047370:
	ldr r0, _0804737C @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x3c
	beq _08047388
	b _080473A4
	.align 2, 0
_0804737C: .4byte gSubSpriteData1
_08047380:
	ldr r0, _080473A0 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0x50
	bne _080473A4
_08047388:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x2f
	bl ParticleSet
	movs r0, #0
	strh r0, [r4]
	movs r0, #0xa1
	lsls r0, r0, #2
	bl unk_3b1c
	b _080473B6
	.align 2, 0
_080473A0: .4byte gSubSpriteData1
_080473A4:
	bl ZazabiPartDefault
	bl ZazabiSyncSubSprites
	b _080473B6
_080473AE:
	bl ZazabiPartDefault
	bl ZazabiSyncSubSprites
_080473B6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start ElevatorPad
ElevatorPad: @ 0x080473BC
	push {r4, r5, r6, lr}
	ldr r0, _0804743C @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x26
	movs r4, #1
	strb r4, [r0]
	mov r6, ip
	adds r6, #0x24
	ldrb r5, [r6]
	cmp r5, #0
	bne _08047424
	mov r1, ip
	ldrh r0, [r1, #2]
	adds r0, #0x10
	movs r3, #0
	strh r0, [r1, #2]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #2
	strb r0, [r6]
	mov r0, ip
	adds r0, #0x27
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r1, _08047440 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08047444 @ =0x08373510
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r5, [r2, #0x16]
	ldr r0, _08047448 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
_08047424:
	ldr r0, _0804744C @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x17
	bne _08047450
	mov r0, ip
	ldrh r1, [r0]
	movs r0, #4
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	b _0804745A
	.align 2, 0
_0804743C: .4byte gCurrentSprite
_08047440: .4byte 0x0000FFFC
_08047444: .4byte 0x08373510
_08047448: .4byte gIoRegisters
_0804744C: .4byte gSamusData
_08047450:
	mov r2, ip
	ldrh r1, [r2]
	ldr r0, _08047460 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
_0804745A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08047460: .4byte 0x0000FFFB

	thumb_func_start SerrisUpdatePalette
SerrisUpdatePalette: @ 0x08047464
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _08047488 @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	ldr r2, _0804748C @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r4, _08047490 @ =gBossWork1
	ldrb r1, [r4]
	cmp r1, #0
	beq _08047494
	cmp r1, #1
	beq _080474AC
	b _080474C2
	.align 2, 0
_08047488: .4byte gCurrentSprite
_0804748C: .4byte sPrimarySpriteStats
_08047490: .4byte gBossWork1
_08047494:
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bgt _080474C2
	ldr r7, _080474A8 @ =0x08378750
	movs r0, #1
	strb r0, [r4]
	b _080474C6
	.align 2, 0
_080474A8: .4byte 0x08378750
_080474AC:
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhi _080474C2
	ldr r7, _080474DC @ =0x08378790
	movs r0, #2
	strb r0, [r4]
	movs r6, #1
_080474C2:
	cmp r6, #0
	beq _080474D4
_080474C6:
	ldr r1, _080474E0 @ =0x040000D4
	str r7, [r1]
	ldr r0, _080474E4 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _080474E8 @ =0x80000020
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_080474D4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080474DC: .4byte 0x08378790
_080474E0: .4byte 0x040000D4
_080474E4: .4byte 0x05000300
_080474E8: .4byte 0x80000020

	thumb_func_start SerrisGetCurrentSamusPlatform
SerrisGetCurrentSamusPlatform: @ 0x080474EC
	push {r4, r5, lr}
	ldr r0, _08047520 @ =gSamusData
	ldrh r4, [r0, #0x18]
	ldrh r2, [r0, #0x16]
	ldr r0, _08047524 @ =gSerrisSpawnYPosition
	ldrh r3, [r0]
	ldr r0, _08047528 @ =gSerrisSpawnXPosition
	ldrh r1, [r0]
	ldr r5, _0804752C @ =0xFFFFFD00
	adds r0, r3, r5
	cmp r4, r0
	ble _08047588
	adds r5, #0xc0
	adds r0, r3, r5
	cmp r4, r0
	bge _08047588
	ldr r3, _08047530 @ =0xFFFFFEC0
	adds r0, r1, r3
	cmp r2, r0
	ble _08047534
	adds r0, r1, #0
	subs r0, #0x40
	cmp r2, r0
	bge _08047534
	movs r0, #4
	b _0804758A
	.align 2, 0
_08047520: .4byte gSamusData
_08047524: .4byte gSerrisSpawnYPosition
_08047528: .4byte gSerrisSpawnXPosition
_0804752C: .4byte 0xFFFFFD00
_08047530: .4byte 0xFFFFFEC0
_08047534:
	ldr r5, _08047548 @ =0xFFFFFD40
	adds r0, r1, r5
	cmp r2, r0
	ble _08047550
	ldr r3, _0804754C @ =0xFFFFFE40
	adds r0, r1, r3
	cmp r2, r0
	bge _08047550
	movs r0, #3
	b _0804758A
	.align 2, 0
_08047548: .4byte 0xFFFFFD40
_0804754C: .4byte 0xFFFFFE40
_08047550:
	ldr r5, _08047564 @ =0xFFFFFBC0
	adds r0, r1, r5
	cmp r2, r0
	ble _0804756C
	ldr r3, _08047568 @ =0xFFFFFCC0
	adds r0, r1, r3
	cmp r2, r0
	bge _0804756C
	movs r0, #2
	b _0804758A
	.align 2, 0
_08047564: .4byte 0xFFFFFBC0
_08047568: .4byte 0xFFFFFCC0
_0804756C:
	ldr r5, _08047580 @ =0xFFFFFA40
	adds r0, r1, r5
	cmp r2, r0
	ble _08047588
	ldr r3, _08047584 @ =0xFFFFFB40
	adds r0, r1, r3
	cmp r2, r0
	bge _08047588
	movs r0, #1
	b _0804758A
	.align 2, 0
_08047580: .4byte 0xFFFFFA40
_08047584: .4byte 0xFFFFFB40
_08047588:
	movs r0, #0
_0804758A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start SerrisRotateAroundPoint
SerrisRotateAroundPoint: @ 0x08047590
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r5, r4, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r1, r2, #0x10
	lsls r3, r3, #0x10
	ldr r0, _080475D8 @ =0x080A4FA4
	lsrs r2, r3, #0x10
	mov r8, r2
	asrs r3, r3, #0xf
	adds r3, r3, r0
	movs r6, #0
	ldrsh r2, [r3, r6]
	mov ip, r0
	cmp r2, #0
	bge _080475E0
	rsbs r2, r2, #0
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	muls r0, r2, r0
	adds r3, r1, #0
	cmp r0, #0
	bge _080475CA
	adds r0, #0xff
_080475CA:
	lsls r0, r0, #8
	ldr r2, _080475DC @ =gCurrentSprite
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	asrs r0, r0, #0x10
	subs r1, r1, r0
	b _080475FA
	.align 2, 0
_080475D8: .4byte 0x080A4FA4
_080475DC: .4byte gCurrentSprite
_080475E0:
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	muls r0, r2, r0
	adds r3, r1, #0
	cmp r0, #0
	bge _080475EE
	adds r0, #0xff
_080475EE:
	lsls r0, r0, #8
	ldr r2, _08047628 @ =gCurrentSprite
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	asrs r0, r0, #0x10
	adds r1, r1, r0
_080475FA:
	strh r1, [r2, #2]
	mov r1, r8
	lsls r0, r1, #0x10
	asrs r0, r0, #0xf
	adds r0, #0x80
	add r0, ip
	movs r4, #0
	ldrsh r1, [r0, r4]
	cmp r1, #0
	bge _0804762C
	rsbs r1, r1, #0
	asrs r0, r3, #0x10
	muls r0, r1, r0
	cmp r0, #0
	bge _0804761A
	adds r0, #0xff
_0804761A:
	lsls r1, r0, #8
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	asrs r1, r1, #0x10
	subs r0, r0, r1
	b _08047640
	.align 2, 0
_08047628: .4byte gCurrentSprite
_0804762C:
	asrs r0, r3, #0x10
	muls r0, r1, r0
	cmp r0, #0
	bge _08047636
	adds r0, #0xff
_08047636:
	lsls r1, r0, #8
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	asrs r1, r1, #0x10
	adds r0, r0, r1
_08047640:
	strh r0, [r2, #4]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start SerrisHandleRotationMovement
SerrisHandleRotationMovement: @ 0x0804764C
	push {lr}
	ldr r1, _08047690 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	movs r2, #1
	mov ip, r1
	cmp r0, #3
	beq _08047666
	movs r2, #4
	cmp r0, #2
	bne _08047666
	movs r2, #2
_08047666:
	mov r0, ip
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08047694
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080476B0
	mov r1, ip
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, r0, r2
	strb r0, [r1]
	subs r1, #4
	ldrb r0, [r1]
	subs r0, r0, r2
	b _080476C0
	.align 2, 0
_08047690: .4byte gCurrentSprite
_08047694:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080476B0
	mov r1, ip
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, r0, r2
	strb r0, [r1]
	subs r1, #4
	ldrb r0, [r1]
	subs r0, r0, r2
	b _080476C0
_080476B0:
	mov r1, ip
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, r2, r0
	strb r0, [r1]
	subs r1, #4
	ldrb r0, [r1]
	adds r0, r2, r0
_080476C0:
	strb r0, [r1]
	mov r1, ip
	movs r2, #6
	ldrsh r0, [r1, r2]
	movs r3, #8
	ldrsh r1, [r1, r3]
	mov r2, ip
	adds r2, #0x30
	ldrb r3, [r2]
	lsls r2, r3, #1
	adds r2, r2, r3
	lsls r2, r2, #0x16
	asrs r2, r2, #0x10
	mov r3, ip
	adds r3, #0x2f
	ldrb r3, [r3]
	bl SerrisRotateAroundPoint
	pop {r0}
	bx r0

	thumb_func_start SerrisStartRotationXAligned
SerrisStartRotationXAligned: @ 0x080476E8
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, _08047718 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804771C
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #6
	adds r0, r4, r0
	strh r0, [r3, #8]
	adds r1, r3, #0
	adds r1, #0x2f
	movs r0, #0x80
	strb r0, [r1]
	b _0804772E
	.align 2, 0
_08047718: .4byte gCurrentSprite
_0804771C:
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #6
	subs r0, r4, r0
	movs r1, #0
	strh r0, [r3, #8]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
_0804772E:
	strh r5, [r3, #6]
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisStartRotationYAligned
SerrisStartRotationYAligned: @ 0x0804773C
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, _0804776C @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	adds r1, r3, #0
	cmp r0, #0
	beq _08047770
	adds r3, #0x2f
	movs r0, #0xc0
	strb r0, [r3]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #6
	adds r0, r4, r0
	b _08047780
	.align 2, 0
_0804776C: .4byte gCurrentSprite
_08047770:
	adds r3, r1, #0
	adds r3, #0x2f
	movs r0, #0x40
	strb r0, [r3]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #6
	subs r0, r4, r0
_08047780:
	strh r0, [r1, #6]
	strh r5, [r1, #8]
	adds r0, r1, #0
	adds r0, #0x30
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisSetFacingOam
SerrisSetFacingOam: @ 0x08047790
	push {lr}
	ldr r2, _080477B8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080477C8
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	bne _08047808
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080477C0
	ldr r0, _080477BC @ =0x08378658
	b _08047806
	.align 2, 0
_080477B8: .4byte gCurrentSprite
_080477BC: .4byte 0x08378658
_080477C0:
	ldr r0, _080477C4 @ =0x083782C8
	b _08047806
	.align 2, 0
_080477C4: .4byte 0x083782C8
_080477C8:
	ldr r0, _080477E0 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	beq _080477F0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080477E8
	ldr r0, _080477E4 @ =0x08378288
	b _08047806
	.align 2, 0
_080477E0: .4byte gBossWork5
_080477E4: .4byte 0x08378288
_080477E8:
	ldr r0, _080477EC @ =0x08378278
	b _08047806
	.align 2, 0
_080477EC: .4byte 0x08378278
_080477F0:
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08047804
	ldr r0, _08047800 @ =0x08378248
	b _08047806
	.align 2, 0
_08047800: .4byte 0x08378248
_08047804:
	ldr r0, _08047814 @ =0x08378218
_08047806:
	str r0, [r2, #0x18]
_08047808:
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08047814: .4byte 0x08378218

	thumb_func_start SerrisInit
SerrisInit: @ 0x08047818
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r0, _08047838 @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _08047840
	ldr r1, _0804783C @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0804797C
	.align 2, 0
_08047838: .4byte gEquipment
_0804783C: .4byte gCurrentSprite
_08047840:
	ldr r5, _08047988 @ =gCurrentSprite
	ldrh r0, [r5, #2]
	adds r0, #0x40
	strh r0, [r5, #2]
	ldr r1, _0804798C @ =gSerrisSpawnYPosition
	strh r0, [r1]
	ldr r1, _08047990 @ =gSerrisSpawnXPosition
	ldrh r0, [r5, #4]
	strh r0, [r1]
	ldrh r1, [r5]
	ldr r2, _08047994 @ =0x0000880C
	adds r0, r2, #0
	movs r3, #0
	orrs r0, r1
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r5, #0x12]
	ldr r2, _08047998 @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x25
	strb r3, [r0]
	adds r1, r5, #0
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x28
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0804799C @ =0x0000FFD8
	strh r1, [r5, #0xa]
	movs r0, #0x28
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x55
	strb r0, [r1]
	ldr r0, _080479A0 @ =0x08378218
	str r0, [r5, #0x18]
	strb r3, [r5, #0x1c]
	strh r7, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x2d
	strb r3, [r0]
	ldr r0, _080479A4 @ =gBossWork1
	strb r3, [r0]
	ldrb r0, [r5, #0x1f]
	mov r8, r0
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r6, [r0]
	ldrh r4, [r5, #2]
	ldrh r5, [r5, #4]
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #0
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #1
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #2
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #3
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #4
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #5
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #6
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #7
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #8
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
	str r4, [sp]
	str r5, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x5b
	movs r1, #9
	mov r2, r8
	adds r3, r6, #0
	bl SpriteSpawnSecondary
_0804797C:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08047988: .4byte gCurrentSprite
_0804798C: .4byte gSerrisSpawnYPosition
_08047990: .4byte gSerrisSpawnXPosition
_08047994: .4byte 0x0000880C
_08047998: .4byte sPrimarySpriteStats
_0804799C: .4byte 0x0000FFD8
_080479A0: .4byte 0x08378218
_080479A4: .4byte gBossWork1

	thumb_func_start SerrisWaitingToAppearInit
SerrisWaitingToAppearInit: @ 0x080479A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r0, _08047AB4 @ =gSerrisSpawnYPosition
	ldr r1, _08047AB8 @ =0xFFFFFD60
	adds r4, r1, #0
	ldrh r0, [r0]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _08047ABC @ =gSerrisSpawnXPosition
	ldrh r6, [r0]
	ldr r5, _08047AC0 @ =gCurrentSprite
	ldrb r2, [r5, #0x1f]
	adds r7, r5, #0
	adds r7, #0x23
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AC4 @ =0xFFFFFEC0
	adds r0, r6, r1
	str r0, [sp, #4]
	movs r0, #0
	mov r8, r0
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AC8 @ =0xFFFFFE80
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047ACC @ =0xFFFFFE40
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AD0 @ =0xFFFFFD40
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AD4 @ =0xFFFFFD00
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AD8 @ =0xFFFFFCC0
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047ADC @ =0xFFFFFBC0
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AE0 @ =0xFFFFFB80
	adds r0, r6, r1
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r7]
	str r4, [sp]
	ldr r1, _08047AE4 @ =0xFFFFFB40
	adds r6, r6, r1
	str r6, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	movs r0, #0x77
	movs r1, #0
	bl SpriteSpawnSecondary
	adds r5, #0x24
	movs r0, #0x56
	strb r0, [r5]
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08047AB4: .4byte gSerrisSpawnYPosition
_08047AB8: .4byte 0xFFFFFD60
_08047ABC: .4byte gSerrisSpawnXPosition
_08047AC0: .4byte gCurrentSprite
_08047AC4: .4byte 0xFFFFFEC0
_08047AC8: .4byte 0xFFFFFE80
_08047ACC: .4byte 0xFFFFFE40
_08047AD0: .4byte 0xFFFFFD40
_08047AD4: .4byte 0xFFFFFD00
_08047AD8: .4byte 0xFFFFFCC0
_08047ADC: .4byte 0xFFFFFBC0
_08047AE0: .4byte 0xFFFFFB80
_08047AE4: .4byte 0xFFFFFB40

	thumb_func_start SerrisWaitingToAppear
SerrisWaitingToAppear: @ 0x08047AE8
	push {lr}
	bl SerrisGetCurrentSamusPlatform
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _08047B16
	ldr r0, _08047B1C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	movs r0, #0xa2
	lsls r0, r0, #2
	bl unk_3b1c
_08047B16:
	pop {r0}
	bx r0
	.align 2, 0
_08047B1C: .4byte gCurrentSprite

	thumb_func_start SerrisStartFight
SerrisStartFight: @ 0x08047B20
	push {lr}
	ldr r0, _08047B34 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x53
	strb r1, [r0]
	bl SerrisSetFacingOam
	pop {r0}
	bx r0
	.align 2, 0
_08047B34: .4byte gCurrentSprite

	thumb_func_start SerrisFirstArcInit
SerrisFirstArcInit: @ 0x08047B38
	push {lr}
	bl SerrisEdgeArcPatternInit
	ldr r0, _08047B54 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x3e
	bne _08047B4E
	movs r0, #0x54
	strb r0, [r1]
_08047B4E:
	pop {r0}
	bx r0
	.align 2, 0
_08047B54: .4byte gCurrentSprite

	thumb_func_start SerrisFirstArc
SerrisFirstArc: @ 0x08047B58
	push {lr}
	bl SerrisEdgeArcPattern
	ldr r0, _08047B74 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x16
	bne _08047B6E
	movs r0, #0x51
	strb r0, [r1]
_08047B6E:
	pop {r0}
	bx r0
	.align 2, 0
_08047B74: .4byte gCurrentSprite

	thumb_func_start SerrisFirstArcEnd
SerrisFirstArcEnd: @ 0x08047B78
	push {lr}
	ldr r2, _08047B90 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08047B94
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0x40
	b _08047B9A
	.align 2, 0
_08047B90: .4byte gCurrentSprite
_08047B94:
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0xc0
_08047B9A:
	strb r0, [r1]
	ldrh r1, [r3, #2]
	ldr r0, _08047BD8 @ =0x0000077F
	cmp r1, r0
	bls _08047BEA
	ldrh r1, [r3]
	ldr r0, _08047BDC @ =0x00007FFB
	ands r0, r1
	strh r0, [r3]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #0x40
	orrs r1, r0
	strb r1, [r2]
	subs r2, #0xf
	movs r0, #0x18
	strb r0, [r2]
	movs r0, #0x80
	ands r1, r0
	cmp r1, #0
	bne _08047BE0
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x52
	strb r0, [r1]
	movs r0, #0x3f
	movs r1, #7
	bl PlayMusic
	b _08047BF0
	.align 2, 0
_08047BD8: .4byte 0x0000077F
_08047BDC: .4byte 0x00007FFB
_08047BE0:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	b _08047BF0
_08047BEA:
	adds r0, r1, #0
	adds r0, #0x10
	strh r0, [r3, #2]
_08047BF0:
	pop {r0}
	bx r0

	thumb_func_start SerrisDyingInit
SerrisDyingInit: @ 0x08047BF4
	ldr r3, _08047C28 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x48
	strb r0, [r1]
	ldrh r2, [r3]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r0, r1, #0
	movs r1, #0
	orrs r0, r2
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	adds r0, #7
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x2e
	movs r0, #0xb4
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	bx lr
	.align 2, 0
_08047C28: .4byte gCurrentSprite

	thumb_func_start SerrisDying
SerrisDying: @ 0x08047C2C
	push {lr}
	ldr r1, _08047C98 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r3, [r0]
	movs r0, #3
	ands r0, r3
	adds r2, r1, #0
	cmp r0, #0
	beq _08047C60
	movs r0, #4
	ands r0, r3
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08047C5A
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_08047C5A:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_08047C60:
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0xfe
	bhi _08047C6E
	adds r0, #1
	strb r0, [r1]
_08047C6E:
	adds r3, r2, #0
	adds r3, #0x2b
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrb r1, [r3]
	adds r0, r0, r1
	strb r0, [r3]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08047C92
	subs r1, #0xa
	movs r0, #0x49
	strb r0, [r1]
_08047C92:
	pop {r0}
	bx r0
	.align 2, 0
_08047C98: .4byte gCurrentSprite

	thumb_func_start SerrisTurningIntoXInit
SerrisTurningIntoXInit: @ 0x08047C9C
	ldr r3, _08047CD4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x4a
	strb r0, [r1]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #1
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x2c
	strb r2, [r0]
	subs r0, #0xc
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r3, #6]
	bx lr
	.align 2, 0
_08047CD4: .4byte gCurrentSprite

	thumb_func_start SerrisTurningIntoX
SerrisTurningIntoX: @ 0x08047CD8
	push {r4, r5, lr}
	ldr r3, _08047D18 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2b
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsrs r0, r0, #2
	ldrb r2, [r1]
	adds r0, r0, r2
	strb r0, [r1]
	ldr r2, _08047D1C @ =gWrittenToMosaic_H
	ldr r1, _08047D20 @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	ldrh r5, [r3, #2]
	ldrh r4, [r3, #4]
	ldrh r0, [r3, #6]
	cmp r0, #0x28
	bls _08047D0E
	b _08047E42
_08047D0E:
	lsls r0, r0, #2
	ldr r1, _08047D24 @ =_08047D28
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08047D18: .4byte gCurrentSprite
_08047D1C: .4byte gWrittenToMosaic_H
_08047D20: .4byte 0x083BDED6
_08047D24: .4byte _08047D28
_08047D28: @ jump table
	.4byte _08047E2C @ case 0
	.4byte _08047E42 @ case 1
	.4byte _08047E42 @ case 2
	.4byte _08047E42 @ case 3
	.4byte _08047E42 @ case 4
	.4byte _08047E42 @ case 5
	.4byte _08047E42 @ case 6
	.4byte _08047E42 @ case 7
	.4byte _08047E42 @ case 8
	.4byte _08047E42 @ case 9
	.4byte _08047E0E @ case 10
	.4byte _08047E42 @ case 11
	.4byte _08047E42 @ case 12
	.4byte _08047E42 @ case 13
	.4byte _08047E42 @ case 14
	.4byte _08047E42 @ case 15
	.4byte _08047E42 @ case 16
	.4byte _08047E42 @ case 17
	.4byte _08047E42 @ case 18
	.4byte _08047E42 @ case 19
	.4byte _08047DF8 @ case 20
	.4byte _08047E42 @ case 21
	.4byte _08047E42 @ case 22
	.4byte _08047E42 @ case 23
	.4byte _08047E42 @ case 24
	.4byte _08047E42 @ case 25
	.4byte _08047E42 @ case 26
	.4byte _08047E42 @ case 27
	.4byte _08047E42 @ case 28
	.4byte _08047E42 @ case 29
	.4byte _08047DE4 @ case 30
	.4byte _08047E42 @ case 31
	.4byte _08047E42 @ case 32
	.4byte _08047E42 @ case 33
	.4byte _08047E42 @ case 34
	.4byte _08047E42 @ case 35
	.4byte _08047E42 @ case 36
	.4byte _08047E42 @ case 37
	.4byte _08047E42 @ case 38
	.4byte _08047E42 @ case 39
	.4byte _08047DCC @ case 40
_08047DCC:
	adds r0, r5, #0
	adds r0, #0xc
	adds r1, r4, #0
	adds r1, #0x14
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x20
	adds r1, r4, #0
	subs r1, #0x10
	b _08047E24
_08047DE4:
	adds r0, r5, #0
	subs r0, #0x20
	adds r1, r4, #0
	adds r1, #0x1c
	movs r2, #0x26
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x40
	b _08047E20
_08047DF8:
	adds r0, r5, #0
	subs r0, #0x20
	subs r4, #0x10
	adds r1, r4, #0
	movs r2, #0x26
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x40
	adds r1, r4, #0
	b _08047E24
_08047E0E:
	adds r0, r5, #0
	subs r0, #0xc
	adds r1, r4, #0
	adds r1, #0x14
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r5, #0
	adds r0, #0x20
_08047E20:
	adds r1, r4, #0
	adds r1, #0x20
_08047E24:
	movs r2, #0x25
	bl ParticleSet
	b _08047E42
_08047E2C:
	ldr r1, _08047E58 @ =gCurrentSprite
	ldrh r2, [r1]
	ldr r0, _08047E5C @ =0x0000FFF7
	ands r0, r2
	strh r0, [r1]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x59
	strb r0, [r2]
	movs r0, #0x45
	strb r0, [r1, #0x1d]
_08047E42:
	ldr r1, _08047E58 @ =gCurrentSprite
	ldrh r0, [r1, #6]
	cmp r0, #0x13
	bhi _08047E60
	adds r2, r0, #0
	movs r0, #0x45
	movs r1, #0
	bl SpriteLoadGfx
	b _08047E6E
	.align 2, 0
_08047E58: .4byte gCurrentSprite
_08047E5C: .4byte 0x0000FFF7
_08047E60:
	cmp r0, #0x14
	bne _08047E6E
	movs r0, #0x45
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_08047E6E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisPartInit
SerrisPartInit: @ 0x08047E74
	push {r4, lr}
	ldr r3, _08047ED4 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	movs r4, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x55
	strb r0, [r1]
	ldr r1, _08047ED8 @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x2b
	strb r2, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #0x12]
	ldrb r0, [r3, #0x1e]
	adds r0, #1
	lsls r1, r0, #2
	adds r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	ldrb r0, [r3, #0x1e]
	adds r2, r3, #0
	cmp r0, #9
	bls _08047ECA
	b _08048024
_08047ECA:
	lsls r0, r0, #2
	ldr r1, _08047EDC @ =_08047EE0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08047ED4: .4byte gCurrentSprite
_08047ED8: .4byte sSecondarySpriteStats
_08047EDC: .4byte _08047EE0
_08047EE0: @ jump table
	.4byte _08047F08 @ case 0
	.4byte _08047F3C @ case 1
	.4byte _08047F3C @ case 2
	.4byte _08047F3C @ case 3
	.4byte _08047F3C @ case 4
	.4byte _08047F3C @ case 5
	.4byte _08047F3C @ case 6
	.4byte _08047F70 @ case 7
	.4byte _08047FAC @ case 8
	.4byte _08047FE8 @ case 9
_08047F08:
	ldrh r1, [r2]
	movs r0, #0x28
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	ldr r1, _08047F34 @ =0x0000FFE0
	strh r1, [r2, #0xa]
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08047F38 @ =0x083782C8
	str r0, [r2, #0x18]
	b _08048026
	.align 2, 0
_08047F34: .4byte 0x0000FFE0
_08047F38: .4byte 0x083782C8
_08047F3C:
	ldrh r1, [r2]
	movs r0, #0x80
	orrs r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08047F68 @ =0x0000FFE0
	strh r1, [r2, #0xa]
	movs r0, #0x20
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08047F6C @ =0x083783D0
	str r0, [r2, #0x18]
	b _08048026
	.align 2, 0
_08047F68: .4byte 0x0000FFE0
_08047F6C: .4byte 0x083783D0
_08047F70:
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0x28
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x80
	orrs r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08047FA4 @ =0x0000FFE0
	strh r1, [r2, #0xa]
	movs r0, #0x20
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08047FA8 @ =0x083784D8
	str r0, [r2, #0x18]
	b _08048026
	.align 2, 0
_08047FA4: .4byte 0x0000FFE0
_08047FA8: .4byte 0x083784D8
_08047FAC:
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0x2b
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x80
	orrs r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08047FE0 @ =0x0000FFE8
	strh r1, [r2, #0xa]
	movs r0, #0x18
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08047FE4 @ =0x08378508
	str r0, [r2, #0x18]
	b _08048026
	.align 2, 0
_08047FE0: .4byte 0x0000FFE8
_08047FE4: .4byte 0x08378508
_08047FE8:
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0x2e
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x80
	orrs r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0804801C @ =0x0000FFF4
	strh r1, [r2, #0xa]
	movs r0, #0xc
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08048020 @ =0x08378538
	str r0, [r2, #0x18]
	b _08048026
	.align 2, 0
_0804801C: .4byte 0x0000FFF4
_08048020: .4byte 0x08378538
_08048024:
	strh r4, [r3]
_08048026:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SerrisPartWaitingToAppear
SerrisPartWaitingToAppear: @ 0x0804802C
	push {lr}
	ldr r2, _08048054 @ =gSpriteData
	ldr r3, _08048058 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r1, [r0]
	cmp r1, #1
	bne _0804804E
	adds r0, r3, #0
	adds r0, #0x24
	strb r1, [r0]
_0804804E:
	pop {r0}
	bx r0
	.align 2, 0
_08048054: .4byte gSpriteData
_08048058: .4byte gCurrentSprite

	thumb_func_start SerrisPartStartFight
SerrisPartStartFight: @ 0x0804805C
	push {lr}
	ldr r1, _08048080 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x31
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804807A
	adds r1, #0x24
	movs r0, #0x53
	strb r0, [r1]
	bl SerrisSetFacingOam
_0804807A:
	pop {r0}
	bx r0
	.align 2, 0
_08048080: .4byte gCurrentSprite

	thumb_func_start SerrisZigzagPattern
SerrisZigzagPattern: @ 0x08048084
	push {r4, r5, r6, lr}
	movs r6, #0xc8
	lsls r6, r6, #2
	ldr r2, _0804816C @ =gCurrentSprite
	ldrh r4, [r2, #2]
	ldrh r5, [r2, #4]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	bne _080480B6
	cmp r4, r6
	bhi _080480A0
	b _080481B6
_080480A0:
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _08048170 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	bl SerrisStartRotationXAligned
_080480B6:
	ldr r2, _0804816C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #1
	bne _080480E0
	cmp r4, r6
	bhs _080481B6
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	bl SerrisStartRotationXAligned
_080480E0:
	ldr r2, _0804816C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #2
	bne _08048106
	cmp r4, r6
	bls _080481B6
	movs r0, #3
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _08048170 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	bl SerrisStartRotationXAligned
_08048106:
	ldr r2, _0804816C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #3
	bne _08048138
	cmp r4, r6
	bhs _080481B6
	movs r0, #4
	strb r0, [r1]
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	orrs r0, r1
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #3
	bl SerrisStartRotationXAligned
_08048138:
	ldr r1, _0804816C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #4
	bne _08048152
	cmp r4, r6
	bls _080481B6
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x16
	strb r0, [r1]
_08048152:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #5
	bne _0804818E
	ldr r0, _08048174 @ =0x0000043E
	cmp r4, r0
	bhi _08048178
	ldrh r0, [r2, #2]
	adds r0, #0x10
	strh r0, [r2, #2]
	b _08048200
	.align 2, 0
_0804816C: .4byte gCurrentSprite
_08048170: .4byte 0x0000FBFF
_08048174: .4byte 0x0000043E
_08048178:
	movs r0, #6
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _080481BC @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	bl SerrisStartRotationXAligned
_0804818E:
	ldr r1, _080481C0 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #6
	bne _080481CC
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r1, #0x80
	cmp r0, #0
	beq _080481AC
	movs r1, #0
_080481AC:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r1
	beq _080481C4
_080481B6:
	bl SerrisHandleRotationMovement
	b _08048200
	.align 2, 0
_080481BC: .4byte 0x0000FBFF
_080481C0: .4byte gCurrentSprite
_080481C4:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_080481CC:
	adds r1, r2, #0
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #7
	bne _08048200
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r1, #0x80
	cmp r0, #0
	beq _080481E8
	movs r1, #0
_080481E8:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r1
	bne _080481FC
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _08048200
_080481FC:
	bl SerrisHandleRotationMovement
_08048200:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SerrisLoopAroundPattern
SerrisLoopAroundPattern: @ 0x08048208
	push {r4, r5, r6, r7, lr}
	movs r7, #0x10
	ldr r1, _08048260 @ =gCurrentSprite
	ldrh r5, [r1, #2]
	ldrh r4, [r1, #4]
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, r1, #0
	cmp r0, #0
	bne _0804822E
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0xc0
	beq _0804822A
	b _08048392
_0804822A:
	movs r0, #1
	strb r0, [r3]
_0804822E:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #1
	bne _08048284
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08048268
	ldr r0, _08048264 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	subs r0, #0xc0
	cmp r0, r4
	bgt _08048328
	movs r0, #2
	strb r0, [r3]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #1
	bl SerrisStartRotationYAligned
	b _08048284
	.align 2, 0
_08048260: .4byte gCurrentSprite
_08048264: .4byte gSerrisSpawnXPosition
_08048268:
	ldr r0, _08048314 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	ldr r1, _08048318 @ =0xFFFFFAC0
	adds r0, r0, r1
	cmp r0, r4
	bge _08048276
	b _080483F8
_08048276:
	movs r0, #2
	strb r0, [r3]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #1
	bl SerrisStartRotationYAligned
_08048284:
	ldr r1, _0804831C @ =gCurrentSprite
	movs r2, #0x2e
	adds r2, r2, r1
	mov ip, r2
	ldrb r0, [r2]
	cmp r0, #2
	bne _080482C6
	ldrh r2, [r1]
	movs r6, #0x80
	lsls r6, r6, #2
	adds r0, r6, #0
	ands r0, r2
	movs r3, #0x80
	cmp r0, #0
	beq _080482A4
	movs r3, #0
_080482A4:
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r3
	bne _08048392
	movs r0, #3
	mov r3, ip
	strb r0, [r3]
	ldr r0, _08048320 @ =0x0000FBFF
	ands r0, r2
	eors r0, r6
	strh r0, [r1]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #2
	bl SerrisStartRotationXAligned
_080482C6:
	ldr r1, _0804831C @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, r1, #0
	cmp r0, #3
	bne _080482E2
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0x40
	bne _08048392
	movs r0, #4
	strb r0, [r3]
_080482E2:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #4
	bne _0804834A
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08048330
	ldr r0, _08048314 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	ldr r1, _08048324 @ =0xFFFFFD00
	adds r0, r0, r1
	cmp r0, r4
	bgt _08048328
	movs r0, #5
	strb r0, [r3]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #2
	bl SerrisStartRotationYAligned
	b _0804834A
	.align 2, 0
_08048314: .4byte gSerrisSpawnXPosition
_08048318: .4byte 0xFFFFFAC0
_0804831C: .4byte gCurrentSprite
_08048320: .4byte 0x0000FBFF
_08048324: .4byte 0xFFFFFD00
_08048328:
	ldrh r0, [r2, #4]
	adds r0, r0, r7
	strh r0, [r2, #4]
	b _08048450
_08048330:
	ldr r0, _08048398 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	ldr r1, _0804839C @ =0xFFFFFD00
	adds r0, r0, r1
	cmp r0, r4
	blt _080483F8
	movs r0, #5
	strb r0, [r3]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #2
	bl SerrisStartRotationYAligned
_0804834A:
	ldr r1, _080483A0 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #5
	bne _0804837E
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	rsbs r0, r0, #0
	asrs r0, r0, #0x1f
	movs r1, #0x80
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	cmp r1, r0
	bne _08048392
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x16
	strb r0, [r1]
_0804837E:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #6
	bne _080483A8
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0x40
	beq _080483A4
_08048392:
	bl SerrisHandleRotationMovement
	b _08048450
	.align 2, 0
_08048398: .4byte gSerrisSpawnXPosition
_0804839C: .4byte 0xFFFFFD00
_080483A0: .4byte gCurrentSprite
_080483A4:
	movs r0, #7
	strb r0, [r1]
_080483A8:
	adds r3, r2, #0
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #7
	bne _08048418
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080483EC
	ldr r0, _080483E0 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	subs r0, #0xc0
	cmp r0, r4
	bgt _080483E4
	movs r0, #8
	mov r1, ip
	strb r0, [r1]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #1
	bl SerrisStartRotationYAligned
	b _08048418
	.align 2, 0
_080483E0: .4byte gSerrisSpawnXPosition
_080483E4:
	ldrh r0, [r3, #4]
	adds r0, r0, r7
	strh r0, [r3, #4]
	b _08048450
_080483EC:
	ldr r0, _08048400 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	ldr r3, _08048404 @ =0xFFFFFAC0
	adds r0, r0, r3
	cmp r0, r4
	bge _08048408
_080483F8:
	ldrh r0, [r2, #4]
	subs r0, r0, r7
	strh r0, [r2, #4]
	b _08048450
	.align 2, 0
_08048400: .4byte gSerrisSpawnXPosition
_08048404: .4byte 0xFFFFFAC0
_08048408:
	movs r0, #8
	mov r1, ip
	strb r0, [r1]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #1
	bl SerrisStartRotationYAligned
_08048418:
	ldr r2, _08048448 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #8
	bne _08048450
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r3, #0x80
	cmp r0, #0
	beq _08048434
	movs r3, #0
_08048434:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r3
	bne _0804844C
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	b _08048450
	.align 2, 0
_08048448: .4byte gCurrentSprite
_0804844C:
	bl SerrisHandleRotationMovement
_08048450:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SerrisMiddileArcPattern
SerrisMiddileArcPattern: @ 0x08048458
	push {r4, r5, r6, lr}
	movs r6, #0x10
	ldr r1, _080484A8 @ =gCurrentSprite
	ldrh r5, [r1, #2]
	ldrh r4, [r1, #4]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	bne _08048490
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r1, #0x80
	cmp r0, #0
	beq _0804847E
	movs r1, #0
_0804847E:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r1
	bne _080484E6
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x16
	strb r0, [r1]
_08048490:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #1
	bne _080484CE
	ldr r0, _080484AC @ =0x0000033E
	cmp r5, r0
	bhi _080484B0
	ldrh r0, [r2, #2]
	adds r0, r0, r6
	strh r0, [r2, #2]
	b _080485A4
	.align 2, 0
_080484A8: .4byte gCurrentSprite
_080484AC: .4byte 0x0000033E
_080484B0:
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _080484EC @ =0x0000FBFF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #2
	bl SerrisStartRotationXAligned
_080484CE:
	ldr r1, _080484F0 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, r1, #0
	cmp r0, #2
	bne _080484F8
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0x40
	beq _080484F4
_080484E6:
	bl SerrisHandleRotationMovement
	b _080485A4
	.align 2, 0
_080484EC: .4byte 0x0000FBFF
_080484F0: .4byte gCurrentSprite
_080484F4:
	movs r0, #3
	strb r0, [r3]
_080484F8:
	adds r3, r2, #0
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #3
	bne _0804856C
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08048540
	ldr r0, _08048530 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	ldr r1, _08048534 @ =0xFFFFFE80
	adds r0, r0, r1
	cmp r0, r4
	bgt _08048538
	movs r0, #4
	mov r3, ip
	strb r0, [r3]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #2
	bl SerrisStartRotationYAligned
	b _0804856C
	.align 2, 0
_08048530: .4byte gSerrisSpawnXPosition
_08048534: .4byte 0xFFFFFE80
_08048538:
	ldrh r0, [r3, #4]
	adds r0, r0, r6
	strh r0, [r3, #4]
	b _080485A4
_08048540:
	ldr r0, _08048554 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
	ldr r1, _08048558 @ =0xFFFFFB80
	adds r0, r0, r1
	cmp r0, r4
	bge _0804855C
	ldrh r0, [r2, #4]
	subs r0, r0, r6
	strh r0, [r2, #4]
	b _080485A4
	.align 2, 0
_08048554: .4byte gSerrisSpawnXPosition
_08048558: .4byte 0xFFFFFB80
_0804855C:
	movs r0, #4
	mov r3, ip
	strb r0, [r3]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #2
	bl SerrisStartRotationYAligned
_0804856C:
	ldr r2, _0804859C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #4
	bne _080485A4
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r1, #0x80
	cmp r0, #0
	beq _08048588
	movs r1, #0
_08048588:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r1
	bne _080485A0
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	b _080485A4
	.align 2, 0
_0804859C: .4byte gCurrentSprite
_080485A0:
	bl SerrisHandleRotationMovement
_080485A4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SerrisEdgeArcPattern
SerrisEdgeArcPattern: @ 0x080485AC
	push {lr}
	ldr r1, _080485DC @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	bne _080485E8
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r1, #0x80
	cmp r0, #0
	beq _080485CC
	movs r1, #0
_080485CC:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r1
	beq _080485E0
	bl SerrisHandleRotationMovement
	b _0804861C
	.align 2, 0
_080485DC: .4byte gCurrentSprite
_080485E0:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x16
	strb r0, [r1]
_080485E8:
	adds r1, r2, #0
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #1
	bne _0804861C
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	movs r1, #0x80
	cmp r0, #0
	beq _08048604
	movs r1, #0
_08048604:
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, r1
	bne _08048618
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	b _0804861C
_08048618:
	bl SerrisHandleRotationMovement
_0804861C:
	pop {r0}
	bx r0

	thumb_func_start SerrisZigzagPatternInit
SerrisZigzagPatternInit: @ 0x08048620
	push {r4, r5, lr}
	ldr r2, _08048644 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08048650
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0xc0
	strb r0, [r1]
	ldr r1, _08048648 @ =gSerrisSpawnXPosition
	ldr r2, _0804864C @ =0xFFFFFA00
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804865C
	.align 2, 0
_08048644: .4byte gCurrentSprite
_08048648: .4byte gSerrisSpawnXPosition
_0804864C: .4byte 0xFFFFFA00
_08048650:
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0x40
	strb r0, [r1]
	ldr r0, _0804867C @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
_0804865C:
	strh r0, [r3, #4]
	ldrh r4, [r3, #2]
	ldrh r5, [r3, #4]
	ldr r0, _08048680 @ =0x0000031F
	cmp r4, r0
	bhi _080486B8
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08048684
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	b _08048688
	.align 2, 0
_0804867C: .4byte gSerrisSpawnXPosition
_08048680: .4byte 0x0000031F
_08048684:
	ldr r0, _080486B4 @ =0x0000FDFF
	ands r0, r1
_08048688:
	strh r0, [r3]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	bl SerrisStartRotationXAligned
	b _080486BE
	.align 2, 0
_080486B4: .4byte 0x0000FDFF
_080486B8:
	adds r0, r4, #0
	subs r0, #0x10
	strh r0, [r3, #2]
_080486BE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisLoopAroundPatternInit
SerrisLoopAroundPatternInit: @ 0x080486C4
	push {r4, r5, lr}
	ldr r2, _080486E8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _080486F4
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0xc0
	strb r0, [r1]
	ldr r1, _080486EC @ =gSerrisSpawnXPosition
	ldr r2, _080486F0 @ =0xFFFFFA00
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08048700
	.align 2, 0
_080486E8: .4byte gCurrentSprite
_080486EC: .4byte gSerrisSpawnXPosition
_080486F0: .4byte 0xFFFFFA00
_080486F4:
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0x40
	strb r0, [r1]
	ldr r0, _08048720 @ =gSerrisSpawnXPosition
	ldrh r0, [r0]
_08048700:
	strh r0, [r3, #4]
	ldrh r4, [r3, #2]
	ldrh r5, [r3, #4]
	ldr r0, _08048724 @ =0x0000033F
	cmp r4, r0
	bhi _0804875C
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08048728
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	b _0804872C
	.align 2, 0
_08048720: .4byte gSerrisSpawnXPosition
_08048724: .4byte 0x0000033F
_08048728:
	ldr r0, _08048758 @ =0x0000FDFF
	ands r0, r1
_0804872C:
	strh r0, [r3]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	bl SerrisStartRotationXAligned
	b _08048762
	.align 2, 0
_08048758: .4byte 0x0000FDFF
_0804875C:
	adds r0, r4, #0
	subs r0, #0x10
	strh r0, [r3, #2]
_08048762:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisMiddleArcPatternInit
SerrisMiddleArcPatternInit: @ 0x08048768
	push {r4, r5, lr}
	ldr r2, _08048780 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08048784
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0xc0
	b _0804878A
	.align 2, 0
_08048780: .4byte gCurrentSprite
_08048784:
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0x40
_0804878A:
	strb r0, [r1]
	ldr r0, _080487B8 @ =gSerrisSpawnXPosition
	ldr r2, _080487BC @ =0xFFFFFD00
	adds r1, r2, #0
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r3, #4]
	ldrh r4, [r3, #2]
	ldrh r5, [r3, #4]
	ldr r0, _080487C0 @ =0x000002FF
	cmp r4, r0
	bhi _080487F8
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080487C4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	b _080487C8
	.align 2, 0
_080487B8: .4byte gSerrisSpawnXPosition
_080487BC: .4byte 0xFFFFFD00
_080487C0: .4byte 0x000002FF
_080487C4:
	ldr r0, _080487F4 @ =0x0000FDFF
	ands r0, r1
_080487C8:
	strh r0, [r3]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #2
	bl SerrisStartRotationXAligned
	b _080487FE
	.align 2, 0
_080487F4: .4byte 0x0000FDFF
_080487F8:
	adds r0, r4, #0
	subs r0, #0x10
	strh r0, [r3, #2]
_080487FE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisEdgeArcPatternInit
SerrisEdgeArcPatternInit: @ 0x08048804
	push {r4, r5, lr}
	ldr r2, _08048824 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08048830
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0xc0
	strb r0, [r1]
	ldr r1, _08048828 @ =gSerrisSpawnXPosition
	ldr r2, _0804882C @ =0x0000FB80
	b _0804883C
	.align 2, 0
_08048824: .4byte gCurrentSprite
_08048828: .4byte gSerrisSpawnXPosition
_0804882C: .4byte 0x0000FB80
_08048830:
	adds r1, r3, #0
	adds r1, #0x2b
	movs r0, #0x40
	strb r0, [r1]
	ldr r1, _08048864 @ =gSerrisSpawnXPosition
	ldr r2, _08048868 @ =0xFFFFFE80
_0804883C:
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r3, #4]
	ldrh r4, [r3, #2]
	ldrh r5, [r3, #4]
	ldr r0, _0804886C @ =0x000002FF
	cmp r4, r0
	bhi _080488A4
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08048870
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	b _08048874
	.align 2, 0
_08048864: .4byte gSerrisSpawnXPosition
_08048868: .4byte 0xFFFFFE80
_0804886C: .4byte 0x000002FF
_08048870:
	ldr r0, _080488A0 @ =0x0000FDFF
	ands r0, r1
_08048874:
	strh r0, [r3]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3e
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #2
	bl SerrisStartRotationXAligned
	b _080488AA
	.align 2, 0
_080488A0: .4byte 0x0000FDFF
_080488A4:
	adds r0, r4, #0
	subs r0, #0x10
	strh r0, [r3, #2]
_080488AA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start SerrisDeterminePattern
SerrisDeterminePattern: @ 0x080488B0
	push {lr}
	movs r3, #0
	ldr r2, _080488D4 @ =gXParasiteTargetYPosition
	ldr r0, _080488D8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	ldrh r0, [r2]
	adds r0, r0, r1
	movs r1, #0xf
	ands r0, r1
	subs r0, #1
	cmp r0, #0xd
	bhi _08048924
	lsls r0, r0, #2
	ldr r1, _080488DC @ =_080488E0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080488D4: .4byte gXParasiteTargetYPosition
_080488D8: .4byte gSpriteRandomNumber
_080488DC: .4byte _080488E0
_080488E0: @ jump table
	.4byte _08048918 @ case 0
	.4byte _08048918 @ case 1
	.4byte _08048918 @ case 2
	.4byte _08048918 @ case 3
	.4byte _0804891C @ case 4
	.4byte _0804891C @ case 5
	.4byte _0804891C @ case 6
	.4byte _0804891C @ case 7
	.4byte _08048920 @ case 8
	.4byte _08048920 @ case 9
	.4byte _08048920 @ case 10
	.4byte _08048920 @ case 11
	.4byte _08048924 @ case 12
	.4byte _08048924 @ case 13
_08048918:
	movs r2, #2
	b _08048926
_0804891C:
	movs r2, #0x18
	b _08048926
_08048920:
	movs r2, #0x1a
	b _08048926
_08048924:
	movs r2, #0x1c
_08048926:
	ldr r0, _0804894C @ =gFrameCounter16Bit
	ldrh r0, [r0]
	ldr r1, _08048950 @ =gCurrentSprite
	ldrh r1, [r1, #0x16]
	adds r0, r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0804893E
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0804893E:
	ldr r0, _08048954 @ =gBossWork2
	strb r2, [r0]
	ldr r0, _08048958 @ =gBossWork3
	strb r3, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0804894C: .4byte gFrameCounter16Bit
_08048950: .4byte gCurrentSprite
_08048954: .4byte gBossWork2
_08048958: .4byte gBossWork3

	thumb_func_start SerrisDetermineSpeedboostingPattern
SerrisDetermineSpeedboostingPattern: @ 0x0804895C
	push {lr}
	movs r2, #0
	ldr r0, _08048974 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r1, #7
	ands r1, r0
	adds r0, r1, #0
	cmp r1, #1
	bne _08048978
	movs r1, #2
	b _080489A8
	.align 2, 0
_08048974: .4byte gSpriteRandomNumber
_08048978:
	cmp r1, #2
	bne _08048980
	movs r1, #2
	b _080489A6
_08048980:
	cmp r1, #3
	bne _08048988
	movs r1, #0x18
	b _080489A8
_08048988:
	cmp r1, #4
	bne _08048990
	movs r1, #0x18
	b _080489A6
_08048990:
	cmp r1, #5
	bne _08048998
	movs r1, #0x1a
	b _080489A8
_08048998:
	cmp r1, #6
	bne _080489A0
	movs r1, #0x1a
	b _080489A6
_080489A0:
	movs r1, #2
	cmp r0, #7
	beq _080489A8
_080489A6:
	movs r2, #1
_080489A8:
	ldr r0, _080489B4 @ =gBossWork2
	strb r1, [r0]
	ldr r0, _080489B8 @ =gBossWork3
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080489B4: .4byte gBossWork2
_080489B8: .4byte gBossWork3

	thumb_func_start SerrisEndPattern
SerrisEndPattern: @ 0x080489BC
	push {lr}
	ldr r2, _080489D4 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080489D8
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0x40
	b _080489DE
	.align 2, 0
_080489D4: .4byte gCurrentSprite
_080489D8:
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0xc0
_080489DE:
	strb r0, [r1]
	ldrh r1, [r2, #2]
	ldr r0, _08048A14 @ =0x0000077F
	cmp r1, r0
	bls _08048A20
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	ldr r1, _08048A18 @ =gBossWork4
	cmp r0, #0
	bne _08048A02
	ldr r0, _08048A1C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, #0x41
	strb r0, [r1]
_08048A02:
	ldrb r0, [r1]
	adds r1, r2, #0
	adds r1, #0x31
	strb r0, [r1]
	subs r1, #0xd
	movs r0, #8
	strb r0, [r1]
	b _08048A26
	.align 2, 0
_08048A14: .4byte 0x0000077F
_08048A18: .4byte gBossWork4
_08048A1C: .4byte gSpriteRandomNumber
_08048A20:
	adds r0, r1, #0
	adds r0, #0x10
	strh r0, [r2, #2]
_08048A26:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SerrisWaitingToEmerge
SerrisWaitingToEmerge: @ 0x08048A2C
	push {lr}
	ldr r2, _08048A60 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r3, r2, #0
	cmp r0, #0
	bne _08048A88
	ldr r0, _08048A64 @ =gBossWork2
	ldrb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x24
	strb r1, [r0]
	ldr r0, _08048A68 @ =gBossWork3
	ldrb r0, [r0]
	cmp r0, #0
	beq _08048A6C
	ldrh r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	b _08048A72
	.align 2, 0
_08048A60: .4byte gCurrentSprite
_08048A64: .4byte gBossWork2
_08048A68: .4byte gBossWork3
_08048A6C:
	ldrh r1, [r2]
	ldr r0, _08048A80 @ =0x0000FFBF
	ands r0, r1
_08048A72:
	strh r0, [r2]
	ldr r0, _08048A84 @ =gSerrisSpawnYPosition
	ldrh r0, [r0]
	strh r0, [r3, #2]
	bl SerrisSetFacingOam
	b _08048B36
	.align 2, 0
_08048A80: .4byte 0x0000FFBF
_08048A84: .4byte gSerrisSpawnYPosition
_08048A88:
	cmp r0, #0x28
	bne _08048B36
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _08048B36
	ldr r0, _08048AA8 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	beq _08048AAC
	bl SerrisDetermineSpeedboostingPattern
	b _08048AB0
	.align 2, 0
_08048AA8: .4byte gBossWork5
_08048AAC:
	bl SerrisDeterminePattern
_08048AB0:
	ldr r0, _08048AC8 @ =gBossWork2
	ldrb r0, [r0]
	cmp r0, #0x1c
	bne _08048AE8
	ldr r0, _08048ACC @ =gBossWork3
	ldrb r0, [r0]
	cmp r0, #0
	beq _08048AD8
	ldr r1, _08048AD0 @ =gSerrisSpawnXPosition
	ldr r2, _08048AD4 @ =0x0000FB80
	b _08048B08
	.align 2, 0
_08048AC8: .4byte gBossWork2
_08048ACC: .4byte gBossWork3
_08048AD0: .4byte gSerrisSpawnXPosition
_08048AD4: .4byte 0x0000FB80
_08048AD8:
	ldr r1, _08048AE0 @ =gSerrisSpawnXPosition
	ldr r2, _08048AE4 @ =0xFFFFFE80
	b _08048B08
	.align 2, 0
_08048AE0: .4byte gSerrisSpawnXPosition
_08048AE4: .4byte 0xFFFFFE80
_08048AE8:
	cmp r0, #0x1a
	bne _08048AFC
	ldr r1, _08048AF4 @ =gSerrisSpawnXPosition
	ldr r2, _08048AF8 @ =0xFFFFFD00
	b _08048B08
	.align 2, 0
_08048AF4: .4byte gSerrisSpawnXPosition
_08048AF8: .4byte 0xFFFFFD00
_08048AFC:
	ldr r0, _08048B14 @ =gBossWork3
	ldrb r0, [r0]
	cmp r0, #0
	beq _08048B20
	ldr r1, _08048B18 @ =gSerrisSpawnXPosition
	ldr r2, _08048B1C @ =0xFFFFFA00
_08048B08:
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b _08048B24
	.align 2, 0
_08048B14: .4byte gBossWork3
_08048B18: .4byte gSerrisSpawnXPosition
_08048B1C: .4byte 0xFFFFFA00
_08048B20:
	ldr r0, _08048B3C @ =gSerrisSpawnXPosition
	ldrh r1, [r0]
_08048B24:
	ldr r0, _08048B40 @ =gSerrisSpawnYPosition
	ldrh r0, [r0]
	subs r0, #0x78
	movs r2, #0x38
	bl ParticleSet
	ldr r0, _08048B44 @ =0x00000293
	bl SoundPlay
_08048B36:
	pop {r0}
	bx r0
	.align 2, 0
_08048B3C: .4byte gSerrisSpawnXPosition
_08048B40: .4byte gSerrisSpawnYPosition
_08048B44: .4byte 0x00000293

	thumb_func_start SerrisPartDyingInit
SerrisPartDyingInit: @ 0x08048B48
	ldr r3, _08048B78 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x48
	strb r0, [r1]
	ldrb r0, [r3, #0x1e]
	adds r0, #1
	lsls r0, r0, #4
	adds r1, #0xa
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #0xc
	strb r2, [r0]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	bx lr
	.align 2, 0
_08048B78: .4byte gCurrentSprite

	thumb_func_start SerrisPartDying
SerrisPartDying: @ 0x08048B7C
	push {r4, r5, r6, r7, lr}
	ldr r2, _08048BBC @ =gCurrentSprite
	ldrh r0, [r2]
	movs r6, #4
	adds r1, r0, #0
	eors r1, r6
	strh r1, [r2]
	adds r4, r2, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #0
	beq _08048BC0
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08048C04
	movs r0, #2
	ands r1, r0
	cmp r1, #0
	beq _08048C04
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x2f
	bl ParticleSet
	movs r0, #0xa5
	lsls r0, r0, #2
	bl SoundPlay
	b _08048C04
	.align 2, 0
_08048BBC: .4byte gCurrentSprite
_08048BC0:
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r1, _08048BF0 @ =0x083736CE
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08048BF4 @ =0x00007FFF
	cmp r1, r0
	bne _08048BF8
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x4a
	strb r0, [r1]
	strb r6, [r4]
	movs r0, #0
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	strh r0, [r2, #6]
	b _08048C04
	.align 2, 0
_08048BF0: .4byte 0x083736CE
_08048BF4: .4byte 0x00007FFF
_08048BF8:
	adds r0, r3, #1
	mov r7, ip
	strb r0, [r7]
	ldrh r0, [r2, #2]
	adds r0, r0, r5
	strh r0, [r2, #2]
_08048C04:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SerrisPartFalling
SerrisPartFalling: @ 0x08048C0C
	push {r4, r5, r6, lr}
	ldr r2, _08048C28 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08048C2C
	subs r0, #1
	strb r0, [r1]
	b _08048CC6
	.align 2, 0
_08048C28: .4byte gCurrentSprite
_08048C2C:
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _08048C54 @ =0x083736DE
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08048C58 @ =0x00007FFF
	cmp r1, r0
	bne _08048C5C
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r2, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08048C66
	.align 2, 0
_08048C54: .4byte 0x083736DE
_08048C58: .4byte 0x00007FFF
_08048C5C:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
_08048C66:
	strh r0, [r2, #2]
	ldr r1, _08048C8C @ =gCurrentSprite
	ldrh r0, [r1, #6]
	ldr r2, _08048C90 @ =0x000002BF
	cmp r0, r2
	bhi _08048CA6
	ldrh r0, [r1, #2]
	cmp r0, r2
	bls _08048CA6
	ldrb r0, [r1, #0x1e]
	cmp r0, #6
	bls _08048C94
	ldrh r0, [r1, #2]
	adds r0, #0x44
	ldrh r1, [r1, #4]
	movs r2, #0x36
	bl ParticleSet
	b _08048CA0
	.align 2, 0
_08048C8C: .4byte gCurrentSprite
_08048C90: .4byte 0x000002BF
_08048C94:
	ldrh r0, [r1, #2]
	adds r0, #0x44
	ldrh r1, [r1, #4]
	movs r2, #0x37
	bl ParticleSet
_08048CA0:
	ldr r0, _08048CCC @ =0x00000295
	bl SoundPlay
_08048CA6:
	ldr r2, _08048CD0 @ =gCurrentSprite
	ldrh r0, [r2, #2]
	strh r0, [r2, #6]
	lsls r0, r0, #0x10
	movs r1, #0xb0
	lsls r1, r1, #0x12
	cmp r0, r1
	bls _08048CC6
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08048CC6
	strh r0, [r2]
_08048CC6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08048CCC: .4byte 0x00000295
_08048CD0: .4byte gCurrentSprite

	thumb_func_start SerrisBlockSetCollision
SerrisBlockSetCollision: @ 0x08048CD4
	push {lr}
	ldr r1, _08048CE8 @ =gCurrentClipdataAffectingAction
	strb r0, [r1]
	ldr r1, _08048CEC @ =gCurrentSprite
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	bl ProcessClipdata
	pop {r0}
	bx r0
	.align 2, 0
_08048CE8: .4byte gCurrentClipdataAffectingAction
_08048CEC: .4byte gCurrentSprite

	thumb_func_start SerrisBlockInit
SerrisBlockInit: @ 0x08048CF0
	push {lr}
	ldr r2, _08048D24 @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08048D28 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08048D2C @ =0x0000FFFC
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldrb r0, [r2, #0x1e]
	adds r3, r2, #0
	cmp r0, #0
	beq _08048D34
	ldr r0, _08048D30 @ =0x08378680
	b _08048D36
	.align 2, 0
_08048D24: .4byte gCurrentSprite
_08048D28: .4byte 0x0000FFFB
_08048D2C: .4byte 0x0000FFFC
_08048D30: .4byte 0x08378680
_08048D34:
	ldr r0, _08048D58 @ =0x083786E8
_08048D36:
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r2, #0
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	bl SerrisBlockSetCollision
	pop {r0}
	bx r0
	.align 2, 0
_08048D58: .4byte 0x083786E8

	thumb_func_start SerrisBlockIdle
SerrisBlockIdle: @ 0x08048D5C
	push {lr}
	ldr r2, _08048D90 @ =gSpriteData
	ldr r3, _08048D94 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #1
	bne _08048D8C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08048D98 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, #8
	adds r1, #0xa
	strb r0, [r1]
_08048D8C:
	pop {r0}
	bx r0
	.align 2, 0
_08048D90: .4byte gSpriteData
_08048D94: .4byte gCurrentSprite
_08048D98: .4byte gSpriteRandomNumber

	thumb_func_start SerrisBlockCrumbling
SerrisBlockCrumbling: @ 0x08048D9C
	push {r4, lr}
	ldr r4, _08048DC0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r2, r4, #0
	cmp r0, #0
	beq _08048DD8
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08048E30
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _08048DC8
	ldr r0, _08048DC4 @ =0x08378690
	b _08048DCA
	.align 2, 0
_08048DC0: .4byte gCurrentSprite
_08048DC4: .4byte 0x08378690
_08048DC8:
	ldr r0, _08048DD4 @ =0x083786F8
_08048DCA:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	b _08048E30
	.align 2, 0
_08048DD4: .4byte 0x083786F8
_08048DD8:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08048E0C
	ldrb r0, [r4, #0x1e]
	cmp r0, #0
	beq _08048DF0
	ldr r0, _08048DEC @ =0x083786D8
	b _08048DF2
	.align 2, 0
_08048DEC: .4byte 0x083786D8
_08048DF0:
	ldr r0, _08048E04 @ =0x08378740
_08048DF2:
	str r0, [r4, #0x18]
	ldr r0, _08048E08 @ =gCurrentSprite
	movs r1, #0
	strb r1, [r0, #0x1c]
	strh r1, [r0, #0x16]
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
	b _08048E30
	.align 2, 0
_08048E04: .4byte 0x08378740
_08048E08: .4byte gCurrentSprite
_08048E0C:
	ldrh r0, [r4, #0x16]
	cmp r0, #4
	bne _08048E30
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	bne _08048E20
	movs r0, #1
	bl SerrisBlockSetCollision
	b _08048E30
_08048E20:
	cmp r0, #4
	bne _08048E30
	ldrh r0, [r4, #2]
	adds r0, #0x24
	ldrh r1, [r4, #4]
	movs r2, #0x36
	bl ParticleSet
_08048E30:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SerrisBlockFalling
SerrisBlockFalling: @ 0x08048E38
	push {lr}
	ldr r2, _08048E60 @ =gCurrentSprite
	ldrh r0, [r2, #2]
	adds r0, #0x11
	strh r0, [r2, #2]
	lsls r0, r0, #0x10
	ldr r1, _08048E64 @ =0x04FF0000
	cmp r0, r1
	bls _08048E5A
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08048E5A
	strh r0, [r2]
_08048E5A:
	pop {r0}
	bx r0
	.align 2, 0
_08048E60: .4byte gCurrentSprite
_08048E64: .4byte 0x04FF0000

	thumb_func_start SerricCheckInWater
SerricCheckInWater: @ 0x08048E68
	push {lr}
	ldr r0, _08048EA8 @ =0x030007C0
	ldr r3, _08048EAC @ =gCurrentSprite
	ldrh r0, [r0]
	ldrh r1, [r3, #2]
	cmp r0, r1
	bls _08048ED4
	movs r2, #0xb0
	lsls r2, r2, #2
	cmp r0, r2
	bls _08048F28
	cmp r1, r2
	bhi _08048F28
	ldrh r1, [r3]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _08048EBE
	ldrh r0, [r3, #2]
	adds r0, #0x40
	ldrh r1, [r3, #4]
	movs r2, #0x38
	bl ParticleSet
	ldr r0, _08048EB0 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	beq _08048EB8
	ldr r0, _08048EB4 @ =0x0000028D
	bl SoundPlay
	b _08048EBE
	.align 2, 0
_08048EA8: .4byte 0x030007C0
_08048EAC: .4byte gCurrentSprite
_08048EB0: .4byte gBossWork5
_08048EB4: .4byte 0x0000028D
_08048EB8:
	ldr r0, _08048EC8 @ =0x0000028A
	bl SoundPlay
_08048EBE:
	ldr r2, _08048ECC @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08048ED0 @ =0x0000F7FF
	ands r0, r1
	b _08048F26
	.align 2, 0
_08048EC8: .4byte 0x0000028A
_08048ECC: .4byte gCurrentSprite
_08048ED0: .4byte 0x0000F7FF
_08048ED4:
	cmp r0, r1
	bhs _08048F28
	ldr r2, _08048F0C @ =0x000002BF
	cmp r0, r2
	bhi _08048F28
	cmp r1, r2
	bls _08048F28
	ldrh r1, [r3]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _08048F1A
	ldrh r0, [r3, #2]
	adds r0, #0x20
	ldrh r1, [r3, #4]
	movs r2, #0x38
	bl ParticleSet
	ldr r0, _08048F10 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	beq _08048F14
	movs r0, #0xa3
	lsls r0, r0, #2
	bl SoundPlay
	b _08048F1A
	.align 2, 0
_08048F0C: .4byte 0x000002BF
_08048F10: .4byte gBossWork5
_08048F14:
	ldr r0, _08048F2C @ =0x00000289
	bl SoundPlay
_08048F1A:
	ldr r2, _08048F30 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r3, #0
	orrs r0, r1
_08048F26:
	strh r0, [r2]
_08048F28:
	pop {r0}
	bx r0
	.align 2, 0
_08048F2C: .4byte 0x00000289
_08048F30: .4byte gCurrentSprite

	thumb_func_start Serris
Serris: @ 0x08048F34
	push {r4, lr}
	ldr r2, _08048FB0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x10
	bne _08048F66
	ldrh r0, [r2, #0x14]
	cmp r0, #0
	beq _08048F66
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #0x1e
	strb r0, [r1]
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0xa4
	lsls r0, r0, #2
	bl unk_3b1c
_08048F66:
	ldr r4, _08048FB0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0
	beq _08048F8C
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08048F7E
	b _08049426
_08048F7E:
	ldr r1, _08048FB4 @ =gBossWork5
	movs r2, #0xe1
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	bl SerrisSetFacingOam
_08048F8C:
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _08048FBC
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0
	beq _08048FBC
	cmp r0, #0x46
	bls _08048FA2
	b _080490AE
_08048FA2:
	movs r0, #0x47
	strb r0, [r1]
	ldr r0, _08048FB8 @ =0x00000291
	bl unk_3b1c
	b _080490AE
	.align 2, 0
_08048FB0: .4byte gCurrentSprite
_08048FB4: .4byte gBossWork5
_08048FB8: .4byte 0x00000291
_08048FBC:
	ldr r4, _08048FF8 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x52
	bne _08048FDC
	movs r0, #2
	strb r0, [r1]
	ldr r1, _08048FFC @ =gBossWork5
	movs r0, #0x78
	strh r0, [r1]
	bl SerrisSetFacingOam
	ldr r0, _08049000 @ =0x00000292
	bl SoundPlay
_08048FDC:
	ldr r0, _08048FFC @ =gBossWork5
	ldrh r2, [r0]
	cmp r2, #0
	beq _08049058
	ldr r2, _08049004 @ =gFrameCounter8Bit
	ldrb r1, [r2]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08049008
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #4
	b _0804900E
	.align 2, 0
_08048FF8: .4byte gCurrentSprite
_08048FFC: .4byte gBossWork5
_08049000: .4byte 0x00000292
_08049004: .4byte gFrameCounter8Bit
_08049008:
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #5
_0804900E:
	strb r0, [r1]
	ldrb r1, [r2]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0804902A
	ldr r0, _0804904C @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #8
	beq _0804902A
	ldr r0, _08049050 @ =0x0000028F
	bl unk_3b1c
_0804902A:
	ldr r1, _08049054 @ =gBossWork5
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0804905E
	ldr r0, _0804904C @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0xbf
	ands r1, r2
	strb r1, [r0]
	bl SerrisSetFacingOam
	b _0804905E
	.align 2, 0
_0804904C: .4byte gCurrentSprite
_08049050: .4byte 0x0000028F
_08049054: .4byte gBossWork5
_08049058:
	adds r0, r4, #0
	adds r0, #0x20
	strb r2, [r0]
_0804905E:
	ldr r2, _08049094 @ =gCurrentSprite
	ldrh r0, [r2]
	ldr r1, _08049098 @ =0x00000804
	ands r1, r0
	movs r0, #0x80
	lsls r0, r0, #4
	cmp r1, r0
	bne _080490AE
	ldr r0, _0804909C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _080490AE
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #8
	beq _080490AE
	ldr r0, _080490A0 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	beq _080490A8
	ldr r0, _080490A4 @ =0x0000028E
	bl SoundPlay
	b _080490AE
	.align 2, 0
_08049094: .4byte gCurrentSprite
_08049098: .4byte 0x00000804
_0804909C: .4byte gFrameCounter8Bit
_080490A0: .4byte gBossWork5
_080490A4: .4byte 0x0000028E
_080490A8:
	ldr r0, _080490CC @ =0x0000028B
	bl SoundPlay
_080490AE:
	ldr r0, _080490D0 @ =0x030007C0
	ldr r1, _080490D4 @ =gCurrentSprite
	ldrh r2, [r1, #2]
	strh r2, [r0]
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x56
	bls _080490C0
	b _080492B2
_080490C0:
	lsls r0, r0, #2
	ldr r1, _080490D8 @ =_080490DC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080490CC: .4byte 0x0000028B
_080490D0: .4byte 0x030007C0
_080490D4: .4byte gCurrentSprite
_080490D8: .4byte _080490DC
_080490DC: @ jump table
	.4byte _08049238 @ case 0
	.4byte _08049260 @ case 1
	.4byte _08049284 @ case 2
	.4byte _080492B2 @ case 3
	.4byte _080492B2 @ case 4
	.4byte _080492B2 @ case 5
	.4byte _080492B2 @ case 6
	.4byte _080492B2 @ case 7
	.4byte _08049278 @ case 8
	.4byte _080492B2 @ case 9
	.4byte _080492B2 @ case 10
	.4byte _080492B2 @ case 11
	.4byte _080492B2 @ case 12
	.4byte _080492B2 @ case 13
	.4byte _080492B2 @ case 14
	.4byte _080492B2 @ case 15
	.4byte _080492B2 @ case 16
	.4byte _080492B2 @ case 17
	.4byte _080492B2 @ case 18
	.4byte _080492B2 @ case 19
	.4byte _080492B2 @ case 20
	.4byte _080492B2 @ case 21
	.4byte _0804927E @ case 22
	.4byte _080492B2 @ case 23
	.4byte _0804928A @ case 24
	.4byte _080492B2 @ case 25
	.4byte _08049290 @ case 26
	.4byte _080492B2 @ case 27
	.4byte _08049296 @ case 28
	.4byte _080492B2 @ case 29
	.4byte _080492B2 @ case 30
	.4byte _080492B2 @ case 31
	.4byte _080492B2 @ case 32
	.4byte _080492B2 @ case 33
	.4byte _080492B2 @ case 34
	.4byte _080492B2 @ case 35
	.4byte _080492B2 @ case 36
	.4byte _080492B2 @ case 37
	.4byte _080492B2 @ case 38
	.4byte _080492B2 @ case 39
	.4byte _080492B2 @ case 40
	.4byte _080492B2 @ case 41
	.4byte _080492B2 @ case 42
	.4byte _080492B2 @ case 43
	.4byte _080492B2 @ case 44
	.4byte _080492B2 @ case 45
	.4byte _080492B2 @ case 46
	.4byte _080492B2 @ case 47
	.4byte _080492B2 @ case 48
	.4byte _080492B2 @ case 49
	.4byte _080492B2 @ case 50
	.4byte _080492B2 @ case 51
	.4byte _080492B2 @ case 52
	.4byte _080492B2 @ case 53
	.4byte _080492B2 @ case 54
	.4byte _080492B2 @ case 55
	.4byte _0804929C @ case 56
	.4byte _080492B2 @ case 57
	.4byte _080492A2 @ case 58
	.4byte _080492B2 @ case 59
	.4byte _080492A8 @ case 60
	.4byte _080492B2 @ case 61
	.4byte _080492AE @ case 62
	.4byte _080492B2 @ case 63
	.4byte _080492B2 @ case 64
	.4byte _080492B2 @ case 65
	.4byte _080492B2 @ case 66
	.4byte _080492B2 @ case 67
	.4byte _080492B2 @ case 68
	.4byte _080492B2 @ case 69
	.4byte _080492B2 @ case 70
	.4byte _0804923E @ case 71
	.4byte _08049244 @ case 72
	.4byte _0804924A @ case 73
	.4byte _0804924E @ case 74
	.4byte _080492B2 @ case 75
	.4byte _080492B2 @ case 76
	.4byte _080492B2 @ case 77
	.4byte _080492B2 @ case 78
	.4byte _080492B2 @ case 79
	.4byte _080492B2 @ case 80
	.4byte _08049272 @ case 81
	.4byte _080492B2 @ case 82
	.4byte _08049266 @ case 83
	.4byte _0804926C @ case 84
	.4byte _08049254 @ case 85
	.4byte _0804925A @ case 86
_08049238:
	bl SerrisInit
	b _080492B2
_0804923E:
	bl SerrisDyingInit
	b _080492B2
_08049244:
	bl SerrisDying
	b _080492B2
_0804924A:
	bl SerrisTurningIntoXInit
_0804924E:
	bl SerrisTurningIntoX
	b _080492B2
_08049254:
	bl SerrisWaitingToAppearInit
	b _080492B2
_0804925A:
	bl SerrisWaitingToAppear
	b _080492B2
_08049260:
	bl SerrisStartFight
	b _080492B2
_08049266:
	bl SerrisFirstArcInit
	b _080492B2
_0804926C:
	bl SerrisFirstArc
	b _080492B2
_08049272:
	bl SerrisFirstArcEnd
	b _080492B2
_08049278:
	bl SerrisWaitingToEmerge
	b _080492B2
_0804927E:
	bl SerrisEndPattern
	b _080492B2
_08049284:
	bl SerrisZigzagPatternInit
	b _080492B2
_0804928A:
	bl SerrisLoopAroundPatternInit
	b _080492B2
_08049290:
	bl SerrisMiddleArcPatternInit
	b _080492B2
_08049296:
	bl SerrisEdgeArcPatternInit
	b _080492B2
_0804929C:
	bl SerrisZigzagPattern
	b _080492B2
_080492A2:
	bl SerrisLoopAroundPattern
	b _080492B2
_080492A8:
	bl SerrisMiddileArcPattern
	b _080492B2
_080492AE:
	bl SerrisEdgeArcPattern
_080492B2:
	bl SerricCheckInWater
	bl SerrisUpdatePalette
	ldr r0, _080492E4 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	bne _080492C4
	b _08049426
_080492C4:
	ldr r2, _080492E8 @ =0x030007C0
	ldr r0, _080492EC @ =gCurrentSprite
	ldrh r1, [r0, #2]
	strh r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #2
	cmp r0, #0x3c
	bls _080492D8
	b _08049422
_080492D8:
	lsls r0, r0, #2
	ldr r1, _080492F0 @ =_080492F4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080492E4: .4byte gBossWork5
_080492E8: .4byte 0x030007C0
_080492EC: .4byte gCurrentSprite
_080492F0: .4byte _080492F4
_080492F4: @ jump table
	.4byte _080493F4 @ case 0
	.4byte _08049422 @ case 1
	.4byte _08049422 @ case 2
	.4byte _08049422 @ case 3
	.4byte _08049422 @ case 4
	.4byte _08049422 @ case 5
	.4byte _080493E8 @ case 6
	.4byte _08049422 @ case 7
	.4byte _08049422 @ case 8
	.4byte _08049422 @ case 9
	.4byte _08049422 @ case 10
	.4byte _08049422 @ case 11
	.4byte _08049422 @ case 12
	.4byte _08049422 @ case 13
	.4byte _08049422 @ case 14
	.4byte _08049422 @ case 15
	.4byte _08049422 @ case 16
	.4byte _08049422 @ case 17
	.4byte _08049422 @ case 18
	.4byte _08049422 @ case 19
	.4byte _080493EE @ case 20
	.4byte _08049422 @ case 21
	.4byte _080493FA @ case 22
	.4byte _08049422 @ case 23
	.4byte _08049400 @ case 24
	.4byte _08049422 @ case 25
	.4byte _08049406 @ case 26
	.4byte _08049422 @ case 27
	.4byte _08049422 @ case 28
	.4byte _08049422 @ case 29
	.4byte _08049422 @ case 30
	.4byte _08049422 @ case 31
	.4byte _08049422 @ case 32
	.4byte _08049422 @ case 33
	.4byte _08049422 @ case 34
	.4byte _08049422 @ case 35
	.4byte _08049422 @ case 36
	.4byte _08049422 @ case 37
	.4byte _08049422 @ case 38
	.4byte _08049422 @ case 39
	.4byte _08049422 @ case 40
	.4byte _08049422 @ case 41
	.4byte _08049422 @ case 42
	.4byte _08049422 @ case 43
	.4byte _08049422 @ case 44
	.4byte _08049422 @ case 45
	.4byte _08049422 @ case 46
	.4byte _08049422 @ case 47
	.4byte _08049422 @ case 48
	.4byte _08049422 @ case 49
	.4byte _08049422 @ case 50
	.4byte _08049422 @ case 51
	.4byte _08049422 @ case 52
	.4byte _08049422 @ case 53
	.4byte _0804940C @ case 54
	.4byte _08049422 @ case 55
	.4byte _08049412 @ case 56
	.4byte _08049422 @ case 57
	.4byte _08049418 @ case 58
	.4byte _08049422 @ case 59
	.4byte _0804941E @ case 60
_080493E8:
	bl SerrisWaitingToEmerge
	b _08049422
_080493EE:
	bl SerrisEndPattern
	b _08049422
_080493F4:
	bl SerrisZigzagPatternInit
	b _08049422
_080493FA:
	bl SerrisLoopAroundPatternInit
	b _08049422
_08049400:
	bl SerrisMiddleArcPatternInit
	b _08049422
_08049406:
	bl SerrisEdgeArcPatternInit
	b _08049422
_0804940C:
	bl SerrisZigzagPattern
	b _08049422
_08049412:
	bl SerrisLoopAroundPattern
	b _08049422
_08049418:
	bl SerrisMiddileArcPattern
	b _08049422
_0804941E:
	bl SerrisEdgeArcPattern
_08049422:
	bl SerricCheckInWater
_08049426:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SerrisPart
SerrisPart: @ 0x0804942C
	push {lr}
	ldr r3, _08049468 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0804946C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r2, r3, #0
	cmp r0, #0
	beq _0804944E
	b _0804983C
_0804944E:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x48
	bne _08049470
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x46
	bhi _080494A8
	movs r0, #0x47
	strb r0, [r1]
	b _080494A8
	.align 2, 0
_08049468: .4byte gCurrentSprite
_0804946C: .4byte gSpriteData
_08049470:
	ldr r0, _08049490 @ =gBossWork5
	ldrh r1, [r0]
	cmp r1, #0
	beq _080494A2
	ldr r0, _08049494 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08049498
	adds r1, r2, #0
	adds r1, #0x20
	movs r0, #5
	strb r0, [r1]
	b _080494A8
	.align 2, 0
_08049490: .4byte gBossWork5
_08049494: .4byte gFrameCounter8Bit
_08049498:
	adds r1, r2, #0
	adds r1, #0x20
	movs r0, #6
	strb r0, [r1]
	b _080494A8
_080494A2:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_080494A8:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x55
	bls _080494B4
	b _0804968C
_080494B4:
	lsls r0, r0, #2
	ldr r1, _080494C0 @ =_080494C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080494C0: .4byte _080494C4
_080494C4: @ jump table
	.4byte _0804961C @ case 0
	.4byte _08049628 @ case 1
	.4byte _0804965E @ case 2
	.4byte _0804968C @ case 3
	.4byte _0804968C @ case 4
	.4byte _0804968C @ case 5
	.4byte _0804968C @ case 6
	.4byte _0804968C @ case 7
	.4byte _08049652 @ case 8
	.4byte _0804968C @ case 9
	.4byte _0804968C @ case 10
	.4byte _0804968C @ case 11
	.4byte _0804968C @ case 12
	.4byte _0804968C @ case 13
	.4byte _0804968C @ case 14
	.4byte _0804968C @ case 15
	.4byte _0804968C @ case 16
	.4byte _0804968C @ case 17
	.4byte _0804968C @ case 18
	.4byte _0804968C @ case 19
	.4byte _0804968C @ case 20
	.4byte _0804968C @ case 21
	.4byte _08049658 @ case 22
	.4byte _0804968C @ case 23
	.4byte _08049664 @ case 24
	.4byte _0804968C @ case 25
	.4byte _0804966A @ case 26
	.4byte _0804968C @ case 27
	.4byte _08049670 @ case 28
	.4byte _0804968C @ case 29
	.4byte _0804968C @ case 30
	.4byte _0804968C @ case 31
	.4byte _0804968C @ case 32
	.4byte _0804968C @ case 33
	.4byte _0804968C @ case 34
	.4byte _0804968C @ case 35
	.4byte _0804968C @ case 36
	.4byte _0804968C @ case 37
	.4byte _0804968C @ case 38
	.4byte _0804968C @ case 39
	.4byte _0804968C @ case 40
	.4byte _0804968C @ case 41
	.4byte _0804968C @ case 42
	.4byte _0804968C @ case 43
	.4byte _0804968C @ case 44
	.4byte _0804968C @ case 45
	.4byte _0804968C @ case 46
	.4byte _0804968C @ case 47
	.4byte _0804968C @ case 48
	.4byte _0804968C @ case 49
	.4byte _0804968C @ case 50
	.4byte _0804968C @ case 51
	.4byte _0804968C @ case 52
	.4byte _0804968C @ case 53
	.4byte _0804968C @ case 54
	.4byte _0804968C @ case 55
	.4byte _08049676 @ case 56
	.4byte _0804968C @ case 57
	.4byte _0804967C @ case 58
	.4byte _0804968C @ case 59
	.4byte _08049682 @ case 60
	.4byte _0804968C @ case 61
	.4byte _08049688 @ case 62
	.4byte _0804968C @ case 63
	.4byte _0804968C @ case 64
	.4byte _0804968C @ case 65
	.4byte _0804968C @ case 66
	.4byte _0804968C @ case 67
	.4byte _0804968C @ case 68
	.4byte _0804968C @ case 69
	.4byte _0804968C @ case 70
	.4byte _0804963A @ case 71
	.4byte _08049640 @ case 72
	.4byte _0804968C @ case 73
	.4byte _08049646 @ case 74
	.4byte _0804968C @ case 75
	.4byte _0804968C @ case 76
	.4byte _0804968C @ case 77
	.4byte _0804968C @ case 78
	.4byte _0804968C @ case 79
	.4byte _0804968C @ case 80
	.4byte _0804964C @ case 81
	.4byte _0804968C @ case 82
	.4byte _0804962E @ case 83
	.4byte _08049634 @ case 84
	.4byte _08049622 @ case 85
_0804961C:
	bl SerrisPartInit
	b _0804968C
_08049622:
	bl SerrisPartWaitingToAppear
	b _0804968C
_08049628:
	bl SerrisPartStartFight
	b _0804968C
_0804962E:
	bl SerrisFirstArcInit
	b _0804968C
_08049634:
	bl SerrisFirstArc
	b _0804968C
_0804963A:
	bl SerrisPartDyingInit
	b _0804968C
_08049640:
	bl SerrisPartDying
	b _0804968C
_08049646:
	bl SerrisPartFalling
	b _0804968C
_0804964C:
	bl SerrisFirstArcEnd
	b _0804968C
_08049652:
	bl SerrisWaitingToEmerge
	b _0804968C
_08049658:
	bl SerrisEndPattern
	b _0804968C
_0804965E:
	bl SerrisZigzagPatternInit
	b _0804968C
_08049664:
	bl SerrisLoopAroundPatternInit
	b _0804968C
_0804966A:
	bl SerrisMiddleArcPatternInit
	b _0804968C
_08049670:
	bl SerrisEdgeArcPatternInit
	b _0804968C
_08049676:
	bl SerrisZigzagPattern
	b _0804968C
_0804967C:
	bl SerrisLoopAroundPattern
	b _0804968C
_08049682:
	bl SerrisMiddileArcPattern
	b _0804968C
_08049688:
	bl SerrisEdgeArcPattern
_0804968C:
	ldr r0, _080496B0 @ =gBossWork5
	ldrh r0, [r0]
	cmp r0, #0
	bne _08049696
	b _0804983C
_08049696:
	ldr r0, _080496B4 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #2
	cmp r0, #0x4f
	bls _080496A4
	b _0804983C
_080496A4:
	lsls r0, r0, #2
	ldr r1, _080496B8 @ =_080496BC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080496B0: .4byte gBossWork5
_080496B4: .4byte gCurrentSprite
_080496B8: .4byte _080496BC
_080496BC: @ jump table
	.4byte _0804980E @ case 0
	.4byte _0804983C @ case 1
	.4byte _0804983C @ case 2
	.4byte _0804983C @ case 3
	.4byte _0804983C @ case 4
	.4byte _0804983C @ case 5
	.4byte _08049802 @ case 6
	.4byte _0804983C @ case 7
	.4byte _0804983C @ case 8
	.4byte _0804983C @ case 9
	.4byte _0804983C @ case 10
	.4byte _0804983C @ case 11
	.4byte _0804983C @ case 12
	.4byte _0804983C @ case 13
	.4byte _0804983C @ case 14
	.4byte _0804983C @ case 15
	.4byte _0804983C @ case 16
	.4byte _0804983C @ case 17
	.4byte _0804983C @ case 18
	.4byte _0804983C @ case 19
	.4byte _08049808 @ case 20
	.4byte _0804983C @ case 21
	.4byte _08049814 @ case 22
	.4byte _0804983C @ case 23
	.4byte _0804981A @ case 24
	.4byte _0804983C @ case 25
	.4byte _08049820 @ case 26
	.4byte _0804983C @ case 27
	.4byte _0804983C @ case 28
	.4byte _0804983C @ case 29
	.4byte _0804983C @ case 30
	.4byte _0804983C @ case 31
	.4byte _0804983C @ case 32
	.4byte _0804983C @ case 33
	.4byte _0804983C @ case 34
	.4byte _0804983C @ case 35
	.4byte _0804983C @ case 36
	.4byte _0804983C @ case 37
	.4byte _0804983C @ case 38
	.4byte _0804983C @ case 39
	.4byte _0804983C @ case 40
	.4byte _0804983C @ case 41
	.4byte _0804983C @ case 42
	.4byte _0804983C @ case 43
	.4byte _0804983C @ case 44
	.4byte _0804983C @ case 45
	.4byte _0804983C @ case 46
	.4byte _0804983C @ case 47
	.4byte _0804983C @ case 48
	.4byte _0804983C @ case 49
	.4byte _0804983C @ case 50
	.4byte _0804983C @ case 51
	.4byte _0804983C @ case 52
	.4byte _0804983C @ case 53
	.4byte _08049826 @ case 54
	.4byte _0804983C @ case 55
	.4byte _0804982C @ case 56
	.4byte _0804983C @ case 57
	.4byte _08049832 @ case 58
	.4byte _0804983C @ case 59
	.4byte _08049838 @ case 60
	.4byte _0804983C @ case 61
	.4byte _0804983C @ case 62
	.4byte _0804983C @ case 63
	.4byte _0804983C @ case 64
	.4byte _0804983C @ case 65
	.4byte _0804983C @ case 66
	.4byte _0804983C @ case 67
	.4byte _0804983C @ case 68
	.4byte _0804983C @ case 69
	.4byte _0804983C @ case 70
	.4byte _0804983C @ case 71
	.4byte _0804983C @ case 72
	.4byte _0804983C @ case 73
	.4byte _0804983C @ case 74
	.4byte _0804983C @ case 75
	.4byte _0804983C @ case 76
	.4byte _0804983C @ case 77
	.4byte _0804983C @ case 78
	.4byte _080497FC @ case 79
_080497FC:
	bl SerrisFirstArcEnd
	b _0804983C
_08049802:
	bl SerrisWaitingToEmerge
	b _0804983C
_08049808:
	bl SerrisEndPattern
	b _0804983C
_0804980E:
	bl SerrisZigzagPatternInit
	b _0804983C
_08049814:
	bl SerrisLoopAroundPatternInit
	b _0804983C
_0804981A:
	bl SerrisMiddleArcPatternInit
	b _0804983C
_08049820:
	bl SerrisEdgeArcPatternInit
	b _0804983C
_08049826:
	bl SerrisZigzagPattern
	b _0804983C
_0804982C:
	bl SerrisLoopAroundPattern
	b _0804983C
_08049832:
	bl SerrisMiddileArcPattern
	b _0804983C
_08049838:
	bl SerrisEdgeArcPattern
_0804983C:
	pop {r0}
	bx r0

	thumb_func_start SerrisBlock
SerrisBlock: @ 0x08049840
	push {lr}
	ldr r0, _08049860 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08049874
	cmp r0, #2
	bgt _08049864
	cmp r0, #0
	beq _0804986E
	b _08049884
	.align 2, 0
_08049860: .4byte gCurrentSprite
_08049864:
	cmp r0, #0x18
	beq _0804987A
	cmp r0, #0x1a
	beq _08049880
	b _08049884
_0804986E:
	bl SerrisBlockInit
	b _08049884
_08049874:
	bl SerrisBlockIdle
	b _08049884
_0804987A:
	bl SerrisBlockCrumbling
	b _08049884
_08049880:
	bl SerrisBlockFalling
_08049884:
	pop {r0}
	bx r0

	thumb_func_start OwtchCheckCollidingWithAir
OwtchCheckCollidingWithAir: @ 0x08049888
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _080498BC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _080498E8
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080498C4
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080498C0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08049938
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _0804992C
	.align 2, 0
_080498BC: .4byte gCurrentSprite
_080498C0: .4byte gPreviousCollisionCheck
_080498C4:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080498E4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08049938
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0804992C
	.align 2, 0
_080498E4: .4byte gPreviousCollisionCheck
_080498E8:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08049914
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08049910 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08049938
	ldrh r0, [r4, #2]
	subs r0, #4
	b _08049928
	.align 2, 0
_08049910: .4byte gPreviousCollisionCheck
_08049914:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08049940 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08049938
	ldrh r0, [r4, #2]
_08049928:
	ldrh r1, [r4, #4]
	adds r1, #0x20
_0804992C:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08049938
	movs r6, #1
_08049938:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08049940: .4byte gPreviousCollisionCheck

	thumb_func_start OwtchUpdateHitbox
OwtchUpdateHitbox: @ 0x08049944
	push {lr}
	ldr r2, _0804996C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08049990
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08049978
	ldr r0, _08049970 @ =0x0000FFE4
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _08049974 @ =0x0000FFD4
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _080499B2
	.align 2, 0
_0804996C: .4byte gCurrentSprite
_08049970: .4byte 0x0000FFE4
_08049974: .4byte 0x0000FFD4
_08049978:
	ldr r0, _08049988 @ =0x0000FFE4
	strh r0, [r2, #0xa]
	movs r0, #0x1c
	strh r0, [r2, #0xc]
	ldr r0, _0804998C @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x2c
	b _080499B2
	.align 2, 0
_08049988: .4byte 0x0000FFE4
_0804998C: .4byte 0x0000FFF0
_08049990:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080499A4
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x2c
	b _080499AA
_080499A4:
	ldr r0, _080499B8 @ =0x0000FFD4
	strh r0, [r2, #0xa]
	movs r0, #0x10
_080499AA:
	strh r0, [r2, #0xc]
	ldr r0, _080499BC @ =0x0000FFE4
	strh r0, [r2, #0xe]
	movs r0, #0x1c
_080499B2:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_080499B8: .4byte 0x0000FFD4
_080499BC: .4byte 0x0000FFE4

	thumb_func_start OwtchSetCrawlingOam
OwtchSetCrawlingOam: @ 0x080499C0
	push {lr}
	ldr r0, _080499D4 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _080499DC
	ldr r0, _080499D8 @ =0x08379154
	b _080499DE
	.align 2, 0
_080499D4: .4byte gCurrentSprite
_080499D8: .4byte 0x08379154
_080499DC:
	ldr r0, _080499EC @ =0x083790D4
_080499DE:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_080499EC: .4byte 0x083790D4

	thumb_func_start OwtchSetFallingOam
OwtchSetFallingOam: @ 0x080499F0
	push {lr}
	ldr r0, _08049A04 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _08049A0C
	ldr r0, _08049A08 @ =0x08379154
	b _08049A0E
	.align 2, 0
_08049A04: .4byte gCurrentSprite
_08049A08: .4byte 0x08379154
_08049A0C:
	ldr r0, _08049A1C @ =0x083790D4
_08049A0E:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_08049A1C: .4byte 0x083790D4

	thumb_func_start OwtchTurningIntoX
OwtchTurningIntoX: @ 0x08049A20
	push {lr}
	ldr r2, _08049A40 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08049A4C
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08049A44
	ldrh r0, [r2, #4]
	subs r0, #0x28
	strh r0, [r2, #4]
	b _08049A64
	.align 2, 0
_08049A40: .4byte gCurrentSprite
_08049A44:
	ldrh r0, [r2, #4]
	adds r0, #0x28
	strh r0, [r2, #4]
	b _08049A64
_08049A4C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08049A5E
	ldrh r0, [r2, #2]
	adds r0, #0x28
	b _08049A62
_08049A5E:
	ldrh r0, [r2, #2]
	subs r0, #0x28
_08049A62:
	strh r0, [r2, #2]
_08049A64:
	pop {r0}
	bx r0

	thumb_func_start OwtchInit
OwtchInit: @ 0x08049A68
	push {r4, r5, r6, r7, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _08049A94 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08049A98
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _08049A98
	strh r0, [r2]
	b _08049BA8
	.align 2, 0
_08049A94: .4byte gCurrentSprite
_08049A98:
	ldr r0, _08049AB0 @ =gCurrentSprite
	adds r4, r0, #0
	adds r4, #0x24
	ldrb r1, [r4]
	adds r7, r0, #0
	cmp r1, #0x59
	bne _08049AB4
	movs r0, #0x5a
	strb r0, [r4]
	movs r0, #0x2c
	strh r0, [r7, #6]
	b _08049B72
	.align 2, 0
_08049AB0: .4byte gCurrentSprite
_08049AB4:
	bl SpriteUtilChooseRandomXDirection
	movs r0, #2
	strb r0, [r4]
	ldrh r0, [r7, #2]
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08049ADC @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	movs r6, #0xf0
	adds r4, r6, #0
	ands r4, r0
	cmp r4, #0
	beq _08049AE0
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	b _08049B72
	.align 2, 0
_08049ADC: .4byte gPreviousCollisionCheck
_08049AE0:
	ldrh r0, [r7, #2]
	subs r0, #0x44
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08049B0E
	adds r0, r7, #0
	adds r0, #0x2d
	strb r4, [r0]
	ldrh r0, [r7]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	orrs r1, r0
	strh r1, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x40
	strh r0, [r7, #2]
	b _08049B72
_08049B0E:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08049B3A
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	subs r0, #0x20
	strh r0, [r7, #4]
	b _08049B72
_08049B3A:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	adds r2, r6, #0
	ands r2, r0
	cmp r2, #0
	beq _08049B6E
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r7]
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	adds r0, #0x20
	strh r0, [r7, #4]
	b _08049B72
_08049B6E:
	strh r2, [r7]
	b _08049BA8
_08049B72:
	adds r1, r7, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl OwtchSetCrawlingOam
	bl OwtchUpdateHitbox
	ldr r2, _08049BB0 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0
	strh r0, [r7, #0x14]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r1, [r0]
	subs r0, #7
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_08049BA8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08049BB0: .4byte sPrimarySpriteStats

	thumb_func_start OwtchIdleInit
OwtchIdleInit: @ 0x08049BB4
	push {lr}
	bl OwtchSetCrawlingOam
	ldr r0, _08049BC8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08049BC8: .4byte gCurrentSprite

	thumb_func_start OwtchIdle
OwtchIdle: @ 0x08049BCC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r5, #0
	bl OwtchCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08049BEC
	ldr r0, _08049BE8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _08049EF8
	.align 2, 0
_08049BE8: .4byte gCurrentSprite
_08049BEC:
	ldr r4, _08049C40 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	mov r8, r0
	ands r0, r1
	cmp r0, #0
	beq _08049C00
	b _08049EFA
_08049C00:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _08049C0C
	b _08049D78
_08049C0C:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08049CC4
	movs r6, #0x80
	lsls r6, r6, #2
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08049C68
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08049C44 @ =gPreviousCollisionCheck
	ldrb r1, [r7]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08049C48
	ldrh r1, [r4]
	adds r0, r6, #0
	orrs r0, r1
	b _08049CB0
	.align 2, 0
_08049C40: .4byte gCurrentSprite
_08049C44: .4byte gPreviousCollisionCheck
_08049C48:
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08049D10
	ldrh r1, [r4]
	ldr r0, _08049C64 @ =0x0000FDFF
	ands r0, r1
	b _08049C84
	.align 2, 0
_08049C64: .4byte 0x0000FDFF
_08049C68:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08049C94 @ =gPreviousCollisionCheck
	ldrb r1, [r7]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08049C98
	ldrh r1, [r4]
	adds r0, r6, #0
	orrs r0, r1
_08049C84:
	strh r0, [r4]
	movs r5, #1
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #5
	strb r0, [r1]
	b _08049EEE
	.align 2, 0
_08049C94: .4byte gPreviousCollisionCheck
_08049C98:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08049D70
	ldrh r1, [r4]
	ldr r0, _08049CC0 @ =0x0000FDFF
	ands r0, r1
_08049CB0:
	strh r0, [r4]
	movs r5, #1
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #7
	strb r0, [r1]
	b _08049EEE
	.align 2, 0
_08049CC0: .4byte 0x0000FDFF
_08049CC4:
	movs r7, #0x80
	lsls r7, r7, #2
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08049D18
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08049CF0 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08049CF8
	ldrh r1, [r4]
	ldr r0, _08049CF4 @ =0x0000FDFF
	ands r0, r1
	b _08049D62
	.align 2, 0
_08049CF0: .4byte gPreviousCollisionCheck
_08049CF4: .4byte 0x0000FDFF
_08049CF8:
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _08049D10
	ldrh r1, [r4]
	adds r0, r7, #0
	orrs r0, r1
	b _08049D36
_08049D10:
	ldrh r0, [r4, #2]
	adds r0, #1
	strh r0, [r4, #2]
	b _08049EEE
_08049D18:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08049D44 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08049D4C
	ldrh r1, [r4]
	ldr r0, _08049D48 @ =0x0000FDFF
	ands r0, r1
_08049D36:
	strh r0, [r4]
	movs r5, #1
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #4
	strb r0, [r1]
	b _08049EEE
	.align 2, 0
_08049D44: .4byte gPreviousCollisionCheck
_08049D48: .4byte 0x0000FDFF
_08049D4C:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _08049D70
	ldrh r1, [r4]
	adds r0, r7, #0
	orrs r0, r1
_08049D62:
	strh r0, [r4]
	movs r5, #1
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #6
	strb r0, [r1]
	b _08049EEE
_08049D70:
	ldrh r0, [r4, #2]
	subs r0, #1
	strh r0, [r4, #2]
	b _08049EEE
_08049D78:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08049E30
	movs r7, #0x80
	lsls r7, r7, #2
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08049DD6
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08049DB0 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08049DB8
	ldrh r0, [r4]
	ldr r1, _08049DB4 @ =0x0000FDFF
	ands r1, r0
	b _08049E22
	.align 2, 0
_08049DB0: .4byte gPreviousCollisionCheck
_08049DB4: .4byte 0x0000FDFF
_08049DB8:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _08049DD0
	ldrh r1, [r4]
	adds r0, r7, #0
	orrs r0, r1
	b _08049DF4
_08049DD0:
	ldrh r0, [r4, #4]
	adds r0, #1
	b _08049EEC
_08049DD6:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r6, _08049E04 @ =gPreviousCollisionCheck
	ldrb r1, [r6]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08049E0C
	ldrh r1, [r4]
	ldr r0, _08049E08 @ =0x0000FDFF
	ands r0, r1
_08049DF4:
	strh r0, [r4]
	movs r5, #1
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #3
	strb r0, [r1]
	b _08049EEE
	.align 2, 0
_08049E04: .4byte gPreviousCollisionCheck
_08049E08: .4byte 0x0000FDFF
_08049E0C:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r6]
	cmp r0, #0x11
	bne _08049EE8
	ldrh r0, [r4]
	adds r1, r7, #0
	orrs r1, r0
_08049E22:
	strh r1, [r4]
	movs r5, #1
	adds r0, r4, #0
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
	b _08049EEE
_08049E30:
	movs r6, #0x80
	lsls r6, r6, #2
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08049E8E
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08049E64 @ =gPreviousCollisionCheck
	ldrb r1, [r7]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08049E68
	ldrh r1, [r4]
	movs r2, #0
	adds r0, r6, #0
	orrs r0, r1
	strh r0, [r4]
	movs r5, #1
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	b _08049EEE
	.align 2, 0
_08049E64: .4byte gPreviousCollisionCheck
_08049E68:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08049E88
	ldrh r0, [r4]
	ldr r1, _08049E84 @ =0x0000FDFF
	ands r1, r0
	b _08049EAA
	.align 2, 0
_08049E84: .4byte 0x0000FDFF
_08049E88:
	ldrh r0, [r4, #4]
	adds r0, #1
	b _08049EEC
_08049E8E:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08049EB8 @ =gPreviousCollisionCheck
	ldrb r1, [r7]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0
	bne _08049EBC
	ldrh r0, [r4]
	adds r1, r6, #0
	orrs r1, r0
_08049EAA:
	strh r1, [r4]
	movs r5, #1
	adds r0, r4, #0
	adds r0, #0x2f
	strb r5, [r0]
	b _08049EEE
	.align 2, 0
_08049EB8: .4byte gPreviousCollisionCheck
_08049EBC:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0x11
	bne _08049EE8
	ldrh r1, [r4]
	ldr r0, _08049EE4 @ =0x0000FDFF
	ands r0, r1
	movs r1, #0
	strh r0, [r4]
	movs r5, #1
	adds r0, r4, #0
	adds r0, #0x2f
	strb r1, [r0]
	b _08049EEE
	.align 2, 0
_08049EE4: .4byte 0x0000FDFF
_08049EE8:
	ldrh r0, [r4, #4]
	subs r0, #1
_08049EEC:
	strh r0, [r4, #4]
_08049EEE:
	cmp r5, #0
	beq _08049EFA
	ldr r0, _08049F04 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #3
_08049EF8:
	strb r1, [r0]
_08049EFA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08049F04: .4byte gCurrentSprite

	thumb_func_start OwtchTurningAroundInit
OwtchTurningAroundInit: @ 0x08049F08
	push {r4, lr}
	ldr r3, _08049F34 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r4, #0
	movs r0, #4
	strb r0, [r1]
	strb r4, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r2, r3, #0
	cmp r0, #7
	bls _08049F28
	b _0804A094
_08049F28:
	lsls r0, r0, #2
	ldr r1, _08049F38 @ =_08049F3C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08049F34: .4byte gCurrentSprite
_08049F38: .4byte _08049F3C
_08049F3C: @ jump table
	.4byte _08049F5C @ case 0
	.4byte _08049F84 @ case 1
	.4byte _08049FA0 @ case 2
	.4byte _08049FC8 @ case 3
	.4byte _08049FE4 @ case 4
	.4byte _0804A00C @ case 5
	.4byte _0804A03C @ case 6
	.4byte _0804A064 @ case 7
_08049F5C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08049F70
	ldr r0, _08049F6C @ =0x08379114
	b _08049F72
	.align 2, 0
_08049F6C: .4byte 0x08379114
_08049F70:
	ldr r0, _08049F7C @ =0x08379194
_08049F72:
	str r0, [r2, #0x18]
	ldrh r0, [r2]
	ldr r1, _08049F80 @ =0x0000FFBF
	ands r1, r0
	b _0804A02A
	.align 2, 0
_08049F7C: .4byte 0x08379194
_08049F80: .4byte 0x0000FFBF
_08049F84:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08049F98
	ldr r0, _08049F94 @ =0x08379114
	b _0804A022
	.align 2, 0
_08049F94: .4byte 0x08379114
_08049F98:
	ldr r0, _08049F9C @ =0x08379194
	b _0804A022
	.align 2, 0
_08049F9C: .4byte 0x08379194
_08049FA0:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08049FB4
	ldr r0, _08049FB0 @ =0x08379194
	b _08049FB6
	.align 2, 0
_08049FB0: .4byte 0x08379194
_08049FB4:
	ldr r0, _08049FC0 @ =0x08379114
_08049FB6:
	str r0, [r2, #0x18]
	ldrh r0, [r2]
	ldr r1, _08049FC4 @ =0x0000FFBF
	ands r1, r0
	b _0804A082
	.align 2, 0
_08049FC0: .4byte 0x08379114
_08049FC4: .4byte 0x0000FFBF
_08049FC8:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08049FDC
	ldr r0, _08049FD8 @ =0x08379194
	b _0804A07A
	.align 2, 0
_08049FD8: .4byte 0x08379194
_08049FDC:
	ldr r0, _08049FE0 @ =0x08379114
	b _0804A07A
	.align 2, 0
_08049FE0: .4byte 0x08379114
_08049FE4:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08049FF8
	ldr r0, _08049FF4 @ =0x083791B4
	b _08049FFA
	.align 2, 0
_08049FF4: .4byte 0x083791B4
_08049FF8:
	ldr r0, _0804A004 @ =0x08379134
_08049FFA:
	str r0, [r2, #0x18]
	ldrh r0, [r2]
	ldr r1, _0804A008 @ =0x0000FFBF
	ands r1, r0
	b _0804A02A
	.align 2, 0
_0804A004: .4byte 0x08379134
_0804A008: .4byte 0x0000FFBF
_0804A00C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A020
	ldr r0, _0804A01C @ =0x08379134
	b _0804A022
	.align 2, 0
_0804A01C: .4byte 0x08379134
_0804A020:
	ldr r0, _0804A034 @ =0x083791B4
_0804A022:
	str r0, [r2, #0x18]
	ldrh r0, [r2]
	movs r1, #0x40
	orrs r1, r0
_0804A02A:
	ldr r0, _0804A038 @ =0x0000FEFF
	ands r1, r0
	strh r1, [r2]
	b _0804A096
	.align 2, 0
_0804A034: .4byte 0x083791B4
_0804A038: .4byte 0x0000FEFF
_0804A03C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A050
	ldr r0, _0804A04C @ =0x083791B4
	b _0804A052
	.align 2, 0
_0804A04C: .4byte 0x083791B4
_0804A050:
	ldr r0, _0804A05C @ =0x08379134
_0804A052:
	str r0, [r2, #0x18]
	ldrh r0, [r2]
	ldr r1, _0804A060 @ =0x0000FFBF
	ands r1, r0
	b _0804A082
	.align 2, 0
_0804A05C: .4byte 0x08379134
_0804A060: .4byte 0x0000FFBF
_0804A064:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A078
	ldr r0, _0804A074 @ =0x08379134
	b _0804A07A
	.align 2, 0
_0804A074: .4byte 0x08379134
_0804A078:
	ldr r0, _0804A090 @ =0x083791B4
_0804A07A:
	str r0, [r2, #0x18]
	ldrh r0, [r2]
	movs r1, #0x40
	orrs r1, r0
_0804A082:
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	orrs r1, r0
	strh r1, [r2]
	b _0804A096
	.align 2, 0
_0804A090: .4byte 0x083791B4
_0804A094:
	strh r4, [r3]
_0804A096:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start OwtchTurningAround
OwtchTurningAround: @ 0x0804A09C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _0804A0A8
	b _0804A216
_0804A0A8:
	ldr r2, _0804A0CC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r3, r2, #0
	cmp r0, #7
	bls _0804A0C0
	b _0804A20A
_0804A0C0:
	lsls r0, r0, #2
	ldr r1, _0804A0D0 @ =_0804A0D4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804A0CC: .4byte gCurrentSprite
_0804A0D0: .4byte _0804A0D4
_0804A0D4: @ jump table
	.4byte _0804A0F4 @ case 0
	.4byte _0804A118 @ case 1
	.4byte _0804A12A @ case 2
	.4byte _0804A150 @ case 3
	.4byte _0804A17A @ case 4
	.4byte _0804A192 @ case 5
	.4byte _0804A1C0 @ case 6
	.4byte _0804A1DA @ case 7
_0804A0F4:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0804A10C
	ldrh r0, [r3, #2]
	subs r0, #0x1c
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	subs r0, #0x1c
	strh r0, [r3, #4]
_0804A10C:
	ldrh r1, [r3]
	ldr r0, _0804A114 @ =0x0000FFBF
	ands r0, r1
	b _0804A16E
	.align 2, 0
_0804A114: .4byte 0x0000FFBF
_0804A118:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0804A168
	ldrh r0, [r3, #2]
	subs r0, #0x20
	b _0804A160
_0804A12A:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A142
	ldrh r0, [r3, #2]
	adds r0, #0x1c
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	subs r0, #0x1c
	strh r0, [r3, #4]
_0804A142:
	ldrh r1, [r3]
	ldr r0, _0804A14C @ =0x0000FFBF
	ands r0, r1
	b _0804A16E
	.align 2, 0
_0804A14C: .4byte 0x0000FFBF
_0804A150:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A168
	ldrh r0, [r3, #2]
	adds r0, #0x20
_0804A160:
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	adds r0, #0x20
	strh r0, [r3, #4]
_0804A168:
	ldrh r1, [r3]
	movs r0, #0x40
	orrs r0, r1
_0804A16E:
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	b _0804A20E
_0804A17A:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A1AA
	ldrh r0, [r3, #2]
	adds r0, #0x20
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	adds r0, #0x20
	b _0804A1A8
_0804A192:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0804A1AA
	ldrh r0, [r3, #2]
	adds r0, #0x20
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	subs r0, #0x20
_0804A1A8:
	strh r0, [r3, #4]
_0804A1AA:
	ldrh r1, [r3]
	ldr r0, _0804A1BC @ =0x0000FEFF
	ands r0, r1
	movs r1, #0
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x2d
	strb r1, [r0]
	b _0804A20E
	.align 2, 0
_0804A1BC: .4byte 0x0000FEFF
_0804A1C0:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A1F4
	ldrh r0, [r3, #2]
	subs r0, #0x1c
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	adds r0, #0x1c
	strh r0, [r3, #4]
	b _0804A1F4
_0804A1DA:
	adds r2, r3, #0
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0804A1F4
	ldrh r0, [r2, #2]
	subs r0, #0x1c
	strh r0, [r2, #2]
	ldrh r0, [r2, #4]
	subs r0, #0x1c
	strh r0, [r2, #4]
_0804A1F4:
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x2d
	strb r2, [r0]
	b _0804A20E
_0804A20A:
	movs r0, #0
	strh r0, [r2]
_0804A20E:
	bl OwtchSetCrawlingOam
	bl OwtchUpdateHitbox
_0804A216:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OwtchLandingInit
OwtchLandingInit: @ 0x0804A21C
	push {lr}
	ldr r0, _0804A230 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #8
	strb r1, [r0]
	bl OwtchSetFallingOam
	pop {r0}
	bx r0
	.align 2, 0
_0804A230: .4byte gCurrentSprite

	thumb_func_start OwtchLanding
OwtchLanding: @ 0x0804A234
	push {lr}
	bl OwtchCheckCollidingWithAir
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804A24C
	ldr r0, _0804A248 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _0804A25A
	.align 2, 0
_0804A248: .4byte gCurrentSprite
_0804A24C:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804A25C
	ldr r0, _0804A260 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
_0804A25A:
	strb r1, [r0]
_0804A25C:
	pop {r0}
	bx r0
	.align 2, 0
_0804A260: .4byte gCurrentSprite

	thumb_func_start OwtchFallingInit
OwtchFallingInit: @ 0x0804A264
	push {lr}
	ldr r3, _0804A290 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x16
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #4
	strb r2, [r0]
	ldrh r1, [r3]
	ldr r0, _0804A294 @ =0x0000FEFF
	ands r0, r1
	strh r0, [r3]
	bl OwtchUpdateHitbox
	bl OwtchSetFallingOam
	pop {r0}
	bx r0
	.align 2, 0
_0804A290: .4byte gCurrentSprite
_0804A294: .4byte 0x0000FEFF

	thumb_func_start OwtchFalling
OwtchFalling: @ 0x0804A298
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _0804A2C0 @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804A2C4
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804A2D0
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _0804A2D0
	.align 2, 0
_0804A2C0: .4byte gCurrentSprite
_0804A2C4:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804A2D8
_0804A2D0:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_0804A2D8:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0804A324 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804A36A
	ldr r4, _0804A328 @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _0804A2FE
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0804A2FE:
	ldrh r0, [r4]
	ldr r1, _0804A32C @ =0x0000FEFF
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strb r0, [r2]
	bl OwtchUpdateHitbox
	cmp r5, #0
	beq _0804A338
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804A330
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _0804A334
	.align 2, 0
_0804A324: .4byte gPreviousVerticalCollisionCheck
_0804A328: .4byte gCurrentSprite
_0804A32C: .4byte 0x0000FEFF
_0804A330:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_0804A334:
	subs r0, r0, r1
	strh r0, [r4, #4]
_0804A338:
	ldr r2, _0804A358 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r3, #2
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0804A35C
	adds r0, r2, #0
	adds r0, #0x24
	strb r3, [r0]
	bl OwtchSetCrawlingOam
	b _0804A3AC
	.align 2, 0
_0804A358: .4byte gCurrentSprite
_0804A35C:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	bl OwtchSetFallingOam
	b _0804A3AC
_0804A36A:
	ldr r3, _0804A394 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0804A398 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0804A39C @ =0x00007FFF
	cmp r1, r0
	bne _0804A3A0
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804A3AA
	.align 2, 0
_0804A394: .4byte gCurrentSprite
_0804A398: .4byte sSpritesFallingSpeed
_0804A39C: .4byte 0x00007FFF
_0804A3A0:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_0804A3AA:
	strh r0, [r3, #2]
_0804A3AC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Owtch
Owtch: @ 0x0804A3B4
	push {r4, lr}
	ldr r4, _0804A3E0 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804A3CE
	movs r0, #0xea
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804A3CE:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804A3E4
	bl SpriteUpdateFreezeTimer
	b _0804A5BA
	.align 2, 0
_0804A3E0: .4byte gCurrentSprite
_0804A3E4:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804A3F0
	b _0804A5BA
_0804A3F0:
	lsls r0, r0, #2
	ldr r1, _0804A3FC @ =_0804A400
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804A3FC: .4byte _0804A400
_0804A400: @ jump table
	.4byte _0804A570 @ case 0
	.4byte _0804A576 @ case 1
	.4byte _0804A57A @ case 2
	.4byte _0804A580 @ case 3
	.4byte _0804A584 @ case 4
	.4byte _0804A5BA @ case 5
	.4byte _0804A5BA @ case 6
	.4byte _0804A58A @ case 7
	.4byte _0804A58E @ case 8
	.4byte _0804A5BA @ case 9
	.4byte _0804A5BA @ case 10
	.4byte _0804A5BA @ case 11
	.4byte _0804A5BA @ case 12
	.4byte _0804A5BA @ case 13
	.4byte _0804A5BA @ case 14
	.4byte _0804A5BA @ case 15
	.4byte _0804A5BA @ case 16
	.4byte _0804A5BA @ case 17
	.4byte _0804A5BA @ case 18
	.4byte _0804A5BA @ case 19
	.4byte _0804A5BA @ case 20
	.4byte _0804A594 @ case 21
	.4byte _0804A598 @ case 22
	.4byte _0804A5BA @ case 23
	.4byte _0804A5BA @ case 24
	.4byte _0804A5BA @ case 25
	.4byte _0804A5BA @ case 26
	.4byte _0804A5BA @ case 27
	.4byte _0804A5BA @ case 28
	.4byte _0804A5BA @ case 29
	.4byte _0804A5BA @ case 30
	.4byte _0804A5BA @ case 31
	.4byte _0804A5BA @ case 32
	.4byte _0804A5BA @ case 33
	.4byte _0804A5BA @ case 34
	.4byte _0804A5BA @ case 35
	.4byte _0804A5BA @ case 36
	.4byte _0804A5BA @ case 37
	.4byte _0804A5BA @ case 38
	.4byte _0804A5BA @ case 39
	.4byte _0804A5BA @ case 40
	.4byte _0804A5BA @ case 41
	.4byte _0804A5BA @ case 42
	.4byte _0804A5BA @ case 43
	.4byte _0804A5BA @ case 44
	.4byte _0804A5BA @ case 45
	.4byte _0804A5BA @ case 46
	.4byte _0804A5BA @ case 47
	.4byte _0804A5BA @ case 48
	.4byte _0804A5BA @ case 49
	.4byte _0804A5BA @ case 50
	.4byte _0804A5BA @ case 51
	.4byte _0804A5BA @ case 52
	.4byte _0804A5BA @ case 53
	.4byte _0804A5BA @ case 54
	.4byte _0804A5BA @ case 55
	.4byte _0804A5BA @ case 56
	.4byte _0804A5BA @ case 57
	.4byte _0804A5BA @ case 58
	.4byte _0804A5BA @ case 59
	.4byte _0804A5BA @ case 60
	.4byte _0804A5BA @ case 61
	.4byte _0804A5BA @ case 62
	.4byte _0804A5BA @ case 63
	.4byte _0804A5BA @ case 64
	.4byte _0804A5BA @ case 65
	.4byte _0804A5BA @ case 66
	.4byte _0804A5BA @ case 67
	.4byte _0804A5BA @ case 68
	.4byte _0804A5BA @ case 69
	.4byte _0804A5BA @ case 70
	.4byte _0804A5BA @ case 71
	.4byte _0804A5BA @ case 72
	.4byte _0804A5BA @ case 73
	.4byte _0804A5BA @ case 74
	.4byte _0804A5BA @ case 75
	.4byte _0804A5BA @ case 76
	.4byte _0804A5BA @ case 77
	.4byte _0804A5BA @ case 78
	.4byte _0804A5BA @ case 79
	.4byte _0804A5BA @ case 80
	.4byte _0804A5BA @ case 81
	.4byte _0804A5BA @ case 82
	.4byte _0804A5BA @ case 83
	.4byte _0804A5BA @ case 84
	.4byte _0804A5BA @ case 85
	.4byte _0804A5BA @ case 86
	.4byte _0804A59E @ case 87
	.4byte _0804A5A2 @ case 88
	.4byte _0804A5A8 @ case 89
	.4byte _0804A5AC @ case 90
	.4byte _0804A5B2 @ case 91
_0804A570:
	bl OwtchInit
	b _0804A5BA
_0804A576:
	bl OwtchIdleInit
_0804A57A:
	bl OwtchIdle
	b _0804A5BA
_0804A580:
	bl OwtchTurningAroundInit
_0804A584:
	bl OwtchTurningAround
	b _0804A5BA
_0804A58A:
	bl OwtchLandingInit
_0804A58E:
	bl OwtchLanding
	b _0804A5BA
_0804A594:
	bl OwtchFallingInit
_0804A598:
	bl OwtchFalling
	b _0804A5BA
_0804A59E:
	bl SpriteDyingInit
_0804A5A2:
	bl SpriteDying
	b _0804A5BA
_0804A5A8:
	bl OwtchInit
_0804A5AC:
	bl SpriteSpawningFromX
	b _0804A5BA
_0804A5B2:
	bl OwtchTurningIntoX
	bl XParasiteInit
_0804A5BA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start GeegaSpawningFromX
GeegaSpawningFromX: @ 0x0804A5C0
	push {r4, lr}
	ldr r2, _0804A5EC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x26
	movs r4, #1
	strb r4, [r0]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804A5F8
	ldr r2, _0804A5F0 @ =gWrittenToMosaic_H
	ldr r1, _0804A5F4 @ =0x083BDED6
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	b _0804A608
	.align 2, 0
_0804A5EC: .4byte gCurrentSprite
_0804A5F0: .4byte gWrittenToMosaic_H
_0804A5F4: .4byte 0x083BDED6
_0804A5F8:
	ldrh r1, [r2]
	ldr r0, _0804A610 @ =0x00007FFF
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x24
	strb r4, [r1]
	ldr r1, _0804A614 @ =0x0000FFDF
	ands r0, r1
_0804A608:
	strh r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804A610: .4byte 0x00007FFF
_0804A614: .4byte 0x0000FFDF

	thumb_func_start GeegaInit
GeegaInit: @ 0x0804A618
	push {r4, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0804A644 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A648
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804A648
	strh r0, [r2]
	b _0804A6CE
	.align 2, 0
_0804A644: .4byte gCurrentSprite
_0804A648:
	ldr r3, _0804A6AC @ =gCurrentSprite
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	movs r4, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0804A6B0 @ =0x0000FFD0
	strh r0, [r3, #0xa]
	strh r2, [r3, #0xc]
	adds r0, #0x14
	strh r0, [r3, #0xe]
	movs r0, #0x1c
	strh r0, [r3, #0x10]
	ldr r0, _0804A6B4 @ =0x08379AA8
	str r0, [r3, #0x18]
	strb r4, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r2, _0804A6B8 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0804A6BC
	movs r0, #0x5a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x2c
	strb r0, [r1]
	b _0804A6CE
	.align 2, 0
_0804A6AC: .4byte gCurrentSprite
_0804A6B0: .4byte 0x0000FFD0
_0804A6B4: .4byte 0x08379AA8
_0804A6B8: .4byte sPrimarySpriteStats
_0804A6BC:
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #2]
	strh r0, [r3, #6]
	ldrh r0, [r3, #4]
	strh r0, [r3, #8]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r4, [r0]
_0804A6CE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start GeegaIdle
GeegaIdle: @ 0x0804A6D4
	push {r4, r5, lr}
	ldr r4, _0804A6E8 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804A6EC
	subs r0, #1
	b _0804A71E
	.align 2, 0
_0804A6E8: .4byte gCurrentSprite
_0804A6EC:
	ldr r0, _0804A728 @ =gSamusData
	ldrh r1, [r0, #0x18]
	ldrh r0, [r4, #2]
	subs r0, #0x3c
	cmp r1, r0
	bge _0804A720
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #0xc0
	lsls r1, r1, #1
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _0804A720
	bl MakeSpriteFaceSamusXFlip
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r4]
	ldr r0, _0804A72C @ =0x0000DFFF
	ands r0, r1
	strh r0, [r4]
	movs r0, #0x14
_0804A71E:
	strb r0, [r5]
_0804A720:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804A728: .4byte gSamusData
_0804A72C: .4byte 0x0000DFFF

	thumb_func_start GeegaGoingUp
GeegaGoingUp: @ 0x0804A730
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r6, _0804A778 @ =gCurrentSprite
	ldrh r3, [r6, #2]
	adds r0, r3, #0
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	mov r8, r4
	ldrh r5, [r6, #4]
	adds r7, r5, #0
	movs r0, #0x2e
	adds r0, r0, r6
	mov ip, r0
	ldrb r0, [r0]
	adds r2, r0, #0
	cmp r2, #0
	beq _0804A7F8
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x12
	bne _0804A77C
	subs r4, #0x60
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	adds r3, #0x10
	b _0804A7B6
	.align 2, 0
_0804A778: .4byte gCurrentSprite
_0804A77C:
	cmp r0, #0xc
	bne _0804A79E
	subs r4, #0x40
	adds r3, r5, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x13
	adds r2, r4, #0
	bl SpriteDebrisInit
	movs r0, #0
	movs r1, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	b _0804A81E
_0804A79E:
	cmp r0, #7
	bne _0804A7C2
	subs r4, #0x20
	adds r3, r5, #0
	adds r3, #8
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	subs r3, #0x10
_0804A7B6:
	movs r0, #0
	movs r1, #0x12
	adds r2, r4, #0
	bl SpriteDebrisInit
	b _0804A81E
_0804A7C2:
	cmp r0, #3
	bne _0804A7E4
	adds r3, r7, #0
	subs r3, #8
	movs r0, #0
	movs r1, #0x13
	mov r2, r8
	bl SpriteDebrisInit
	adds r3, r7, #0
	adds r3, #0x10
	movs r0, #0
	movs r1, #4
	mov r2, r8
	bl SpriteDebrisInit
	b _0804A81E
_0804A7E4:
	cmp r0, #0
	bne _0804A81E
	ldr r0, _0804A7F4 @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #0x3c
	strh r0, [r6, #0x12]
	b _0804A81E
	.align 2, 0
_0804A7F4: .4byte gSamusData
_0804A7F8:
	ldrh r1, [r6, #0x12]
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bhs _0804A808
	subs r0, r3, #4
	strh r0, [r6, #2]
	b _0804A81E
_0804A808:
	movs r0, #0x14
	mov r1, ip
	strb r0, [r1]
	ldr r0, _0804A828 @ =0x08379AD0
	str r0, [r6, #0x18]
	strb r2, [r6, #0x1c]
	strh r2, [r6, #0x16]
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_0804A81E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804A828: .4byte 0x08379AD0

	thumb_func_start GeegaGoingForward
GeegaGoingForward: @ 0x0804A82C
	push {r4, lr}
	ldr r2, _0804A844 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _0804A848
	ldrh r0, [r3, #4]
	adds r0, #6
	b _0804A84C
	.align 2, 0
_0804A844: .4byte gCurrentSprite
_0804A848:
	ldrh r0, [r3, #4]
	subs r0, #6
_0804A84C:
	strh r0, [r3, #4]
	ldrh r1, [r3]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0804A886
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r3, #6]
	strh r0, [r3, #2]
	ldrh r0, [r3, #8]
	strh r0, [r3, #4]
	ldr r0, _0804A88C @ =0x08379AA8
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r1, #0xa
	movs r0, #0x78
	strb r0, [r1]
_0804A886:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804A88C: .4byte 0x08379AA8

	thumb_func_start Geega
Geega: @ 0x0804A890
	push {lr}
	ldr r1, _0804A8A4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804A8A8
	bl SpriteUpdateFreezeTimer
	b _0804A910
	.align 2, 0
_0804A8A4: .4byte gCurrentSprite
_0804A8A8:
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x57
	beq _0804A8F8
	cmp r0, #0x57
	bgt _0804A8CE
	cmp r0, #1
	beq _0804A8E6
	cmp r0, #1
	bgt _0804A8C4
	cmp r0, #0
	beq _0804A8E0
	b _0804A910
_0804A8C4:
	cmp r0, #2
	beq _0804A8EC
	cmp r0, #0x18
	beq _0804A8F2
	b _0804A910
_0804A8CE:
	cmp r0, #0x59
	beq _0804A902
	cmp r0, #0x59
	blt _0804A8FC
	cmp r0, #0x5a
	beq _0804A906
	cmp r0, #0x5b
	beq _0804A90C
	b _0804A910
_0804A8E0:
	bl GeegaInit
	b _0804A910
_0804A8E6:
	bl GeegaIdle
	b _0804A910
_0804A8EC:
	bl GeegaGoingUp
	b _0804A910
_0804A8F2:
	bl GeegaGoingForward
	b _0804A910
_0804A8F8:
	bl SpriteDyingInit
_0804A8FC:
	bl SpriteDying
	b _0804A910
_0804A902:
	bl GeegaInit
_0804A906:
	bl GeegaSpawningFromX
	b _0804A910
_0804A90C:
	bl XParasiteInit
_0804A910:
	pop {r0}
	bx r0

	thumb_func_start PillarProjectileCollision
PillarProjectileCollision: @ 0x0804A914
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r2, _0804A9A8 @ =gCurrentSprite
	ldrh r1, [r2, #2]
	ldrh r3, [r2, #4]
	ldrh r0, [r2, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r2, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sl, r1
	ldrh r0, [r2, #0xe]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldrh r0, [r2, #0x10]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	ldr r4, _0804A9AC @ =gCurrentPowerBomb
	ldrb r0, [r4]
	cmp r0, #0
	beq _0804A9B4
	ldr r0, _0804A9B0 @ =gEquipment
	ldrb r1, [r0, #0xb]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0804A9B4
	ldrh r2, [r4, #6]
	ldrh r3, [r4, #4]
	ldrh r0, [r4, #0xc]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	ldrh r0, [r4, #0xe]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r0, [r4, #8]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldrh r0, [r4, #0xa]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r0, [sp, #0x10]
	str r0, [sp]
	mov r0, sl
	str r0, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	adds r0, r6, #0
	adds r1, r5, #0
	bl CheckObjectsTouching
	cmp r0, #0
	beq _0804A9B4
_0804A9A2:
	movs r0, #1
	b _0804AA32
	.align 2, 0
_0804A9A8: .4byte gCurrentSprite
_0804A9AC: .4byte gCurrentPowerBomb
_0804A9B0: .4byte gEquipment
_0804A9B4:
	movs r7, #0
_0804A9B6:
	ldr r0, _0804AA44 @ =gProjectileData
	lsls r1, r7, #5
	adds r3, r1, r0
	ldrb r2, [r3]
	movs r0, #1
	ands r0, r2
	adds r4, r1, #0
	cmp r0, #0
	beq _0804AA26
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _0804AA26
	ldrb r1, [r3, #0xf]
	cmp r1, #9
	beq _0804A9E2
	cmp r1, #4
	beq _0804A9E2
	cmp r1, #0x10
	beq _0804A9E2
	cmp r1, #0x12
	bne _0804AA26
_0804A9E2:
	ldr r0, _0804AA44 @ =gProjectileData
	adds r1, r4, r0
	ldrh r2, [r1, #8]
	ldrh r3, [r1, #0xa]
	ldrh r0, [r1, #0x16]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	ldrh r0, [r1, #0x18]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r0, [r1, #0x1a]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldrh r0, [r1, #0x1c]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r0, [sp, #0x10]
	str r0, [sp]
	mov r0, sl
	str r0, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	mov r0, r8
	str r0, [sp, #0xc]
	adds r0, r6, #0
	adds r1, r5, #0
	bl CheckObjectsTouching
	cmp r0, #0
	bne _0804A9A2
_0804AA26:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xf
	bls _0804A9B6
	movs r0, #0
_0804AA32:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0804AA44: .4byte gProjectileData

	thumb_func_start PillarInit
PillarInit: @ 0x0804AA48
	push {r4, r5, r6, lr}
	ldr r2, _0804AA8C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #4
	movs r4, #0
	movs r6, #0
	orrs r1, r0
	strb r4, [r2, #0x1c]
	strh r6, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x25
	strb r4, [r0]
	strh r6, [r2, #0x14]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r3, #0
	orrs r1, r0
	orrs r1, r4
	strh r1, [r2]
	adds r0, r2, #0
	adds r0, #0x24
	movs r5, #1
	strb r5, [r0]
	adds r0, #6
	ldrb r0, [r0]
	adds r3, r2, #0
	cmp r0, #0x12
	beq _0804AACC
	cmp r0, #0x12
	bgt _0804AA90
	cmp r0, #0x11
	beq _0804AA96
	b _0804AB54
	.align 2, 0
_0804AA8C: .4byte gCurrentSprite
_0804AA90:
	cmp r0, #0x13
	beq _0804AB14
	b _0804AB54
_0804AA96:
	adds r0, r3, #0
	adds r0, #0x2d
	strb r4, [r0]
	ldr r0, _0804AAC4 @ =0x0837A984
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x40
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #8
	strb r0, [r1]
	ldr r0, _0804AAC8 @ =0x0000FFC4
	strh r0, [r3, #0xa]
	strh r6, [r3, #0xc]
	adds r0, #0x20
	strh r0, [r3, #0xe]
	movs r0, #0x1c
	strh r0, [r3, #0x10]
	b _0804AB58
	.align 2, 0
_0804AAC4: .4byte 0x0837A984
_0804AAC8: .4byte 0x0000FFC4
_0804AACC:
	adds r0, r3, #0
	adds r0, #0x2d
	strb r5, [r0]
	movs r2, #0x40
	orrs r1, r2
	strh r1, [r3]
	ldr r0, _0804AB08 @ =0x0837AB8C
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _0804AB0C @ =0x0000FFE4
	strh r0, [r3, #0xa]
	movs r0, #0x1c
	strh r0, [r3, #0xc]
	ldr r0, _0804AB10 @ =0x0000FFC0
	strh r0, [r3, #0xe]
	strh r6, [r3, #0x10]
	ldrh r0, [r3, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	adds r0, #0x20
	strh r0, [r3, #4]
	b _0804AB58
	.align 2, 0
_0804AB08: .4byte 0x0837AB8C
_0804AB0C: .4byte 0x0000FFE4
_0804AB10: .4byte 0x0000FFC0
_0804AB14:
	adds r0, r3, #0
	adds r0, #0x2d
	strb r5, [r0]
	ldr r0, _0804AB4C @ =0x0837AB8C
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	movs r1, #0x40
	strb r1, [r0]
	ldr r0, _0804AB50 @ =0x0000FFE4
	strh r0, [r3, #0xa]
	movs r0, #0x1c
	strh r0, [r3, #0xc]
	strh r6, [r3, #0xe]
	strh r1, [r3, #0x10]
	ldrh r0, [r3, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	ldrh r0, [r3, #4]
	subs r0, #0x20
	strh r0, [r3, #4]
	b _0804AB58
	.align 2, 0
_0804AB4C: .4byte 0x0837AB8C
_0804AB50: .4byte 0x0000FFE4
_0804AB54:
	movs r0, #0
	strh r0, [r3]
_0804AB58:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start PillarIdle
PillarIdle: @ 0x0804AB60
	push {lr}
	bl PillarProjectileCollision
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804ABB0
	ldr r3, _0804ABB4 @ =gCurrentSprite
	movs r1, #0
	movs r2, #1
	movs r0, #1
	strh r0, [r3, #0x14]
	adds r0, r3, #0
	adds r0, #0x26
	strb r1, [r0]
	adds r0, #6
	strb r1, [r0]
	subs r0, #7
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _0804ABB8 @ =0x00007FFB
	ands r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0xe1
	lsls r0, r0, #1
	bl SoundPlay
_0804ABB0:
	pop {r0}
	bx r0
	.align 2, 0
_0804ABB4: .4byte gCurrentSprite
_0804ABB8: .4byte 0x00007FFB

	thumb_func_start PillarExtending
PillarExtending: @ 0x0804ABBC
	push {r4, r5, r6, r7, lr}
	ldr r1, _0804ABE8 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	beq _0804AC34
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804ABF4
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804ABEC
	ldrh r0, [r2, #4]
	subs r0, #4
	strh r0, [r2, #4]
	b _0804ABFA
	.align 2, 0
_0804ABE8: .4byte gCurrentSprite
_0804ABEC:
	ldrh r0, [r2, #4]
	adds r0, #4
	strh r0, [r2, #4]
	b _0804ABFA
_0804ABF4:
	ldrh r0, [r2, #2]
	subs r0, #4
	strh r0, [r2, #2]
_0804ABFA:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _0804AC0E
	b _0804AD5A
_0804AC0E:
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804AC28
	ldr r0, _0804AC24 @ =0x0837A9BC
	str r0, [r2, #0x18]
	b _0804AD5A
	.align 2, 0
_0804AC24: .4byte 0x0837A9BC
_0804AC28:
	ldr r0, _0804AC30 @ =0x0837A7B4
	str r0, [r2, #0x18]
	b _0804AD5A
	.align 2, 0
_0804AC30: .4byte 0x0837A7B4
_0804AC34:
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _0804AC7C
	ldrh r0, [r2, #0x16]
	cmp r0, #0
	beq _0804AC7C
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804AC64
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804AC5C
	ldrh r0, [r2, #0xe]
	subs r0, #8
	strh r0, [r2, #0xe]
	b _0804AC6A
_0804AC5C:
	ldrh r0, [r2, #0x10]
	adds r0, #8
	strh r0, [r2, #0x10]
	b _0804AC6A
_0804AC64:
	ldrh r0, [r2, #0xa]
	subs r0, #8
	strh r0, [r2, #0xa]
_0804AC6A:
	ldrh r1, [r2, #0x16]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0804AC7C
	movs r0, #0xe1
	lsls r0, r0, #1
	bl SoundPlay
_0804AC7C:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804AD5A
	ldr r3, _0804ACE0 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	movs r7, #2
	ldrh r6, [r3, #2]
	ldrh r5, [r3, #4]
	adds r0, r3, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804AD24
	ldr r0, _0804ACE4 @ =0x0837AB54
	str r0, [r3, #0x18]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804ACEC
	ldr r4, _0804ACE8 @ =gCurrentClipdataAffectingAction
	strb r7, [r4]
	adds r1, r5, #0
	subs r1, #0x20
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	subs r1, #0x60
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	subs r1, #0xa0
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	subs r1, #0xe0
	b _0804AD18
	.align 2, 0
_0804ACE0: .4byte gCurrentSprite
_0804ACE4: .4byte 0x0837AB54
_0804ACE8: .4byte gCurrentClipdataAffectingAction
_0804ACEC:
	ldr r4, _0804AD20 @ =gCurrentClipdataAffectingAction
	strb r7, [r4]
	adds r1, r5, #0
	adds r1, #0x20
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	adds r1, #0x60
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	adds r1, #0xa0
	adds r0, r6, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r1, r5, #0
	adds r1, #0xe0
_0804AD18:
	adds r0, r6, #0
	bl ProcessClipdata
	b _0804AD5A
	.align 2, 0
_0804AD20: .4byte gCurrentClipdataAffectingAction
_0804AD24:
	ldr r0, _0804AD60 @ =0x0837A94C
	str r0, [r3, #0x18]
	ldr r4, _0804AD64 @ =gCurrentClipdataAffectingAction
	strb r7, [r4]
	adds r0, r6, #0
	subs r0, #0x20
	adds r1, r5, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r0, r6, #0
	subs r0, #0x60
	adds r1, r5, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r0, r6, #0
	subs r0, #0xa0
	adds r1, r5, #0
	bl ProcessClipdata
	strb r7, [r4]
	adds r0, r6, #0
	subs r0, #0xe0
	adds r1, r5, #0
	bl ProcessClipdata
_0804AD5A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804AD60: .4byte 0x0837A94C
_0804AD64: .4byte gCurrentClipdataAffectingAction

	thumb_func_start Pillar
Pillar: @ 0x0804AD68
	push {lr}
	ldr r0, _0804AD80 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #1
	beq _0804AD90
	cmp r0, #1
	bgt _0804AD84
	cmp r0, #0
	beq _0804AD8A
	b _0804AD9A
	.align 2, 0
_0804AD80: .4byte gCurrentSprite
_0804AD84:
	cmp r0, #2
	beq _0804AD96
	b _0804AD9A
_0804AD8A:
	bl PillarInit
	b _0804AD9A
_0804AD90:
	bl PillarIdle
	b _0804AD9A
_0804AD96:
	bl PillarExtending
_0804AD9A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GenesisInit
GenesisInit: @ 0x0804ADA0
	push {r4, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0804ADCC @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804ADD0
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804ADD0
	strh r0, [r2]
	b _0804AE58
	.align 2, 0
_0804ADCC: .4byte gCurrentSprite
_0804ADD0:
	bl MakeSpriteFaceSamusXFlip
	ldr r0, _0804AE40 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x27
	movs r3, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	movs r2, #0
	ldr r1, _0804AE44 @ =0x0000FFC0
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	movs r0, #0x40
	strh r0, [r4, #0x10]
	ldr r0, _0804AE48 @ =0x0837C360
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r0, _0804AE4C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	ldr r2, _0804AE50 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r1, ip
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0804AE54
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0804AE58
	.align 2, 0
_0804AE40: .4byte gCurrentSprite
_0804AE44: .4byte 0x0000FFC0
_0804AE48: .4byte 0x0837C360
_0804AE4C: .4byte gIoRegisters
_0804AE50: .4byte sPrimarySpriteStats
_0804AE54:
	movs r0, #1
	strb r0, [r1]
_0804AE58:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GenesisIdleInit
GenesisIdleInit: @ 0x0804AE60
	push {lr}
	ldr r3, _0804AE84 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	ldr r0, _0804AE88 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804AE90
	ldr r0, _0804AE8C @ =0x0837C360
	b _0804AE92
	.align 2, 0
_0804AE84: .4byte gCurrentSprite
_0804AE88: .4byte gSpriteRandomNumber
_0804AE8C: .4byte 0x0837C360
_0804AE90:
	ldr r0, _0804AE98 @ =0x0837C398
_0804AE92:
	str r0, [r3, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_0804AE98: .4byte 0x0837C398

	thumb_func_start GenesisIdle
GenesisIdle: @ 0x0804AE9C
	push {r4, r5, lr}
	ldr r1, _0804AEF0 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _0804AEAE
	b _0804B000
_0804AEAE:
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804AEC8
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0804AEC8
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0804AEC8
	ldr r0, _0804AEF4 @ =0x000001C7
	bl CheckPlayNotAlreadyPlayingSound
_0804AEC8:
	ldr r4, _0804AEF0 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804AEFC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x48
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804AEF8 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804AF24
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x48
	b _0804AF16
	.align 2, 0
_0804AEF0: .4byte gCurrentSprite
_0804AEF4: .4byte 0x000001C7
_0804AEF8: .4byte gPreviousCollisionCheck
_0804AEFC:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x48
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804AF30 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804AF24
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x48
_0804AF16:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0804AF34
_0804AF24:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #9
	strb r0, [r1]
	b _0804B000
	.align 2, 0
_0804AF30: .4byte gPreviousCollisionCheck
_0804AF34:
	ldr r2, _0804AF54 @ =gCurrentSprite
	ldr r1, [r2, #0x18]
	ldr r0, _0804AF58 @ =0x0837C398
	movs r3, #1
	cmp r1, r0
	bne _0804AF42
	movs r3, #2
_0804AF42:
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804AF5C
	ldrh r0, [r2, #4]
	adds r0, r3, r0
	b _0804AF60
	.align 2, 0
_0804AF54: .4byte gCurrentSprite
_0804AF58: .4byte 0x0837C398
_0804AF5C:
	ldrh r0, [r2, #4]
	subs r0, r0, r3
_0804AF60:
	strh r0, [r2, #4]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B000
	ldr r1, _0804AF88 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r0, _0804AF8C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0xf
	bhi _0804B000
	lsls r0, r0, #2
	ldr r1, _0804AF90 @ =_0804AF94
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804AF88: .4byte gCurrentSprite
_0804AF8C: .4byte gSpriteRandomNumber
_0804AF90: .4byte _0804AF94
_0804AF94: @ jump table
	.4byte _0804AFD4 @ case 0
	.4byte _0804AFD4 @ case 1
	.4byte _0804AFD4 @ case 2
	.4byte _0804AFD4 @ case 3
	.4byte _0804AFD4 @ case 4
	.4byte _0804AFD4 @ case 5
	.4byte _0804AFD4 @ case 6
	.4byte _0804AFD4 @ case 7
	.4byte _0804AFE4 @ case 8
	.4byte _0804AFE4 @ case 9
	.4byte _0804AFF4 @ case 10
	.4byte _0804AFF4 @ case 11
	.4byte _0804AFF4 @ case 12
	.4byte _0804AFFC @ case 13
	.4byte _0804AFFC @ case 14
	.4byte _0804AFFC @ case 15
_0804AFD4:
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x2a
	strb r1, [r0]
	ldr r0, _0804AFE0 @ =0x0837C478
	b _0804AFFE
	.align 2, 0
_0804AFE0: .4byte 0x0837C478
_0804AFE4:
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0xa
	strb r1, [r0]
	ldr r0, _0804AFF0 @ =0x0837C478
	b _0804AFFE
	.align 2, 0
_0804AFF0: .4byte 0x0837C478
_0804AFF4:
	ldr r0, _0804AFF8 @ =0x0837C398
	b _0804AFFE
	.align 2, 0
_0804AFF8: .4byte 0x0837C398
_0804AFFC:
	ldr r0, _0804B008 @ =0x0837C360
_0804AFFE:
	str r0, [r2, #0x18]
_0804B000:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804B008: .4byte 0x0837C360

	thumb_func_start GensisWaitingInit
GensisWaitingInit: @ 0x0804B00C
	ldr r1, _0804B024 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #8
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804B028 @ =0x0837C478
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0804B024: .4byte gCurrentSprite
_0804B028: .4byte 0x0837C478

	thumb_func_start GenesisWaiting
GenesisWaiting: @ 0x0804B02C
	push {r4, lr}
	ldr r4, _0804B04C @ =gCurrentSprite
	ldr r1, [r4, #0x18]
	ldr r0, _0804B050 @ =0x0837C478
	cmp r1, r0
	bne _0804B058
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B068
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0804B054 @ =0x0837C450
	str r0, [r4, #0x18]
	b _0804B068
	.align 2, 0
_0804B04C: .4byte gCurrentSprite
_0804B050: .4byte 0x0837C478
_0804B054: .4byte 0x0837C450
_0804B058:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B068
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
_0804B068:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GenesisReachedWallInit
GenesisReachedWallInit: @ 0x0804B070
	ldr r1, _0804B088 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0xa
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804B08C @ =0x0837C478
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0804B088: .4byte gCurrentSprite
_0804B08C: .4byte 0x0837C478

	thumb_func_start GenesisReachedWall
GenesisReachedWall: @ 0x0804B090
	push {r4, lr}
	ldr r4, _0804B0B0 @ =gCurrentSprite
	ldr r1, [r4, #0x18]
	ldr r0, _0804B0B4 @ =0x0837C478
	cmp r1, r0
	bne _0804B0BC
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B0CC
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0804B0B8 @ =0x0837C450
	str r0, [r4, #0x18]
	b _0804B0CC
	.align 2, 0
_0804B0B0: .4byte gCurrentSprite
_0804B0B4: .4byte 0x0837C478
_0804B0B8: .4byte 0x0837C450
_0804B0BC:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B0CC
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
_0804B0CC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GenesisTurningAroundInit
GenesisTurningAroundInit: @ 0x0804B0D4
	ldr r1, _0804B0EC @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #4
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804B0F0 @ =0x0837C488
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0804B0EC: .4byte gCurrentSprite
_0804B0F0: .4byte 0x0837C488

	thumb_func_start GenesisTurningAround
GenesisTurningAround: @ 0x0804B0F4
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B118
	ldr r1, _0804B11C @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r0, _0804B120 @ =0x0837C488
	str r0, [r1, #0x18]
	ldrh r0, [r1]
	movs r2, #0x40
	eors r0, r2
	strh r0, [r1]
	adds r1, #0x24
	movs r0, #5
	strb r0, [r1]
_0804B118:
	pop {r0}
	bx r0
	.align 2, 0
_0804B11C: .4byte gCurrentSprite
_0804B120: .4byte 0x0837C488

	thumb_func_start GenesisTurningAroundSecondPart
GenesisTurningAroundSecondPart: @ 0x0804B124
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B136
	ldr r0, _0804B13C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804B136:
	pop {r0}
	bx r0
	.align 2, 0
_0804B13C: .4byte gCurrentSprite

	thumb_func_start GenesisSpitting
GenesisSpitting: @ 0x0804B140
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r4, _0804B174 @ =gCurrentSprite
	ldr r1, [r4, #0x18]
	ldr r0, _0804B178 @ =0x0837C478
	cmp r1, r0
	bne _0804B180
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B202
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0804B17C @ =0x0837C498
	str r0, [r4, #0x18]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804B202
	movs r0, #0xe4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
	b _0804B202
	.align 2, 0
_0804B174: .4byte gCurrentSprite
_0804B178: .4byte 0x0837C478
_0804B17C: .4byte 0x0837C498
_0804B180:
	bl CheckNearEndOfCurrentSpriteAnimation
	adds r5, r0, #0
	cmp r5, #0
	beq _0804B1AA
	ldr r0, _0804B19C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xb
	bhi _0804B1A0
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _0804B202
	.align 2, 0
_0804B19C: .4byte gSpriteRandomNumber
_0804B1A0:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _0804B202
_0804B1AA:
	ldrh r0, [r4, #0x16]
	cmp r0, #0x11
	bne _0804B202
	ldrb r0, [r4, #0x1c]
	cmp r0, #6
	bne _0804B202
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _0804B1E4
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x78
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x18
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x65
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0804B202
_0804B1E4:
	ldrb r2, [r4, #0x1f]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r4, #2]
	adds r0, #0x78
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x18
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x65
	movs r1, #0
	bl SpriteSpawnSecondary
_0804B202:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GenesisSpitInit
GenesisSpitInit: @ 0x0804B20C
	push {r4, lr}
	ldr r0, _0804B284 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0804B288 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r0, #1
	movs r1, #8
	strb r1, [r0]
	ldr r0, _0804B28C @ =0x0000FFE0
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r4, [r2, #0xc]
	adds r0, #0x18
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	mov r1, ip
	adds r1, #0x25
	movs r0, #4
	strb r0, [r1]
	subs r1, #3
	movs r0, #3
	strb r0, [r1]
	ldr r1, _0804B290 @ =gIoRegisters
	ldrb r1, [r1, #0xa]
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r0, _0804B294 @ =0x0837C548
	str r0, [r2, #0x18]
	adds r1, #0xd
	movs r0, #6
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804B284: .4byte gCurrentSprite
_0804B288: .4byte 0x0000FFFB
_0804B28C: .4byte 0x0000FFE0
_0804B290: .4byte gIoRegisters
_0804B294: .4byte 0x0837C548

	thumb_func_start GenesisSpitHanging
GenesisSpitHanging: @ 0x0804B298
	push {lr}
	ldr r2, _0804B2C4 @ =gCurrentSprite
	ldrh r0, [r2, #2]
	adds r0, #1
	strh r0, [r2, #2]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804B2BE
	subs r1, #0xa
	movs r0, #0x16
	strb r0, [r1]
	adds r1, #0xd
	movs r0, #0
	strb r0, [r1]
_0804B2BE:
	pop {r0}
	bx r0
	.align 2, 0
_0804B2C4: .4byte gCurrentSprite

	thumb_func_start GenesisSpitSplashingInit
GenesisSpitSplashingInit: @ 0x0804B2C8
	push {lr}
	ldr r1, _0804B2F4 @ =gCurrentSprite
	ldr r0, _0804B2F8 @ =0x0837C558
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #8
	strb r0, [r2]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804B2EE
	ldr r0, _0804B2FC @ =0x000001C9
	bl CheckPlayNotAlreadyPlayingSound
_0804B2EE:
	pop {r0}
	bx r0
	.align 2, 0
_0804B2F4: .4byte gCurrentSprite
_0804B2F8: .4byte 0x0837C558
_0804B2FC: .4byte 0x000001C9

	thumb_func_start GenesisSpitSplashing
GenesisSpitSplashing: @ 0x0804B300
	push {r4, lr}
	ldr r4, _0804B320 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B318
	movs r0, #0
	strh r0, [r4]
_0804B318:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804B320: .4byte gCurrentSprite

	thumb_func_start Genesis
Genesis: @ 0x0804B324
	push {r4, lr}
	ldr r4, _0804B350 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804B33E
	movs r0, #0xe5
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804B33E:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804B354
	bl SpriteUpdateFreezeTimer
	b _0804B53A
	.align 2, 0
_0804B350: .4byte gCurrentSprite
_0804B354:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804B360
	b _0804B53A
_0804B360:
	lsls r0, r0, #2
	ldr r1, _0804B36C @ =_0804B370
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B36C: .4byte _0804B370
_0804B370: @ jump table
	.4byte _0804B4E0 @ case 0
	.4byte _0804B4E6 @ case 1
	.4byte _0804B4EA @ case 2
	.4byte _0804B504 @ case 3
	.4byte _0804B508 @ case 4
	.4byte _0804B50E @ case 5
	.4byte _0804B53A @ case 6
	.4byte _0804B4F0 @ case 7
	.4byte _0804B4F4 @ case 8
	.4byte _0804B4FA @ case 9
	.4byte _0804B4FE @ case 10
	.4byte _0804B53A @ case 11
	.4byte _0804B53A @ case 12
	.4byte _0804B53A @ case 13
	.4byte _0804B53A @ case 14
	.4byte _0804B53A @ case 15
	.4byte _0804B53A @ case 16
	.4byte _0804B53A @ case 17
	.4byte _0804B53A @ case 18
	.4byte _0804B53A @ case 19
	.4byte _0804B53A @ case 20
	.4byte _0804B53A @ case 21
	.4byte _0804B53A @ case 22
	.4byte _0804B53A @ case 23
	.4byte _0804B53A @ case 24
	.4byte _0804B53A @ case 25
	.4byte _0804B53A @ case 26
	.4byte _0804B53A @ case 27
	.4byte _0804B53A @ case 28
	.4byte _0804B53A @ case 29
	.4byte _0804B53A @ case 30
	.4byte _0804B53A @ case 31
	.4byte _0804B53A @ case 32
	.4byte _0804B53A @ case 33
	.4byte _0804B53A @ case 34
	.4byte _0804B53A @ case 35
	.4byte _0804B53A @ case 36
	.4byte _0804B53A @ case 37
	.4byte _0804B53A @ case 38
	.4byte _0804B53A @ case 39
	.4byte _0804B53A @ case 40
	.4byte _0804B53A @ case 41
	.4byte _0804B514 @ case 42
	.4byte _0804B53A @ case 43
	.4byte _0804B53A @ case 44
	.4byte _0804B53A @ case 45
	.4byte _0804B53A @ case 46
	.4byte _0804B53A @ case 47
	.4byte _0804B53A @ case 48
	.4byte _0804B53A @ case 49
	.4byte _0804B53A @ case 50
	.4byte _0804B53A @ case 51
	.4byte _0804B53A @ case 52
	.4byte _0804B53A @ case 53
	.4byte _0804B53A @ case 54
	.4byte _0804B53A @ case 55
	.4byte _0804B53A @ case 56
	.4byte _0804B53A @ case 57
	.4byte _0804B53A @ case 58
	.4byte _0804B53A @ case 59
	.4byte _0804B53A @ case 60
	.4byte _0804B53A @ case 61
	.4byte _0804B53A @ case 62
	.4byte _0804B53A @ case 63
	.4byte _0804B53A @ case 64
	.4byte _0804B53A @ case 65
	.4byte _0804B53A @ case 66
	.4byte _0804B53A @ case 67
	.4byte _0804B53A @ case 68
	.4byte _0804B53A @ case 69
	.4byte _0804B53A @ case 70
	.4byte _0804B53A @ case 71
	.4byte _0804B53A @ case 72
	.4byte _0804B53A @ case 73
	.4byte _0804B53A @ case 74
	.4byte _0804B53A @ case 75
	.4byte _0804B53A @ case 76
	.4byte _0804B53A @ case 77
	.4byte _0804B53A @ case 78
	.4byte _0804B53A @ case 79
	.4byte _0804B53A @ case 80
	.4byte _0804B53A @ case 81
	.4byte _0804B53A @ case 82
	.4byte _0804B53A @ case 83
	.4byte _0804B53A @ case 84
	.4byte _0804B53A @ case 85
	.4byte _0804B53A @ case 86
	.4byte _0804B51A @ case 87
	.4byte _0804B51E @ case 88
	.4byte _0804B524 @ case 89
	.4byte _0804B528 @ case 90
	.4byte _0804B52E @ case 91
_0804B4E0:
	bl GenesisInit
	b _0804B53A
_0804B4E6:
	bl GenesisIdleInit
_0804B4EA:
	bl GenesisIdle
	b _0804B53A
_0804B4F0:
	bl GensisWaitingInit
_0804B4F4:
	bl GenesisWaiting
	b _0804B53A
_0804B4FA:
	bl GenesisReachedWallInit
_0804B4FE:
	bl GenesisReachedWall
	b _0804B53A
_0804B504:
	bl GenesisTurningAroundInit
_0804B508:
	bl GenesisTurningAround
	b _0804B53A
_0804B50E:
	bl GenesisTurningAroundSecondPart
	b _0804B53A
_0804B514:
	bl GenesisSpitting
	b _0804B53A
_0804B51A:
	bl SpriteDyingInit
_0804B51E:
	bl SpriteDying
	b _0804B53A
_0804B524:
	bl GenesisInit
_0804B528:
	bl SpriteSpawningFromX
	b _0804B53A
_0804B52E:
	bl XParasiteInit
	ldr r1, _0804B540 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
_0804B53A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804B540: .4byte gCurrentSprite

	thumb_func_start GenesisSpit
GenesisSpit: @ 0x0804B544
	push {lr}
	ldr r0, _0804B55C @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x37
	bls _0804B552
	b _0804B65E
_0804B552:
	lsls r0, r0, #2
	ldr r1, _0804B560 @ =_0804B564
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B55C: .4byte gCurrentSprite
_0804B560: .4byte _0804B564
_0804B564: @ jump table
	.4byte _0804B644 @ case 0
	.4byte _0804B65E @ case 1
	.4byte _0804B64A @ case 2
	.4byte _0804B65E @ case 3
	.4byte _0804B65E @ case 4
	.4byte _0804B65E @ case 5
	.4byte _0804B65E @ case 6
	.4byte _0804B650 @ case 7
	.4byte _0804B654 @ case 8
	.4byte _0804B65E @ case 9
	.4byte _0804B65E @ case 10
	.4byte _0804B65E @ case 11
	.4byte _0804B65E @ case 12
	.4byte _0804B65E @ case 13
	.4byte _0804B65E @ case 14
	.4byte _0804B65E @ case 15
	.4byte _0804B65E @ case 16
	.4byte _0804B65E @ case 17
	.4byte _0804B65E @ case 18
	.4byte _0804B65E @ case 19
	.4byte _0804B65E @ case 20
	.4byte _0804B65E @ case 21
	.4byte _0804B65A @ case 22
	.4byte _0804B65E @ case 23
	.4byte _0804B65E @ case 24
	.4byte _0804B65E @ case 25
	.4byte _0804B65E @ case 26
	.4byte _0804B65E @ case 27
	.4byte _0804B65E @ case 28
	.4byte _0804B65E @ case 29
	.4byte _0804B65E @ case 30
	.4byte _0804B65E @ case 31
	.4byte _0804B65E @ case 32
	.4byte _0804B65E @ case 33
	.4byte _0804B65E @ case 34
	.4byte _0804B65E @ case 35
	.4byte _0804B65E @ case 36
	.4byte _0804B65E @ case 37
	.4byte _0804B65E @ case 38
	.4byte _0804B65E @ case 39
	.4byte _0804B65E @ case 40
	.4byte _0804B65E @ case 41
	.4byte _0804B65E @ case 42
	.4byte _0804B65E @ case 43
	.4byte _0804B65E @ case 44
	.4byte _0804B65E @ case 45
	.4byte _0804B65E @ case 46
	.4byte _0804B65E @ case 47
	.4byte _0804B65E @ case 48
	.4byte _0804B65E @ case 49
	.4byte _0804B65E @ case 50
	.4byte _0804B65E @ case 51
	.4byte _0804B65E @ case 52
	.4byte _0804B65E @ case 53
	.4byte _0804B65E @ case 54
	.4byte _0804B650 @ case 55
_0804B644:
	bl GenesisSpitInit
	b _0804B65E
_0804B64A:
	bl GenesisSpitHanging
	b _0804B65E
_0804B650:
	bl GenesisSpitSplashingInit
_0804B654:
	bl GenesisSpitSplashing
	b _0804B65E
_0804B65A:
	bl CurrentSpriteFalling
_0804B65E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start PuyoInit
PuyoInit: @ 0x0804B664
	push {r4, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0804B690 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804B694
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804B694
	strh r0, [r2]
	b _0804B708
	.align 2, 0
_0804B690: .4byte gCurrentSprite
_0804B694:
	bl MakeSpriteFaceSamusXFlip
	ldr r0, _0804B6F4 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x27
	movs r3, #0
	movs r1, #0x10
	strb r1, [r0]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r2, #0
	ldr r1, _0804B6F8 @ =0x0000FFE0
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	ldr r0, _0804B6FC @ =0x0837CE44
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r2, _0804B700 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r1, ip
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	subs r1, #1
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0804B704
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0804B708
	.align 2, 0
_0804B6F4: .4byte gCurrentSprite
_0804B6F8: .4byte 0x0000FFE0
_0804B6FC: .4byte 0x0837CE44
_0804B700: .4byte sPrimarySpriteStats
_0804B704:
	movs r0, #1
	strb r0, [r1]
_0804B708:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start PuyoFallingInit
PuyoFallingInit: @ 0x0804B710
	ldr r3, _0804B72C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	ldr r0, _0804B730 @ =0x0837CE44
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_0804B72C: .4byte gCurrentSprite
_0804B730: .4byte 0x0837CE44

	thumb_func_start PuyoIdleInit
PuyoIdleInit: @ 0x0804B734
	ldr r1, _0804B74C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0804B750 @ =0x0837CE6C
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804B74C: .4byte gCurrentSprite
_0804B750: .4byte 0x0837CE6C

	thumb_func_start PuyoIdle
PuyoIdle: @ 0x0804B754
	push {r4, r5, r6, lr}
	ldr r1, _0804B794 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _0804B766
	b _0804B894
_0804B766:
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804B780
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0804B780
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0804B780
	ldr r0, _0804B798 @ =0x000001C3
	bl CheckPlayNotAlreadyPlayingSound
_0804B780:
	bl unk_1129c
	ldr r0, _0804B79C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804B7A0
	ldr r0, _0804B794 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	b _0804B892
	.align 2, 0
_0804B794: .4byte gCurrentSprite
_0804B798: .4byte 0x000001C3
_0804B79C: .4byte gPreviousVerticalCollisionCheck
_0804B7A0:
	ldr r4, _0804B7CC @ =gCurrentSprite
	ldrh r1, [r4]
	movs r6, #0x40
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804B7D4
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804B7D0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804B7FC
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x40
	b _0804B7EE
	.align 2, 0
_0804B7CC: .4byte gCurrentSprite
_0804B7D0: .4byte gPreviousCollisionCheck
_0804B7D4:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804B80C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804B7FC
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x40
_0804B7EE:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0804B810
_0804B7FC:
	ldrh r0, [r4]
	eors r0, r6
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	b _0804B894
	.align 2, 0
_0804B80C: .4byte gPreviousCollisionCheck
_0804B810:
	ldr r1, _0804B824 @ =gCurrentSprite
	ldrh r2, [r1, #0x16]
	subs r0, r2, #4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r4, r1, #0
	cmp r0, #1
	bhi _0804B828
	movs r3, #4
	b _0804B830
	.align 2, 0
_0804B824: .4byte gCurrentSprite
_0804B828:
	movs r3, #0
	cmp r2, #3
	bne _0804B830
	movs r3, #8
_0804B830:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804B840
	ldrh r0, [r4, #4]
	adds r0, r3, r0
	b _0804B844
_0804B840:
	ldrh r0, [r4, #4]
	subs r0, r0, r3
_0804B844:
	strh r0, [r4, #4]
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B894
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #4
	bne _0804B870
	ldr r1, _0804B868 @ =gCurrentSprite
	ldrh r2, [r1]
	ldr r0, _0804B86C @ =0x0000FFBF
	ands r0, r2
	b _0804B87C
	.align 2, 0
_0804B868: .4byte gCurrentSprite
_0804B86C: .4byte 0x0000FFBF
_0804B870:
	cmp r0, #8
	bne _0804B88C
	ldr r1, _0804B888 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #0x40
	orrs r0, r2
_0804B87C:
	strh r0, [r1]
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
	b _0804B894
	.align 2, 0
_0804B888: .4byte gCurrentSprite
_0804B88C:
	ldr r0, _0804B89C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
_0804B892:
	strb r1, [r0]
_0804B894:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804B89C: .4byte gCurrentSprite

	thumb_func_start PuyoWaitingInit
PuyoWaitingInit: @ 0x0804B8A0
	ldr r1, _0804B8C4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #8
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804B8C8 @ =0x0837CE44
	str r0, [r1, #0x18]
	ldr r0, _0804B8CC @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #2
	adds r0, #1
	adds r1, #0x2e
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804B8C4: .4byte gCurrentSprite
_0804B8C8: .4byte 0x0837CE44
_0804B8CC: .4byte gSpriteRandomNumber

	thumb_func_start PuyoWaiting
PuyoWaiting: @ 0x0804B8D0
	push {lr}
	bl unk_1129c
	ldr r0, _0804B8E8 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804B8F0
	ldr r0, _0804B8EC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x15
	strb r1, [r0]
	b _0804B91C
	.align 2, 0
_0804B8E8: .4byte gPreviousVerticalCollisionCheck
_0804B8EC: .4byte gCurrentSprite
_0804B8F0:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B91C
	ldr r3, _0804B920 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0804B91C
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	ldr r0, _0804B924 @ =0x0837CE6C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
_0804B91C:
	pop {r0}
	bx r0
	.align 2, 0
_0804B920: .4byte gCurrentSprite
_0804B924: .4byte 0x0837CE6C

	thumb_func_start PuyoJumpWarningInit
PuyoJumpWarningInit: @ 0x0804B928
	ldr r1, _0804B940 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804B944 @ =0x0837CEA4
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0804B940: .4byte gCurrentSprite
_0804B944: .4byte 0x0837CEA4

	thumb_func_start PuyoJumpWarning
PuyoJumpWarning: @ 0x0804B948
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804B980
	ldr r3, _0804B984 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2c
	strb r0, [r1]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	ldr r0, _0804B988 @ =0x0837CEC4
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	ldrh r1, [r3]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804B980
	movs r0, #0xe2
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804B980:
	pop {r0}
	bx r0
	.align 2, 0
_0804B984: .4byte gCurrentSprite
_0804B988: .4byte 0x0837CEC4

	thumb_func_start PuyoJumpingUp
PuyoJumpingUp: @ 0x0804B98C
	push {r4, r5, r6, r7, lr}
	ldr r4, _0804B9B4 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804B9B8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0804B9BC
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2e
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	strb r2, [r0]
	b _0804BA9A
	.align 2, 0
_0804B9B4: .4byte gCurrentSprite
_0804B9B8: .4byte gPreviousCollisionCheck
_0804B9BC:
	adds r3, r4, #0
	adds r3, #0x31
	ldrb r0, [r3]
	cmp r0, #0x1e
	bls _0804B9D4
	adds r0, r4, #0
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x2e
	strb r1, [r0]
	strb r2, [r3]
	b _0804BA0A
_0804B9D4:
	ldrb r2, [r3]
	ldr r6, _0804B9F8 @ =0x0837C578
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0804B9FC @ =0x00007FFF
	cmp r1, r0
	bne _0804BA00
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804BA08
	.align 2, 0
_0804B9F8: .4byte 0x0837C578
_0804B9FC: .4byte 0x00007FFF
_0804BA00:
	adds r0, r2, #1
	strb r0, [r3]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
_0804BA08:
	strh r0, [r4, #2]
_0804BA0A:
	movs r4, #0
	ldr r2, _0804BA34 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804BA3C
	ldrh r0, [r2, #2]
	subs r0, #8
	ldrh r1, [r2, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804BA38 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	movs r1, #0xf
	ands r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r4, r0, #0x1f
	b _0804BA56
	.align 2, 0
_0804BA34: .4byte gCurrentSprite
_0804BA38: .4byte gPreviousCollisionCheck
_0804BA3C:
	ldrh r0, [r2, #2]
	subs r0, #8
	ldrh r1, [r2, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804BA74 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0804BA56
	movs r4, #1
_0804BA56:
	cmp r4, #0
	beq _0804BA7C
	ldr r2, _0804BA78 @ =gCurrentSprite
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	movs r3, #0
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x2e
	strb r0, [r1]
	adds r2, #0x31
	strb r3, [r2]
	b _0804BA9A
	.align 2, 0
_0804BA74: .4byte gPreviousCollisionCheck
_0804BA78: .4byte gCurrentSprite
_0804BA7C:
	ldr r2, _0804BA90 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804BA94
	ldrh r0, [r2, #4]
	adds r0, #2
	b _0804BA98
	.align 2, 0
_0804BA90: .4byte gCurrentSprite
_0804BA94:
	ldrh r0, [r2, #4]
	subs r0, #2
_0804BA98:
	strh r0, [r2, #4]
_0804BA9A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start PuyoJumpingDown
PuyoJumpingDown: @ 0x0804BAA0
	push {r4, r5, r6, lr}
	ldr r4, _0804BAE0 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0804BAE4 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804BAF0
	movs r2, #0
	movs r3, #0
	strh r1, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x30
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldr r0, _0804BAE8 @ =0x0837CED4
	str r0, [r4, #0x18]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804BB2C
	ldr r0, _0804BAEC @ =0x000001C5
	bl CheckPlayNotAlreadyPlayingSound
	b _0804BB2C
	.align 2, 0
_0804BAE0: .4byte gCurrentSprite
_0804BAE4: .4byte gPreviousVerticalCollisionCheck
_0804BAE8: .4byte 0x0837CED4
_0804BAEC: .4byte 0x000001C5
_0804BAF0:
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0804BB18 @ =0x0837C5B8
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0804BB1C @ =0x00007FFF
	cmp r1, r0
	bne _0804BB20
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804BB2A
	.align 2, 0
_0804BB18: .4byte 0x0837C5B8
_0804BB1C: .4byte 0x00007FFF
_0804BB20:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, r0, r3
_0804BB2A:
	strh r0, [r4, #2]
_0804BB2C:
	movs r4, #0
	ldr r2, _0804BB58 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804BB60
	ldrh r0, [r2, #2]
	subs r0, #8
	ldrh r1, [r2, #4]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804BB5C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	movs r1, #0xf
	ands r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r4, r0, #0x1f
	b _0804BB7A
	.align 2, 0
_0804BB58: .4byte gCurrentSprite
_0804BB5C: .4byte gPreviousCollisionCheck
_0804BB60:
	ldrh r0, [r2, #2]
	subs r0, #8
	ldrh r1, [r2, #4]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804BB98 @ =gPreviousCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0804BB7A
	movs r4, #1
_0804BB7A:
	ldr r2, _0804BB9C @ =gCurrentSprite
	cmp r4, #0
	beq _0804BB88
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0804BB88:
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804BBA0
	ldrh r0, [r2, #4]
	adds r0, #2
	b _0804BBA4
	.align 2, 0
_0804BB98: .4byte gPreviousCollisionCheck
_0804BB9C: .4byte gCurrentSprite
_0804BBA0:
	ldrh r0, [r2, #4]
	subs r0, #2
_0804BBA4:
	strh r0, [r2, #4]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start PuyoLanding
PuyoLanding: @ 0x0804BBAC
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804BBBE
	ldr r0, _0804BBC4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
_0804BBBE:
	pop {r0}
	bx r0
	.align 2, 0
_0804BBC4: .4byte gCurrentSprite

	thumb_func_start Puyo
Puyo: @ 0x0804BBC8
	push {r4, lr}
	ldr r4, _0804BBF4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804BBE2
	movs r0, #0xe3
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804BBE2:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804BBF8
	bl SpriteUpdateFreezeTimer
	b _0804BDE4
	.align 2, 0
_0804BBF4: .4byte gCurrentSprite
_0804BBF8:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804BC04
	b _0804BDE4
_0804BC04:
	lsls r0, r0, #2
	ldr r1, _0804BC10 @ =_0804BC14
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804BC10: .4byte _0804BC14
_0804BC14: @ jump table
	.4byte _0804BD84 @ case 0
	.4byte _0804BD8A @ case 1
	.4byte _0804BD8E @ case 2
	.4byte _0804BDE4 @ case 3
	.4byte _0804BDE4 @ case 4
	.4byte _0804BDE4 @ case 5
	.4byte _0804BDE4 @ case 6
	.4byte _0804BD94 @ case 7
	.4byte _0804BD98 @ case 8
	.4byte _0804BDE4 @ case 9
	.4byte _0804BDE4 @ case 10
	.4byte _0804BDE4 @ case 11
	.4byte _0804BDE4 @ case 12
	.4byte _0804BDE4 @ case 13
	.4byte _0804BDE4 @ case 14
	.4byte _0804BDE4 @ case 15
	.4byte _0804BDE4 @ case 16
	.4byte _0804BDE4 @ case 17
	.4byte _0804BDE4 @ case 18
	.4byte _0804BDE4 @ case 19
	.4byte _0804BDE4 @ case 20
	.4byte _0804BDBA @ case 21
	.4byte _0804BDBE @ case 22
	.4byte _0804BDE4 @ case 23
	.4byte _0804BDE4 @ case 24
	.4byte _0804BDE4 @ case 25
	.4byte _0804BDE4 @ case 26
	.4byte _0804BDE4 @ case 27
	.4byte _0804BDE4 @ case 28
	.4byte _0804BDE4 @ case 29
	.4byte _0804BDE4 @ case 30
	.4byte _0804BDE4 @ case 31
	.4byte _0804BDE4 @ case 32
	.4byte _0804BDE4 @ case 33
	.4byte _0804BDE4 @ case 34
	.4byte _0804BDE4 @ case 35
	.4byte _0804BDE4 @ case 36
	.4byte _0804BDE4 @ case 37
	.4byte _0804BDE4 @ case 38
	.4byte _0804BDE4 @ case 39
	.4byte _0804BDE4 @ case 40
	.4byte _0804BD9E @ case 41
	.4byte _0804BDA2 @ case 42
	.4byte _0804BDE4 @ case 43
	.4byte _0804BDA8 @ case 44
	.4byte _0804BDE4 @ case 45
	.4byte _0804BDAE @ case 46
	.4byte _0804BDE4 @ case 47
	.4byte _0804BDB4 @ case 48
	.4byte _0804BDE4 @ case 49
	.4byte _0804BDE4 @ case 50
	.4byte _0804BDE4 @ case 51
	.4byte _0804BDE4 @ case 52
	.4byte _0804BDE4 @ case 53
	.4byte _0804BDE4 @ case 54
	.4byte _0804BDE4 @ case 55
	.4byte _0804BDE4 @ case 56
	.4byte _0804BDE4 @ case 57
	.4byte _0804BDE4 @ case 58
	.4byte _0804BDE4 @ case 59
	.4byte _0804BDE4 @ case 60
	.4byte _0804BDE4 @ case 61
	.4byte _0804BDE4 @ case 62
	.4byte _0804BDE4 @ case 63
	.4byte _0804BDE4 @ case 64
	.4byte _0804BDE4 @ case 65
	.4byte _0804BDE4 @ case 66
	.4byte _0804BDE4 @ case 67
	.4byte _0804BDE4 @ case 68
	.4byte _0804BDE4 @ case 69
	.4byte _0804BDE4 @ case 70
	.4byte _0804BDE4 @ case 71
	.4byte _0804BDE4 @ case 72
	.4byte _0804BDE4 @ case 73
	.4byte _0804BDE4 @ case 74
	.4byte _0804BDE4 @ case 75
	.4byte _0804BDE4 @ case 76
	.4byte _0804BDE4 @ case 77
	.4byte _0804BDE4 @ case 78
	.4byte _0804BDE4 @ case 79
	.4byte _0804BDE4 @ case 80
	.4byte _0804BDE4 @ case 81
	.4byte _0804BDE4 @ case 82
	.4byte _0804BDE4 @ case 83
	.4byte _0804BDE4 @ case 84
	.4byte _0804BDE4 @ case 85
	.4byte _0804BDE4 @ case 86
	.4byte _0804BDC4 @ case 87
	.4byte _0804BDC8 @ case 88
	.4byte _0804BDCE @ case 89
	.4byte _0804BDD2 @ case 90
	.4byte _0804BDD8 @ case 91
_0804BD84:
	bl PuyoInit
	b _0804BDE4
_0804BD8A:
	bl PuyoIdleInit
_0804BD8E:
	bl PuyoIdle
	b _0804BDE4
_0804BD94:
	bl PuyoWaitingInit
_0804BD98:
	bl PuyoWaiting
	b _0804BDE4
_0804BD9E:
	bl PuyoJumpWarningInit
_0804BDA2:
	bl PuyoJumpWarning
	b _0804BDE4
_0804BDA8:
	bl PuyoJumpingUp
	b _0804BDE4
_0804BDAE:
	bl PuyoJumpingDown
	b _0804BDE4
_0804BDB4:
	bl PuyoLanding
	b _0804BDE4
_0804BDBA:
	bl PuyoFallingInit
_0804BDBE:
	bl CurrentSpriteFalling
	b _0804BDE4
_0804BDC4:
	bl SpriteDyingInit
_0804BDC8:
	bl SpriteDying
	b _0804BDE4
_0804BDCE:
	bl PuyoInit
_0804BDD2:
	bl SpriteSpawningFromX
	b _0804BDE4
_0804BDD8:
	bl XParasiteInit
	ldr r1, _0804BDEC @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
_0804BDE4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804BDEC: .4byte gCurrentSprite

	thumb_func_start FakeTankInit
FakeTankInit: @ 0x0804BDF0
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0804BE1C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804BE20
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804BE20
	strh r0, [r2]
	b _0804BE98
	.align 2, 0
_0804BE1C: .4byte gCurrentSprite
_0804BE20:
	ldr r0, _0804BE88 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x27
	movs r4, #0
	movs r2, #0x10
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x28
	movs r3, #8
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	strb r2, [r0]
	movs r5, #0
	ldr r0, _0804BE8C @ =0x0000FFC0
	mov r1, ip
	strh r0, [r1, #0xa]
	strh r4, [r1, #0xc]
	adds r0, #0x20
	strh r0, [r1, #0xe]
	movs r0, #0x20
	strh r0, [r1, #0x10]
	strb r5, [r1, #0x1c]
	strh r4, [r1, #0x16]
	ldr r2, _0804BE90 @ =sPrimarySpriteStats
	ldrb r1, [r1, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	adds r1, #0x34
	ldrb r0, [r1]
	orrs r3, r0
	strb r3, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r5, [r0]
	subs r1, #0x10
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0804BE94
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	mov r1, ip
	strh r0, [r1, #6]
	b _0804BE98
	.align 2, 0
_0804BE88: .4byte gCurrentSprite
_0804BE8C: .4byte 0x0000FFC0
_0804BE90: .4byte sPrimarySpriteStats
_0804BE94:
	movs r0, #1
	strb r0, [r1]
_0804BE98:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FakeTankIdleInit
FakeTankIdleInit: @ 0x0804BEA0
	ldr r1, _0804BEB4 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	bx lr
	.align 2, 0
_0804BEB4: .4byte gCurrentSprite

	thumb_func_start FakeTankIdle
FakeTankIdle: @ 0x0804BEB8
	push {r4, lr}
	ldr r4, _0804BEE4 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0804BEDE
	movs r0, #0xc0
	movs r1, #0xc0
	bl CheckSamusNearSpriteLeftRight
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804BEDE
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_0804BEDE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804BEE4: .4byte gCurrentSprite

	thumb_func_start FakeTankWakingUpInit
FakeTankWakingUpInit: @ 0x0804BEE8
	ldr r3, _0804BF1C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x18
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	adds r2, #0x10
	ldrb r1, [r2]
	movs r0, #0xf7
	ands r0, r1
	strb r0, [r2]
	ldr r0, _0804BF20 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804BF1C: .4byte gCurrentSprite
_0804BF20: .4byte gIoRegisters

	thumb_func_start FakeTankWakingUp
FakeTankWakingUp: @ 0x0804BF24
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804BF36
	ldr r0, _0804BF3C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	strb r1, [r0]
_0804BF36:
	pop {r0}
	bx r0
	.align 2, 0
_0804BF3C: .4byte gCurrentSprite

	thumb_func_start FakeTankFlyingInit
FakeTankFlyingInit: @ 0x0804BF40
	ldr r3, _0804BF64 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x24
	movs r1, #0
	movs r0, #0x1a
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x31
	strb r1, [r0]
	adds r2, #0xa
	movs r0, #0x3c
	strb r0, [r2]
	adds r2, #1
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	bx lr
	.align 2, 0
_0804BF64: .4byte gCurrentSprite

	thumb_func_start FakeTankFlying
FakeTankFlying: @ 0x0804BF68
	push {r4, r5, r6, lr}
	ldr r2, _0804BF84 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804BF88
	subs r0, #1
	strb r0, [r1]
	ldrh r0, [r2, #2]
	subs r0, #4
	strh r0, [r2, #2]
	b _0804BFC8
	.align 2, 0
_0804BF84: .4byte gCurrentSprite
_0804BF88:
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _0804BFD0 @ =0x0837CEEC
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0804BFD4 @ =0x00007FFF
	cmp r1, r0
	bne _0804BFA6
	ldrh r4, [r5]
	movs r3, #0
_0804BFA6:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
	strh r0, [r2, #2]
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804BFC8
	subs r1, #0xb
	movs r0, #0x1b
	strb r0, [r1]
_0804BFC8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804BFD0: .4byte 0x0837CEEC
_0804BFD4: .4byte 0x00007FFF

	thumb_func_start FakeTankFlyingAwayInit
FakeTankFlyingAwayInit: @ 0x0804BFD8
	ldr r0, _0804C008 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x1c
	strb r0, [r1]
	movs r3, #0
	movs r0, #0x96
	lsls r0, r0, #1
	mov r1, ip
	strh r0, [r1, #6]
	strh r2, [r1, #8]
	mov r0, ip
	adds r0, #0x2f
	strb r3, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r3, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804C008: .4byte gCurrentSprite

	thumb_func_start FakeTankFlyingAway
FakeTankFlyingAway: @ 0x0804C00C
	push {lr}
	sub sp, #4
	ldr r0, _0804C028 @ =gXParasiteTargetYPosition
	ldrh r3, [r0]
	ldr r0, _0804C02C @ =gXParasiteTargetXPosition
	ldrh r2, [r0]
	ldr r1, _0804C030 @ =gCurrentSprite
	ldrh r0, [r1, #8]
	cmp r0, #1
	beq _0804C034
	cmp r0, #3
	beq _0804C04E
	b _0804C070
	.align 2, 0
_0804C028: .4byte gXParasiteTargetYPosition
_0804C02C: .4byte gXParasiteTargetXPosition
_0804C030: .4byte gCurrentSprite
_0804C034:
	adds r0, r3, #0
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0804C068
	adds r0, r2, #0
	subs r0, #0x48
	b _0804C06C
_0804C04E:
	adds r0, r3, #0
	adds r0, #0x48
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804C068
	adds r0, r2, #0
	subs r0, #0x48
	b _0804C06C
_0804C068:
	adds r0, r2, #0
	adds r0, #0x48
_0804C06C:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
_0804C070:
	movs r0, #2
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r2, #0
	movs r2, #0x10
	movs r3, #0x18
	bl unk_136ac
	ldr r1, _0804C09C @ =gCurrentSprite
	ldrh r0, [r1, #6]
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0804C094
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_0804C094:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0804C09C: .4byte gCurrentSprite

	thumb_func_start FakeTankLeaving
FakeTankLeaving: @ 0x0804C0A0
	push {r4, lr}
	ldr r0, _0804C0CC @ =gCurrentSprite
	adds r3, r0, #0
	adds r3, #0x30
	ldrb r2, [r3]
	adds r4, r0, #0
	cmp r2, #0xc7
	bhi _0804C0B4
	adds r0, r2, #1
	strb r0, [r3]
_0804C0B4:
	ldrb r0, [r3]
	lsrs r2, r0, #3
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804C0D0
	ldrh r0, [r4, #4]
	adds r0, r0, r2
	b _0804C0D4
	.align 2, 0
_0804C0CC: .4byte gCurrentSprite
_0804C0D0:
	ldrh r0, [r4, #4]
	subs r0, r0, r2
_0804C0D4:
	strh r0, [r4, #4]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0xc7
	bhi _0804C0E4
	adds r0, #1
	strb r0, [r1]
_0804C0E4:
	ldrb r0, [r1]
	lsrs r2, r0, #3
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0804C0FA
	ldrh r0, [r4, #2]
	adds r0, r0, r2
	b _0804C0FE
_0804C0FA:
	ldrh r0, [r4, #2]
	subs r0, r0, r2
_0804C0FE:
	strh r0, [r4, #2]
	ldrh r1, [r4]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804C110
	strh r0, [r4]
_0804C110:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FakeEnergyTank
FakeEnergyTank: @ 0x0804C118
	push {lr}
	ldr r0, _0804C130 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x32
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0804C134
	bl SpriteUpdateFreezeTimer
	b _0804C340
	.align 2, 0
_0804C130: .4byte gCurrentSprite
_0804C134:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804C140
	b _0804C340
_0804C140:
	lsls r0, r0, #2
	ldr r1, _0804C14C @ =_0804C150
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C14C: .4byte _0804C150
_0804C150: @ jump table
	.4byte _0804C2C0 @ case 0
	.4byte _0804C2D4 @ case 1
	.4byte _0804C2DC @ case 2
	.4byte _0804C340 @ case 3
	.4byte _0804C340 @ case 4
	.4byte _0804C340 @ case 5
	.4byte _0804C340 @ case 6
	.4byte _0804C340 @ case 7
	.4byte _0804C340 @ case 8
	.4byte _0804C340 @ case 9
	.4byte _0804C340 @ case 10
	.4byte _0804C340 @ case 11
	.4byte _0804C340 @ case 12
	.4byte _0804C340 @ case 13
	.4byte _0804C340 @ case 14
	.4byte _0804C340 @ case 15
	.4byte _0804C340 @ case 16
	.4byte _0804C340 @ case 17
	.4byte _0804C340 @ case 18
	.4byte _0804C340 @ case 19
	.4byte _0804C340 @ case 20
	.4byte _0804C340 @ case 21
	.4byte _0804C340 @ case 22
	.4byte _0804C2E8 @ case 23
	.4byte _0804C2F0 @ case 24
	.4byte _0804C2FC @ case 25
	.4byte _0804C304 @ case 26
	.4byte _0804C310 @ case 27
	.4byte _0804C314 @ case 28
	.4byte _0804C340 @ case 29
	.4byte _0804C31A @ case 30
	.4byte _0804C340 @ case 31
	.4byte _0804C340 @ case 32
	.4byte _0804C340 @ case 33
	.4byte _0804C340 @ case 34
	.4byte _0804C340 @ case 35
	.4byte _0804C340 @ case 36
	.4byte _0804C340 @ case 37
	.4byte _0804C340 @ case 38
	.4byte _0804C340 @ case 39
	.4byte _0804C340 @ case 40
	.4byte _0804C340 @ case 41
	.4byte _0804C340 @ case 42
	.4byte _0804C340 @ case 43
	.4byte _0804C340 @ case 44
	.4byte _0804C340 @ case 45
	.4byte _0804C340 @ case 46
	.4byte _0804C340 @ case 47
	.4byte _0804C340 @ case 48
	.4byte _0804C340 @ case 49
	.4byte _0804C340 @ case 50
	.4byte _0804C340 @ case 51
	.4byte _0804C340 @ case 52
	.4byte _0804C340 @ case 53
	.4byte _0804C340 @ case 54
	.4byte _0804C340 @ case 55
	.4byte _0804C340 @ case 56
	.4byte _0804C340 @ case 57
	.4byte _0804C340 @ case 58
	.4byte _0804C340 @ case 59
	.4byte _0804C340 @ case 60
	.4byte _0804C340 @ case 61
	.4byte _0804C340 @ case 62
	.4byte _0804C340 @ case 63
	.4byte _0804C340 @ case 64
	.4byte _0804C340 @ case 65
	.4byte _0804C340 @ case 66
	.4byte _0804C340 @ case 67
	.4byte _0804C340 @ case 68
	.4byte _0804C340 @ case 69
	.4byte _0804C340 @ case 70
	.4byte _0804C340 @ case 71
	.4byte _0804C340 @ case 72
	.4byte _0804C340 @ case 73
	.4byte _0804C340 @ case 74
	.4byte _0804C340 @ case 75
	.4byte _0804C340 @ case 76
	.4byte _0804C340 @ case 77
	.4byte _0804C340 @ case 78
	.4byte _0804C340 @ case 79
	.4byte _0804C340 @ case 80
	.4byte _0804C340 @ case 81
	.4byte _0804C340 @ case 82
	.4byte _0804C340 @ case 83
	.4byte _0804C340 @ case 84
	.4byte _0804C340 @ case 85
	.4byte _0804C340 @ case 86
	.4byte _0804C320 @ case 87
	.4byte _0804C324 @ case 88
	.4byte _0804C32A @ case 89
	.4byte _0804C32E @ case 90
	.4byte _0804C334 @ case 91
_0804C2C0:
	bl FakeTankInit
	ldr r1, _0804C2CC @ =gCurrentSprite
	ldr r0, _0804C2D0 @ =0x0837D85C
	str r0, [r1, #0x18]
	b _0804C340
	.align 2, 0
_0804C2CC: .4byte gCurrentSprite
_0804C2D0: .4byte 0x0837D85C
_0804C2D4:
	ldr r0, _0804C2E4 @ =0x0837D85C
	str r0, [r2, #0x18]
	bl FakeTankIdleInit
_0804C2DC:
	bl FakeTankIdle
	b _0804C340
	.align 2, 0
_0804C2E4: .4byte 0x0837D85C
_0804C2E8:
	ldr r0, _0804C2F8 @ =0x0837D884
	str r0, [r2, #0x18]
	bl FakeTankWakingUpInit
_0804C2F0:
	bl FakeTankWakingUp
	b _0804C340
	.align 2, 0
_0804C2F8: .4byte 0x0837D884
_0804C2FC:
	ldr r0, _0804C30C @ =0x0837D8BC
	str r0, [r2, #0x18]
	bl FakeTankFlyingInit
_0804C304:
	bl FakeTankFlying
	b _0804C340
	.align 2, 0
_0804C30C: .4byte 0x0837D8BC
_0804C310:
	bl FakeTankFlyingAwayInit
_0804C314:
	bl FakeTankFlyingAway
	b _0804C340
_0804C31A:
	bl FakeTankLeaving
	b _0804C340
_0804C320:
	bl SpriteDyingInit
_0804C324:
	bl SpriteDying
	b _0804C340
_0804C32A:
	bl FakeTankInit
_0804C32E:
	bl SpriteSpawningFromX
	b _0804C340
_0804C334:
	bl XParasiteInit
	ldr r1, _0804C344 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
_0804C340:
	pop {r0}
	bx r0
	.align 2, 0
_0804C344: .4byte gCurrentSprite

	thumb_func_start FakeMissileTank
FakeMissileTank: @ 0x0804C348
	push {lr}
	ldr r0, _0804C360 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x32
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0804C364
	bl SpriteUpdateFreezeTimer
	b _0804C570
	.align 2, 0
_0804C360: .4byte gCurrentSprite
_0804C364:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804C370
	b _0804C570
_0804C370:
	lsls r0, r0, #2
	ldr r1, _0804C37C @ =_0804C380
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C37C: .4byte _0804C380
_0804C380: @ jump table
	.4byte _0804C4F0 @ case 0
	.4byte _0804C504 @ case 1
	.4byte _0804C50C @ case 2
	.4byte _0804C570 @ case 3
	.4byte _0804C570 @ case 4
	.4byte _0804C570 @ case 5
	.4byte _0804C570 @ case 6
	.4byte _0804C570 @ case 7
	.4byte _0804C570 @ case 8
	.4byte _0804C570 @ case 9
	.4byte _0804C570 @ case 10
	.4byte _0804C570 @ case 11
	.4byte _0804C570 @ case 12
	.4byte _0804C570 @ case 13
	.4byte _0804C570 @ case 14
	.4byte _0804C570 @ case 15
	.4byte _0804C570 @ case 16
	.4byte _0804C570 @ case 17
	.4byte _0804C570 @ case 18
	.4byte _0804C570 @ case 19
	.4byte _0804C570 @ case 20
	.4byte _0804C570 @ case 21
	.4byte _0804C570 @ case 22
	.4byte _0804C518 @ case 23
	.4byte _0804C520 @ case 24
	.4byte _0804C52C @ case 25
	.4byte _0804C534 @ case 26
	.4byte _0804C540 @ case 27
	.4byte _0804C544 @ case 28
	.4byte _0804C570 @ case 29
	.4byte _0804C54A @ case 30
	.4byte _0804C570 @ case 31
	.4byte _0804C570 @ case 32
	.4byte _0804C570 @ case 33
	.4byte _0804C570 @ case 34
	.4byte _0804C570 @ case 35
	.4byte _0804C570 @ case 36
	.4byte _0804C570 @ case 37
	.4byte _0804C570 @ case 38
	.4byte _0804C570 @ case 39
	.4byte _0804C570 @ case 40
	.4byte _0804C570 @ case 41
	.4byte _0804C570 @ case 42
	.4byte _0804C570 @ case 43
	.4byte _0804C570 @ case 44
	.4byte _0804C570 @ case 45
	.4byte _0804C570 @ case 46
	.4byte _0804C570 @ case 47
	.4byte _0804C570 @ case 48
	.4byte _0804C570 @ case 49
	.4byte _0804C570 @ case 50
	.4byte _0804C570 @ case 51
	.4byte _0804C570 @ case 52
	.4byte _0804C570 @ case 53
	.4byte _0804C570 @ case 54
	.4byte _0804C570 @ case 55
	.4byte _0804C570 @ case 56
	.4byte _0804C570 @ case 57
	.4byte _0804C570 @ case 58
	.4byte _0804C570 @ case 59
	.4byte _0804C570 @ case 60
	.4byte _0804C570 @ case 61
	.4byte _0804C570 @ case 62
	.4byte _0804C570 @ case 63
	.4byte _0804C570 @ case 64
	.4byte _0804C570 @ case 65
	.4byte _0804C570 @ case 66
	.4byte _0804C570 @ case 67
	.4byte _0804C570 @ case 68
	.4byte _0804C570 @ case 69
	.4byte _0804C570 @ case 70
	.4byte _0804C570 @ case 71
	.4byte _0804C570 @ case 72
	.4byte _0804C570 @ case 73
	.4byte _0804C570 @ case 74
	.4byte _0804C570 @ case 75
	.4byte _0804C570 @ case 76
	.4byte _0804C570 @ case 77
	.4byte _0804C570 @ case 78
	.4byte _0804C570 @ case 79
	.4byte _0804C570 @ case 80
	.4byte _0804C570 @ case 81
	.4byte _0804C570 @ case 82
	.4byte _0804C570 @ case 83
	.4byte _0804C570 @ case 84
	.4byte _0804C570 @ case 85
	.4byte _0804C570 @ case 86
	.4byte _0804C550 @ case 87
	.4byte _0804C554 @ case 88
	.4byte _0804C55A @ case 89
	.4byte _0804C55E @ case 90
	.4byte _0804C564 @ case 91
_0804C4F0:
	bl FakeTankInit
	ldr r1, _0804C4FC @ =gCurrentSprite
	ldr r0, _0804C500 @ =0x0837E214
	str r0, [r1, #0x18]
	b _0804C570
	.align 2, 0
_0804C4FC: .4byte gCurrentSprite
_0804C500: .4byte 0x0837E214
_0804C504:
	ldr r0, _0804C514 @ =0x0837E214
	str r0, [r2, #0x18]
	bl FakeTankIdleInit
_0804C50C:
	bl FakeTankIdle
	b _0804C570
	.align 2, 0
_0804C514: .4byte 0x0837E214
_0804C518:
	ldr r0, _0804C528 @ =0x0837E23C
	str r0, [r2, #0x18]
	bl FakeTankWakingUpInit
_0804C520:
	bl FakeTankWakingUp
	b _0804C570
	.align 2, 0
_0804C528: .4byte 0x0837E23C
_0804C52C:
	ldr r0, _0804C53C @ =0x0837E27C
	str r0, [r2, #0x18]
	bl FakeTankFlyingInit
_0804C534:
	bl FakeTankFlying
	b _0804C570
	.align 2, 0
_0804C53C: .4byte 0x0837E27C
_0804C540:
	bl FakeTankFlyingAwayInit
_0804C544:
	bl FakeTankFlyingAway
	b _0804C570
_0804C54A:
	bl FakeTankLeaving
	b _0804C570
_0804C550:
	bl SpriteDyingInit
_0804C554:
	bl SpriteDying
	b _0804C570
_0804C55A:
	bl FakeTankInit
_0804C55E:
	bl SpriteSpawningFromX
	b _0804C570
_0804C564:
	bl XParasiteInit
	ldr r1, _0804C574 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
_0804C570:
	pop {r0}
	bx r0
	.align 2, 0
_0804C574: .4byte gCurrentSprite

	thumb_func_start BigFlashingNumber
BigFlashingNumber: @ 0x0804C578
	push {r4, r5, r6, r7, lr}
	ldr r4, _0804C5FC @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r3, r4, #0
	adds r3, #0x24
	ldrb r6, [r3]
	cmp r6, #0
	bne _0804C65A
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	strb r6, [r0]
	adds r1, #2
	movs r0, #8
	strb r0, [r1]
	movs r2, #0
	ldr r1, _0804C600 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0x10
	strb r0, [r1]
	strb r2, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r5, #0xf
	ands r5, r0
	adds r7, r5, #0
	bl GetFlashingSectorNumber
	lsls r0, r0, #0x18
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r0, r1
	lsrs r0, r0, #0x18
	cmp r5, r0
	bne _0804C658
	cmp r5, #7
	bne _0804C608
	ldr r0, _0804C604 @ =0x0837EDFC
	str r0, [r4, #0x18]
	b _0804C65A
	.align 2, 0
_0804C5FC: .4byte gCurrentSprite
_0804C600: .4byte 0x0000FFFC
_0804C604: .4byte 0x0837EDFC
_0804C608:
	cmp r5, #8
	bne _0804C618
	ldr r0, _0804C614 @ =0x0837EE44
	str r0, [r4, #0x18]
	b _0804C65A
	.align 2, 0
_0804C614: .4byte 0x0837EE44
_0804C618:
	cmp r5, #9
	bne _0804C628
	ldr r0, _0804C624 @ =0x0837EE8C
	str r0, [r4, #0x18]
	b _0804C65A
	.align 2, 0
_0804C624: .4byte 0x0837EE8C
_0804C628:
	cmp r5, #0xa
	bne _0804C638
	ldr r0, _0804C634 @ =0x0837EED4
	str r0, [r4, #0x18]
	b _0804C65A
	.align 2, 0
_0804C634: .4byte 0x0837EED4
_0804C638:
	cmp r5, #0xb
	bne _0804C648
	ldr r0, _0804C644 @ =0x0837EF1C
	str r0, [r4, #0x18]
	b _0804C65A
	.align 2, 0
_0804C644: .4byte 0x0837EF1C
_0804C648:
	cmp r7, #0xc
	bne _0804C658
	ldr r0, _0804C654 @ =0x0837EF64
	str r0, [r4, #0x18]
	b _0804C65A
	.align 2, 0
_0804C654: .4byte 0x0837EF64
_0804C658:
	strh r6, [r4]
_0804C65A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start FlashingNumber
FlashingNumber: @ 0x0804C660
	push {r4, r5, r6, r7, lr}
	ldr r4, _0804C6E0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r6, [r5]
	cmp r6, #0
	bne _0804C73E
	ldrh r0, [r4, #4]
	adds r0, #0x20
	movs r3, #0
	strh r0, [r4, #4]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r0, r4, #0
	adds r0, #0x27
	movs r2, #0x10
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	ldr r1, _0804C6E4 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	subs r0, #3
	strb r2, [r0]
	strb r3, [r4, #0x1c]
	strh r6, [r4, #0x16]
	adds r0, #8
	ldrb r0, [r0]
	movs r5, #7
	ands r5, r0
	adds r7, r5, #0
	bl GetFlashingSectorNumber
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r5, r0
	bne _0804C73C
	cmp r5, #1
	bne _0804C6EC
	ldr r0, _0804C6E8 @ =0x0837F948
	str r0, [r4, #0x18]
	b _0804C73E
	.align 2, 0
_0804C6E0: .4byte gCurrentSprite
_0804C6E4: .4byte 0x0000FFFC
_0804C6E8: .4byte 0x0837F948
_0804C6EC:
	cmp r5, #2
	bne _0804C6FC
	ldr r0, _0804C6F8 @ =0x0837F990
	str r0, [r4, #0x18]
	b _0804C73E
	.align 2, 0
_0804C6F8: .4byte 0x0837F990
_0804C6FC:
	cmp r5, #3
	bne _0804C70C
	ldr r0, _0804C708 @ =0x0837F9D8
	str r0, [r4, #0x18]
	b _0804C73E
	.align 2, 0
_0804C708: .4byte 0x0837F9D8
_0804C70C:
	cmp r5, #4
	bne _0804C71C
	ldr r0, _0804C718 @ =0x0837FA20
	str r0, [r4, #0x18]
	b _0804C73E
	.align 2, 0
_0804C718: .4byte 0x0837FA20
_0804C71C:
	cmp r5, #5
	bne _0804C72C
	ldr r0, _0804C728 @ =0x0837FA68
	str r0, [r4, #0x18]
	b _0804C73E
	.align 2, 0
_0804C728: .4byte 0x0837FA68
_0804C72C:
	cmp r7, #6
	bne _0804C73C
	ldr r0, _0804C738 @ =0x0837FAB0
	str r0, [r4, #0x18]
	b _0804C73E
	.align 2, 0
_0804C738: .4byte 0x0837FAB0
_0804C73C:
	strh r6, [r4]
_0804C73E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start ZebesianAquaXMovement
ZebesianAquaXMovement: @ 0x0804C744
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r2, _0804C768 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r4, r2, #0
	cmp r0, #0
	beq _0804C790
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0804C76C
	ldrh r0, [r4, #4]
	adds r0, #0x38
	b _0804C770
	.align 2, 0
_0804C768: .4byte gCurrentSprite
_0804C76C:
	ldrh r0, [r4, #4]
	adds r0, #0x28
_0804C770:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrh r0, [r4, #2]
	subs r0, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804C78C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	beq _0804C7B8
	ldrh r0, [r4, #4]
	adds r0, r5, r0
	b _0804C7C4
	.align 2, 0
_0804C78C: .4byte gPreviousCollisionCheck
_0804C790:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #2
	bne _0804C7A0
	ldrh r0, [r4, #4]
	subs r0, #0x38
	b _0804C7A4
_0804C7A0:
	ldrh r0, [r4, #4]
	subs r0, #0x28
_0804C7A4:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrh r0, [r4, #2]
	subs r0, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804C7BC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0804C7C0
_0804C7B8:
	movs r0, #1
	b _0804C7C8
	.align 2, 0
_0804C7BC: .4byte gPreviousCollisionCheck
_0804C7C0:
	ldrh r0, [r4, #4]
	subs r0, r0, r5
_0804C7C4:
	strh r0, [r4, #4]
	movs r0, #0
_0804C7C8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start ZebesianAquaTurningIntoX
ZebesianAquaTurningIntoX: @ 0x0804C7D0
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _0804C80C @ =gCurrentSprite
	ldrb r1, [r4, #0x1d]
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, #7
	ldrb r0, [r0]
	str r0, [sp]
	ldrh r0, [r4, #2]
	subs r0, #0x50
	str r0, [sp, #4]
	ldrh r0, [r4, #4]
	subs r0, #0x10
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r2, #0
	bl SpriteSpawnNewXParasite
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C80C: .4byte gCurrentSprite

	thumb_func_start ZebesianAquaInit
ZebesianAquaInit: @ 0x0804C810
	push {lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0804C83C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804C840
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804C840
	strh r0, [r2]
	b _0804C8B0
	.align 2, 0
_0804C83C: .4byte gCurrentSprite
_0804C840:
	ldr r3, _0804C89C @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x25
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
	ldr r0, _0804C8A0 @ =0x08381764
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _0804C8A4 @ =0x0000FF90
	strh r0, [r3, #0xa]
	adds r0, #0x68
	strh r0, [r3, #0xc]
	subs r0, #0x38
	strh r0, [r3, #0xe]
	movs r0, #0x40
	strh r0, [r3, #0x10]
	ldr r2, _0804C8A8 @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0804C8AC
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r3, #6]
	b _0804C8B0
	.align 2, 0
_0804C89C: .4byte gCurrentSprite
_0804C8A0: .4byte 0x08381764
_0804C8A4: .4byte 0x0000FF90
_0804C8A8: .4byte sPrimarySpriteStats
_0804C8AC:
	movs r0, #1
	strb r0, [r1]
_0804C8B0:
	pop {r0}
	bx r0

	thumb_func_start ZebesianAquaIdleInit
ZebesianAquaIdleInit: @ 0x0804C8B4
	push {r4, lr}
	ldr r1, _0804C8D8 @ =gCurrentSprite
	ldrh r0, [r1, #4]
	movs r3, #0
	movs r4, #0
	strh r0, [r1, #8]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #2
	strb r0, [r2]
	strb r3, [r1, #0x1c]
	strh r4, [r1, #0x16]
	ldr r0, _0804C8DC @ =0x08381764
	str r0, [r1, #0x18]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C8D8: .4byte gCurrentSprite
_0804C8DC: .4byte 0x08381764

	thumb_func_start ZebesianAquaIdle
ZebesianAquaIdle: @ 0x0804C8E0
	push {r4, r5, lr}
	movs r0, #6
	bl ZebesianAquaXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804C900
	ldr r2, _0804C8FC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	adds r5, r2, #0
	b _0804C938
	.align 2, 0
_0804C8FC: .4byte gCurrentSprite
_0804C900:
	ldr r2, _0804C920 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r5, r2, #0
	cmp r0, #0
	beq _0804C924
	ldrh r0, [r5, #8]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	ldrh r1, [r5, #4]
	cmp r0, r1
	bge _0804C938
	b _0804C930
	.align 2, 0
_0804C920: .4byte gCurrentSprite
_0804C924:
	ldrh r0, [r5, #8]
	ldr r1, _0804C98C @ =0xFFFFFE00
	adds r0, r0, r1
	ldrh r1, [r5, #4]
	cmp r0, r1
	ble _0804C938
_0804C930:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
_0804C938:
	ldr r0, _0804C990 @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0804C9BE
	ldr r2, _0804C994 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r2, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	adds r4, r5, #0
	ldrh r0, [r4, #2]
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	subs r0, #0x40
	cmp r0, r2
	ble _0804C9A0
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804C998 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804C9BE
	ldr r0, _0804C99C @ =gCurrentAffectingClipdata
	ldrh r0, [r0, #2]
	cmp r0, #1
	bne _0804C9BE
	ldrh r0, [r4, #2]
	subs r0, #2
	strh r0, [r4, #2]
	b _0804C9BE
	.align 2, 0
_0804C98C: .4byte 0xFFFFFE00
_0804C990: .4byte gEquipment
_0804C994: .4byte gSamusData
_0804C998: .4byte gPreviousCollisionCheck
_0804C99C: .4byte gCurrentAffectingClipdata
_0804C9A0:
	adds r0, r1, #0
	adds r0, #0x40
	cmp r0, r2
	bge _0804C9BE
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804CA04 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804C9BE
	ldrh r0, [r5, #2]
	adds r0, #2
	strh r0, [r5, #2]
_0804C9BE:
	ldr r0, _0804CA08 @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804CA5C
	movs r0, #0xa0
	movs r1, #0xc8
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	bne _0804CA5C
	movs r1, #0xc8
	lsls r1, r1, #1
	movs r0, #0xa0
	bl CheckSamusNearSpriteLeftRight
	adds r1, r0, #0
	ldr r3, _0804CA0C @ =gCurrentSprite
	ldrh r2, [r3]
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _0804CA22
	cmp r1, #8
	bne _0804CA1C
	ldr r0, _0804CA10 @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0804CA14
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x29
	b _0804CA5A
	.align 2, 0
_0804CA04: .4byte gPreviousCollisionCheck
_0804CA08: .4byte 0x03001346
_0804CA0C: .4byte gCurrentSprite
_0804CA10: .4byte gEquipment
_0804CA14:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2b
	b _0804CA5A
_0804CA1C:
	cmp r1, #4
	bne _0804CA5C
	b _0804CA4C
_0804CA22:
	cmp r1, #4
	bne _0804CA48
	ldr r0, _0804CA3C @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0804CA40
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x29
	b _0804CA5A
	.align 2, 0
_0804CA3C: .4byte gEquipment
_0804CA40:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2b
	b _0804CA5A
_0804CA48:
	cmp r1, #8
	bne _0804CA5C
_0804CA4C:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	bne _0804CA5C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #3
_0804CA5A:
	strb r0, [r1]
_0804CA5C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianAquaLungeInit
ZebesianAquaLungeInit: @ 0x0804CA64
	ldr r1, _0804CA78 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x2c
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x1e
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804CA78: .4byte gCurrentSprite

	thumb_func_start ZebesianAquaLunge
ZebesianAquaLunge: @ 0x0804CA7C
	push {r4, r5, lr}
	ldr r4, _0804CAF8 @ =gCurrentSprite
	ldrb r0, [r4, #0x1c]
	adds r0, #4
	strb r0, [r4, #0x1c]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804CAA0
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804CB14
	ldr r0, _0804CAFC @ =0x000001BD
	bl CheckPlayNotAlreadyPlayingSound
_0804CAA0:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804CB00 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804CAB6
	ldrh r0, [r4, #2]
	adds r0, #2
	strh r0, [r4, #2]
_0804CAB6:
	movs r0, #0x10
	bl ZebesianAquaXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804CB0C
	ldr r0, _0804CB04 @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804CB14
	movs r5, #0xa0
	lsls r5, r5, #1
	movs r1, #0xe1
	lsls r1, r1, #1
	adds r0, r5, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	bne _0804CB14
	movs r1, #0xa0
	lsls r1, r1, #2
	adds r0, r5, #0
	bl CheckSamusNearSpriteLeftRight
	adds r2, r0, #0
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804CB08
	cmp r2, #4
	bne _0804CB14
	b _0804CB0C
	.align 2, 0
_0804CAF8: .4byte gCurrentSprite
_0804CAFC: .4byte 0x000001BD
_0804CB00: .4byte gPreviousCollisionCheck
_0804CB04: .4byte 0x03001346
_0804CB08:
	cmp r2, #8
	bne _0804CB14
_0804CB0C:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
_0804CB14:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianAquaShootingInit
ZebesianAquaShootingInit: @ 0x0804CB1C
	ldr r1, _0804CB34 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804CB38 @ =0x083817C4
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0804CB34: .4byte gCurrentSprite
_0804CB38: .4byte 0x083817C4

	thumb_func_start ZebesianAquaShooting
ZebesianAquaShooting: @ 0x0804CB3C
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r2, _0804CB88 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r2, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldr r4, _0804CB8C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	subs r0, #0x40
	cmp r0, r2
	ble _0804CB98
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804CB90 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804CBB6
	ldr r0, _0804CB94 @ =gCurrentAffectingClipdata
	ldrh r0, [r0, #2]
	cmp r0, #1
	bne _0804CBB6
	ldrh r0, [r4, #2]
	subs r0, #1
	b _0804CBB4
	.align 2, 0
_0804CB88: .4byte gSamusData
_0804CB8C: .4byte gCurrentSprite
_0804CB90: .4byte gPreviousCollisionCheck
_0804CB94: .4byte gCurrentAffectingClipdata
_0804CB98:
	adds r0, r1, #0
	adds r0, #0x20
	cmp r0, r2
	bge _0804CBB6
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804CBD0 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804CBB6
	ldrh r0, [r4, #2]
	adds r0, #1
_0804CBB4:
	strh r0, [r4, #2]
_0804CBB6:
	movs r0, #8
	bl ZebesianAquaXMovement
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804CBD8
	ldr r0, _0804CBD4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	b _0804CC6C
	.align 2, 0
_0804CBD0: .4byte gPreviousCollisionCheck
_0804CBD4: .4byte gCurrentSprite
_0804CBD8:
	ldr r4, _0804CC30 @ =gCurrentSprite
	ldrh r0, [r4, #0x16]
	cmp r0, #7
	bne _0804CC6C
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	bne _0804CC6C
	ldrh r1, [r4]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0804CC34
	ldrb r2, [r4, #0x1f]
	adds r5, r4, #0
	adds r5, #0x23
	ldrb r3, [r5]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x70
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x66
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #2]
	subs r0, #0x2c
	str r0, [sp]
	ldrh r0, [r4, #4]
	adds r0, #0x20
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x66
	movs r1, #1
	bl SpriteSpawnSecondary
	b _0804CC6C
	.align 2, 0
_0804CC30: .4byte gCurrentSprite
_0804CC34:
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x40
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x70
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x66
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	subs r0, #0x2c
	str r0, [sp]
	ldrh r0, [r4, #4]
	subs r0, #0x20
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x66
	movs r1, #1
	bl SpriteSpawnSecondary
_0804CC6C:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start ZebesianAquaTurningAroundInit
ZebesianAquaTurningAroundInit: @ 0x0804CC74
	ldr r1, _0804CC8C @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x24
	movs r2, #0
	movs r0, #4
	strb r0, [r3]
	strb r2, [r1, #0x1c]
	strh r2, [r1, #0x16]
	ldr r0, _0804CC90 @ =0x0838179C
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0
_0804CC8C: .4byte gCurrentSprite
_0804CC90: .4byte 0x0838179C

	thumb_func_start ZebesianAquaTurningAround
ZebesianAquaTurningAround: @ 0x0804CC94
	push {r4, lr}
	ldr r0, _0804CCE0 @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0804CD18
	ldr r2, _0804CCE4 @ =gSamusData
	movs r1, #0x26
	ldrsh r0, [r2, r1]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r2, [r2, #0x18]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldr r4, _0804CCE8 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	subs r0, #0x40
	cmp r0, r2
	ble _0804CCF0
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804CCEC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804CD18
	ldrh r0, [r4, #2]
	adds r0, #2
	b _0804CD16
	.align 2, 0
_0804CCE0: .4byte gEquipment
_0804CCE4: .4byte gSamusData
_0804CCE8: .4byte gCurrentSprite
_0804CCEC: .4byte gPreviousCollisionCheck
_0804CCF0:
	adds r0, r1, #0
	adds r0, #0x20
	cmp r0, r2
	bge _0804CD18
	ldrh r0, [r4, #2]
	subs r0, #0x60
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0804CD44 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804CD18
	ldr r0, _0804CD48 @ =gCurrentAffectingClipdata
	ldrh r0, [r0, #2]
	cmp r0, #1
	bne _0804CD18
	ldrh r0, [r4, #2]
	subs r0, #2
_0804CD16:
	strh r0, [r4, #2]
_0804CD18:
	ldr r2, _0804CD4C @ =gCurrentSprite
	ldrh r0, [r2, #0x16]
	cmp r0, #1
	bne _0804CD2E
	ldrb r0, [r2, #0x1c]
	cmp r0, #4
	bne _0804CD2E
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0804CD2E:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804CD3E
	ldr r0, _0804CD4C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804CD3E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804CD44: .4byte gPreviousCollisionCheck
_0804CD48: .4byte gCurrentAffectingClipdata
_0804CD4C: .4byte gCurrentSprite

	thumb_func_start ZebesianAquaProjectileInit
ZebesianAquaProjectileInit: @ 0x0804CD50
	push {r4, r5, lr}
	ldr r0, _0804CDC4 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r3, _0804CDC8 @ =0x0000FFFB
	ands r3, r0
	movs r5, #0
	movs r4, #0
	mov r1, ip
	strh r3, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0804CDCC @ =0x0000FFF4
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r0, #0xc
	strh r0, [r1, #0xc]
	ldr r0, _0804CDD0 @ =0x0838182C
	str r0, [r1, #0x18]
	strb r5, [r1, #0x1c]
	strh r4, [r1, #0x16]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	subs r1, #1
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x40
	ands r0, r3
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	mov r1, ip
	cmp r2, #0
	beq _0804CDD4
	strh r4, [r1, #0xe]
	movs r0, #0x18
	strh r0, [r1, #0x10]
	b _0804CDDA
	.align 2, 0
_0804CDC4: .4byte gCurrentSprite
_0804CDC8: .4byte 0x0000FFFB
_0804CDCC: .4byte 0x0000FFF4
_0804CDD0: .4byte 0x0838182C
_0804CDD4:
	ldr r0, _0804CDF0 @ =0x0000FFE8
	strh r0, [r1, #0xe]
	strh r2, [r1, #0x10]
_0804CDDA:
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	bne _0804CDE8
	movs r0, #0xde
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804CDE8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804CDF0: .4byte 0x0000FFE8

	thumb_func_start ZebesianAqua
ZebesianAqua: @ 0x0804CDF4
	push {r4, lr}
	ldr r4, _0804CE20 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804CE0E
	movs r0, #0xaf
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804CE0E:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804CE24
	bl SpriteUpdateFreezeTimer
	b _0804CFFC
	.align 2, 0
_0804CE20: .4byte gCurrentSprite
_0804CE24:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804CE30
	b _0804CFFC
_0804CE30:
	lsls r0, r0, #2
	ldr r1, _0804CE3C @ =_0804CE40
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804CE3C: .4byte _0804CE40
_0804CE40: @ jump table
	.4byte _0804CFB0 @ case 0
	.4byte _0804CFB6 @ case 1
	.4byte _0804CFBC @ case 2
	.4byte _0804CFC2 @ case 3
	.4byte _0804CFC6 @ case 4
	.4byte _0804CFFC @ case 5
	.4byte _0804CFFC @ case 6
	.4byte _0804CFFC @ case 7
	.4byte _0804CFFC @ case 8
	.4byte _0804CFFC @ case 9
	.4byte _0804CFFC @ case 10
	.4byte _0804CFFC @ case 11
	.4byte _0804CFFC @ case 12
	.4byte _0804CFFC @ case 13
	.4byte _0804CFFC @ case 14
	.4byte _0804CFFC @ case 15
	.4byte _0804CFFC @ case 16
	.4byte _0804CFFC @ case 17
	.4byte _0804CFFC @ case 18
	.4byte _0804CFFC @ case 19
	.4byte _0804CFFC @ case 20
	.4byte _0804CFFC @ case 21
	.4byte _0804CFFC @ case 22
	.4byte _0804CFFC @ case 23
	.4byte _0804CFFC @ case 24
	.4byte _0804CFFC @ case 25
	.4byte _0804CFFC @ case 26
	.4byte _0804CFFC @ case 27
	.4byte _0804CFFC @ case 28
	.4byte _0804CFFC @ case 29
	.4byte _0804CFFC @ case 30
	.4byte _0804CFFC @ case 31
	.4byte _0804CFFC @ case 32
	.4byte _0804CFFC @ case 33
	.4byte _0804CFFC @ case 34
	.4byte _0804CFFC @ case 35
	.4byte _0804CFFC @ case 36
	.4byte _0804CFFC @ case 37
	.4byte _0804CFFC @ case 38
	.4byte _0804CFFC @ case 39
	.4byte _0804CFFC @ case 40
	.4byte _0804CFCC @ case 41
	.4byte _0804CFD0 @ case 42
	.4byte _0804CFD6 @ case 43
	.4byte _0804CFDA @ case 44
	.4byte _0804CFFC @ case 45
	.4byte _0804CFFC @ case 46
	.4byte _0804CFFC @ case 47
	.4byte _0804CFFC @ case 48
	.4byte _0804CFFC @ case 49
	.4byte _0804CFFC @ case 50
	.4byte _0804CFFC @ case 51
	.4byte _0804CFFC @ case 52
	.4byte _0804CFFC @ case 53
	.4byte _0804CFFC @ case 54
	.4byte _0804CFFC @ case 55
	.4byte _0804CFFC @ case 56
	.4byte _0804CFFC @ case 57
	.4byte _0804CFFC @ case 58
	.4byte _0804CFFC @ case 59
	.4byte _0804CFFC @ case 60
	.4byte _0804CFFC @ case 61
	.4byte _0804CFFC @ case 62
	.4byte _0804CFFC @ case 63
	.4byte _0804CFFC @ case 64
	.4byte _0804CFFC @ case 65
	.4byte _0804CFFC @ case 66
	.4byte _0804CFFC @ case 67
	.4byte _0804CFFC @ case 68
	.4byte _0804CFFC @ case 69
	.4byte _0804CFFC @ case 70
	.4byte _0804CFFC @ case 71
	.4byte _0804CFFC @ case 72
	.4byte _0804CFFC @ case 73
	.4byte _0804CFFC @ case 74
	.4byte _0804CFFC @ case 75
	.4byte _0804CFFC @ case 76
	.4byte _0804CFFC @ case 77
	.4byte _0804CFFC @ case 78
	.4byte _0804CFFC @ case 79
	.4byte _0804CFFC @ case 80
	.4byte _0804CFFC @ case 81
	.4byte _0804CFFC @ case 82
	.4byte _0804CFFC @ case 83
	.4byte _0804CFFC @ case 84
	.4byte _0804CFFC @ case 85
	.4byte _0804CFFC @ case 86
	.4byte _0804CFE0 @ case 87
	.4byte _0804CFE4 @ case 88
	.4byte _0804CFEA @ case 89
	.4byte _0804CFEE @ case 90
	.4byte _0804CFF4 @ case 91
_0804CFB0:
	bl ZebesianAquaInit
	b _0804CFFC
_0804CFB6:
	bl ZebesianAquaIdleInit
	b _0804CFFC
_0804CFBC:
	bl ZebesianAquaIdle
	b _0804CFFC
_0804CFC2:
	bl ZebesianAquaTurningAroundInit
_0804CFC6:
	bl ZebesianAquaTurningAround
	b _0804CFFC
_0804CFCC:
	bl ZebesianAquaShootingInit
_0804CFD0:
	bl ZebesianAquaShooting
	b _0804CFFC
_0804CFD6:
	bl ZebesianAquaLungeInit
_0804CFDA:
	bl ZebesianAquaLunge
	b _0804CFFC
_0804CFE0:
	bl SpriteDyingInit
_0804CFE4:
	bl SpriteDying
	b _0804CFFC
_0804CFEA:
	bl ZebesianAquaInit
_0804CFEE:
	bl SpriteSpawningFromX
	b _0804CFFC
_0804CFF4:
	bl ZebesianAquaTurningIntoX
	bl XParasiteInit
_0804CFFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start ZebesianAquaProjectile
ZebesianAquaProjectile: @ 0x0804D004
	push {r4, lr}
	ldr r4, _0804D028 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804D016
	bl ZebesianAquaProjectileInit
_0804D016:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804D02C
	ldrh r0, [r4, #4]
	adds r0, #0x10
	b _0804D030
	.align 2, 0
_0804D028: .4byte gCurrentSprite
_0804D02C:
	ldrh r0, [r4, #4]
	subs r0, #0x10
_0804D030:
	strh r0, [r4, #4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start DachoraCheckDoHeadMovement
DachoraCheckDoHeadMovement: @ 0x0804D038
	push {r4, lr}
	movs r4, #1
	ldr r0, _0804D050 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xc
	bhi _0804D0EC
	lsls r0, r0, #2
	ldr r1, _0804D054 @ =_0804D058
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804D050: .4byte gSpriteRandomNumber
_0804D054: .4byte _0804D058
_0804D058: @ jump table
	.4byte _0804D08C @ case 0
	.4byte _0804D08C @ case 1
	.4byte _0804D08C @ case 2
	.4byte _0804D08C @ case 3
	.4byte _0804D0A4 @ case 4
	.4byte _0804D0A4 @ case 5
	.4byte _0804D0A4 @ case 6
	.4byte _0804D0A4 @ case 7
	.4byte _0804D0BC @ case 8
	.4byte _0804D0BC @ case 9
	.4byte _0804D0D4 @ case 10
	.4byte _0804D0D4 @ case 11
	.4byte _0804D0D4 @ case 12
_0804D08C:
	ldr r1, _0804D0A0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	strb r3, [r1]
	b _0804D0EE
	.align 2, 0
_0804D0A0: .4byte gCurrentSprite
_0804D0A4:
	ldr r1, _0804D0B8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	b _0804D0EE
	.align 2, 0
_0804D0B8: .4byte gCurrentSprite
_0804D0BC:
	ldr r1, _0804D0D0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #2
	strb r0, [r1]
	b _0804D0EE
	.align 2, 0
_0804D0D0: .4byte gCurrentSprite
_0804D0D4:
	ldr r1, _0804D0E8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #3
	strb r0, [r1]
	b _0804D0EE
	.align 2, 0
_0804D0E8: .4byte gCurrentSprite
_0804D0EC:
	movs r4, #0
_0804D0EE:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start DachoraInit
DachoraInit: @ 0x0804D0F8
	push {r4, r5, r6, lr}
	bl EventCheckAfter_AnimalsReleased
	adds r6, r0, #0
	cmp r6, #0
	beq _0804D110
	ldr r1, _0804D10C @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0804D17C
	.align 2, 0
_0804D10C: .4byte gCurrentSprite
_0804D110:
	ldr r5, _0804D184 @ =gCurrentSprite
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x25
	strb r6, [r0]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #0xe
	strb r0, [r1]
	subs r1, #1
	movs r0, #3
	strb r0, [r1]
	adds r1, #6
	movs r0, #0x30
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	movs r4, #0
	ldr r1, _0804D188 @ =0x0000FFFC
	strh r1, [r5, #0xa]
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldrh r0, [r5, #2]
	subs r0, #0x20
	strh r0, [r5, #2]
	ldrh r0, [r5, #4]
	strh r0, [r5, #8]
	bl MakeSpriteFaceSamusXFlip
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0804D18C @ =0x0838451C
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r6, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r1, #0xa
	movs r0, #0xb4
	strb r0, [r1]
_0804D17C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804D184: .4byte gCurrentSprite
_0804D188: .4byte 0x0000FFFC
_0804D18C: .4byte 0x0838451C

	thumb_func_start DachoraIdleInit
DachoraIdleInit: @ 0x0804D190
	ldr r3, _0804D1BC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0804D1C0 @ =0x0838451C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	ldr r0, _0804D1C4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x3c
	adds r1, r3, #0
	adds r1, #0x2e
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804D1BC: .4byte gCurrentSprite
_0804D1C0: .4byte 0x0838451C
_0804D1C4: .4byte gSpriteRandomNumber

	thumb_func_start DachoraIdle
DachoraIdle: @ 0x0804D1C8
	push {r4, r5, r6, lr}
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _0804D228
	ldr r2, _0804D214 @ =gSpriteData
	ldr r0, _0804D218 @ =gBossWork2
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1a
	bne _0804D276
	ldr r0, _0804D21C @ =gAbilityRestingXPosition
	ldr r2, _0804D220 @ =0xFFFFFF00
	adds r1, r2, #0
	ldrh r0, [r0]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r3, _0804D224 @ =gCurrentSprite
	ldrh r2, [r3, #4]
	adds r0, r1, #0
	subs r0, #0x20
	cmp r2, r0
	ble _0804D276
	adds r0, #0x40
	cmp r2, r0
	bge _0804D276
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	b _0804D2D4
	.align 2, 0
_0804D214: .4byte gSpriteData
_0804D218: .4byte gBossWork2
_0804D21C: .4byte gAbilityRestingXPosition
_0804D220: .4byte 0xFFFFFF00
_0804D224: .4byte gCurrentSprite
_0804D228:
	ldr r3, _0804D254 @ =gCurrentSprite
	ldrh r2, [r3, #4]
	ldr r0, _0804D258 @ =gAbilityRestingXPosition
	ldrh r1, [r0]
	movs r4, #0xe0
	lsls r4, r4, #1
	adds r0, r1, r4
	cmp r2, r0
	bgt _0804D242
	ldr r4, _0804D25C @ =0xFFFFFE40
	adds r0, r1, r4
	cmp r2, r0
	bge _0804D276
_0804D242:
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804D260
	subs r0, #1
	strb r0, [r1]
	b _0804D276
	.align 2, 0
_0804D254: .4byte gCurrentSprite
_0804D258: .4byte gAbilityRestingXPosition
_0804D25C: .4byte 0xFFFFFE40
_0804D260:
	ldr r0, _0804D2AC @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _0804D276
	bl DachoraCheckDoHeadMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804D2D4
_0804D276:
	ldr r2, _0804D2B0 @ =gCurrentSprite
	adds r5, r2, #0
	adds r5, #0x30
	ldrb r3, [r5]
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	lsrs r4, r0, #0x1a
	adds r6, r4, #0
	cmp r1, #0xf
	bhi _0804D28E
	adds r0, r3, #1
	strb r0, [r5]
_0804D28E:
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804D2B4
	ldrh r0, [r2, #8]
	movs r1, #0xe0
	lsls r1, r1, #2
	adds r0, r0, r1
	ldrh r1, [r2, #4]
	cmp r0, r1
	blt _0804D2C0
	adds r0, r1, r4
	b _0804D2D2
	.align 2, 0
_0804D2AC: .4byte gFrameCounter8Bit
_0804D2B0: .4byte gCurrentSprite
_0804D2B4:
	ldrh r0, [r2, #8]
	ldr r4, _0804D2CC @ =0xFFFFFC80
	adds r0, r0, r4
	ldrh r1, [r2, #4]
	cmp r0, r1
	ble _0804D2D0
_0804D2C0:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _0804D2D4
	.align 2, 0
_0804D2CC: .4byte 0xFFFFFC80
_0804D2D0:
	subs r0, r1, r6
_0804D2D2:
	strh r0, [r2, #4]
_0804D2D4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DachoraStandingInit
DachoraStandingInit: @ 0x0804D2DC
	ldr r0, _0804D2F8 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #8
	strb r1, [r2]
	ldr r1, _0804D2FC @ =0x0838450C
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0xb
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804D2F8: .4byte gCurrentSprite
_0804D2FC: .4byte 0x0838450C

	thumb_func_start DachoraStanding
DachoraStanding: @ 0x0804D300
	push {lr}
	ldr r1, _0804D320 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804D31A
	adds r1, #0x24
	movs r0, #9
	strb r0, [r1]
_0804D31A:
	pop {r0}
	bx r0
	.align 2, 0
_0804D320: .4byte gCurrentSprite

	thumb_func_start DachoraHeadMovementInit
DachoraHeadMovementInit: @ 0x0804D324
	push {lr}
	ldr r0, _0804D340 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0xa
	strb r1, [r2]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #1
	bne _0804D348
	ldr r0, _0804D344 @ =0x083845C4
	b _0804D362
	.align 2, 0
_0804D340: .4byte gCurrentSprite
_0804D344: .4byte 0x083845C4
_0804D348:
	cmp r1, #2
	bne _0804D354
	ldr r0, _0804D350 @ =0x083845E4
	b _0804D362
	.align 2, 0
_0804D350: .4byte 0x083845E4
_0804D354:
	cmp r1, #3
	bne _0804D360
	ldr r0, _0804D35C @ =0x083845FC
	b _0804D362
	.align 2, 0
_0804D35C: .4byte 0x083845FC
_0804D360:
	ldr r0, _0804D370 @ =0x08384584
_0804D362:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0804D370: .4byte 0x08384584

	thumb_func_start DachoraHeadMovement
DachoraHeadMovement: @ 0x0804D374
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804D3AE
	ldr r1, _0804D3A0 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	ldr r2, _0804D3A4 @ =gFrameCounter8Bit
	cmp r0, #1
	bne _0804D392
	ldrb r0, [r2]
	cmp r0, #0xc
	bhi _0804D3AE
_0804D392:
	ldrb r0, [r2]
	cmp r0, #2
	bhi _0804D3A8
	adds r1, #0x24
	movs r0, #3
	b _0804D3AC
	.align 2, 0
_0804D3A0: .4byte gCurrentSprite
_0804D3A4: .4byte gSpriteRandomNumber
_0804D3A8:
	adds r1, #0x24
	movs r0, #1
_0804D3AC:
	strb r0, [r1]
_0804D3AE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DachoraTurningAroundInit
DachoraTurningAroundInit: @ 0x0804D3B4
	ldr r1, _0804D3CC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _0804D3D0 @ =0x08384554
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804D3CC: .4byte gCurrentSprite
_0804D3D0: .4byte 0x08384554

	thumb_func_start DachoraTurningAround
DachoraTurningAround: @ 0x0804D3D4
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804D414
	ldr r2, _0804D408 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0804D40C @ =0x0838456C
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x22
	ldrb r0, [r2]
	cmp r0, #0xe
	bne _0804D410
	movs r0, #0xf
	b _0804D412
	.align 2, 0
_0804D408: .4byte gCurrentSprite
_0804D40C: .4byte 0x0838456C
_0804D410:
	movs r0, #0xe
_0804D412:
	strb r0, [r2]
_0804D414:
	pop {r0}
	bx r0

	thumb_func_start DachoraTurningAroundSecondPart
DachoraTurningAroundSecondPart: @ 0x0804D418
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804D42A
	ldr r0, _0804D430 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804D42A:
	pop {r0}
	bx r0
	.align 2, 0
_0804D430: .4byte gCurrentSprite

	thumb_func_start DachoraTurningAroundWhileLeavingInit
DachoraTurningAroundWhileLeavingInit: @ 0x0804D434
	ldr r1, _0804D44C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x38
	strb r0, [r2]
	ldr r0, _0804D450 @ =0x08384554
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804D44C: .4byte gCurrentSprite
_0804D450: .4byte 0x08384554

	thumb_func_start DachoraTurningAroundWhileLeaving
DachoraTurningAroundWhileLeaving: @ 0x0804D454
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804D47A
	ldr r2, _0804D480 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x3a
	strb r0, [r1]
	ldr r0, _0804D484 @ =0x0838456C
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0804D47A:
	pop {r0}
	bx r0
	.align 2, 0
_0804D480: .4byte gCurrentSprite
_0804D484: .4byte 0x0838456C

	thumb_func_start DachoraTurningAroundWhileLeavingSecondPart
DachoraTurningAroundWhileLeavingSecondPart: @ 0x0804D488
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804D49A
	ldr r0, _0804D4A0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	strb r1, [r0]
_0804D49A:
	pop {r0}
	bx r0
	.align 2, 0
_0804D4A0: .4byte gCurrentSprite

	thumb_func_start DachoraLeavingEnclosureInit
DachoraLeavingEnclosureInit: @ 0x0804D4A4
	ldr r3, _0804D4C4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #3
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804D4C4: .4byte gCurrentSprite

	thumb_func_start DachoraLeavingEnclosure
DachoraLeavingEnclosure: @ 0x0804D4C8
	push {r4, r5, lr}
	ldr r2, _0804D4FC @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r1, _0804D500 @ =0x0838188C
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _0804D504 @ =0x00007FFF
	cmp r1, r0
	bne _0804D512
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804D508
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0804D534
	.align 2, 0
_0804D4FC: .4byte gCurrentSprite
_0804D500: .4byte 0x0838188C
_0804D504: .4byte 0x00007FFF
_0804D508:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _0804D534
_0804D512:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804D52E
	ldrh r0, [r2, #4]
	adds r0, #4
	b _0804D532
_0804D52E:
	ldrh r0, [r2, #4]
	subs r0, #4
_0804D532:
	strh r0, [r2, #4]
_0804D534:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start DachoraWalkingToWaitingSpotInit
DachoraWalkingToWaitingSpotInit: @ 0x0804D53C
	ldr r1, _0804D550 @ =gCurrentSprite
	ldr r0, _0804D554 @ =0x0838451C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804D550: .4byte gCurrentSprite
_0804D554: .4byte 0x0838451C

	thumb_func_start DachoraWalkingToWaitingSpot
DachoraWalkingToWaitingSpot: @ 0x0804D558
	push {lr}
	ldr r1, _0804D570 @ =gCurrentSprite
	ldrh r2, [r1, #4]
	ldr r0, _0804D574 @ =gAbilityRestingXPosition
	ldrh r0, [r0]
	subs r0, #0xc0
	cmp r2, r0
	bge _0804D578
	adds r0, r2, #4
	strh r0, [r1, #4]
	b _0804D588
	.align 2, 0
_0804D570: .4byte gCurrentSprite
_0804D574: .4byte gAbilityRestingXPosition
_0804D578:
	ldr r0, _0804D58C @ =0x083846CC
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
_0804D588:
	pop {r0}
	bx r0
	.align 2, 0
_0804D58C: .4byte 0x083846CC

	thumb_func_start DachorawaitingForOthers
DachorawaitingForOthers: @ 0x0804D590
	push {r4, r5, lr}
	ldr r1, _0804D608 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804D5A8
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0804D5A8
	movs r0, #0x91
	lsls r0, r0, #1
	bl SoundPlay
_0804D5A8:
	movs r4, #0
	movs r3, #0
	ldr r5, _0804D60C @ =gSpriteData
_0804D5AE:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r5
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804D5E4
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0804D5E4
	ldrb r0, [r2, #0x1d]
	cmp r0, #0xb6
	bne _0804D5E4
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bne _0804D5E4
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0804D5E4:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _0804D5AE
	cmp r4, #3
	bne _0804D602
	ldr r1, _0804D608 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
_0804D602:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D608: .4byte gCurrentSprite
_0804D60C: .4byte gSpriteData

	thumb_func_start DachoraWaitingToSpawnBaby
DachoraWaitingToSpawnBaby: @ 0x0804D610
	push {r4, lr}
	sub sp, #0xc
	ldr r1, _0804D674 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804D62A
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0804D62A
	movs r0, #0x91
	lsls r0, r0, #1
	bl SoundPlay
_0804D62A:
	ldr r0, _0804D674 @ =gCurrentSprite
	mov ip, r0
	mov r4, ip
	adds r4, #0x2e
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804D66C
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1d
	strb r0, [r1]
	mov r1, ip
	ldrb r2, [r1, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	subs r0, #0x20
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0xc0
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #0x69
	movs r1, #0
	bl SpriteSpawnSecondary
	movs r0, #0x78
	strb r0, [r4]
_0804D66C:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804D674: .4byte gCurrentSprite

	thumb_func_start DachoraWaitingForBaby
DachoraWaitingForBaby: @ 0x0804D678
	push {r4, r5, lr}
	ldr r1, _0804D6D4 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804D690
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0804D690
	movs r0, #0x91
	lsls r0, r0, #1
	bl SoundPlay
_0804D690:
	ldr r4, _0804D6D4 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0804D6CE
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	ldr r0, _0804D6D8 @ =gPreventMovementTimer
	strh r2, [r0]
	ldr r1, _0804D6DC @ =0x0828FD04
	ldr r0, _0804D6E0 @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x3b
	bl _call_via_r1
	movs r0, #0x3c
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
_0804D6CE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D6D4: .4byte gCurrentSprite
_0804D6D8: .4byte gPreventMovementTimer
_0804D6DC: .4byte 0x0828FD04
_0804D6E0: .4byte gSamusData

	thumb_func_start DachoraBowing
DachoraBowing: @ 0x0804D6E4
	push {r4, r5, lr}
	ldr r4, _0804D710 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804D732
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0804D71C
	ldr r0, _0804D714 @ =0x08384584
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r1, [r4, #0x16]
	ldr r0, _0804D718 @ =0x00000123
	bl SoundPlay
	b _0804D75E
	.align 2, 0
_0804D710: .4byte gCurrentSprite
_0804D714: .4byte 0x08384584
_0804D718: .4byte 0x00000123
_0804D71C:
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	bne _0804D75E
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	bne _0804D75E
	movs r0, #0x91
	lsls r0, r0, #1
	bl SoundPlay
	b _0804D75E
_0804D732:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804D75E
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0804D75E
	subs r1, #0xb
	movs r0, #0x1f
	strb r0, [r1]
	movs r0, #0x3c
	strb r0, [r5]
	ldr r0, _0804D764 @ =0x083846CC
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
_0804D75E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D764: .4byte 0x083846CC

	thumb_func_start DachoraWaitingToRun
DachoraWaitingToRun: @ 0x0804D768
	push {lr}
	ldr r3, _0804D798 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0804D794
	subs r1, #0xa
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _0804D79C @ =0x0838451C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	movs r0, #0x92
	lsls r0, r0, #1
	bl unk_3b1c
_0804D794:
	pop {r0}
	bx r0
	.align 2, 0
_0804D798: .4byte gCurrentSprite
_0804D79C: .4byte 0x0838451C

	thumb_func_start DachoraRunning
DachoraRunning: @ 0x0804D7A0
	push {lr}
	ldr r2, _0804D7C4 @ =gCurrentSprite
	ldrh r0, [r2, #4]
	adds r0, #0xe
	strh r0, [r2, #4]
	ldrb r0, [r2, #0x1c]
	adds r0, #2
	strb r0, [r2, #0x1c]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804D7C0
	strh r0, [r2]
_0804D7C0:
	pop {r0}
	bx r0
	.align 2, 0
_0804D7C4: .4byte gCurrentSprite

	thumb_func_start BabyDachoraInit
BabyDachoraInit: @ 0x0804D7C8
	push {r4, lr}
	ldr r0, _0804D838 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0804D83C @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	subs r1, #1
	movs r0, #3
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r1, #6
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r3, [r0]
	adds r1, #2
	movs r0, #8
	strb r0, [r1]
	ldr r1, _0804D840 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _0804D844 @ =0x0838462C
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x20
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804D838: .4byte gCurrentSprite
_0804D83C: .4byte 0x0000FFFB
_0804D840: .4byte 0x0000FFFC
_0804D844: .4byte 0x0838462C

	thumb_func_start BabyDachoraWalkingToGate
BabyDachoraWalkingToGate: @ 0x0804D848
	push {lr}
	ldr r2, _0804D868 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _0804D86C
	ldrh r0, [r2, #4]
	adds r0, #4
	strh r0, [r2, #4]
	b _0804D878
	.align 2, 0
_0804D868: .4byte gCurrentSprite
_0804D86C:
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #0xd
	strb r3, [r0]
_0804D878:
	pop {r0}
	bx r0

	thumb_func_start BabyDachoraLeavingEnclosure
BabyDachoraLeavingEnclosure: @ 0x0804D87C
	push {r4, r5, lr}
	ldr r2, _0804D8B0 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r1, _0804D8B4 @ =0x0838188C
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _0804D8B8 @ =0x00007FFF
	cmp r1, r0
	bne _0804D8BC
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #0xd
	movs r0, #2
	strb r0, [r1]
	b _0804D8CE
	.align 2, 0
_0804D8B0: .4byte gCurrentSprite
_0804D8B4: .4byte 0x0838188C
_0804D8B8: .4byte 0x00007FFF
_0804D8BC:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
	strh r0, [r2, #2]
	ldrh r0, [r2, #4]
	adds r0, #4
	strh r0, [r2, #4]
_0804D8CE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start BabyDachoraWalkingToWaitingSpot
BabyDachoraWalkingToWaitingSpot: @ 0x0804D8D4
	push {lr}
	ldr r2, _0804D8F4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _0804D8F8
	ldrh r0, [r2, #4]
	adds r0, #2
	strh r0, [r2, #4]
	b _0804D90E
	.align 2, 0
_0804D8F4: .4byte gCurrentSprite
_0804D8F8:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #2
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0804D914 @ =0x083846F4
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
_0804D90E:
	pop {r0}
	bx r0
	.align 2, 0
_0804D914: .4byte 0x083846F4

	thumb_func_start BabyDachoraWaitingToRun
BabyDachoraWaitingToRun: @ 0x0804D918
	push {r4, r5, lr}
	movs r3, #0
	ldr r5, _0804D974 @ =gSpriteData
	ldr r4, _0804D978 @ =0x030006EA
	movs r0, #0xa
	rsbs r0, r0, #0
	adds r0, r0, r4
	mov ip, r0
_0804D928:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r5
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804D962
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0804D962
	ldrb r0, [r2, #0x1d]
	cmp r0, #0xb8
	bne _0804D962
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _0804D962
	movs r0, #0x19
	mov r1, ip
	strb r0, [r1]
	movs r0, #0x5a
	strb r0, [r4]
_0804D962:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _0804D928
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D974: .4byte gSpriteData
_0804D978: .4byte 0x030006EA

	thumb_func_start BabyDachoraRunning
BabyDachoraRunning: @ 0x0804D97C
	push {lr}
	ldr r2, _0804D9A0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804D9A8
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0804D9CE
	ldr r0, _0804D9A4 @ =0x0838462C
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	b _0804D9CE
	.align 2, 0
_0804D9A0: .4byte gCurrentSprite
_0804D9A4: .4byte 0x0838462C
_0804D9A8:
	ldrh r0, [r2, #4]
	adds r0, #8
	strh r0, [r2, #4]
	ldrb r0, [r2, #0x1c]
	adds r0, #4
	strb r0, [r2, #0x1c]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	bne _0804D9CE
	ldr r1, _0804D9D4 @ =gSamusData
	adds r1, #0x22
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	strh r3, [r2]
_0804D9CE:
	pop {r0}
	bx r0
	.align 2, 0
_0804D9D4: .4byte gSamusData

	thumb_func_start EtecoonCheckGrabTireSwing
EtecoonCheckGrabTireSwing: @ 0x0804D9D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r2, _0804DA98 @ =gCurrentSprite
	ldrh r1, [r2, #2]
	ldrh r3, [r2, #4]
	ldrh r0, [r2, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r2, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sl, r1
	ldrh r0, [r2, #0xe]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldrh r0, [r2, #0x10]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r6, #0
_0804DA14:
	ldr r0, _0804DA9C @ =gSpriteData
	lsls r1, r6, #3
	subs r1, r1, r6
	lsls r1, r1, #3
	adds r5, r1, r0
	ldrh r2, [r5]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0804DAA0
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0804DAA0
	ldrb r0, [r5, #0x1d]
	cmp r0, #0xb7
	bne _0804DAA0
	movs r7, #0x80
	lsls r7, r7, #3
	adds r0, r7, #0
	ands r0, r2
	cmp r0, #0
	bne _0804DAA0
	ldrh r3, [r5, #2]
	ldrh r4, [r5, #4]
	ldrh r2, [r5, #0xa]
	adds r2, r3, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldrh r0, [r5, #0xc]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	ldrh r1, [r5, #0xe]
	adds r1, r4, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r5, #0x10]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r2, [sp]
	str r3, [sp, #4]
	str r1, [sp, #8]
	str r4, [sp, #0xc]
	ldr r0, [sp, #0x10]
	mov r1, sl
	mov r2, sb
	mov r3, r8
	bl CheckObjectsTouching
	cmp r0, #0
	beq _0804DAA0
	ldrh r0, [r5]
	adds r1, r7, #0
	orrs r1, r0
	strh r1, [r5]
	ldr r0, _0804DA98 @ =gCurrentSprite
	adds r0, #0x2d
	strb r6, [r0]
	movs r0, #1
	b _0804DAAC
	.align 2, 0
_0804DA98: .4byte gCurrentSprite
_0804DA9C: .4byte gSpriteData
_0804DAA0:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0x17
	bls _0804DA14
	movs r0, #0
_0804DAAC:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start EtecoonCheckFaceForeground
EtecoonCheckFaceForeground: @ 0x0804DABC
	push {r4, lr}
	movs r4, #1
	ldr r0, _0804DAD4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xc
	bhi _0804DB58
	lsls r0, r0, #2
	ldr r1, _0804DAD8 @ =_0804DADC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804DAD4: .4byte gSpriteRandomNumber
_0804DAD8: .4byte _0804DADC
_0804DADC: @ jump table
	.4byte _0804DB10 @ case 0
	.4byte _0804DB10 @ case 1
	.4byte _0804DB10 @ case 2
	.4byte _0804DB10 @ case 3
	.4byte _0804DB28 @ case 4
	.4byte _0804DB28 @ case 5
	.4byte _0804DB28 @ case 6
	.4byte _0804DB28 @ case 7
	.4byte _0804DB28 @ case 8
	.4byte _0804DB40 @ case 9
	.4byte _0804DB40 @ case 10
	.4byte _0804DB40 @ case 11
	.4byte _0804DB40 @ case 12
_0804DB10:
	ldr r1, _0804DB24 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	strb r3, [r1]
	b _0804DB5A
	.align 2, 0
_0804DB24: .4byte gCurrentSprite
_0804DB28:
	ldr r1, _0804DB3C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	b _0804DB5A
	.align 2, 0
_0804DB3C: .4byte gCurrentSprite
_0804DB40:
	ldr r1, _0804DB54 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #2
	strb r0, [r1]
	b _0804DB5A
	.align 2, 0
_0804DB54: .4byte gCurrentSprite
_0804DB58:
	movs r4, #0
_0804DB5A:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start EtecoonInit
EtecoonInit: @ 0x0804DB64
	push {r4, lr}
	bl EventCheckAfter_AnimalsReleased
	adds r3, r0, #0
	cmp r3, #0
	beq _0804DB7C
	ldr r1, _0804DB78 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0804DC2E
	.align 2, 0
_0804DB78: .4byte gCurrentSprite
_0804DB7C:
	ldr r4, _0804DBF4 @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xf
	strb r0, [r1]
	subs r1, #1
	movs r0, #3
	strb r0, [r1]
	adds r1, #6
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0804DBF8 @ =0x0000FFC0
	strh r0, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	ldr r0, _0804DBFC @ =0x0000FFF4
	strh r0, [r4, #0xe]
	movs r0, #0xc
	strh r0, [r4, #0x10]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	strh r0, [r4, #2]
	ldrh r0, [r4, #4]
	strh r0, [r4, #8]
	bl MakeSpriteFaceSamusXFlip
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #0xff
	strb r0, [r1]
	ldr r0, _0804DC00 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804DC04
	bl EtecoonCheckFaceForeground
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804DC04
	bl EtecoonFacingForegroundInit
	b _0804DC2E
	.align 2, 0
_0804DBF4: .4byte gCurrentSprite
_0804DBF8: .4byte 0x0000FFC0
_0804DBFC: .4byte 0x0000FFF4
_0804DC00: .4byte gSpriteRandomNumber
_0804DC04:
	ldr r3, _0804DC34 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0804DC38 @ =0x0838429C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	movs r1, #0
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	ldr r0, _0804DC3C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, #0x65
	adds r1, r3, #0
	adds r1, #0x2e
	strb r0, [r1]
_0804DC2E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804DC34: .4byte gCurrentSprite
_0804DC38: .4byte 0x0838429C
_0804DC3C: .4byte gSpriteRandomNumber

	thumb_func_start EtecoonIdleInit
EtecoonIdleInit: @ 0x0804DC40
	push {r4, lr}
	ldr r3, _0804DC84 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0804DC88 @ =0x0838429C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	movs r4, #0
	strh r2, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x30
	strb r4, [r0]
	ldr r0, _0804DC8C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, #0x1d
	adds r2, r3, #0
	adds r2, #0x2e
	strb r0, [r2]
	subs r2, #1
	movs r0, #0xff
	strb r0, [r2]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #8
	bls _0804DC90
	adds r0, r3, #0
	adds r0, #0x31
	strb r4, [r0]
	b _0804DC98
	.align 2, 0
_0804DC84: .4byte gCurrentSprite
_0804DC88: .4byte 0x0838429C
_0804DC8C: .4byte gSpriteRandomNumber
_0804DC90:
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
_0804DC98:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EtecoonIdle
EtecoonIdle: @ 0x0804DCA0
	push {r4, r5, lr}
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _0804DD08
	ldr r3, _0804DCF4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
	ldr r2, _0804DCF8 @ =gSpriteData
	ldr r0, _0804DCFC @ =gBossWork2
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1a
	bne _0804DD6C
	ldr r0, _0804DD00 @ =gAbilityRestingXPosition
	ldr r2, _0804DD04 @ =0xFFFFFF00
	adds r1, r2, #0
	ldrh r0, [r0]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r2, [r3, #4]
	adds r0, r1, #0
	subs r0, #0x20
	cmp r2, r0
	ble _0804DD6C
	adds r0, #0x40
	cmp r2, r0
	bge _0804DD6C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	b _0804DDF4
	.align 2, 0
_0804DCF4: .4byte gCurrentSprite
_0804DCF8: .4byte gSpriteData
_0804DCFC: .4byte gBossWork2
_0804DD00: .4byte gAbilityRestingXPosition
_0804DD04: .4byte 0xFFFFFF00
_0804DD08:
	ldr r4, _0804DD34 @ =gCurrentSprite
	ldrh r2, [r4, #4]
	ldr r0, _0804DD38 @ =gAbilityRestingXPosition
	ldrh r1, [r0]
	movs r3, #0xe0
	lsls r3, r3, #1
	adds r0, r1, r3
	cmp r2, r0
	bgt _0804DD22
	ldr r3, _0804DD3C @ =0xFFFFFE40
	adds r0, r1, r3
	cmp r2, r0
	bge _0804DD6C
_0804DD22:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804DD40
	subs r0, #1
	strb r0, [r1]
	b _0804DD6C
	.align 2, 0
_0804DD34: .4byte gCurrentSprite
_0804DD38: .4byte gAbilityRestingXPosition
_0804DD3C: .4byte 0xFFFFFE40
_0804DD40:
	bl EtecoonCheckGrabTireSwing
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804DD56
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #7
	strb r0, [r1]
	adds r1, #0xb
	b _0804DDE4
_0804DD56:
	ldr r0, _0804DD98 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	cmp r0, #0
	bne _0804DD6C
	bl EtecoonCheckFaceForeground
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804DDF4
_0804DD6C:
	ldr r0, _0804DD9C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x31
	ldrb r1, [r1]
	adds r4, r0, #0
	cmp r1, #0
	beq _0804DDA0
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	lsrs r3, r0, #0x1a
	cmp r1, #0x1f
	bhi _0804DD8E
	adds r0, r2, #2
	strb r0, [r5]
_0804DD8E:
	ldrb r0, [r4, #0x1c]
	adds r0, #1
	strb r0, [r4, #0x1c]
	b _0804DDB4
	.align 2, 0
_0804DD98: .4byte gFrameCounter8Bit
_0804DD9C: .4byte gCurrentSprite
_0804DDA0:
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	lsrs r3, r0, #0x1a
	cmp r1, #0xf
	bhi _0804DDB4
	adds r0, r2, #1
	strb r0, [r5]
_0804DDB4:
	adds r2, r4, #0
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804DDD4
	ldrh r0, [r2, #8]
	movs r1, #0xe0
	lsls r1, r1, #2
	adds r0, r0, r1
	ldrh r1, [r2, #4]
	cmp r0, r1
	blt _0804DDE0
	adds r0, r1, r3
	strh r0, [r2, #4]
	b _0804DDF4
_0804DDD4:
	ldrh r0, [r2, #8]
	ldr r1, _0804DDEC @ =0xFFFFFC80
	adds r0, r0, r1
	ldrh r1, [r2, #4]
	cmp r0, r1
	ble _0804DDF0
_0804DDE0:
	adds r1, r2, #0
	adds r1, #0x24
_0804DDE4:
	movs r0, #3
	strb r0, [r1]
	b _0804DDF4
	.align 2, 0
_0804DDEC: .4byte 0xFFFFFC80
_0804DDF0:
	subs r0, r1, r3
	strh r0, [r4, #4]
_0804DDF4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EtecoonStandingInit
EtecoonStandingInit: @ 0x0804DDFC
	ldr r0, _0804DE18 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #8
	strb r1, [r2]
	ldr r1, _0804DE1C @ =0x0838428C
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0xb
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804DE18: .4byte gCurrentSprite
_0804DE1C: .4byte 0x0838428C

	thumb_func_start EtecoonStanding
EtecoonStanding: @ 0x0804DE20
	push {r4, lr}
	ldr r4, _0804DE40 @ =gCurrentSprite
	ldr r1, [r4, #0x18]
	ldr r0, _0804DE44 @ =0x0838428C
	cmp r1, r0
	bne _0804DE4C
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804DE62
	ldr r0, _0804DE48 @ =0x08384254
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	b _0804DE62
	.align 2, 0
_0804DE40: .4byte gCurrentSprite
_0804DE44: .4byte 0x0838428C
_0804DE48: .4byte 0x08384254
_0804DE4C:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804DE62
	subs r1, #0xa
	movs r0, #9
	strb r0, [r1]
_0804DE62:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start EtecoonFacingForegroundInit
EtecoonFacingForegroundInit: @ 0x0804DE68
	push {lr}
	ldr r0, _0804DE84 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0xa
	strb r1, [r2]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	adds r1, r0, #0
	cmp r2, #1
	bne _0804DE8C
	ldr r0, _0804DE88 @ =0x083842D4
	b _0804DEA6
	.align 2, 0
_0804DE84: .4byte gCurrentSprite
_0804DE88: .4byte 0x083842D4
_0804DE8C:
	cmp r2, #2
	bne _0804DE98
	ldr r0, _0804DE94 @ =0x0838431C
	b _0804DEA6
	.align 2, 0
_0804DE94: .4byte 0x0838431C
_0804DE98:
	cmp r2, #3
	bne _0804DEA4
	ldr r0, _0804DEA0 @ =0x08384374
	b _0804DEA6
	.align 2, 0
_0804DEA0: .4byte 0x08384374
_0804DEA4:
	ldr r0, _0804DEBC @ =0x08384264
_0804DEA6:
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	ldr r0, _0804DEC0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #2
	adds r1, #0x2e
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0804DEBC: .4byte 0x08384264
_0804DEC0: .4byte gSpriteRandomNumber

	thumb_func_start EtecoonFacingForeground
EtecoonFacingForeground: @ 0x0804DEC4
	push {r4, lr}
	ldr r0, _0804DF20 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x2d
	ldrb r2, [r0]
	mov r0, ip
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #3
	bne _0804DF30
	cmp r2, #0xff
	beq _0804DF30
	mov r1, ip
	ldrh r0, [r1, #0x16]
	cmp r0, #3
	bne _0804DF30
	ldrb r0, [r1, #0x1c]
	cmp r0, #6
	bne _0804DF30
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x38
	strb r0, [r1]
	mov r0, ip
	strb r3, [r0, #0x1c]
	movs r4, #0
	strh r3, [r0, #0x16]
	ldr r0, _0804DF24 @ =0x083843CC
	mov r1, ip
	str r0, [r1, #0x18]
	ldr r1, _0804DF28 @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r2, r0, r1
	strb r4, [r2, #0x1c]
	strh r3, [r2, #0x16]
	adds r1, #0x18
	adds r0, r0, r1
	ldr r1, _0804DF2C @ =0x0838447C
	str r1, [r0]
	ldrh r0, [r2, #4]
	mov r1, ip
	strh r0, [r1, #4]
	b _0804DF82
	.align 2, 0
_0804DF20: .4byte gCurrentSprite
_0804DF24: .4byte 0x083843CC
_0804DF28: .4byte gSpriteData
_0804DF2C: .4byte 0x0838447C
_0804DF30:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804DF82
	ldr r1, _0804DF5C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r3, r1, #0
	cmp r0, #2
	beq _0804DF4A
	cmp r0, #0
	bne _0804DF60
_0804DF4A:
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804DF60
	subs r0, #1
	strb r0, [r1]
	b _0804DF82
	.align 2, 0
_0804DF5C: .4byte gCurrentSprite
_0804DF60:
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0804DF88 @ =0x0838428C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0804DF8C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #6
	bhi _0804DF82
	ldrh r0, [r3]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r3]
_0804DF82:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804DF88: .4byte 0x0838428C
_0804DF8C: .4byte gSpriteRandomNumber

	thumb_func_start EtecoonTurningAroundInit
EtecoonTurningAroundInit: @ 0x0804DF90
	ldr r1, _0804DFA8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #4
	strb r0, [r2]
	ldr r0, _0804DFAC @ =0x083842C4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804DFA8: .4byte gCurrentSprite
_0804DFAC: .4byte 0x083842C4

	thumb_func_start EtecoonTurningAround
EtecoonTurningAround: @ 0x0804DFB0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804DFF0
	ldr r2, _0804DFE4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0804DFE8 @ =0x083842C4
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x22
	ldrb r0, [r2]
	cmp r0, #0xe
	bne _0804DFEC
	movs r0, #0xf
	b _0804DFEE
	.align 2, 0
_0804DFE4: .4byte gCurrentSprite
_0804DFE8: .4byte 0x083842C4
_0804DFEC:
	movs r0, #0xe
_0804DFEE:
	strb r0, [r2]
_0804DFF0:
	pop {r0}
	bx r0

	thumb_func_start EtecoonTurningAroundSecondPart
EtecoonTurningAroundSecondPart: @ 0x0804DFF4
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E006
	ldr r0, _0804E00C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804E006:
	pop {r0}
	bx r0
	.align 2, 0
_0804E00C: .4byte gCurrentSprite

	thumb_func_start EtecoonJumpingToTire
EtecoonJumpingToTire: @ 0x0804E010
	push {r4, r5, r6, lr}
	ldr r5, _0804E05C @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r6, [r0]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E056
	adds r1, r5, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x3a
	strb r0, [r1]
	strb r3, [r5, #0x1c]
	movs r4, #0
	strh r3, [r5, #0x16]
	ldr r0, _0804E060 @ =0x083843F4
	str r0, [r5, #0x18]
	ldr r0, _0804E064 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #1
	adds r1, #0xa
	strb r0, [r1]
	ldr r2, _0804E068 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r1, r0, r2
	strb r4, [r1, #0x1c]
	strh r3, [r1, #0x16]
	adds r2, #0x18
	adds r0, r0, r2
	ldr r1, _0804E06C @ =0x0838449C
	str r1, [r0]
_0804E056:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804E05C: .4byte gCurrentSprite
_0804E060: .4byte 0x083843F4
_0804E064: .4byte gSpriteRandomNumber
_0804E068: .4byte gSpriteData
_0804E06C: .4byte 0x0838449C

	thumb_func_start EtecoonSwingingFromTire
EtecoonSwingingFromTire: @ 0x0804E070
	push {r4, r5, r6, lr}
	ldr r4, _0804E0A4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r6, [r0]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E0F0
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r5, r0, #0
	cmp r5, #0
	beq _0804E0C8
	subs r0, #1
	strb r0, [r1]
	ldr r0, _0804E0A8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804E0B0
	ldr r0, _0804E0AC @ =0x083843F4
	b _0804E0B2
	.align 2, 0
_0804E0A4: .4byte gCurrentSprite
_0804E0A8: .4byte gSpriteRandomNumber
_0804E0AC: .4byte 0x083843F4
_0804E0B0:
	ldr r0, _0804E0C0 @ =0x0838441C
_0804E0B2:
	str r0, [r4, #0x18]
	ldr r1, _0804E0C4 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	b _0804E0F0
	.align 2, 0
_0804E0C0: .4byte 0x0838441C
_0804E0C4: .4byte gCurrentSprite
_0804E0C8:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	strb r5, [r4, #0x1c]
	movs r3, #0
	strh r5, [r4, #0x16]
	ldr r0, _0804E0F8 @ =0x08384444
	str r0, [r4, #0x18]
	ldr r2, _0804E0FC @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r1, r0, r2
	strb r3, [r1, #0x1c]
	strh r5, [r1, #0x16]
	adds r2, #0x18
	adds r0, r0, r2
	ldr r1, _0804E100 @ =0x083844BC
	str r1, [r0]
_0804E0F0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804E0F8: .4byte 0x08384444
_0804E0FC: .4byte gSpriteData
_0804E100: .4byte 0x083844BC

	thumb_func_start EtecoonFallingFromTire
EtecoonFallingFromTire: @ 0x0804E104
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E132
	ldr r3, _0804E138 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #5
	strb r0, [r1]
	ldr r0, _0804E13C @ =0x0838428C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
	ldr r0, _0804E140 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #6
	bhi _0804E132
	ldrh r0, [r3]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r3]
_0804E132:
	pop {r0}
	bx r0
	.align 2, 0
_0804E138: .4byte gCurrentSprite
_0804E13C: .4byte 0x0838428C
_0804E140: .4byte gSpriteRandomNumber

	thumb_func_start EtecoonTurningAroundWhileLeavingInit
EtecoonTurningAroundWhileLeavingInit: @ 0x0804E144
	ldr r1, _0804E15C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x3e
	strb r0, [r2]
	ldr r0, _0804E160 @ =0x083842C4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804E15C: .4byte gCurrentSprite
_0804E160: .4byte 0x083842C4

	thumb_func_start EtecoonTurningAroundWhileLeaving
EtecoonTurningAroundWhileLeaving: @ 0x0804E164
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E18A
	ldr r2, _0804E190 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x40
	strb r0, [r1]
	ldr r0, _0804E194 @ =0x083842C4
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
_0804E18A:
	pop {r0}
	bx r0
	.align 2, 0
_0804E190: .4byte gCurrentSprite
_0804E194: .4byte 0x083842C4

	thumb_func_start EtecoonTurningAroundWhileLeavingSecondPart
EtecoonTurningAroundWhileLeavingSecondPart: @ 0x0804E198
	push {lr}
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E1AA
	ldr r0, _0804E1B0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	strb r1, [r0]
_0804E1AA:
	pop {r0}
	bx r0
	.align 2, 0
_0804E1B0: .4byte gCurrentSprite

	thumb_func_start EtecoonLeavingEnclosureInit
EtecoonLeavingEnclosureInit: @ 0x0804E1B4
	ldr r3, _0804E1D4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #3
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804E1D4: .4byte gCurrentSprite

	thumb_func_start EtecoonLeavingEnclosure
EtecoonLeavingEnclosure: @ 0x0804E1D8
	push {r4, r5, lr}
	ldr r2, _0804E210 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r4, [r0]
	ldr r1, _0804E214 @ =0x0838188C
	lsls r0, r4, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, _0804E218 @ =0x00007FFF
	adds r3, r2, #0
	cmp r1, r0
	bne _0804E296
	ldrh r0, [r2, #4]
	ldr r4, _0804E21C @ =0x0000FFF8
	ands r4, r0
	ldrh r1, [r2, #8]
	ldr r0, _0804E220 @ =gAbilityRestingXPosition
	ldrh r2, [r0]
	adds r0, r2, #0
	adds r0, #0x40
	cmp r1, r0
	bne _0804E228
	ldr r5, _0804E224 @ =0xFFFFFF00
	b _0804E23E
	.align 2, 0
_0804E210: .4byte gCurrentSprite
_0804E214: .4byte 0x0838188C
_0804E218: .4byte 0x00007FFF
_0804E21C: .4byte 0x0000FFF8
_0804E220: .4byte gAbilityRestingXPosition
_0804E224: .4byte 0xFFFFFF00
_0804E228:
	movs r5, #0xa0
	lsls r5, r5, #1
	adds r0, r2, r5
	cmp r1, r0
	bne _0804E23C
	ldr r1, _0804E238 @ =0xFFFFFEC0
	adds r0, r2, r1
	b _0804E240
	.align 2, 0
_0804E238: .4byte 0xFFFFFEC0
_0804E23C:
	ldr r5, _0804E25C @ =0xFFFFFE80
_0804E23E:
	adds r0, r2, r5
_0804E240:
	movs r2, #8
	rsbs r2, r2, #0
	adds r1, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r4, r0
	bhs _0804E260
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _0804E26E
	b _0804E28C
	.align 2, 0
_0804E25C: .4byte 0xFFFFFE80
_0804E260:
	cmp r4, r0
	bls _0804E278
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _0804E28C
_0804E26E:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0804E2B8
_0804E278:
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804E28C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	b _0804E2B8
_0804E28C:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3d
	strb r0, [r1]
	b _0804E2B8
_0804E296:
	adds r0, r4, #1
	mov r3, ip
	strb r0, [r3]
	ldrh r0, [r2, #2]
	adds r0, r0, r5
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804E2B2
	ldrh r0, [r2, #4]
	adds r0, #4
	b _0804E2B6
_0804E2B2:
	ldrh r0, [r2, #4]
	subs r0, #4
_0804E2B6:
	strh r0, [r2, #4]
_0804E2B8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EtecoonWalkingToWaitingSpotInit
EtecoonWalkingToWaitingSpotInit: @ 0x0804E2C0
	ldr r1, _0804E2D4 @ =gCurrentSprite
	ldr r0, _0804E2D8 @ =0x0838429C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804E2D4: .4byte gCurrentSprite
_0804E2D8: .4byte 0x0838429C

	thumb_func_start EtecoonWalkingToWaitingSpot
EtecoonWalkingToWaitingSpot: @ 0x0804E2DC
	push {r4, r5, lr}
	ldr r1, _0804E2FC @ =gCurrentSprite
	ldrh r0, [r1, #4]
	ldr r5, _0804E300 @ =0x0000FFF8
	ands r5, r0
	ldrh r3, [r1, #8]
	ldr r0, _0804E304 @ =gAbilityRestingXPosition
	ldrh r2, [r0]
	adds r0, r2, #0
	adds r0, #0x40
	adds r4, r1, #0
	cmp r3, r0
	bne _0804E30C
	ldr r1, _0804E308 @ =0xFFFFFF00
	b _0804E322
	.align 2, 0
_0804E2FC: .4byte gCurrentSprite
_0804E300: .4byte 0x0000FFF8
_0804E304: .4byte gAbilityRestingXPosition
_0804E308: .4byte 0xFFFFFF00
_0804E30C:
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r2, r1
	cmp r3, r0
	bne _0804E320
	ldr r1, _0804E31C @ =0xFFFFFEC0
	b _0804E322
	.align 2, 0
_0804E31C: .4byte 0xFFFFFEC0
_0804E320:
	ldr r1, _0804E348 @ =0xFFFFFE80
_0804E322:
	adds r0, r2, r1
	movs r2, #8
	rsbs r2, r2, #0
	adds r1, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhs _0804E34C
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804E374
	ldrh r0, [r4, #4]
	adds r0, #4
	strh r0, [r4, #4]
	b _0804E37C
	.align 2, 0
_0804E348: .4byte 0xFFFFFE80
_0804E34C:
	cmp r5, r0
	bls _0804E362
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _0804E374
	ldrh r0, [r4, #4]
	subs r0, #4
	strh r0, [r4, #4]
	b _0804E37C
_0804E362:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804E374
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1b
	b _0804E37A
_0804E374:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3d
_0804E37A:
	strb r0, [r1]
_0804E37C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start EtecoonWaitingForOthersInit
EtecoonWaitingForOthersInit: @ 0x0804E384
	ldr r1, _0804E398 @ =gCurrentSprite
	ldr r0, _0804E39C @ =0x0838471C
	str r0, [r1, #0x18]
	movs r0, #0
	strb r0, [r1, #0x1c]
	strh r0, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	bx lr
	.align 2, 0
_0804E398: .4byte gCurrentSprite
_0804E39C: .4byte 0x0838471C

	thumb_func_start EtecoonWaitingForOthers
EtecoonWaitingForOthers: @ 0x0804E3A0
	push {r4, r5, lr}
	ldr r1, _0804E410 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804E3B6
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0804E3B6
	ldr r0, _0804E414 @ =0x00000121
	bl CheckPlayNotAlreadyPlayingSound
_0804E3B6:
	movs r3, #0
	ldr r5, _0804E418 @ =gSpriteData
	ldr r4, _0804E41C @ =0x030006EA
	movs r0, #0xa
	rsbs r0, r0, #0
	adds r0, r0, r4
	mov ip, r0
_0804E3C4:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r5
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804E3FE
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0804E3FE
	ldrb r0, [r2, #0x1d]
	cmp r0, #0xb8
	bne _0804E3FE
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _0804E3FE
	movs r0, #0x1d
	mov r1, ip
	strb r0, [r1]
	movs r0, #0x14
	strb r0, [r4]
_0804E3FE:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _0804E3C4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E410: .4byte gCurrentSprite
_0804E414: .4byte 0x00000121
_0804E418: .4byte gSpriteData
_0804E41C: .4byte 0x030006EA

	thumb_func_start EtecoonRunning
EtecoonRunning: @ 0x0804E420
	push {lr}
	ldr r2, _0804E444 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804E44C
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _0804E468
	ldr r0, _0804E448 @ =0x0838429C
	str r0, [r2, #0x18]
	strb r1, [r2, #0x1c]
	strh r1, [r2, #0x16]
	b _0804E468
	.align 2, 0
_0804E444: .4byte gCurrentSprite
_0804E448: .4byte 0x0838429C
_0804E44C:
	ldrh r0, [r2, #4]
	adds r0, #0x10
	strh r0, [r2, #4]
	ldrb r0, [r2, #0x1c]
	adds r0, #2
	strb r0, [r2, #0x1c]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804E468
	strh r0, [r2]
_0804E468:
	pop {r0}
	bx r0

	thumb_func_start TireSwingInit
TireSwingInit: @ 0x0804E46C
	ldr r0, _0804E4C8 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x22
	movs r3, #0
	movs r0, #0xd
	strb r0, [r1]
	subs r1, #1
	movs r0, #3
	strb r0, [r1]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0x20
	movs r2, #0
	strh r0, [r1, #2]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0x27
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0804E4CC @ =0x0000FFC0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r0, #0x20
	strh r0, [r1, #0xc]
	ldr r0, _0804E4D0 @ =0x0000FFFC
	strh r0, [r1, #0xe]
	movs r0, #4
	strh r0, [r1, #0x10]
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0804E4D4 @ =0x0838446C
	mov r1, ip
	str r0, [r1, #0x18]
	strb r2, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804E4C8: .4byte gCurrentSprite
_0804E4CC: .4byte 0x0000FFC0
_0804E4D0: .4byte 0x0000FFFC
_0804E4D4: .4byte 0x0838446C

	thumb_func_start TireSwingIdle
TireSwingIdle: @ 0x0804E4D8
	push {r4, lr}
	ldr r4, _0804E510 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0804E50A
	ldr r1, [r4, #0x18]
	ldr r0, _0804E514 @ =0x083844BC
	cmp r1, r0
	bne _0804E50A
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804E50A
	ldr r0, _0804E518 @ =0x0838446C
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _0804E51C @ =0x0000FBFF
	ands r0, r1
	strh r0, [r4]
_0804E50A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E510: .4byte gCurrentSprite
_0804E514: .4byte 0x083844BC
_0804E518: .4byte 0x0838446C
_0804E51C: .4byte 0x0000FBFF

	thumb_func_start Dachora
Dachora: @ 0x0804E520
	push {lr}
	ldr r0, _0804E540 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bls _0804E536
	b _0804E6AE
_0804E536:
	lsls r0, r0, #2
	ldr r1, _0804E544 @ =_0804E548
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804E540: .4byte gCurrentSprite
_0804E544: .4byte _0804E548
_0804E548: @ jump table
	.4byte _0804E634 @ case 0
	.4byte _0804E63A @ case 1
	.4byte _0804E63E @ case 2
	.4byte _0804E644 @ case 3
	.4byte _0804E648 @ case 4
	.4byte _0804E64E @ case 5
	.4byte _0804E6AE @ case 6
	.4byte _0804E654 @ case 7
	.4byte _0804E658 @ case 8
	.4byte _0804E65E @ case 9
	.4byte _0804E662 @ case 10
	.4byte _0804E6AE @ case 11
	.4byte _0804E6AE @ case 12
	.4byte _0804E6AE @ case 13
	.4byte _0804E6AE @ case 14
	.4byte _0804E6AE @ case 15
	.4byte _0804E6AE @ case 16
	.4byte _0804E6AE @ case 17
	.4byte _0804E6AE @ case 18
	.4byte _0804E6AE @ case 19
	.4byte _0804E6AE @ case 20
	.4byte _0804E6AE @ case 21
	.4byte _0804E6AE @ case 22
	.4byte _0804E678 @ case 23
	.4byte _0804E67C @ case 24
	.4byte _0804E682 @ case 25
	.4byte _0804E686 @ case 26
	.4byte _0804E68C @ case 27
	.4byte _0804E692 @ case 28
	.4byte _0804E698 @ case 29
	.4byte _0804E69E @ case 30
	.4byte _0804E6A4 @ case 31
	.4byte _0804E6AA @ case 32
	.4byte _0804E6AE @ case 33
	.4byte _0804E6AE @ case 34
	.4byte _0804E6AE @ case 35
	.4byte _0804E6AE @ case 36
	.4byte _0804E6AE @ case 37
	.4byte _0804E6AE @ case 38
	.4byte _0804E6AE @ case 39
	.4byte _0804E6AE @ case 40
	.4byte _0804E6AE @ case 41
	.4byte _0804E6AE @ case 42
	.4byte _0804E6AE @ case 43
	.4byte _0804E6AE @ case 44
	.4byte _0804E6AE @ case 45
	.4byte _0804E6AE @ case 46
	.4byte _0804E6AE @ case 47
	.4byte _0804E6AE @ case 48
	.4byte _0804E6AE @ case 49
	.4byte _0804E6AE @ case 50
	.4byte _0804E6AE @ case 51
	.4byte _0804E6AE @ case 52
	.4byte _0804E6AE @ case 53
	.4byte _0804E6AE @ case 54
	.4byte _0804E668 @ case 55
	.4byte _0804E66C @ case 56
	.4byte _0804E6AE @ case 57
	.4byte _0804E672 @ case 58
_0804E634:
	bl DachoraInit
	b _0804E6AE
_0804E63A:
	bl DachoraIdleInit
_0804E63E:
	bl DachoraIdle
	b _0804E6AE
_0804E644:
	bl DachoraTurningAroundInit
_0804E648:
	bl DachoraTurningAround
	b _0804E6AE
_0804E64E:
	bl DachoraTurningAroundSecondPart
	b _0804E6AE
_0804E654:
	bl DachoraStandingInit
_0804E658:
	bl DachoraStanding
	b _0804E6AE
_0804E65E:
	bl DachoraHeadMovementInit
_0804E662:
	bl DachoraHeadMovement
	b _0804E6AE
_0804E668:
	bl DachoraTurningAroundWhileLeavingInit
_0804E66C:
	bl DachoraTurningAroundWhileLeaving
	b _0804E6AE
_0804E672:
	bl DachoraTurningAroundWhileLeavingSecondPart
	b _0804E6AE
_0804E678:
	bl DachoraLeavingEnclosureInit
_0804E67C:
	bl DachoraLeavingEnclosure
	b _0804E6AE
_0804E682:
	bl DachoraWalkingToWaitingSpotInit
_0804E686:
	bl DachoraWalkingToWaitingSpot
	b _0804E6AE
_0804E68C:
	bl DachorawaitingForOthers
	b _0804E6AE
_0804E692:
	bl DachoraWaitingToSpawnBaby
	b _0804E6AE
_0804E698:
	bl DachoraWaitingForBaby
	b _0804E6AE
_0804E69E:
	bl DachoraBowing
	b _0804E6AE
_0804E6A4:
	bl DachoraWaitingToRun
	b _0804E6AE
_0804E6AA:
	bl DachoraRunning
_0804E6AE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BabyDachora
BabyDachora: @ 0x0804E6B4
	push {lr}
	ldr r0, _0804E6D4 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x19
	bhi _0804E766
	lsls r0, r0, #2
	ldr r1, _0804E6D8 @ =_0804E6DC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804E6D4: .4byte gCurrentSprite
_0804E6D8: .4byte _0804E6DC
_0804E6DC: @ jump table
	.4byte _0804E744 @ case 0
	.4byte _0804E74A @ case 1
	.4byte _0804E750 @ case 2
	.4byte _0804E766 @ case 3
	.4byte _0804E766 @ case 4
	.4byte _0804E766 @ case 5
	.4byte _0804E766 @ case 6
	.4byte _0804E766 @ case 7
	.4byte _0804E766 @ case 8
	.4byte _0804E766 @ case 9
	.4byte _0804E766 @ case 10
	.4byte _0804E766 @ case 11
	.4byte _0804E766 @ case 12
	.4byte _0804E766 @ case 13
	.4byte _0804E766 @ case 14
	.4byte _0804E766 @ case 15
	.4byte _0804E766 @ case 16
	.4byte _0804E766 @ case 17
	.4byte _0804E766 @ case 18
	.4byte _0804E766 @ case 19
	.4byte _0804E766 @ case 20
	.4byte _0804E766 @ case 21
	.4byte _0804E766 @ case 22
	.4byte _0804E756 @ case 23
	.4byte _0804E75C @ case 24
	.4byte _0804E762 @ case 25
_0804E744:
	bl BabyDachoraInit
	b _0804E766
_0804E74A:
	bl BabyDachoraWalkingToGate
	b _0804E766
_0804E750:
	bl BabyDachoraLeavingEnclosure
	b _0804E766
_0804E756:
	bl BabyDachoraWalkingToWaitingSpot
	b _0804E766
_0804E75C:
	bl BabyDachoraWaitingToRun
	b _0804E766
_0804E762:
	bl BabyDachoraRunning
_0804E766:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Etecoon
Etecoon: @ 0x0804E76C
	push {lr}
	ldr r0, _0804E78C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x40
	bls _0804E782
	b _0804E910
_0804E782:
	lsls r0, r0, #2
	ldr r1, _0804E790 @ =_0804E794
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804E78C: .4byte gCurrentSprite
_0804E790: .4byte _0804E794
_0804E794: @ jump table
	.4byte _0804E898 @ case 0
	.4byte _0804E89E @ case 1
	.4byte _0804E8A2 @ case 2
	.4byte _0804E8A8 @ case 3
	.4byte _0804E8AC @ case 4
	.4byte _0804E8B2 @ case 5
	.4byte _0804E910 @ case 6
	.4byte _0804E8B8 @ case 7
	.4byte _0804E8BC @ case 8
	.4byte _0804E8C2 @ case 9
	.4byte _0804E8C6 @ case 10
	.4byte _0804E910 @ case 11
	.4byte _0804E910 @ case 12
	.4byte _0804E910 @ case 13
	.4byte _0804E910 @ case 14
	.4byte _0804E910 @ case 15
	.4byte _0804E910 @ case 16
	.4byte _0804E910 @ case 17
	.4byte _0804E910 @ case 18
	.4byte _0804E910 @ case 19
	.4byte _0804E910 @ case 20
	.4byte _0804E910 @ case 21
	.4byte _0804E910 @ case 22
	.4byte _0804E8EE @ case 23
	.4byte _0804E8F2 @ case 24
	.4byte _0804E8F8 @ case 25
	.4byte _0804E8FC @ case 26
	.4byte _0804E902 @ case 27
	.4byte _0804E906 @ case 28
	.4byte _0804E90C @ case 29
	.4byte _0804E910 @ case 30
	.4byte _0804E910 @ case 31
	.4byte _0804E910 @ case 32
	.4byte _0804E910 @ case 33
	.4byte _0804E910 @ case 34
	.4byte _0804E910 @ case 35
	.4byte _0804E910 @ case 36
	.4byte _0804E910 @ case 37
	.4byte _0804E910 @ case 38
	.4byte _0804E910 @ case 39
	.4byte _0804E910 @ case 40
	.4byte _0804E910 @ case 41
	.4byte _0804E910 @ case 42
	.4byte _0804E910 @ case 43
	.4byte _0804E910 @ case 44
	.4byte _0804E910 @ case 45
	.4byte _0804E910 @ case 46
	.4byte _0804E910 @ case 47
	.4byte _0804E910 @ case 48
	.4byte _0804E910 @ case 49
	.4byte _0804E910 @ case 50
	.4byte _0804E910 @ case 51
	.4byte _0804E910 @ case 52
	.4byte _0804E910 @ case 53
	.4byte _0804E910 @ case 54
	.4byte _0804E910 @ case 55
	.4byte _0804E8CC @ case 56
	.4byte _0804E910 @ case 57
	.4byte _0804E8D2 @ case 58
	.4byte _0804E910 @ case 59
	.4byte _0804E8D8 @ case 60
	.4byte _0804E8DE @ case 61
	.4byte _0804E8E2 @ case 62
	.4byte _0804E910 @ case 63
	.4byte _0804E8E8 @ case 64
_0804E898:
	bl EtecoonInit
	b _0804E910
_0804E89E:
	bl EtecoonIdleInit
_0804E8A2:
	bl EtecoonIdle
	b _0804E910
_0804E8A8:
	bl EtecoonTurningAroundInit
_0804E8AC:
	bl EtecoonTurningAround
	b _0804E910
_0804E8B2:
	bl EtecoonTurningAroundSecondPart
	b _0804E910
_0804E8B8:
	bl EtecoonStandingInit
_0804E8BC:
	bl EtecoonStanding
	b _0804E910
_0804E8C2:
	bl EtecoonFacingForegroundInit
_0804E8C6:
	bl EtecoonFacingForeground
	b _0804E910
_0804E8CC:
	bl EtecoonJumpingToTire
	b _0804E910
_0804E8D2:
	bl EtecoonSwingingFromTire
	b _0804E910
_0804E8D8:
	bl EtecoonFallingFromTire
	b _0804E910
_0804E8DE:
	bl EtecoonTurningAroundWhileLeavingInit
_0804E8E2:
	bl EtecoonTurningAroundWhileLeaving
	b _0804E910
_0804E8E8:
	bl EtecoonTurningAroundWhileLeavingSecondPart
	b _0804E910
_0804E8EE:
	bl EtecoonLeavingEnclosureInit
_0804E8F2:
	bl EtecoonLeavingEnclosure
	b _0804E910
_0804E8F8:
	bl EtecoonWalkingToWaitingSpotInit
_0804E8FC:
	bl EtecoonWalkingToWaitingSpot
	b _0804E910
_0804E902:
	bl EtecoonWaitingForOthersInit
_0804E906:
	bl EtecoonWaitingForOthers
	b _0804E910
_0804E90C:
	bl EtecoonRunning
_0804E910:
	pop {r0}
	bx r0

	thumb_func_start TireSwing
TireSwing: @ 0x0804E914
	push {lr}
	ldr r0, _0804E930 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804E934
	cmp r0, #2
	beq _0804E93A
	b _0804E93E
	.align 2, 0
_0804E930: .4byte gCurrentSprite
_0804E934:
	bl TireSwingInit
	b _0804E93E
_0804E93A:
	bl TireSwingIdle
_0804E93E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start HabitationGateLight
HabitationGateLight: @ 0x0804E944
	push {r4, r5, r6, lr}
	ldr r4, _0804E964 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r6, #0
	movs r0, #1
	strb r0, [r1]
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #0
	beq _0804E968
	cmp r0, #2
	beq _0804E9F4
	b _0804EA08
	.align 2, 0
_0804E964: .4byte gCurrentSprite
_0804E968:
	ldrh r0, [r4]
	ldr r1, _0804E980 @ =0x0000FFFB
	ands r1, r0
	strh r1, [r4]
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _0804E988
	ldr r0, _0804E984 @ =0x08384744
	str r0, [r4, #0x18]
	b _0804E998
	.align 2, 0
_0804E980: .4byte 0x0000FFFB
_0804E984: .4byte 0x08384744
_0804E988:
	ldr r0, _0804E9E8 @ =0x08384674
	str r0, [r4, #0x18]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
_0804E998:
	ldr r3, _0804E9EC @ =gCurrentSprite
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r1, #0
	strh r0, [r3, #0x16]
	adds r2, r3, #0
	adds r2, #0x22
	movs r0, #0xc
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x21
	movs r2, #2
	strb r2, [r0]
	ldrh r0, [r3, #2]
	subs r0, #0x20
	strh r0, [r3, #2]
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	adds r4, r3, #0
	adds r4, #0x27
	movs r0, #0x40
	strb r0, [r4]
	adds r0, r3, #0
	adds r0, #0x28
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0804E9F0 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	adds r0, r3, #0
	adds r0, #0x24
	strb r2, [r0]
	b _0804EA08
	.align 2, 0
_0804E9E8: .4byte 0x08384674
_0804E9EC: .4byte gCurrentSprite
_0804E9F0: .4byte 0x0000FFFC
_0804E9F4:
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _0804EA08
	ldr r0, _0804EA10 @ =0x08384744
	str r0, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
	movs r0, #0x18
	strb r0, [r5]
_0804EA08:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804EA10: .4byte 0x08384744

	thumb_func_start HabitationGate
HabitationGate: @ 0x0804EA14
	push {r4, r5, r6, lr}
	ldr r4, _0804EA38 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r5, #0
	movs r0, #1
	strb r0, [r1]
	adds r6, r4, #0
	adds r6, #0x24
	ldrb r0, [r6]
	cmp r0, #2
	beq _0804EAB8
	cmp r0, #2
	bgt _0804EA3C
	cmp r0, #0
	beq _0804EA42
	b _0804EAE4
	.align 2, 0
_0804EA38: .4byte gCurrentSprite
_0804EA3C:
	cmp r0, #0x18
	beq _0804EAD0
	b _0804EAE4
_0804EA42:
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	subs r1, #1
	movs r0, #3
	strb r0, [r1]
	ldrh r0, [r4, #2]
	subs r0, #0x20
	movs r2, #0
	strh r0, [r4, #2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #6
	movs r0, #0x40
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x18
	strb r0, [r1]
	ldr r1, _0804EA90 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _0804EA94 @ =0x08384684
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r5, [r4, #0x16]
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _0804EA98
	strh r5, [r4]
	b _0804EAE4
	.align 2, 0
_0804EA90: .4byte 0x0000FFFC
_0804EA94: .4byte 0x08384684
_0804EA98:
	ldrh r1, [r4]
	ldr r0, _0804EAB4 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	movs r0, #2
	strb r0, [r6]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	b _0804EAE4
	.align 2, 0
_0804EAB4: .4byte 0x0000FFFB
_0804EAB8:
	bl EventCheckAfter_AnimalsReleased
	cmp r0, #0
	beq _0804EAE4
	ldr r0, _0804EACC @ =0x08384694
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	movs r0, #0x18
	b _0804EAE2
	.align 2, 0
_0804EACC: .4byte 0x08384694
_0804EAD0:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804EAE4
	ldrh r0, [r4]
	movs r1, #4
	orrs r1, r0
	strh r1, [r4]
	movs r0, #0x1a
_0804EAE2:
	strb r0, [r6]
_0804EAE4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MetroidInit
MetroidInit: @ 0x0804EAEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r4, _0804EBAC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0
	mov sb, r0
	ldr r1, _0804EBB0 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, sb
	strb r1, [r4, #0x1c]
	ldr r2, _0804EBB4 @ =gFrameCounter8Bit
	mov r8, r2
	ldrb r1, [r2]
	movs r6, #3
	adds r0, r6, #0
	ands r0, r1
	strh r0, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r5, #0xf0
	ands r5, r0
	bl EventCheckOn_RestrictedLabExplosion
	cmp r0, #0
	bne _0804EB3E
	b _0804EC38
_0804EB3E:
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #5
	strb r0, [r1]
	ldr r2, _0804EBB8 @ =sPrimarySpriteStats
	ldrb r1, [r4, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x22
	strb r6, [r0]
	subs r0, #1
	movs r7, #1
	strb r7, [r0]
	movs r5, #0x24
	adds r5, r5, r4
	mov ip, r5
	movs r0, #0x18
	strb r0, [r5]
	ldr r0, _0804EBBC @ =0x083852BC
	str r0, [r4, #0x18]
	movs r0, #0xb4
	strh r0, [r4, #6]
	ldr r0, _0804EBC0 @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #4
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	mov sl, r2
	ldrh r1, [r4, #2]
	adds r3, r1, #0
	ldr r5, _0804EBC4 @ =0xFFFFFEC0
	adds r0, r2, r5
	cmp r0, r1
	bge _0804EBC8
	adds r0, r4, #0
	adds r0, #0x2d
	strb r7, [r0]
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #0x20
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	mov r1, sb
	strb r1, [r0]
	ldrh r0, [r4, #4]
	subs r0, #0xc0
	strh r0, [r4, #4]
	b _0804ED06
	.align 2, 0
_0804EBAC: .4byte gCurrentSprite
_0804EBB0: .4byte 0x0000FFFC
_0804EBB4: .4byte gSpriteRandomNumber
_0804EBB8: .4byte sPrimarySpriteStats
_0804EBBC: .4byte 0x083852BC
_0804EBC0: .4byte gSamusData
_0804EBC4: .4byte 0xFFFFFEC0
_0804EBC8:
	ldr r5, _0804EBF0 @ =0xFFFFFE80
	adds r0, r2, r5
	cmp r0, r1
	bge _0804EBF4
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	mov r1, sb
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #0x3c
	strb r0, [r1]
	ldrh r0, [r4, #4]
	adds r0, #0xc0
	strh r0, [r4, #4]
	b _0804ED06
	.align 2, 0
_0804EBF0: .4byte 0xFFFFFE80
_0804EBF4:
	ldr r0, _0804EC14 @ =0xFFFFFE40
	add r0, sl
	cmp r0, r3
	bge _0804EC18
	adds r0, r4, #0
	adds r0, #0x2d
	strb r6, [r0]
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #0x30
	strb r0, [r1]
	subs r1, #1
	movs r0, #0x28
	strb r0, [r1]
	b _0804ED06
	.align 2, 0
_0804EC14: .4byte 0xFFFFFE40
_0804EC18:
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #0x1a
	lsrs r1, r0, #0x18
	adds r0, r4, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #4
	mov r5, sb
	strb r5, [r0]
	movs r0, #0x1c
	mov r1, ip
	strb r0, [r1]
	b _0804ED06
_0804EC38:
	adds r0, r4, #0
	adds r0, #0x25
	mov r2, sb
	strb r2, [r0]
	subs r0, #4
	strb r6, [r0]
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #0x19
	lsrs r1, r0, #0x18
	adds r0, r4, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bl SpriteUtilChooseRandomXDirection
	mov r2, r8
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804EC80
	ldrh r1, [r4]
	ldr r0, _0804EC7C @ =0x0000FBFF
	ands r0, r1
	b _0804EC8A
	.align 2, 0
_0804EC7C: .4byte 0x0000FBFF
_0804EC80:
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
_0804EC8A:
	strh r0, [r4]
	cmp r5, #0x10
	bne _0804ECA8
	ldr r0, _0804ECA0 @ =gCurrentSprite
	ldrh r1, [r0, #2]
	subs r1, #0x20
	strh r1, [r0, #2]
	ldr r1, _0804ECA4 @ =0x083852E4
	str r1, [r0, #0x18]
	b _0804ED06
	.align 2, 0
_0804ECA0: .4byte gCurrentSprite
_0804ECA4: .4byte 0x083852E4
_0804ECA8:
	ldr r1, _0804ECCC @ =gCurrentSprite
	ldr r0, _0804ECD0 @ =0x083852BC
	str r0, [r1, #0x18]
	ldrh r2, [r1]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r2
	adds r3, r1, #0
	cmp r0, #0
	beq _0804ECD8
	ldr r1, _0804ECD4 @ =gFrameCounter8Bit
	ldrh r0, [r3, #2]
	ldrb r5, [r1]
	adds r0, r0, r5
	strh r0, [r3, #2]
	adds r2, r1, #0
	b _0804ECE2
	.align 2, 0
_0804ECCC: .4byte gCurrentSprite
_0804ECD0: .4byte 0x083852BC
_0804ECD4: .4byte gSpriteRandomNumber
_0804ECD8:
	ldr r2, _0804ECF8 @ =gFrameCounter8Bit
	ldrb r1, [r2]
	ldrh r0, [r3, #2]
	subs r0, r0, r1
	strh r0, [r3, #2]
_0804ECE2:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804ECFC
	ldrb r0, [r2]
	lsls r0, r0, #1
	ldrh r1, [r3, #4]
	adds r0, r0, r1
	b _0804ED04
	.align 2, 0
_0804ECF8: .4byte gSpriteRandomNumber
_0804ECFC:
	ldrb r1, [r2]
	lsls r1, r1, #1
	ldrh r0, [r3, #4]
	subs r0, r0, r1
_0804ED04:
	strh r0, [r3, #4]
_0804ED06:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start MetroidSwaying
MetroidSwaying: @ 0x0804ED14
	push {r4, r5, r6, r7, lr}
	ldr r2, _0804ED68 @ =gCurrentSprite
	adds r5, r2, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r4, _0804ED6C @ =0x0838487C
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _0804ED70 @ =0x00007FFF
	cmp r0, r6
	bne _0804ED34
	ldrh r3, [r4]
	movs r1, #0
_0804ED34:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	adds r5, r2, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _0804ED74 @ =0x083848FC
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _0804ED58
	ldrh r3, [r4]
	movs r1, #0
_0804ED58:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804ED68: .4byte gCurrentSprite
_0804ED6C: .4byte 0x0838487C
_0804ED70: .4byte 0x00007FFF
_0804ED74: .4byte 0x083848FC

	thumb_func_start MetroidFloatingInTube
MetroidFloatingInTube: @ 0x0804ED78
	push {r4, r5, r6, r7, lr}
	ldr r1, _0804ED90 @ =gCurrentSprite
	ldrh r5, [r1]
	movs r0, #2
	ands r0, r5
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r3, r1, #0
	cmp r0, #0
	bne _0804ED94
	strh r0, [r3]
	b _0804F054
	.align 2, 0
_0804ED90: .4byte gCurrentSprite
_0804ED94:
	movs r4, #0
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #0xf0
	ands r0, r1
	cmp r0, #0x10
	beq _0804EDA6
	b _0804EEF8
_0804EDA6:
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r1, _0804EDD8 @ =0x0838475C
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0804EDDC @ =0x00007FFF
	cmp r1, r0
	bne _0804EDE4
	ldr r0, _0804EDE0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0804EDD2
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	eors r0, r5
	strh r0, [r3]
_0804EDD2:
	mov r2, ip
	strb r4, [r2]
	b _0804EE50
	.align 2, 0
_0804EDD8: .4byte 0x0838475C
_0804EDDC: .4byte 0x00007FFF
_0804EDE0: .4byte gSpriteRandomNumber
_0804EDE4:
	adds r0, r2, #1
	mov r7, ip
	strb r0, [r7]
	ldrh r1, [r3, #2]
	lsrs r1, r1, #2
	ldr r0, _0804EE0C @ =gBg1YPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r5
	cmp r0, #0
	beq _0804EE10
	cmp r1, #0x58
	bls _0804EE16
	movs r4, #1
	b _0804EE1A
	.align 2, 0
_0804EE0C: .4byte gBg1YPosition
_0804EE10:
	cmp r1, #0x3b
	bhi _0804EE16
	movs r4, #1
_0804EE16:
	cmp r4, #0
	beq _0804EE38
_0804EE1A:
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	ldrb r0, [r1]
	cmp r0, #0xc
	bne _0804EE34
	movs r0, #0xd
	b _0804EE36
_0804EE34:
	movs r0, #0xc
_0804EE36:
	strb r0, [r1]
_0804EE38:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0804EE4A
	ldrh r0, [r3, #2]
	adds r0, r0, r6
	b _0804EE4E
_0804EE4A:
	ldrh r0, [r3, #2]
	subs r0, r0, r6
_0804EE4E:
	strh r0, [r3, #2]
_0804EE50:
	adds r5, r3, #0
	adds r5, #0x30
	ldrb r2, [r5]
	ldr r1, _0804EE94 @ =0x0838479C
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0804EE98 @ =0x00007FFF
	cmp r1, r0
	bne _0804EE6A
	b _0804EFBC
_0804EE6A:
	adds r0, r2, #1
	strb r0, [r5]
	ldrh r1, [r3, #4]
	lsrs r1, r1, #2
	ldr r0, _0804EE9C @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	cmp r2, #0x77
	bhi _0804EEA6
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804EEA0
	cmp r2, #0x40
	bls _0804EEC2
	b _0804EEBC
	.align 2, 0
_0804EE94: .4byte 0x0838479C
_0804EE98: .4byte 0x00007FFF
_0804EE9C: .4byte gBg1XPosition
_0804EEA0:
	cmp r2, #0x27
	bhi _0804EEC2
	b _0804EEBC
_0804EEA6:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804EEB8
	cmp r2, #0xc8
	bls _0804EEC2
	b _0804EEBC
_0804EEB8:
	cmp r2, #0xaf
	bhi _0804EEC2
_0804EEBC:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0804EEC2:
	cmp r4, #0
	beq _0804EEE4
	ldrh r0, [r3]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r1, r7, #0
	eors r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	ldrb r0, [r1]
	cmp r0, #0xc
	bne _0804EEE0
	movs r0, #0xd
	b _0804EEE2
_0804EEE0:
	movs r0, #0xc
_0804EEE2:
	strb r0, [r1]
_0804EEE4:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0804EEF2
	b _0804F04E
_0804EEF2:
	ldrh r0, [r3, #4]
	adds r0, r0, r6
	b _0804F052
_0804EEF8:
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r1, _0804EF2C @ =0x083847EC
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0804EF30 @ =0x00007FFF
	cmp r1, r0
	bne _0804EF38
	ldr r0, _0804EF34 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0804EF24
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	eors r0, r5
	strh r0, [r3]
_0804EF24:
	mov r2, ip
	strb r4, [r2]
	b _0804EFA4
	.align 2, 0
_0804EF2C: .4byte 0x083847EC
_0804EF30: .4byte 0x00007FFF
_0804EF34: .4byte gSpriteRandomNumber
_0804EF38:
	adds r0, r2, #1
	mov r7, ip
	strb r0, [r7]
	ldrh r1, [r3, #2]
	lsrs r1, r1, #2
	ldr r0, _0804EF60 @ =gBg1YPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r5
	cmp r0, #0
	beq _0804EF64
	cmp r1, #0x64
	bls _0804EF6A
	movs r4, #1
	b _0804EF6E
	.align 2, 0
_0804EF60: .4byte gBg1YPosition
_0804EF64:
	cmp r1, #0x1d
	bhi _0804EF6A
	movs r4, #1
_0804EF6A:
	cmp r4, #0
	beq _0804EF8C
_0804EF6E:
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	ldrb r0, [r1]
	cmp r0, #0xc
	bne _0804EF88
	movs r0, #0xd
	b _0804EF8A
_0804EF88:
	movs r0, #0xc
_0804EF8A:
	strb r0, [r1]
_0804EF8C:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0804EF9E
	ldrh r0, [r3, #2]
	adds r0, r0, r6
	b _0804EFA2
_0804EF9E:
	ldrh r0, [r3, #2]
	subs r0, r0, r6
_0804EFA2:
	strh r0, [r3, #2]
_0804EFA4:
	adds r5, r3, #0
	adds r5, #0x30
	ldrb r2, [r5]
	ldr r1, _0804EFD8 @ =0x0838482C
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r6, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0804EFDC @ =0x00007FFF
	cmp r1, r0
	bne _0804EFE4
_0804EFBC:
	ldr r0, _0804EFE0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0804EFD0
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r3]
_0804EFD0:
	movs r0, #0
	strb r0, [r5]
	b _0804F054
	.align 2, 0
_0804EFD8: .4byte 0x0838482C
_0804EFDC: .4byte 0x00007FFF
_0804EFE0: .4byte gSpriteRandomNumber
_0804EFE4:
	adds r0, r2, #1
	strb r0, [r5]
	ldrh r1, [r3, #4]
	lsrs r1, r1, #2
	ldr r0, _0804F00C @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804F010
	cmp r2, #0x8c
	bls _0804F01A
	b _0804F014
	.align 2, 0
_0804F00C: .4byte gBg1XPosition
_0804F010:
	cmp r2, #0x63
	bhi _0804F01A
_0804F014:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0804F01A:
	cmp r4, #0
	beq _0804F03C
	ldrh r0, [r3]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r1, r7, #0
	eors r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	ldrb r0, [r1]
	cmp r0, #0xc
	bne _0804F038
	movs r0, #0xd
	b _0804F03A
_0804F038:
	movs r0, #0xc
_0804F03A:
	strb r0, [r1]
_0804F03C:
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804F04E
	ldrh r0, [r3, #4]
	adds r0, r0, r6
	b _0804F052
_0804F04E:
	ldrh r0, [r3, #4]
	subs r0, r0, r6
_0804F052:
	strh r0, [r3, #4]
_0804F054:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MetroidFloatingNearSA_X
MetroidFloatingNearSA_X: @ 0x0804F05C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, _0804F104 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r1, [r0]
	ldr r4, _0804F108 @ =0x0838487C
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldr r6, _0804F10C @ =0x00007FFF
	cmp r0, r6
	bne _0804F082
	ldrh r3, [r4]
	movs r1, #0
_0804F082:
	adds r0, r1, #1
	mov r7, ip
	strb r0, [r7]
	ldrh r0, [r2, #2]
	adds r0, r0, r3
	movs r1, #0
	mov r8, r1
	strh r0, [r2, #2]
	adds r5, r2, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _0804F110 @ =0x083848FC
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _0804F0AC
	ldrh r3, [r4]
	movs r1, #0
_0804F0AC:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	ldrh r0, [r2, #6]
	subs r0, #1
	strh r0, [r2, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0804F0FA
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
	movs r0, #1
	strb r0, [r5]
	adds r1, r2, #0
	adds r1, #0x2e
	mov r3, r8
	strb r3, [r1]
	mov r5, ip
	strb r0, [r5]
	ldrh r1, [r2]
	ldr r0, _0804F114 @ =0x0000F7FF
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #1
	bne _0804F0FA
	ldr r0, _0804F118 @ =0x0000023A
	bl SoundPlay
_0804F0FA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804F104: .4byte gCurrentSprite
_0804F108: .4byte 0x0838487C
_0804F10C: .4byte 0x00007FFF
_0804F110: .4byte 0x083848FC
_0804F114: .4byte 0x0000F7FF
_0804F118: .4byte 0x0000023A

	thumb_func_start MetroidFloatingTowardsSA_X
MetroidFloatingTowardsSA_X: @ 0x0804F11C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r2, _0804F21C @ =gCurrentSprite
	ldrh r0, [r2, #2]
	mov sl, r0
	ldrh r1, [r2, #4]
	mov sb, r1
	movs r3, #0x10
	mov r8, r3
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	adds r4, r2, #0
	cmp r0, #0
	bne _0804F1E6
	movs r6, #0
	adds r5, r4, #0
_0804F146:
	ldr r1, _0804F220 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r2, r0, r1
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804F1DC
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0804F1DC
	ldrb r0, [r2, #0x1d]
	cmp r0, #0xbc
	bne _0804F1DC
	ldrh r7, [r2, #2]
	ldrh r3, [r2, #4]
	mov r1, sl
	add r1, r8
	adds r0, r7, #0
	subs r0, #0x78
	cmp r1, r0
	ble _0804F1DC
	mov r0, sl
	mov r1, r8
	subs r0, r0, r1
	mov ip, r0
	cmp ip, r7
	bge _0804F1DC
	mov r1, sb
	add r1, r8
	adds r0, r3, #0
	subs r0, #0x14
	cmp r1, r0
	ble _0804F1DC
	mov r7, sb
	mov r0, r8
	subs r1, r7, r0
	adds r0, r3, #0
	adds r0, #0x14
	cmp r1, r0
	bge _0804F1DC
	ldrh r0, [r5]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x2f
	movs r7, #0
	strb r7, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	movs r3, #0
	strb r3, [r0]
	ldr r7, _0804F224 @ =0x030006ED
	strb r1, [r7]
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #2
	bne _0804F1DC
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _0804F228 @ =0x0000023B
	bl SoundPlay
_0804F1DC:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0x17
	bls _0804F146
_0804F1E6:
	ldr r0, _0804F22C @ =gFrameCounter8Bit
	ldrb r2, [r0]
	adds r3, r2, #0
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0804F28C
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #1
	bne _0804F23C
	ldr r0, _0804F230 @ =gXParasiteTargetYPosition
	adds r1, r2, #0
	adds r1, #0x50
	ldrh r0, [r0]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r1, _0804F234 @ =gXParasiteTargetXPosition
	ldr r3, _0804F238 @ =0x0000FFE0
	adds r0, r2, r3
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804F274
	.align 2, 0
_0804F21C: .4byte gCurrentSprite
_0804F220: .4byte gSpriteData
_0804F224: .4byte 0x030006ED
_0804F228: .4byte 0x0000023B
_0804F22C: .4byte gSpriteRandomNumber
_0804F230: .4byte gXParasiteTargetYPosition
_0804F234: .4byte gXParasiteTargetXPosition
_0804F238: .4byte 0x0000FFE0
_0804F23C:
	cmp r0, #2
	bne _0804F25C
	ldr r0, _0804F254 @ =gXParasiteTargetYPosition
	adds r1, r2, #0
	adds r1, #0x32
	ldrh r0, [r0]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, _0804F258 @ =gXParasiteTargetXPosition
	subs r1, #0x3a
	b _0804F270
	.align 2, 0
_0804F254: .4byte gXParasiteTargetYPosition
_0804F258: .4byte gXParasiteTargetXPosition
_0804F25C:
	ldr r1, _0804F280 @ =gXParasiteTargetYPosition
	ldr r7, _0804F284 @ =0x0000FF88
	adds r0, r3, r7
	ldrh r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, _0804F288 @ =gXParasiteTargetXPosition
	adds r1, r3, #0
	subs r1, #0x20
_0804F270:
	ldrh r0, [r0]
	subs r0, r0, r1
_0804F274:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0xa
	mov r8, r0
	movs r5, #0xa
	b _0804F2EA
	.align 2, 0
_0804F280: .4byte gXParasiteTargetYPosition
_0804F284: .4byte 0x0000FF88
_0804F288: .4byte gXParasiteTargetXPosition
_0804F28C:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #1
	bne _0804F2B0
	ldr r0, _0804F2A8 @ =gXParasiteTargetYPosition
	ldrh r0, [r0]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, _0804F2AC @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	subs r0, #0x24
	b _0804F2E0
	.align 2, 0
_0804F2A8: .4byte gXParasiteTargetYPosition
_0804F2AC: .4byte gXParasiteTargetXPosition
_0804F2B0:
	cmp r0, #2
	bne _0804F2D0
	ldr r0, _0804F2C8 @ =gXParasiteTargetYPosition
	ldrh r0, [r0]
	subs r0, #0x32
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, _0804F2CC @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	adds r0, #8
	b _0804F2E0
	.align 2, 0
_0804F2C8: .4byte gXParasiteTargetYPosition
_0804F2CC: .4byte gXParasiteTargetXPosition
_0804F2D0:
	ldr r0, _0804F324 @ =gXParasiteTargetYPosition
	ldrh r0, [r0]
	subs r0, #0x64
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, _0804F328 @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	adds r0, #0x1e
_0804F2E0:
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r1, #0x14
	mov r8, r1
	movs r5, #0x1e
_0804F2EA:
	ldrh r1, [r4]
	movs r6, #0x80
	lsls r6, r6, #2
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0804F34C
	adds r2, r4, #0
	adds r2, #0x2f
	ldrb r0, [r2]
	cmp r0, #0
	bne _0804F32C
	ldrh r1, [r4, #4]
	subs r0, r3, #4
	cmp r1, r0
	bgt _0804F35E
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, r5
	bhs _0804F318
	adds r0, #1
	strb r0, [r1]
_0804F318:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r2, [r4, #4]
	adds r0, r0, r2
	strh r0, [r4, #4]
	b _0804F3A2
	.align 2, 0
_0804F324: .4byte gXParasiteTargetYPosition
_0804F328: .4byte gXParasiteTargetXPosition
_0804F32C:
	subs r1, r0, #1
	strb r1, [r2]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0804F340
	lsrs r0, r0, #0x1a
	ldrh r3, [r4, #4]
	adds r0, r0, r3
	strh r0, [r4, #4]
	b _0804F3A2
_0804F340:
	ldrh r1, [r4]
	ldr r0, _0804F348 @ =0x0000FDFF
	ands r0, r1
	b _0804F398
	.align 2, 0
_0804F348: .4byte 0x0000FDFF
_0804F34C:
	adds r2, r4, #0
	adds r2, #0x2f
	ldrb r0, [r2]
	cmp r0, #0
	bne _0804F37C
	ldrh r1, [r4, #4]
	adds r0, r3, #4
	cmp r1, r0
	bge _0804F368
_0804F35E:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	strb r0, [r2]
	b _0804F3A2
_0804F368:
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, r5
	bhs _0804F376
	adds r0, #1
	strb r0, [r1]
_0804F376:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _0804F38A
_0804F37C:
	subs r1, r0, #1
	strb r1, [r2]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0804F392
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_0804F38A:
	ldrh r0, [r4, #4]
	subs r0, r0, r1
	strh r0, [r4, #4]
	b _0804F3A2
_0804F392:
	ldrh r1, [r4]
	adds r0, r6, #0
	orrs r0, r1
_0804F398:
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
_0804F3A2:
	adds r2, r4, #0
	ldrh r5, [r2]
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r6, #0
	ands r0, r5
	cmp r0, #0
	beq _0804F400
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _0804F3DE
	ldrh r1, [r2, #2]
	subs r0, r7, #4
	cmp r1, r0
	bgt _0804F412
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r8
	bhs _0804F3D2
	adds r0, #1
	strb r0, [r1]
_0804F3D2:
	ldrb r0, [r1]
	lsrs r0, r0, #2
	ldrh r7, [r2, #2]
	adds r0, r0, r7
	strh r0, [r2, #2]
	b _0804F456
_0804F3DE:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0804F3F2
	lsrs r0, r0, #0x1a
	ldrh r1, [r2, #2]
	adds r0, r0, r1
	strh r0, [r2, #2]
	b _0804F456
_0804F3F2:
	ldr r0, _0804F3FC @ =0x0000FBFF
	ands r0, r5
	strh r0, [r2]
	adds r1, r2, #0
	b _0804F450
	.align 2, 0
_0804F3FC: .4byte 0x0000FBFF
_0804F400:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _0804F430
	ldrh r1, [r2, #2]
	adds r0, r7, #4
	cmp r1, r0
	bge _0804F41C
_0804F412:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r3]
	b _0804F456
_0804F41C:
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, r8
	bhs _0804F42A
	adds r0, #1
	strb r0, [r1]
_0804F42A:
	ldrb r1, [r1]
	lsrs r1, r1, #2
	b _0804F43E
_0804F430:
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	cmp r0, #0
	beq _0804F446
	adds r1, r0, #0
	lsrs r1, r1, #0x1a
_0804F43E:
	ldrh r0, [r2, #2]
	subs r0, r0, r1
	strh r0, [r2, #2]
	b _0804F456
_0804F446:
	ldrh r1, [r4]
	adds r0, r6, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
_0804F450:
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
_0804F456:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start Metroid
Metroid: @ 0x0804F464
	push {lr}
	ldr r0, _0804F47C @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _0804F514
	lsls r0, r0, #2
	ldr r1, _0804F480 @ =_0804F484
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804F47C: .4byte gCurrentSprite
_0804F480: .4byte _0804F484
_0804F484: @ jump table
	.4byte _0804F4F8 @ case 0
	.4byte _0804F514 @ case 1
	.4byte _0804F4FE @ case 2
	.4byte _0804F514 @ case 3
	.4byte _0804F514 @ case 4
	.4byte _0804F514 @ case 5
	.4byte _0804F514 @ case 6
	.4byte _0804F514 @ case 7
	.4byte _0804F514 @ case 8
	.4byte _0804F514 @ case 9
	.4byte _0804F514 @ case 10
	.4byte _0804F514 @ case 11
	.4byte _0804F514 @ case 12
	.4byte _0804F514 @ case 13
	.4byte _0804F514 @ case 14
	.4byte _0804F514 @ case 15
	.4byte _0804F514 @ case 16
	.4byte _0804F514 @ case 17
	.4byte _0804F514 @ case 18
	.4byte _0804F514 @ case 19
	.4byte _0804F514 @ case 20
	.4byte _0804F514 @ case 21
	.4byte _0804F514 @ case 22
	.4byte _0804F514 @ case 23
	.4byte _0804F504 @ case 24
	.4byte _0804F514 @ case 25
	.4byte _0804F50A @ case 26
	.4byte _0804F514 @ case 27
	.4byte _0804F510 @ case 28
_0804F4F8:
	bl MetroidInit
	b _0804F514
_0804F4FE:
	bl MetroidFloatingInTube
	b _0804F514
_0804F504:
	bl MetroidFloatingNearSA_X
	b _0804F514
_0804F50A:
	bl MetroidFloatingTowardsSA_X
	b _0804F514
_0804F510:
	bl MetroidSwaying
_0804F514:
	pop {r0}
	bx r0

	thumb_func_start LabDebrisSetCollision
LabDebrisSetCollision: @ 0x0804F518
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r0, _0804F570 @ =gCurrentSprite
	ldrh r1, [r0, #2]
	ldrh r6, [r0, #4]
	adds r0, #0x2a
	ldrb r4, [r0]
	ldr r0, _0804F574 @ =gCurrentClipdataAffectingAction
	mov r8, r0
	strb r7, [r0]
	adds r5, r1, #0
	subs r5, #0x20
	adds r0, r5, #0
	adds r1, r6, #0
	bl ProcessClipdata
	mov r0, r8
	strb r7, [r0]
	adds r1, r6, #0
	adds r1, #0x40
	adds r0, r5, #0
	bl ProcessClipdata
	subs r4, #0x14
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	cmp r4, #1
	bhi _0804F564
	mov r0, r8
	strb r7, [r0]
	adds r1, r6, #0
	adds r1, #0x80
	adds r0, r5, #0
	bl ProcessClipdata
_0804F564:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804F570: .4byte gCurrentSprite
_0804F574: .4byte gCurrentClipdataAffectingAction

	thumb_func_start LabDebrisInit
LabDebrisInit: @ 0x0804F578
	push {r4, lr}
	bl EventCheckOn_RestrictedLabExplosion
	adds r1, r0, #0
	cmp r1, #0
	bne _0804F590
	ldr r0, _0804F58C @ =gCurrentSprite
	strh r1, [r0]
	b _0804F60E
	.align 2, 0
_0804F58C: .4byte gCurrentSprite
_0804F590:
	ldr r0, _0804F5E4 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x25
	movs r2, #0
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x30
	strb r0, [r1]
	movs r3, #0
	ldr r1, _0804F5E8 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r3, [r0]
	ldr r1, _0804F5EC @ =0x08385C1C
	str r1, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r2, [r4, #0x16]
	subs r0, #5
	ldrb r0, [r0]
	cmp r0, #0x14
	bne _0804F5F4
	ldr r0, _0804F5F0 @ =0x08385C2C
	str r0, [r4, #0x18]
	b _0804F608
	.align 2, 0
_0804F5E4: .4byte gCurrentSprite
_0804F5E8: .4byte 0x0000FFFC
_0804F5EC: .4byte 0x08385C1C
_0804F5F0: .4byte 0x08385C2C
_0804F5F4:
	cmp r0, #0x15
	bne _0804F604
	ldr r0, _0804F600 @ =0x08385C3C
	mov r1, ip
	str r0, [r1, #0x18]
	b _0804F608
	.align 2, 0
_0804F600: .4byte 0x08385C3C
_0804F604:
	mov r4, ip
	str r1, [r4, #0x18]
_0804F608:
	movs r0, #2
	bl LabDebrisSetCollision
_0804F60E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start LabDebrisIdle
LabDebrisIdle: @ 0x0804F614
	push {lr}
	bl EventCheckOn_Escape
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #2
	bne _0804F66A
	ldr r1, _0804F640 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x31
	movs r0, #0
	strb r0, [r3]
	adds r0, r1, #0
	adds r0, #0x24
	strb r2, [r0]
	adds r0, #6
	ldrb r0, [r0]
	cmp r0, #0x13
	bne _0804F644
	adds r1, #0x2e
	movs r0, #0x30
	b _0804F668
	.align 2, 0
_0804F640: .4byte gCurrentSprite
_0804F644:
	cmp r0, #0x15
	bne _0804F64E
	adds r1, #0x2e
	movs r0, #0x22
	b _0804F668
_0804F64E:
	ldr r0, _0804F660 @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	ldrh r2, [r1, #4]
	cmp r0, r2
	bls _0804F664
	adds r1, #0x2e
	movs r0, #0xa
	b _0804F668
	.align 2, 0
_0804F660: .4byte gXParasiteTargetXPosition
_0804F664:
	adds r1, #0x2e
	movs r0, #0x18
_0804F668:
	strb r0, [r1]
_0804F66A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start LabDebrisFalling
LabDebrisFalling: @ 0x0804F670
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _0804F6BC @ =gCurrentSprite
	ldrh r6, [r4, #2]
	mov r8, r6
	ldrh r5, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r7, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _0804F6DC
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804F69A
	b _0804F83A
_0804F69A:
	movs r0, #1
	bl LabDebrisSetCollision
	adds r0, r6, #0
	adds r0, #0x20
	adds r1, r5, #0
	movs r2, #0x2f
	bl ParticleSet
	ldr r0, _0804F6C0 @ =0x0000023D
	bl SoundPlay
	cmp r7, #0x13
	bne _0804F6C4
	adds r4, r6, #0
	b _0804F786
	.align 2, 0
_0804F6BC: .4byte gCurrentSprite
_0804F6C0: .4byte 0x0000023D
_0804F6C4:
	cmp r7, #0x15
	beq _0804F738
	ldr r0, _0804F6D8 @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	ldrh r4, [r4, #4]
	cmp r0, r4
	bhi _0804F762
	adds r4, r6, #0
	b _0804F786
	.align 2, 0
_0804F6D8: .4byte gXParasiteTargetXPosition
_0804F6DC:
	adds r0, r6, #0
	adds r1, r5, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0804F728 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804F7A6
	movs r2, #0
	strh r1, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	strb r2, [r0]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _0804F72C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r0, _0804F730 @ =0x0000023E
	bl SoundPlay
	cmp r7, #0x13
	bne _0804F734
	adds r4, r6, #0
	b _0804F786
	.align 2, 0
_0804F728: .4byte gPreviousVerticalCollisionCheck
_0804F72C: .4byte gIoRegisters
_0804F730: .4byte 0x0000023E
_0804F734:
	cmp r7, #0x15
	bne _0804F758
_0804F738:
	adds r4, r6, #0
	subs r4, #0x40
	adds r3, r5, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x13
	adds r2, r4, #0
	bl SpriteDebrisInit
	movs r0, #0
	movs r1, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl SpriteDebrisInit
	b _0804F83A
_0804F758:
	ldr r0, _0804F780 @ =gXParasiteTargetXPosition
	ldrh r0, [r0]
	ldrh r4, [r4, #4]
	cmp r0, r4
	bls _0804F784
_0804F762:
	adds r3, r5, #0
	subs r3, #8
	movs r0, #0
	movs r1, #0x13
	adds r2, r6, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	adds r3, #0x10
	movs r0, #0
	movs r1, #4
	adds r2, r6, #0
	bl SpriteDebrisInit
	b _0804F83A
	.align 2, 0
_0804F780: .4byte gXParasiteTargetXPosition
_0804F784:
	mov r4, r8
_0804F786:
	subs r4, #0x20
	adds r3, r5, #0
	adds r3, #8
	movs r0, #0
	movs r1, #0x11
	adds r2, r4, #0
	bl SpriteDebrisInit
	adds r3, r5, #0
	subs r3, #0x10
	movs r0, #0
	movs r1, #0x12
	adds r2, r4, #0
	bl SpriteDebrisInit
	b _0804F83A
_0804F7A6:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _0804F7DC @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r1, [r0]
	mov r8, r1
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, _0804F7E0 @ =0x00007FFF
	cmp r1, r0
	bne _0804F7E4
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804F7EE
	.align 2, 0
_0804F7DC: .4byte sSpritesFallingSpeed
_0804F7E0: .4byte 0x00007FFF
_0804F7E4:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r4, #2]
	add r0, r8
_0804F7EE:
	strh r0, [r4, #2]
	ldr r1, _0804F818 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r0, #3
	ands r0, r2
	cmp r0, #0
	bne _0804F83A
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _0804F81C
	ldrh r0, [r1, #2]
	subs r0, #0x20
	adds r1, r5, #0
	movs r2, #0x27
	bl ParticleSet
	b _0804F83A
	.align 2, 0
_0804F818: .4byte gCurrentSprite
_0804F81C:
	cmp r7, #0x13
	bne _0804F826
	adds r0, r5, #0
	subs r0, #0xc
	b _0804F82A
_0804F826:
	adds r0, r5, #0
	adds r0, #0xc
_0804F82A:
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldrh r0, [r1, #2]
	subs r0, #0x20
	adds r1, r5, #0
	movs r2, #0x27
	bl ParticleSet
_0804F83A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start LabDebrisCrumbling
LabDebrisCrumbling: @ 0x0804F844
	push {r4, r5, r6, lr}
	ldr r3, _0804F870 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0804F874 @ =sSpritesFallingSpeedHovering
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0804F878 @ =0x00007FFF
	cmp r1, r0
	bne _0804F87C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0804F886
	.align 2, 0
_0804F870: .4byte gCurrentSprite
_0804F874: .4byte sSpritesFallingSpeedHovering
_0804F878: .4byte 0x00007FFF
_0804F87C:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_0804F886:
	strh r0, [r3, #2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start LabDebris
LabDebris: @ 0x0804F890
	push {lr}
	ldr r0, _0804F8B0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #1
	beq _0804F8C4
	cmp r0, #1
	bgt _0804F8B4
	cmp r0, #0
	beq _0804F8BE
	b _0804F8D4
	.align 2, 0
_0804F8B0: .4byte gCurrentSprite
_0804F8B4:
	cmp r0, #2
	beq _0804F8CA
	cmp r0, #0x18
	beq _0804F8D0
	b _0804F8D4
_0804F8BE:
	bl LabDebrisInit
	b _0804F8D4
_0804F8C4:
	bl LabDebrisIdle
	b _0804F8D4
_0804F8CA:
	bl LabDebrisFalling
	b _0804F8D4
_0804F8D0:
	bl LabDebrisCrumbling
_0804F8D4:
	pop {r0}
	bx r0

	thumb_func_start PowampInit
PowampInit: @ 0x0804F8D8
	push {r4, r5, lr}
	bl TrySetAbsorbXFlag
	ldr r3, _0804F938 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x27
	movs r4, #0
	movs r5, #0x30
	strb r5, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r2, _0804F93C @ =sPrimarySpriteStats
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #0xe
	strb r0, [r1]
	ldr r0, _0804F940 @ =0x08386638
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804F958
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0804F944
	strh r4, [r3]
	b _0804F98C
	.align 2, 0
_0804F938: .4byte gCurrentSprite
_0804F93C: .4byte sPrimarySpriteStats
_0804F940: .4byte 0x08386638
_0804F944:
	ldr r0, _0804F954 @ =0x0000FFB8
	strh r0, [r3, #0xa]
	strh r4, [r3, #0xc]
	adds r0, #0x18
	strh r0, [r3, #0xe]
	strh r5, [r3, #0x10]
	b _0804F968
	.align 2, 0
_0804F954: .4byte 0x0000FFB8
_0804F958:
	ldr r0, _0804F980 @ =0x0000FFCC
	strh r0, [r3, #0xa]
	adds r0, #0x20
	strh r0, [r3, #0xc]
	subs r0, #0x14
	strh r0, [r3, #0xe]
	movs r0, #0x28
	strh r0, [r3, #0x10]
_0804F968:
	ldr r2, _0804F984 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _0804F988
	movs r0, #0x5a
	strb r0, [r1]
	movs r0, #0x2c
	strh r0, [r2, #6]
	b _0804F98C
	.align 2, 0
_0804F980: .4byte 0x0000FFCC
_0804F984: .4byte gCurrentSprite
_0804F988:
	movs r0, #2
	strb r0, [r1]
_0804F98C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start PowampIdleInit
PowampIdleInit: @ 0x0804F994
	ldr r1, _0804F9AC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0804F9B0 @ =0x08386638
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804F9AC: .4byte gCurrentSprite
_0804F9B0: .4byte 0x08386638

	thumb_func_start PowampIdle
PowampIdle: @ 0x0804F9B4
	push {r4, lr}
	ldr r4, _0804F9E4 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0804F9DC
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r1, #0xc0
	bl CheckSamusNearSpriteAboveBelowSeparateRanges
	cmp r0, #0
	beq _0804F9DC
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
_0804F9DC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F9E4: .4byte gCurrentSprite

	thumb_func_start PowampExtendingInit
PowampExtendingInit: @ 0x0804F9E8
	push {lr}
	ldr r1, _0804FA14 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x18
	strb r0, [r2]
	ldr r0, _0804FA18 @ =0x08386678
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804FA10
	movs r0, #0xe7
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804FA10:
	pop {r0}
	bx r0
	.align 2, 0
_0804FA14: .4byte gCurrentSprite
_0804FA18: .4byte 0x08386678

	thumb_func_start PowampExtending
PowampExtending: @ 0x0804FA1C
	push {lr}
	ldr r1, _0804FA44 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0804FA30
	ldrb r0, [r1, #0x1c]
	cmp r0, #4
	bne _0804FA30
	ldr r0, _0804FA48 @ =0x0000FF74
	strh r0, [r1, #0xa]
_0804FA30:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804FA40
	ldr r0, _0804FA44 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x19
	strb r1, [r0]
_0804FA40:
	pop {r0}
	bx r0
	.align 2, 0
_0804FA44: .4byte gCurrentSprite
_0804FA48: .4byte 0x0000FF74

	thumb_func_start PowampExtendedInit
PowampExtendedInit: @ 0x0804FA4C
	ldr r1, _0804FA64 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _0804FA68 @ =0x08386658
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	bx lr
	.align 2, 0
_0804FA64: .4byte gCurrentSprite
_0804FA68: .4byte 0x08386658

	thumb_func_start PowampExtended
PowampExtended: @ 0x0804FA6C
	push {lr}
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r1, #0xc0
	bl CheckSamusNearSpriteAboveBelowSeparateRanges
	cmp r0, #0
	bne _0804FA86
	ldr r0, _0804FA8C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1b
	strb r1, [r0]
_0804FA86:
	pop {r0}
	bx r0
	.align 2, 0
_0804FA8C: .4byte gCurrentSprite

	thumb_func_start PowampRetractingInit
PowampRetractingInit: @ 0x0804FA90
	push {lr}
	ldr r1, _0804FABC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1c
	strb r0, [r2]
	ldr r0, _0804FAC0 @ =0x083866B0
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldrh r1, [r1]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804FAB6
	ldr r0, _0804FAC4 @ =0x000001CF
	bl CheckPlayNotAlreadyPlayingSound
_0804FAB6:
	pop {r0}
	bx r0
	.align 2, 0
_0804FABC: .4byte gCurrentSprite
_0804FAC0: .4byte 0x083866B0
_0804FAC4: .4byte 0x000001CF

	thumb_func_start PowampRetracting
PowampRetracting: @ 0x0804FAC8
	push {lr}
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r1, #0xc0
	bl CheckSamusNearSpriteAboveBelowSeparateRanges
	cmp r0, #0
	beq _0804FB00
	ldr r1, _0804FAF4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1a
	strb r0, [r2]
	ldr r0, _0804FAF8 @ =0x08386658
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _0804FAFC @ =0x0000FF74
	strh r0, [r1, #0xa]
	b _0804FB22
	.align 2, 0
_0804FAF4: .4byte gCurrentSprite
_0804FAF8: .4byte 0x08386658
_0804FAFC: .4byte 0x0000FF74
_0804FB00:
	ldr r1, _0804FB28 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #2
	bne _0804FB12
	ldrb r0, [r1, #0x1c]
	cmp r0, #4
	bne _0804FB12
	ldr r0, _0804FB2C @ =0x0000FFCC
	strh r0, [r1, #0xa]
_0804FB12:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0804FB22
	ldr r0, _0804FB28 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_0804FB22:
	pop {r0}
	bx r0
	.align 2, 0
_0804FB28: .4byte gCurrentSprite
_0804FB2C: .4byte 0x0000FFCC

	thumb_func_start Powamp
Powamp: @ 0x0804FB30
	push {r4, lr}
	ldr r4, _0804FB5C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0804FB4A
	movs r0, #0xe8
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_0804FB4A:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804FB60
	bl SpriteUpdateFreezeTimer
	b _0804FD3A
	.align 2, 0
_0804FB5C: .4byte gCurrentSprite
_0804FB60:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0804FB6C
	b _0804FD3A
_0804FB6C:
	lsls r0, r0, #2
	ldr r1, _0804FB78 @ =_0804FB7C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804FB78: .4byte _0804FB7C
_0804FB7C: @ jump table
	.4byte _0804FCEC @ case 0
	.4byte _0804FCF2 @ case 1
	.4byte _0804FCF6 @ case 2
	.4byte _0804FD3A @ case 3
	.4byte _0804FD3A @ case 4
	.4byte _0804FD3A @ case 5
	.4byte _0804FD3A @ case 6
	.4byte _0804FD3A @ case 7
	.4byte _0804FD3A @ case 8
	.4byte _0804FD3A @ case 9
	.4byte _0804FD3A @ case 10
	.4byte _0804FD3A @ case 11
	.4byte _0804FD3A @ case 12
	.4byte _0804FD3A @ case 13
	.4byte _0804FD3A @ case 14
	.4byte _0804FD3A @ case 15
	.4byte _0804FD3A @ case 16
	.4byte _0804FD3A @ case 17
	.4byte _0804FD3A @ case 18
	.4byte _0804FD3A @ case 19
	.4byte _0804FD3A @ case 20
	.4byte _0804FD3A @ case 21
	.4byte _0804FD3A @ case 22
	.4byte _0804FCFC @ case 23
	.4byte _0804FD00 @ case 24
	.4byte _0804FD06 @ case 25
	.4byte _0804FD0A @ case 26
	.4byte _0804FD10 @ case 27
	.4byte _0804FD14 @ case 28
	.4byte _0804FD3A @ case 29
	.4byte _0804FD3A @ case 30
	.4byte _0804FD3A @ case 31
	.4byte _0804FD3A @ case 32
	.4byte _0804FD3A @ case 33
	.4byte _0804FD3A @ case 34
	.4byte _0804FD3A @ case 35
	.4byte _0804FD3A @ case 36
	.4byte _0804FD3A @ case 37
	.4byte _0804FD3A @ case 38
	.4byte _0804FD3A @ case 39
	.4byte _0804FD3A @ case 40
	.4byte _0804FD3A @ case 41
	.4byte _0804FD3A @ case 42
	.4byte _0804FD3A @ case 43
	.4byte _0804FD3A @ case 44
	.4byte _0804FD3A @ case 45
	.4byte _0804FD3A @ case 46
	.4byte _0804FD3A @ case 47
	.4byte _0804FD3A @ case 48
	.4byte _0804FD3A @ case 49
	.4byte _0804FD3A @ case 50
	.4byte _0804FD3A @ case 51
	.4byte _0804FD3A @ case 52
	.4byte _0804FD3A @ case 53
	.4byte _0804FD3A @ case 54
	.4byte _0804FD3A @ case 55
	.4byte _0804FD3A @ case 56
	.4byte _0804FD3A @ case 57
	.4byte _0804FD3A @ case 58
	.4byte _0804FD3A @ case 59
	.4byte _0804FD3A @ case 60
	.4byte _0804FD3A @ case 61
	.4byte _0804FD3A @ case 62
	.4byte _0804FD3A @ case 63
	.4byte _0804FD3A @ case 64
	.4byte _0804FD3A @ case 65
	.4byte _0804FD3A @ case 66
	.4byte _0804FD3A @ case 67
	.4byte _0804FD3A @ case 68
	.4byte _0804FD3A @ case 69
	.4byte _0804FD3A @ case 70
	.4byte _0804FD3A @ case 71
	.4byte _0804FD3A @ case 72
	.4byte _0804FD3A @ case 73
	.4byte _0804FD3A @ case 74
	.4byte _0804FD3A @ case 75
	.4byte _0804FD3A @ case 76
	.4byte _0804FD3A @ case 77
	.4byte _0804FD3A @ case 78
	.4byte _0804FD3A @ case 79
	.4byte _0804FD3A @ case 80
	.4byte _0804FD3A @ case 81
	.4byte _0804FD3A @ case 82
	.4byte _0804FD3A @ case 83
	.4byte _0804FD3A @ case 84
	.4byte _0804FD3A @ case 85
	.4byte _0804FD3A @ case 86
	.4byte _0804FD1A @ case 87
	.4byte _0804FD1E @ case 88
	.4byte _0804FD24 @ case 89
	.4byte _0804FD28 @ case 90
	.4byte _0804FD2E @ case 91
_0804FCEC:
	bl PowampInit
	b _0804FD3A
_0804FCF2:
	bl PowampIdleInit
_0804FCF6:
	bl PowampIdle
	b _0804FD3A
_0804FCFC:
	bl PowampExtendingInit
_0804FD00:
	bl PowampExtending
	b _0804FD3A
_0804FD06:
	bl PowampExtendedInit
_0804FD0A:
	bl PowampExtended
	b _0804FD3A
_0804FD10:
	bl PowampRetractingInit
_0804FD14:
	bl PowampRetracting
	b _0804FD3A
_0804FD1A:
	bl SpriteDyingInit
_0804FD1E:
	bl SpriteDying
	b _0804FD3A
_0804FD24:
	bl PowampInit
_0804FD28:
	bl SpriteSpawningFromX
	b _0804FD3A
_0804FD2E:
	bl XParasiteInit
	ldr r1, _0804FD40 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x30
	strh r0, [r1, #2]
_0804FD3A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FD40: .4byte gCurrentSprite

	thumb_func_start ZozoroCheckCollidingWithAir
ZozoroCheckCollidingWithAir: @ 0x0804FD44
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0804FD78 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804FDA4
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804FD80
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804FD7C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0804FDD8
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	b _0804FDCC
	.align 2, 0
_0804FD78: .4byte gCurrentSprite
_0804FD7C: .4byte gPreviousCollisionCheck
_0804FD80:
	ldrh r0, [r4, #2]
	subs r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804FDA0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0804FDD8
	ldrh r0, [r4, #2]
	adds r0, #0x20
	ldrh r1, [r4, #4]
	subs r1, #4
	b _0804FDCC
	.align 2, 0
_0804FDA0: .4byte gPreviousCollisionCheck
_0804FDA4:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804FDD8
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804FDE0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _0804FDD8
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x20
_0804FDCC:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _0804FDD8
	movs r6, #1
_0804FDD8:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0804FDE0: .4byte gPreviousCollisionCheck

	thumb_func_start ZozoroUpdateHitbox
ZozoroUpdateHitbox: @ 0x0804FDE4
	push {lr}
	ldr r1, _0804FE10 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r2, r1, #0
	cmp r0, #0
	beq _0804FE34
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804FE1C
	ldr r0, _0804FE14 @ =0x0000FFD8
	strh r0, [r2, #0xa]
	movs r0, #0x28
	strh r0, [r2, #0xc]
	ldr r0, _0804FE18 @ =0x0000FFD0
	strh r0, [r2, #0xe]
	movs r0, #0x10
	b _0804FE56
	.align 2, 0
_0804FE10: .4byte gCurrentSprite
_0804FE14: .4byte 0x0000FFD8
_0804FE18: .4byte 0x0000FFD0
_0804FE1C:
	ldr r0, _0804FE2C @ =0x0000FFD8
	strh r0, [r2, #0xa]
	movs r0, #0x28
	strh r0, [r2, #0xc]
	ldr r0, _0804FE30 @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x30
	b _0804FE56
	.align 2, 0
_0804FE2C: .4byte 0x0000FFD8
_0804FE30: .4byte 0x0000FFF0
_0804FE34:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804FE48
	movs r0, #0x10
	strh r0, [r2, #0xa]
	movs r0, #0x30
	b _0804FE4E
_0804FE48:
	ldr r0, _0804FE6C @ =0x0000FFD0
	strh r0, [r2, #0xa]
	movs r0, #0x10
_0804FE4E:
	strh r0, [r2, #0xc]
	ldr r0, _0804FE70 @ =0x0000FFD8
	strh r0, [r2, #0xe]
	movs r0, #0x28
_0804FE56:
	strh r0, [r2, #0x10]
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0804FE6C: .4byte 0x0000FFD0
_0804FE70: .4byte 0x0000FFD8

	thumb_func_start ZozoroSetCrawlingOam
ZozoroSetCrawlingOam: @ 0x0804FE74
	push {lr}
	ldr r0, _0804FE88 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0804FE90
	ldr r0, _0804FE8C @ =0x08387F64
	b _0804FE92
	.align 2, 0
_0804FE88: .4byte gCurrentSprite
_0804FE8C: .4byte 0x08387F64
_0804FE90:
	ldr r0, _0804FEA0 @ =0x08387ED4
_0804FE92:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0804FEA0: .4byte 0x08387ED4

	thumb_func_start ZozoroSetTurningAroundOam
ZozoroSetTurningAroundOam: @ 0x0804FEA4
	push {lr}
	ldr r0, _0804FEB8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	beq _0804FEC0
	ldr r0, _0804FEBC @ =0x08387FCC
	b _0804FEC2
	.align 2, 0
_0804FEB8: .4byte gCurrentSprite
_0804FEBC: .4byte 0x08387FCC
_0804FEC0:
	ldr r0, _0804FED0 @ =0x08387F3C
_0804FEC2:
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
	pop {r0}
	bx r0
	.align 2, 0
_0804FED0: .4byte 0x08387F3C

	thumb_func_start ZozoroTurningIntoX
ZozoroTurningIntoX: @ 0x0804FED4
	push {lr}
	ldr r2, _0804FEF4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0804FF00
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804FEF8
	ldrh r0, [r2, #4]
	subs r0, #0x20
	strh r0, [r2, #4]
	b _0804FF18
	.align 2, 0
_0804FEF4: .4byte gCurrentSprite
_0804FEF8:
	ldrh r0, [r2, #4]
	adds r0, #0x20
	strh r0, [r2, #4]
	b _0804FF18
_0804FF00:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0804FF12
	ldrh r0, [r2, #2]
	adds r0, #0x20
	b _0804FF16
_0804FF12:
	ldrh r0, [r2, #2]
	subs r0, #0x20
_0804FF16:
	strh r0, [r2, #2]
_0804FF18:
	pop {r0}
	bx r0

	thumb_func_start ZozoroInit
ZozoroInit: @ 0x0804FF1C
	push {r4, r5, r6, r7, lr}
	bl TrySetAbsorbXFlag
	ldr r2, _0804FF48 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804FF4C
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	bne _0804FF4C
	strh r0, [r2]
	b _0805008E
	.align 2, 0
_0804FF48: .4byte gCurrentSprite
_0804FF4C:
	ldr r0, _0804FF64 @ =gCurrentSprite
	adds r4, r0, #0
	adds r4, #0x24
	ldrb r1, [r4]
	adds r7, r0, #0
	cmp r1, #0x59
	bne _0804FF68
	movs r0, #0x5a
	strb r0, [r4]
	movs r0, #0x2c
	strh r0, [r7, #6]
	b _0805006E
	.align 2, 0
_0804FF64: .4byte gCurrentSprite
_0804FF68:
	bl SpriteUtilChooseRandomXDirection
	movs r0, #2
	strb r0, [r4]
	ldrh r0, [r7, #2]
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0804FFA0 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	movs r6, #0xf0
	adds r4, r6, #0
	ands r4, r0
	cmp r4, #0
	beq _0804FFA4
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	ldrh r1, [r7]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805006E
	movs r0, #0x40
	b _0805001C
	.align 2, 0
_0804FFA0: .4byte gPreviousCollisionCheck
_0804FFA4:
	ldrh r0, [r7, #2]
	subs r0, #0x44
	ldrh r1, [r7, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0804FFE0
	adds r0, r7, #0
	adds r0, #0x2d
	strb r4, [r0]
	ldrh r1, [r7]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	movs r2, #0
	orrs r1, r0
	strh r1, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x40
	strh r0, [r7, #2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805006E
	movs r0, #0x40
	b _0805006A
_0804FFE0:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08050022
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	subs r0, #0x20
	strh r0, [r7, #4]
	ldrh r1, [r7]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805006E
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_0805001C:
	orrs r0, r1
	strh r0, [r7]
	b _0805006E
_08050022:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	ldrh r1, [r7, #4]
	adds r1, #0x20
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	adds r2, r6, #0
	ands r2, r0
	cmp r2, #0
	bne _0805003C
	strh r2, [r7]
	b _0805008E
_0805003C:
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r7]
	movs r0, #0x40
	movs r2, #0
	orrs r1, r0
	strh r1, [r7]
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	ldrh r0, [r7, #4]
	adds r0, #0x20
	strh r0, [r7, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805006E
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_0805006A:
	orrs r1, r0
	strh r1, [r7]
_0805006E:
	adds r1, r7, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl ZozoroSetCrawlingOam
	bl ZozoroUpdateHitbox
	ldr r2, _08050094 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r7, #0x14]
_0805008E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08050094: .4byte sPrimarySpriteStats

	thumb_func_start ZozoroIdleInit
ZozoroIdleInit: @ 0x08050098
	push {lr}
	bl ZozoroSetCrawlingOam
	ldr r2, _080500BC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrh r1, [r2]
	ands r0, r1
	cmp r0, #0
	beq _080500B8
	movs r0, #0xb4
	lsls r0, r0, #1
	bl CheckPlayNotAlreadyPlayingSound
_080500B8:
	pop {r0}
	bx r0
	.align 2, 0
_080500BC: .4byte gCurrentSprite

	thumb_func_start ZozoroIdle
ZozoroIdle: @ 0x080500C0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r0, #1
	mov sb, r0
	movs r1, #0
	mov r8, r1
	bl ZozoroCheckCollidingWithAir
	adds r1, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	beq _080500E8
	ldr r1, _080500E4 @ =gCurrentSprite
	adds r1, #0x24
	movs r2, #0x15
	b _0805045A
	.align 2, 0
_080500E4: .4byte gCurrentSprite
_080500E8:
	ldr r3, _08050110 @ =gCurrentSprite
	ldr r4, _08050114 @ =sPrimarySpriteStats
	ldrb r2, [r3, #0x1d]
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #1
	adds r1, r1, r4
	ldrh r2, [r3, #0x14]
	adds r7, r3, #0
	ldrh r1, [r1]
	cmp r2, r1
	bhs _08050132
	adds r1, r7, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	cmp r1, #0
	beq _08050118
	adds r2, r7, #0
	b _0805030A
	.align 2, 0
_08050110: .4byte gCurrentSprite
_08050114: .4byte sPrimarySpriteStats
_08050118:
	ldrh r2, [r7]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r2
	cmp r1, #0
	beq _08050128
	adds r2, r7, #0
	b _0805030A
_08050128:
	movs r2, #2
	mov sb, r2
	ldrb r0, [r7, #0x1c]
	adds r0, #1
	strb r0, [r7, #0x1c]
_08050132:
	adds r4, r7, #0
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08050220
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080501A0
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08050178
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08050174 @ =gPreviousCollisionCheck
	ldrb r2, [r5]
	movs r1, #0xf0
	ands r1, r2
	cmp r1, #0
	bne _0805016A
	b _080502A2
_0805016A:
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	b _080501C8
	.align 2, 0
_08050174: .4byte gPreviousCollisionCheck
_08050178:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0805019C @ =gPreviousCollisionCheck
	ldrb r2, [r5]
	movs r1, #0xf0
	ands r1, r2
	cmp r1, #0
	bne _08050190
	b _080502A2
_08050190:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	b _08050202
	.align 2, 0
_0805019C: .4byte gPreviousCollisionCheck
_080501A0:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080501E4
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080501E0 @ =gPreviousCollisionCheck
	ldrb r2, [r5]
	movs r1, #0xf0
	ands r1, r2
	cmp r1, #0
	beq _080502A2
	ldrh r0, [r4, #2]
	adds r0, #0x30
	ldrh r1, [r4, #4]
_080501C8:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r2, [r5]
	movs r1, #0xf
	ands r1, r2
	cmp r1, #0
	bne _080502A2
	ldrh r1, [r4, #2]
	add r1, sb
	strh r1, [r4, #2]
	b _0805044E
	.align 2, 0
_080501E0: .4byte gPreviousCollisionCheck
_080501E4:
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
	subs r1, #4
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0805021C @ =gPreviousCollisionCheck
	ldrb r2, [r5]
	movs r1, #0xf0
	ands r1, r2
	cmp r1, #0
	beq _080502A2
	ldrh r0, [r4, #2]
	subs r0, #0x30
	ldrh r1, [r4, #4]
_08050202:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r2, [r5]
	movs r1, #0xf
	ands r1, r2
	cmp r1, #0
	bne _080502A2
	ldrh r1, [r4, #2]
	mov r2, sb
	subs r1, r1, r2
	strh r1, [r4, #2]
	b _0805044E
	.align 2, 0
_0805021C: .4byte gPreviousCollisionCheck
_08050220:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _080502BE
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08050274
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08050270 @ =gPreviousCollisionCheck
	ldrb r2, [r5]
	movs r6, #0xf
	adds r1, r6, #0
	ands r1, r2
	cmp r1, #0
	beq _080502A2
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r2, [r5]
	adds r1, r6, #0
	ands r1, r2
	cmp r1, #0
	bne _080502A2
	ldrh r1, [r4, #4]
	add r1, sb
	strh r1, [r4, #4]
	b _0805044E
	.align 2, 0
_08050270: .4byte gPreviousCollisionCheck
_08050274:
	ldrh r0, [r4, #2]
	subs r0, #4
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080502B0 @ =gPreviousCollisionCheck
	ldrb r2, [r5]
	movs r6, #0xf
	adds r1, r6, #0
	ands r1, r2
	cmp r1, #0
	beq _080502A2
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r2, [r5]
	adds r1, r6, #0
	ands r1, r2
	cmp r1, #0
	beq _080502B4
_080502A2:
	mov r1, r8
	adds r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	b _0805044E
	.align 2, 0
_080502B0: .4byte gPreviousCollisionCheck
_080502B4:
	ldrh r1, [r4, #4]
	mov r2, sb
	subs r1, r1, r2
	strh r1, [r4, #4]
	b _0805044E
_080502BE:
	bl unk_1129c
	ldr r5, _080502F4 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r5]
	adds r3, r1, #0
	cmp r3, #0
	bne _0805032C
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080502F8
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x40
	bl CheckVerticalCollisionAtPosition
	ldrb r1, [r5]
	cmp r1, #0
	beq _08050308
	cmp r1, #4
	beq _0805031C
	cmp r1, #2
	beq _080502F0
	b _08050442
_080502F0:
	b _0805031C
	.align 2, 0
_080502F4: .4byte gPreviousVerticalCollisionCheck
_080502F8:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x40
	bl CheckVerticalCollisionAtPosition
	ldrb r1, [r5]
	cmp r1, #0
	bne _08050312
_08050308:
	adds r2, r4, #0
_0805030A:
	adds r2, #0x24
	movs r1, #0x15
	strb r1, [r2]
	b _0805045C
_08050312:
	cmp r1, #5
	beq _0805031C
	cmp r1, #3
	beq _0805031C
	b _08050442
_0805031C:
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	bl CheckVerticalCollisionAtPosition
	adds r1, r0, #0
	strh r1, [r4, #2]
	b _08050442
_0805032C:
	movs r5, #0xf0
	ands r5, r1
	cmp r5, #0
	beq _080503A4
	ldr r0, [r4, #0x18]
	ldr r1, _08050368 @ =0x08387ED4
	cmp r0, r1
	beq _08050342
	str r1, [r4, #0x18]
	strb r6, [r4, #0x1c]
	strh r6, [r4, #0x16]
_08050342:
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08050370
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0805036C @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	cmp r1, #0
	beq _08050394
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	adds r1, #0x30
	b _0805038A
	.align 2, 0
_08050368: .4byte 0x08387ED4
_0805036C: .4byte gPreviousCollisionCheck
_08050370:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x30
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080503A0 @ =gPreviousCollisionCheck
	ldrb r1, [r5]
	cmp r1, #0
	beq _08050394
	ldrh r0, [r4, #2]
	subs r0, #0x10
	ldrh r1, [r4, #4]
	subs r1, #0x30
_0805038A:
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r1, [r5]
	cmp r1, #0x11
	bne _08050442
_08050394:
	mov r1, r8
	adds r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	b _08050442
	.align 2, 0
_080503A0: .4byte gPreviousCollisionCheck
_080503A4:
	ldrh r2, [r4]
	movs r1, #0x40
	ands r1, r2
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	cmp r2, #0
	beq _080503F8
	cmp r3, #2
	bne _080503C0
	ldr r1, [r4, #0x18]
	ldr r2, _080503BC @ =0x08388054
	b _080503E8
	.align 2, 0
_080503BC: .4byte 0x08388054
_080503C0:
	cmp r3, #4
	bne _080503D0
	ldr r1, [r4, #0x18]
	ldr r2, _080503CC @ =0x08388114
	b _080503E8
	.align 2, 0
_080503CC: .4byte 0x08388114
_080503D0:
	cmp r3, #3
	bne _080503E0
	ldr r1, [r4, #0x18]
	ldr r2, _080503DC @ =0x08387FF4
	b _080503E8
	.align 2, 0
_080503DC: .4byte 0x08387FF4
_080503E0:
	cmp r3, #5
	bne _08050442
	ldr r1, [r4, #0x18]
	ldr r2, _080503F4 @ =0x083880B4
_080503E8:
	cmp r1, r2
	beq _08050442
	str r2, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	b _08050442
	.align 2, 0
_080503F4: .4byte 0x083880B4
_080503F8:
	cmp r3, #3
	bne _08050408
	ldr r1, [r4, #0x18]
	ldr r3, _08050404 @ =0x08388054
	b _08050420
	.align 2, 0
_08050404: .4byte 0x08388054
_08050408:
	cmp r3, #5
	bne _08050418
	ldr r1, [r4, #0x18]
	ldr r3, _08050414 @ =0x08388114
	b _08050420
	.align 2, 0
_08050414: .4byte 0x08388114
_08050418:
	cmp r3, #2
	bne _08050430
	ldr r1, [r4, #0x18]
	ldr r3, _0805042C @ =0x08387FF4
_08050420:
	cmp r1, r3
	beq _08050442
	str r3, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	b _08050442
	.align 2, 0
_0805042C: .4byte 0x08387FF4
_08050430:
	cmp r3, #4
	bne _08050442
	ldr r1, [r7, #0x18]
	ldr r3, _08050468 @ =0x083880B4
	cmp r1, r3
	beq _08050442
	str r3, [r7, #0x18]
	strb r2, [r7, #0x1c]
	strh r2, [r7, #0x16]
_08050442:
	mov r1, r8
	cmp r1, #0
	bne _08050454
	mov r0, sb
	bl unk_1169c
_0805044E:
	mov r2, r8
	cmp r2, #0
	beq _0805045C
_08050454:
	ldr r1, _0805046C @ =gCurrentSprite
	adds r1, #0x24
	movs r2, #3
_0805045A:
	strb r2, [r1]
_0805045C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08050468: .4byte 0x083880B4
_0805046C: .4byte gCurrentSprite

	thumb_func_start ZozoroTurningAroundInit
ZozoroTurningAroundInit: @ 0x08050470
	push {lr}
	ldr r0, _08050484 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #4
	strb r1, [r0]
	bl ZozoroSetTurningAroundOam
	pop {r0}
	bx r0
	.align 2, 0
_08050484: .4byte gCurrentSprite

	thumb_func_start ZozoroTurningAround
ZozoroTurningAround: @ 0x08050488
	push {lr}
	ldr r2, _080504AC @ =gCurrentSprite
	ldrh r0, [r2, #0x16]
	cmp r0, #1
	bne _080504B8
	ldrb r0, [r2, #0x1c]
	cmp r0, #3
	bne _080504B8
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _080504B0
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r3, #0
	b _080504B4
	.align 2, 0
_080504AC: .4byte gCurrentSprite
_080504B0:
	ldrh r0, [r2]
	movs r1, #0x40
_080504B4:
	eors r0, r1
	strh r0, [r2]
_080504B8:
	bl CheckNearEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080504C8
	ldr r0, _080504CC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
_080504C8:
	pop {r0}
	bx r0
	.align 2, 0
_080504CC: .4byte gCurrentSprite

	thumb_func_start ZozoroFallingInit
ZozoroFallingInit: @ 0x080504D0
	push {lr}
	ldr r1, _080504EC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bl ZozoroSetCrawlingOam
	pop {r0}
	bx r0
	.align 2, 0
_080504EC: .4byte gCurrentSprite

	thumb_func_start ZozorFalling
ZozorFalling: @ 0x080504F0
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r2, _08050518 @ =gCurrentSprite
	ldrh r3, [r2, #2]
	ldrh r4, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805051C
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08050528
	subs r0, r4, #4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _08050528
	.align 2, 0
_08050518: .4byte gCurrentSprite
_0805051C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08050530
_08050528:
	ldrh r0, [r2, #0xc]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
_08050530:
	adds r0, r3, #0
	adds r1, r4, #0
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0805057C @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080505A4
	ldr r4, _08050580 @ =gCurrentSprite
	strh r1, [r4, #2]
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _08050556
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08050556:
	ldrh r0, [r4]
	ldr r1, _08050584 @ =0x0000FEFF
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strb r0, [r2]
	bl ZozoroUpdateHitbox
	cmp r5, #0
	beq _08050590
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08050588
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0x10]
	b _0805058C
	.align 2, 0
_0805057C: .4byte gPreviousVerticalCollisionCheck
_08050580: .4byte gCurrentSprite
_08050584: .4byte 0x0000FEFF
_08050588:
	ldrh r0, [r4, #4]
	ldrh r1, [r4, #0xe]
_0805058C:
	subs r0, r0, r1
	strh r0, [r4, #4]
_08050590:
	ldr r0, _080505A0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bl ZozoroSetCrawlingOam
	b _080505E8
	.align 2, 0
_080505A0: .4byte gCurrentSprite
_080505A4:
	ldr r3, _080505D0 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _080505D4 @ =sSpritesFallingSpeed
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080505D8 @ =0x00007FFF
	cmp r1, r0
	bne _080505DC
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r3, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _080505E6
	.align 2, 0
_080505D0: .4byte gCurrentSprite
_080505D4: .4byte sSpritesFallingSpeed
_080505D8: .4byte 0x00007FFF
_080505DC:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
_080505E6:
	strh r0, [r3, #2]
_080505E8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Zozoro
Zozoro: @ 0x080505F0
	push {r4, lr}
	ldr r4, _08050618 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08050608
	ldr r0, _0805061C @ =0x000001D1
	bl CheckPlayNotAlreadyPlayingSound
_08050608:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08050620
	bl SpriteUpdateFreezeTimer
	b _080507EC
	.align 2, 0
_08050618: .4byte gCurrentSprite
_0805061C: .4byte 0x000001D1
_08050620:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5b
	bls _0805062C
	b _080507EC
_0805062C:
	lsls r0, r0, #2
	ldr r1, _08050638 @ =_0805063C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08050638: .4byte _0805063C
_0805063C: @ jump table
	.4byte _080507AC @ case 0
	.4byte _080507B2 @ case 1
	.4byte _080507B6 @ case 2
	.4byte _080507BC @ case 3
	.4byte _080507C0 @ case 4
	.4byte _080507EC @ case 5
	.4byte _080507EC @ case 6
	.4byte _080507EC @ case 7
	.4byte _080507EC @ case 8
	.4byte _080507EC @ case 9
	.4byte _080507EC @ case 10
	.4byte _080507EC @ case 11
	.4byte _080507EC @ case 12
	.4byte _080507EC @ case 13
	.4byte _080507EC @ case 14
	.4byte _080507EC @ case 15
	.4byte _080507EC @ case 16
	.4byte _080507EC @ case 17
	.4byte _080507EC @ case 18
	.4byte _080507EC @ case 19
	.4byte _080507EC @ case 20
	.4byte _080507C6 @ case 21
	.4byte _080507CA @ case 22
	.4byte _080507EC @ case 23
	.4byte _080507EC @ case 24
	.4byte _080507EC @ case 25
	.4byte _080507EC @ case 26
	.4byte _080507EC @ case 27
	.4byte _080507EC @ case 28
	.4byte _080507EC @ case 29
	.4byte _080507EC @ case 30
	.4byte _080507EC @ case 31
	.4byte _080507EC @ case 32
	.4byte _080507EC @ case 33
	.4byte _080507EC @ case 34
	.4byte _080507EC @ case 35
	.4byte _080507EC @ case 36
	.4byte _080507EC @ case 37
	.4byte _080507EC @ case 38
	.4byte _080507EC @ case 39
	.4byte _080507EC @ case 40
	.4byte _080507EC @ case 41
	.4byte _080507EC @ case 42
	.4byte _080507EC @ case 43
	.4byte _080507EC @ case 44
	.4byte _080507EC @ case 45
	.4byte _080507EC @ case 46
	.4byte _080507EC @ case 47
	.4byte _080507EC @ case 48
	.4byte _080507EC @ case 49
	.4byte _080507EC @ case 50
	.4byte _080507EC @ case 51
	.4byte _080507EC @ case 52
	.4byte _080507EC @ case 53
	.4byte _080507EC @ case 54
	.4byte _080507EC @ case 55
	.4byte _080507EC @ case 56
	.4byte _080507EC @ case 57
	.4byte _080507EC @ case 58
	.4byte _080507EC @ case 59
	.4byte _080507EC @ case 60
	.4byte _080507EC @ case 61
	.4byte _080507EC @ case 62
	.4byte _080507EC @ case 63
	.4byte _080507EC @ case 64
	.4byte _080507EC @ case 65
	.4byte _080507EC @ case 66
	.4byte _080507EC @ case 67
	.4byte _080507EC @ case 68
	.4byte _080507EC @ case 69
	.4byte _080507EC @ case 70
	.4byte _080507EC @ case 71
	.4byte _080507EC @ case 72
	.4byte _080507EC @ case 73
	.4byte _080507EC @ case 74
	.4byte _080507EC @ case 75
	.4byte _080507EC @ case 76
	.4byte _080507EC @ case 77
	.4byte _080507EC @ case 78
	.4byte _080507EC @ case 79
	.4byte _080507EC @ case 80
	.4byte _080507EC @ case 81
	.4byte _080507EC @ case 82
	.4byte _080507EC @ case 83
	.4byte _080507EC @ case 84
	.4byte _080507EC @ case 85
	.4byte _080507EC @ case 86
	.4byte _080507D0 @ case 87
	.4byte _080507D4 @ case 88
	.4byte _080507DA @ case 89
	.4byte _080507DE @ case 90
	.4byte _080507E4 @ case 91
_080507AC:
	bl ZozoroInit
	b _080507EC
_080507B2:
	bl ZozoroIdleInit
_080507B6:
	bl ZozoroIdle
	b _080507EC
_080507BC:
	bl ZozoroTurningAroundInit
_080507C0:
	bl ZozoroTurningAround
	b _080507EC
_080507C6:
	bl ZozoroFallingInit
_080507CA:
	bl ZozorFalling
	b _080507EC
_080507D0:
	bl SpriteDyingInit
_080507D4:
	bl SpriteDying
	b _080507EC
_080507DA:
	bl ZozoroInit
_080507DE:
	bl SpriteSpawningFromX
	b _080507EC
_080507E4:
	bl ZozoroTurningIntoX
	bl XParasiteInit
_080507EC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SA_XMonsterSyncSubSprites
SA_XMonsterSyncSubSprites: @ 0x080507F4
	push {r4, lr}
	ldr r4, _08050850 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _08050854 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _08050858 @ =0x0879B458
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _08050826
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_08050826:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08050850: .4byte gSubSpriteData1
_08050854: .4byte gCurrentSprite
_08050858: .4byte 0x0879B458

	thumb_func_start SA_XMonsterProjectilesCollision
SA_XMonsterProjectilesCollision: @ 0x0805085C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r3, _08050930 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08050920
	ldrh r0, [r3, #0x14]
	cmp r0, #0
	beq _08050920
	ldrh r1, [r3, #2]
	ldrh r2, [r3, #4]
	ldrh r0, [r3, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r3, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sl, r1
	ldrh r0, [r3, #0xe]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldrh r0, [r3, #0x10]
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	movs r7, #0
_080508AA:
	ldr r1, _08050934 @ =gProjectileData
	lsls r0, r7, #5
	adds r4, r0, r1
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08050916
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08050916
	ldrb r0, [r4, #0xf]
	cmp r0, #4
	bne _08050916
	ldrh r5, [r4, #8]
	ldrh r6, [r4, #0xa]
	ldrh r0, [r4, #0x16]
	adds r0, r5, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r4, #0x18]
	adds r1, r5, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r2, [r4, #0x1a]
	adds r2, r6, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldrh r3, [r4, #0x1c]
	adds r3, r6, r3
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov ip, r3
	ldr r3, [sp, #0x10]
	str r3, [sp]
	mov r3, sl
	str r3, [sp, #4]
	mov r3, sb
	str r3, [sp, #8]
	mov r3, r8
	str r3, [sp, #0xc]
	mov r3, ip
	bl CheckObjectsTouching
	cmp r0, #0
	beq _08050916
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #7
	bl ParticleSet
	movs r0, #0
	strb r0, [r4]
_08050916:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xf
	bls _080508AA
_08050920:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08050930: .4byte gCurrentSprite
_08050934: .4byte gProjectileData

	thumb_func_start SA_XMonsterCheckScreaming
SA_XMonsterCheckScreaming: @ 0x08050938
	push {lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r0, _08050958 @ =gCurrentSprite
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #8
	bne _08050970
	cmp r2, #0
	beq _0805095C
	bl SA_XMonsterScreamingAirborneInit
	b _08050960
	.align 2, 0
_08050958: .4byte gCurrentSprite
_0805095C:
	bl SA_XMonsterScreamingGroundedInit
_08050960:
	ldr r0, _0805096C @ =0x000001E1
	bl CheckPlayNotAlreadyPlayingSound
	movs r0, #1
	b _08050972
	.align 2, 0
_0805096C: .4byte 0x000001E1
_08050970:
	movs r0, #0
_08050972:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start SA_XMonsterXMovement
SA_XMonsterXMovement: @ 0x08050978
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r7, #0xc
	ldr r0, _080509D4 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080509E8
	ldr r6, _080509D8 @ =gSubSpriteData1
	cmp r2, #0
	beq _080509A6
	ldr r1, _080509DC @ =gSamusData
	ldrh r0, [r6, #8]
	ldrh r2, [r1, #0x18]
	cmp r0, r2
	bhs _080509A6
	ldrh r0, [r6, #0xa]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhi _08050A30
_080509A6:
	ldrh r0, [r6, #8]
	subs r0, #0x20
	ldrh r1, [r6, #0xa]
	adds r1, #0x8c
	bl SpriteUtilCheckCollisionAtPosition
	ldr r4, _080509E0 @ =gPreviousCollisionCheck
	ldrb r0, [r4]
	cmp r0, #0
	beq _080509CE
	ldrh r0, [r6, #8]
	ldr r1, _080509E4 @ =0xFFFFFEE0
	adds r0, r0, r1
	ldrh r1, [r6, #0xa]
	adds r1, #0x8c
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r4]
	cmp r0, #0
	bne _08050A30
_080509CE:
	ldrh r0, [r6, #0xa]
	adds r0, r7, r0
	b _08050A2E
	.align 2, 0
_080509D4: .4byte gCurrentSprite
_080509D8: .4byte gSubSpriteData1
_080509DC: .4byte gSamusData
_080509E0: .4byte gPreviousCollisionCheck
_080509E4: .4byte 0xFFFFFEE0
_080509E8:
	ldr r6, _08050A38 @ =gSubSpriteData1
	cmp r2, #0
	beq _08050A00
	ldr r1, _08050A3C @ =gSamusData
	ldrh r0, [r6, #8]
	ldrh r2, [r1, #0x18]
	cmp r0, r2
	bhs _08050A00
	ldrh r0, [r6, #0xa]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	blo _08050A30
_08050A00:
	adds r4, r6, #0
	ldrh r0, [r4, #8]
	subs r0, #0x20
	ldrh r1, [r4, #0xa]
	subs r1, #0x8c
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08050A40 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	beq _08050A2A
	ldrh r0, [r4, #8]
	ldr r1, _08050A44 @ =0xFFFFFEE0
	adds r0, r0, r1
	ldrh r1, [r4, #0xa]
	subs r1, #0x8c
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08050A30
_08050A2A:
	ldrh r0, [r6, #0xa]
	subs r0, r0, r7
_08050A2E:
	strh r0, [r6, #0xa]
_08050A30:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08050A38: .4byte gSubSpriteData1
_08050A3C: .4byte gSamusData
_08050A40: .4byte gPreviousCollisionCheck
_08050A44: .4byte 0xFFFFFEE0

	thumb_func_start SA_XMonsterSetSideHitboxes
SA_XMonsterSetSideHitboxes: @ 0x08050A48
	push {lr}
	ldr r2, _08050A60 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08050A68
	ldr r0, _08050A64 @ =0x0000FFC0
	strh r0, [r2, #0xe]
	movs r0, #0x80
	b _08050A6E
	.align 2, 0
_08050A60: .4byte gCurrentSprite
_08050A64: .4byte 0x0000FFC0
_08050A68:
	ldr r0, _08050A74 @ =0x0000FF80
	strh r0, [r2, #0xe]
	movs r0, #0x40
_08050A6E:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_08050A74: .4byte 0x0000FF80

	thumb_func_start SA_XMonsterFall
SA_XMonsterFall: @ 0x08050A78
	push {r4, r5, r6, lr}
	ldr r0, _08050AA8 @ =gCurrentSprite
	adds r5, r0, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r3, _08050AAC @ =0x08388274
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08050AB0 @ =0x00007FFF
	cmp r1, r0
	bne _08050AB8
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r2, _08050AB4 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #8]
	adds r4, r2, #0
	b _08050AC6
	.align 2, 0
_08050AA8: .4byte gCurrentSprite
_08050AAC: .4byte 0x08388274
_08050AB0: .4byte 0x00007FFF
_08050AB4: .4byte gSubSpriteData1
_08050AB8:
	adds r0, r2, #1
	strb r0, [r5]
	ldr r1, _08050AFC @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r4
	strh r0, [r1, #8]
	adds r4, r1, #0
_08050AC6:
	ldrh r1, [r4, #8]
	ldr r0, _08050B00 @ =0x0000073E
	cmp r1, r0
	bls _08050AF6
	adds r0, r1, #0
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r0, _08050B04 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08050AF6
	strh r2, [r4, #8]
	ldr r0, _08050B08 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1d
	strb r1, [r0]
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
_08050AF6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08050AFC: .4byte gSubSpriteData1
_08050B00: .4byte 0x0000073E
_08050B04: .4byte gPreviousVerticalCollisionCheck
_08050B08: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterSpawningFromX
SA_XMonsterSpawningFromX: @ 0x08050B0C
	push {lr}
	ldr r2, _08050B30 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x26
	movs r3, #1
	strb r3, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	bne _08050B50
	ldrh r0, [r2, #0x12]
	cmp r0, #0xff
	bhi _08050B34
	adds r0, #1
	strh r0, [r2, #0x12]
	b _08050BAC
	.align 2, 0
_08050B30: .4byte gCurrentSprite
_08050B34:
	ldrh r1, [r2]
	ldr r0, _08050B48 @ =0x0000FFF7
	ands r0, r1
	ldr r1, _08050B4C @ =0x00007FFF
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x24
	strb r3, [r0]
	b _08050BAC
	.align 2, 0
_08050B48: .4byte 0x0000FFF7
_08050B4C: .4byte 0x00007FFF
_08050B50:
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bhi _08050B90
	ldrb r1, [r1]
	ldr r2, _08050B80 @ =0x040000D4
	ldr r0, _08050B84 @ =sSpritesGraphicsPointers
	movs r3, #0xb1
	lsls r3, r3, #2
	adds r0, r0, r3
	lsls r1, r1, #9
	ldr r0, [r0]
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _08050B88 @ =0x06014000
	adds r1, r1, r0
	str r1, [r2, #4]
	ldr r0, _08050B8C @ =0x80000100
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	b _08050BAC
	.align 2, 0
_08050B80: .4byte 0x040000D4
_08050B84: .4byte sSpritesGraphicsPointers
_08050B88: .4byte 0x06014000
_08050B8C: .4byte 0x80000100
_08050B90:
	cmp r0, #4
	bne _08050BAC
	ldr r1, _08050BB0 @ =0x040000D4
	ldr r0, _08050BB4 @ =sSpritesPalettePointers
	movs r2, #0xb1
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _08050BB8 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _08050BBC @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08050BAC:
	pop {r0}
	bx r0
	.align 2, 0
_08050BB0: .4byte 0x040000D4
_08050BB4: .4byte sSpritesPalettePointers
_08050BB8: .4byte 0x05000300
_08050BBC: .4byte 0x80000010

	thumb_func_start SA_XMonsterInit
SA_XMonsterInit: @ 0x08050BC0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _08050C6C @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x5a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #5
	strb r0, [r1]
	mov r1, ip
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r2, r1, #0
	movs r4, #0
	orrs r2, r0
	ldr r0, _08050C70 @ =0x0000FFFB
	ands r2, r0
	movs r0, #8
	orrs r2, r0
	orrs r2, r4
	mov r0, ip
	strh r2, [r0]
	movs r0, #0xa8
	mov r1, ip
	strh r0, [r1, #0x12]
	mov r0, ip
	adds r0, #0x2b
	strb r4, [r0]
	adds r1, #0x27
	movs r0, #0x44
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r4, [r0]
	adds r1, #2
	movs r0, #0x40
	strb r0, [r1]
	ldr r0, _08050C74 @ =0x0000FEE0
	mov r1, ip
	strh r0, [r1, #0xa]
	strh r3, [r1, #0xc]
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	ldr r0, _08050C78 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r3, #3
	adds r0, r3, #0
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	strb r3, [r0, #0x1e]
	adds r0, #0x35
	strb r4, [r0]
	ldr r3, _08050C7C @ =sPrimarySpriteStats
	mov r0, ip
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	ldr r1, _08050C80 @ =gSubSpriteData1
	mov r3, ip
	ldrh r0, [r3, #2]
	strh r0, [r1, #8]
	ldrh r0, [r3, #4]
	strh r0, [r1, #0xa]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r2, r0
	mov r6, ip
	adds r5, r1, #0
	cmp r2, #0
	beq _08050C88
	ldr r0, _08050C84 @ =0x08388FA4
	b _08050C8A
	.align 2, 0
_08050C6C: .4byte gCurrentSprite
_08050C70: .4byte 0x0000FFFB
_08050C74: .4byte 0x0000FEE0
_08050C78: .4byte gIoRegisters
_08050C7C: .4byte sPrimarySpriteStats
_08050C80: .4byte gSubSpriteData1
_08050C84: .4byte 0x08388FA4
_08050C88:
	ldr r0, _08050D8C @ =0x08388F94
_08050C8A:
	str r0, [r5]
	movs r4, #0
	strb r4, [r5, #6]
	strh r4, [r5, #4]
	adds r1, r6, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	bl SA_XMonsterSetSideHitboxes
	ldrb r2, [r6, #0x1f]
	adds r7, r6, #0
	adds r7, #0x23
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #7
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #8
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #9
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r7]
	ldrh r0, [r5, #8]
	str r0, [sp]
	ldrh r0, [r5, #0xa]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6b
	movs r1, #0xa
	bl SpriteSpawnSecondary
	movs r0, #0x9f
	bl unk_3b1c
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08050D8C: .4byte 0x08388F94

	thumb_func_start SA_XMonsterDroppingInit
SA_XMonsterDroppingInit: @ 0x08050D90
	ldr r1, _08050DA4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x16
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bx lr
	.align 2, 0
_08050DA4: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterDropping
SA_XMonsterDropping: @ 0x08050DA8
	push {lr}
	bl SA_XMonsterFall
	ldr r0, _08050DC0 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1d
	bne _08050DC4
	movs r0, #0
	bl SA_XMonsterCheckScreaming
	b _08050DCA
	.align 2, 0
_08050DC0: .4byte gCurrentSprite
_08050DC4:
	movs r0, #1
	bl SA_XMonsterCheckScreaming
_08050DCA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SA_XMonsterIdleInit
SA_XMonsterIdleInit: @ 0x08050DD0
	push {lr}
	ldr r2, _08050DE8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08050DF4
	ldr r1, _08050DEC @ =gSubSpriteData1
	ldr r0, _08050DF0 @ =0x08388E7C
	b _08050DF8
	.align 2, 0
_08050DE8: .4byte gCurrentSprite
_08050DEC: .4byte gSubSpriteData1
_08050DF0: .4byte 0x08388E7C
_08050DF4:
	ldr r1, _08050E14 @ =gSubSpriteData1
	ldr r0, _08050E18 @ =0x08388DE4
_08050DF8:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x35
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08050E14: .4byte gSubSpriteData1
_08050E18: .4byte 0x08388DE4

	thumb_func_start SA_XMonsterIdle
SA_XMonsterIdle: @ 0x08050E1C
	push {r4, lr}
	movs r4, #0
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08050E70
	ldr r2, _08050E44 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08050E4C
	ldr r1, _08050E48 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08050E58
	b _08050E5C
	.align 2, 0
_08050E44: .4byte gCurrentSprite
_08050E48: .4byte gSamusData
_08050E4C:
	ldr r1, _08050E64 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _08050E58
	movs r4, #1
_08050E58:
	cmp r4, #0
	beq _08050E68
_08050E5C:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	b _08050E6E
	.align 2, 0
_08050E64: .4byte gSamusData
_08050E68:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x17
_08050E6E:
	strb r0, [r1]
_08050E70:
	movs r0, #0
	bl SA_XMonsterCheckScreaming
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SA_XMonsterJumpWarningInit
SA_XMonsterJumpWarningInit: @ 0x08050E7C
	push {lr}
	ldr r2, _08050E94 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08050EA0
	ldr r1, _08050E98 @ =gSubSpriteData1
	ldr r0, _08050E9C @ =0x08388EA4
	b _08050EA4
	.align 2, 0
_08050E94: .4byte gCurrentSprite
_08050E98: .4byte gSubSpriteData1
_08050E9C: .4byte 0x08388EA4
_08050EA0:
	ldr r1, _08050EC0 @ =gSubSpriteData1
	ldr r0, _08050EC4 @ =0x08388E0C
_08050EA4:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x35
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08050EC0: .4byte gSubSpriteData1
_08050EC4: .4byte 0x08388E0C

	thumb_func_start SA_XMonsterJumpWarning
SA_XMonsterJumpWarning: @ 0x08050EC8
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08050F18
	ldr r2, _08050EE8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08050EF4
	ldr r1, _08050EEC @ =gSubSpriteData1
	ldr r0, _08050EF0 @ =0x08388ECC
	b _08050EF8
	.align 2, 0
_08050EE8: .4byte gCurrentSprite
_08050EEC: .4byte gSubSpriteData1
_08050EF0: .4byte 0x08388ECC
_08050EF4:
	ldr r1, _08050F24 @ =gSubSpriteData1
	ldr r0, _08050F28 @ =0x08388E34
_08050EF8:
	str r0, [r1]
	adds r3, r1, #0
	movs r0, #0
	strb r0, [r3, #6]
	movs r1, #0
	strh r0, [r3, #4]
	adds r0, r2, #0
	adds r0, #0x31
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	movs r0, #0xa0
	bl SoundPlay
_08050F18:
	movs r0, #0
	bl SA_XMonsterCheckScreaming
	pop {r0}
	bx r0
	.align 2, 0
_08050F24: .4byte gSubSpriteData1
_08050F28: .4byte 0x08388E34

	thumb_func_start SA_XMonsterJumping
SA_XMonsterJumping: @ 0x08050F2C
	push {r4, r5, lr}
	ldr r4, _08050F54 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	ldrb r2, [r0]
	ldr r1, _08050F58 @ =0x08388224
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _08050F5C @ =0x00007FFF
	cmp r1, r0
	bne _08050F60
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	b _08050F74
	.align 2, 0
_08050F54: .4byte gCurrentSprite
_08050F58: .4byte 0x08388224
_08050F5C: .4byte 0x00007FFF
_08050F60:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _08050F80 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r3
	strh r0, [r1, #8]
	movs r0, #0
	bl SA_XMonsterXMovement
_08050F74:
	movs r0, #1
	bl SA_XMonsterCheckScreaming
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08050F80: .4byte gSubSpriteData1

	thumb_func_start SA_XMonsterFallingInit
SA_XMonsterFallingInit: @ 0x08050F84
	ldr r1, _08050F98 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x1c
	strb r0, [r2]
	adds r1, #0x31
	strb r3, [r1]
	bx lr
	.align 2, 0
_08050F98: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterFalling
SA_XMonsterFalling: @ 0x08050F9C
	push {lr}
	movs r0, #1
	bl SA_XMonsterXMovement
	bl SA_XMonsterFall
	ldr r0, _08050FBC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1d
	bne _08050FC0
	movs r0, #0
	bl SA_XMonsterCheckScreaming
	b _08050FC6
	.align 2, 0
_08050FBC: .4byte gCurrentSprite
_08050FC0:
	movs r0, #1
	bl SA_XMonsterCheckScreaming
_08050FC6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start SA_XMonsterLandingInit
SA_XMonsterLandingInit: @ 0x08050FCC
	push {lr}
	ldr r2, _08050FE4 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08050FF0
	ldr r1, _08050FE8 @ =gSubSpriteData1
	ldr r0, _08050FEC @ =0x08388EF4
	b _08050FF4
	.align 2, 0
_08050FE4: .4byte gCurrentSprite
_08050FE8: .4byte gSubSpriteData1
_08050FEC: .4byte 0x08388EF4
_08050FF0:
	ldr r1, _08051018 @ =gSubSpriteData1
	ldr r0, _0805101C @ =0x08388E5C
_08050FF4:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x35
	strb r2, [r0]
	movs r0, #0xa1
	bl unk_3b1c
	pop {r0}
	bx r0
	.align 2, 0
_08051018: .4byte gSubSpriteData1
_0805101C: .4byte 0x08388E5C

	thumb_func_start SA_XMonsterLanding
SA_XMonsterLanding: @ 0x08051020
	push {r4, lr}
	movs r4, #0
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08051074
	ldr r2, _08051048 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051050
	ldr r1, _0805104C @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0805105C
	b _08051060
	.align 2, 0
_08051048: .4byte gCurrentSprite
_0805104C: .4byte gSamusData
_08051050:
	ldr r1, _08051068 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _0805105C
	movs r4, #1
_0805105C:
	cmp r4, #0
	beq _0805106C
_08051060:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	b _08051072
	.align 2, 0
_08051068: .4byte gSamusData
_0805106C:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x17
_08051072:
	strb r0, [r1]
_08051074:
	movs r0, #0
	bl SA_XMonsterCheckScreaming
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SA_XMonsterTurningAroundInit
SA_XMonsterTurningAroundInit: @ 0x08051080
	push {lr}
	ldr r2, _08051098 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _080510A4
	ldr r1, _0805109C @ =gSubSpriteData1
	ldr r0, _080510A0 @ =0x08388F24
	b _080510A8
	.align 2, 0
_08051098: .4byte gCurrentSprite
_0805109C: .4byte gSubSpriteData1
_080510A0: .4byte 0x08388F24
_080510A4:
	ldr r1, _080510C4 @ =gSubSpriteData1
	ldr r0, _080510C8 @ =0x08388F14
_080510A8:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #4
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x35
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080510C4: .4byte gSubSpriteData1
_080510C8: .4byte 0x08388F14

	thumb_func_start SA_XMonsterTurningAround
SA_XMonsterTurningAround: @ 0x080510CC
	push {lr}
	ldr r2, _08051104 @ =gCurrentSprite
	ldrh r0, [r2, #0x16]
	cmp r0, #2
	bne _080510EC
	ldrb r0, [r2, #0x1c]
	cmp r0, #1
	bne _080510EC
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	bl SA_XMonsterSetSideHitboxes
_080510EC:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _080510F8
	bl SA_XMonsterJumpWarningInit
_080510F8:
	movs r0, #0
	bl SA_XMonsterCheckScreaming
	pop {r0}
	bx r0
	.align 2, 0
_08051104: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterScreamingAirborneInit
SA_XMonsterScreamingAirborneInit: @ 0x08051108
	push {lr}
	ldr r2, _08051120 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _0805112C
	ldr r1, _08051124 @ =gSubSpriteData1
	ldr r0, _08051128 @ =0x08388F84
	b _08051130
	.align 2, 0
_08051120: .4byte gCurrentSprite
_08051124: .4byte gSubSpriteData1
_08051128: .4byte 0x08388F84
_0805112C:
	ldr r1, _08051154 @ =gSubSpriteData1
	ldr r0, _08051158 @ =0x08388F74
_08051130:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	adds r1, #0x11
	movs r0, #1
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08051154: .4byte gSubSpriteData1
_08051158: .4byte 0x08388F74

	thumb_func_start SA_XMonsterScreamingAirborne
SA_XMonsterScreamingAirborne: @ 0x0805115C
	push {lr}
	movs r0, #0
	bl SA_XMonsterXMovement
	bl SA_XMonsterFall
	ldr r1, _0805118C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1d
	bne _080511C4
	ldrh r0, [r1, #0x14]
	cmp r0, #0
	bne _080511C4
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051198
	ldr r1, _08051190 @ =gSubSpriteData1
	ldr r0, _08051194 @ =0x08388F44
	b _0805119C
	.align 2, 0
_0805118C: .4byte gCurrentSprite
_08051190: .4byte gSubSpriteData1
_08051194: .4byte 0x08388F44
_08051198:
	ldr r1, _080511B8 @ =gSubSpriteData1
	ldr r0, _080511BC @ =0x08388F34
_0805119C:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _080511C0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x3c
	strb r1, [r2]
	adds r0, #0x25
	strb r3, [r0]
	b _080511D8
	.align 2, 0
_080511B8: .4byte gSubSpriteData1
_080511BC: .4byte 0x08388F34
_080511C0: .4byte gCurrentSprite
_080511C4:
	ldr r1, _080511DC @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _080511D8
	ldrb r0, [r1, #0x1c]
	cmp r0, #2
	bne _080511D8
	movs r0, #0xa6
	bl SoundPlay
_080511D8:
	pop {r0}
	bx r0
	.align 2, 0
_080511DC: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterScreamingGroundedInit
SA_XMonsterScreamingGroundedInit: @ 0x080511E0
	push {lr}
	ldr r2, _080511F8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051204
	ldr r1, _080511FC @ =gSubSpriteData1
	ldr r0, _08051200 @ =0x08388F44
	b _08051208
	.align 2, 0
_080511F8: .4byte gCurrentSprite
_080511FC: .4byte gSubSpriteData1
_08051200: .4byte 0x08388F44
_08051204:
	ldr r1, _08051224 @ =gSubSpriteData1
	ldr r0, _08051228 @ =0x08388F34
_08051208:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #0x11
	movs r0, #1
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08051224: .4byte gSubSpriteData1
_08051228: .4byte 0x08388F34

	thumb_func_start SA_XMonsterScreamingGrounded
SA_XMonsterScreamingGrounded: @ 0x0805122C
	push {r4, lr}
	movs r4, #0
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08051292
	ldr r2, _08051250 @ =gCurrentSprite
	ldrh r0, [r2, #0x14]
	cmp r0, #0
	bne _08051254
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x3c
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	b _080512A6
	.align 2, 0
_08051250: .4byte gCurrentSprite
_08051254:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051270
	ldr r1, _0805126C @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0805127C
	b _08051280
	.align 2, 0
_0805126C: .4byte gSamusData
_08051270:
	ldr r1, _08051288 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _0805127C
	movs r4, #1
_0805127C:
	cmp r4, #0
	beq _0805128C
_08051280:
	bl SA_XMonsterTurningAroundInit
	b _080512A6
	.align 2, 0
_08051288: .4byte gSamusData
_0805128C:
	bl SA_XMonsterJumpWarningInit
	b _080512A6
_08051292:
	ldr r1, _080512AC @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _080512A6
	ldrb r0, [r1, #0x1c]
	cmp r0, #2
	bne _080512A6
	movs r0, #0xa6
	bl SoundPlay
_080512A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080512AC: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterPanting
SA_XMonsterPanting: @ 0x080512B0
	push {r4, lr}
	ldr r1, _08051304 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _080512CE
	ldrb r0, [r1, #0x1c]
	cmp r0, #2
	bne _080512CE
	movs r0, #0xa8
	bl unk_3b1c
_080512CE:
	ldr r4, _08051304 @ =gCurrentSprite
	ldrh r0, [r4, #4]
	lsrs r0, r0, #2
	ldr r1, _08051308 @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _0805130C @ =0xFFE70000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xbe
	bhi _0805133A
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805133A
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051318
	ldr r1, _08051310 @ =gSubSpriteData1
	ldr r0, _08051314 @ =0x08388F64
	b _0805131C
	.align 2, 0
_08051304: .4byte gCurrentSprite
_08051308: .4byte gBg1XPosition
_0805130C: .4byte 0xFFE70000
_08051310: .4byte gSubSpriteData1
_08051314: .4byte 0x08388F64
_08051318:
	ldr r1, _08051340 @ =gSubSpriteData1
	ldr r0, _08051344 @ =0x08388F54
_0805131C:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _08051348 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3e
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0xa0
	strb r0, [r1]
	movs r0, #0xa7
	bl unk_3b1c
_0805133A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08051340: .4byte gSubSpriteData1
_08051344: .4byte 0x08388F54
_08051348: .4byte gCurrentSprite

	thumb_func_start SA_XMonsterDying
SA_XMonsterDying: @ 0x0805134C
	push {lr}
	ldr r3, _08051388 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r1, #8
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08051382
	subs r1, #0xa
	movs r0, #0x40
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r2, _0805138C @ =0x00008020
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r3, #6]
_08051382:
	pop {r0}
	bx r0
	.align 2, 0
_08051388: .4byte gCurrentSprite
_0805138C: .4byte 0x00008020

	thumb_func_start SA_XMonsterTurningIntoCoreX
SA_XMonsterTurningIntoCoreX: @ 0x08051390
	push {r4, lr}
	ldr r4, _080513F0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r2, _080513F4 @ =gWrittenToMosaic_H
	ldr r1, _080513F8 @ =0x083BDED6
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x13
	bhi _08051410
	ldrh r2, [r4, #6]
	movs r0, #0xc2
	movs r1, #0
	bl SpriteLoadGfx
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0805141E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	movs r0, #0xc2
	strb r0, [r4, #0x1d]
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	movs r1, #0
	orrs r0, r1
	strh r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080513FC
	ldrh r0, [r4, #4]
	adds r0, #0x50
	b _08051400
	.align 2, 0
_080513F0: .4byte gCurrentSprite
_080513F4: .4byte gWrittenToMosaic_H
_080513F8: .4byte 0x083BDED6
_080513FC:
	ldrh r0, [r4, #4]
	subs r0, #0x50
_08051400:
	strh r0, [r4, #4]
	ldr r1, _0805140C @ =gCurrentSprite
	ldrh r0, [r1, #2]
	subs r0, #0x50
	strh r0, [r1, #2]
	b _0805141E
	.align 2, 0
_0805140C: .4byte gCurrentSprite
_08051410:
	cmp r0, #0x14
	bne _0805141E
	movs r0, #0xc2
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_0805141E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start SA_XMonsterPartInit
SA_XMonsterPartInit: @ 0x08051424
	push {lr}
	ldr r3, _08051470 @ =gCurrentSprite
	ldrh r1, [r3]
	ldr r0, _08051474 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x44
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x40
	strb r0, [r1]
	ldr r1, _08051478 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrb r0, [r3, #0x1e]
	adds r2, r3, #0
	cmp r0, #6
	bhi _0805147C
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #4
	b _08051482
	.align 2, 0
_08051470: .4byte gCurrentSprite
_08051474: .4byte 0x0000FFFB
_08051478: .4byte 0x0000FFFC
_0805147C:
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #5
_08051482:
	strb r0, [r1]
	adds r3, r2, #0
	ldr r0, _080514B4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	ldrb r0, [r3, #0x1e]
	cmp r0, #2
	beq _0805149E
	cmp r0, #0xa
	bne _080514AC
_0805149E:
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x30
	strb r0, [r1]
_080514AC:
	bl SA_XMonsterSyncSubSprites
	pop {r0}
	bx r0
	.align 2, 0
_080514B4: .4byte gIoRegisters

	thumb_func_start SA_XMonsterPartIdle
SA_XMonsterPartIdle: @ 0x080514B8
	push {lr}
	ldr r3, _080514E4 @ =gSpriteData
	ldr r2, _080514E8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r3
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _080514F4
	cmp r0, #0x3a
	bgt _080514EC
	cmp r0, #4
	beq _080514F4
	cmp r0, #0x38
	beq _080514F4
	b _08051504
	.align 2, 0
_080514E4: .4byte gSpriteData
_080514E8: .4byte gCurrentSprite
_080514EC:
	cmp r0, #0x3c
	beq _080514FE
	cmp r0, #0x5a
	bne _08051504
_080514F4:
	ldrh r1, [r2]
	movs r0, #4
	orrs r0, r1
	strh r0, [r2]
	b _080515A8
_080514FE:
	movs r0, #0
	strh r0, [r2]
	b _080515A8
_08051504:
	adds r1, r2, #0
	ldrh r0, [r1]
	ldr r3, _0805154C @ =0x0000FFFB
	ands r3, r0
	strh r3, [r1]
	ldrb r0, [r1, #0x1e]
	cmp r0, #4
	bne _080515A8
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _080515A8
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _080515A8
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r3
	cmp r0, #0
	beq _08051560
	ldr r1, [r1, #0x18]
	ldr r0, _08051550 @ =0x0838FE68
	cmp r1, r0
	beq _08051568
	ldr r0, _08051554 @ =0x0838FED0
	cmp r1, r0
	beq _0805157A
	ldr r0, _08051558 @ =0x0838FF98
	cmp r1, r0
	beq _0805158E
	ldr r0, _0805155C @ =0x083902B8
	cmp r1, r0
	bne _080515A8
	movs r0, #0xa5
	bl SoundPlay
	b _080515A8
	.align 2, 0
_0805154C: .4byte 0x0000FFFB
_08051550: .4byte 0x0838FE68
_08051554: .4byte 0x0838FED0
_08051558: .4byte 0x0838FF98
_0805155C: .4byte 0x083902B8
_08051560:
	ldr r1, [r2, #0x18]
	ldr r0, _08051570 @ =0x0838F9B0
	cmp r1, r0
	bne _08051574
_08051568:
	movs r0, #0xa2
	bl SoundPlay
	b _080515A8
	.align 2, 0
_08051570: .4byte 0x0838F9B0
_08051574:
	ldr r0, _08051584 @ =0x0838FA18
	cmp r1, r0
	bne _08051588
_0805157A:
	movs r0, #0xa3
	bl SoundPlay
	b _080515A8
	.align 2, 0
_08051584: .4byte 0x0838FA18
_08051588:
	ldr r0, _08051598 @ =0x0838FAE0
	cmp r1, r0
	bne _0805159C
_0805158E:
	movs r0, #0xa4
	bl SoundPlay
	b _080515A8
	.align 2, 0
_08051598: .4byte 0x0838FAE0
_0805159C:
	ldr r0, _080515AC @ =0x0838FB08
	cmp r1, r0
	bne _080515A8
	movs r0, #0xa5
	bl SoundPlay
_080515A8:
	pop {r0}
	bx r0
	.align 2, 0
_080515AC: .4byte 0x0838FB08

	thumb_func_start SA_XMonster
SA_XMonster: @ 0x080515B0
	push {lr}
	bl SA_XMonsterProjectilesCollision
	ldr r0, _080515CC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5a
	bls _080515C2
	b _080517B8
_080515C2:
	lsls r0, r0, #2
	ldr r1, _080515D0 @ =_080515D4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080515CC: .4byte gCurrentSprite
_080515D0: .4byte _080515D4
_080515D4: @ jump table
	.4byte _08051740 @ case 0
	.4byte _08051756 @ case 1
	.4byte _0805175A @ case 2
	.4byte _08051784 @ case 3
	.4byte _0805178A @ case 4
	.4byte _080517B8 @ case 5
	.4byte _080517B8 @ case 6
	.4byte _080517B8 @ case 7
	.4byte _080517B8 @ case 8
	.4byte _080517B8 @ case 9
	.4byte _080517B8 @ case 10
	.4byte _080517B8 @ case 11
	.4byte _080517B8 @ case 12
	.4byte _080517B8 @ case 13
	.4byte _080517B8 @ case 14
	.4byte _080517B8 @ case 15
	.4byte _080517B8 @ case 16
	.4byte _080517B8 @ case 17
	.4byte _080517B8 @ case 18
	.4byte _080517B8 @ case 19
	.4byte _080517B8 @ case 20
	.4byte _0805174C @ case 21
	.4byte _08051750 @ case 22
	.4byte _08051760 @ case 23
	.4byte _08051764 @ case 24
	.4byte _080517B8 @ case 25
	.4byte _0805176A @ case 26
	.4byte _08051770 @ case 27
	.4byte _08051774 @ case 28
	.4byte _0805177A @ case 29
	.4byte _0805177E @ case 30
	.4byte _080517B8 @ case 31
	.4byte _080517B8 @ case 32
	.4byte _080517B8 @ case 33
	.4byte _080517B8 @ case 34
	.4byte _080517B8 @ case 35
	.4byte _080517B8 @ case 36
	.4byte _080517B8 @ case 37
	.4byte _080517B8 @ case 38
	.4byte _080517B8 @ case 39
	.4byte _080517B8 @ case 40
	.4byte _080517B8 @ case 41
	.4byte _080517B8 @ case 42
	.4byte _080517B8 @ case 43
	.4byte _080517B8 @ case 44
	.4byte _080517B8 @ case 45
	.4byte _080517B8 @ case 46
	.4byte _080517B8 @ case 47
	.4byte _080517B8 @ case 48
	.4byte _080517B8 @ case 49
	.4byte _080517B8 @ case 50
	.4byte _080517B8 @ case 51
	.4byte _080517B8 @ case 52
	.4byte _080517B8 @ case 53
	.4byte _080517B8 @ case 54
	.4byte _08051790 @ case 55
	.4byte _08051796 @ case 56
	.4byte _0805179C @ case 57
	.4byte _080517A2 @ case 58
	.4byte _080517B8 @ case 59
	.4byte _080517A8 @ case 60
	.4byte _080517B8 @ case 61
	.4byte _080517AE @ case 62
	.4byte _080517B8 @ case 63
	.4byte _080517B4 @ case 64
	.4byte _080517B8 @ case 65
	.4byte _080517B8 @ case 66
	.4byte _080517B8 @ case 67
	.4byte _080517B8 @ case 68
	.4byte _080517B8 @ case 69
	.4byte _080517B8 @ case 70
	.4byte _080517B8 @ case 71
	.4byte _080517B8 @ case 72
	.4byte _080517B8 @ case 73
	.4byte _080517B8 @ case 74
	.4byte _080517B8 @ case 75
	.4byte _080517B8 @ case 76
	.4byte _080517B8 @ case 77
	.4byte _080517B8 @ case 78
	.4byte _080517B8 @ case 79
	.4byte _080517B8 @ case 80
	.4byte _080517B8 @ case 81
	.4byte _080517B8 @ case 82
	.4byte _080517B8 @ case 83
	.4byte _080517B8 @ case 84
	.4byte _080517B8 @ case 85
	.4byte _080517B8 @ case 86
	.4byte _080517B8 @ case 87
	.4byte _080517B8 @ case 88
	.4byte _080517B8 @ case 89
	.4byte _08051746 @ case 90
_08051740:
	bl SA_XMonsterInit
	b _080517B8
_08051746:
	bl SA_XMonsterSpawningFromX
	b _080517B8
_0805174C:
	bl SA_XMonsterDroppingInit
_08051750:
	bl SA_XMonsterDropping
	b _080517B8
_08051756:
	bl SA_XMonsterIdleInit
_0805175A:
	bl SA_XMonsterIdle
	b _080517B8
_08051760:
	bl SA_XMonsterJumpWarningInit
_08051764:
	bl SA_XMonsterJumpWarning
	b _080517B8
_0805176A:
	bl SA_XMonsterJumping
	b _080517B8
_08051770:
	bl SA_XMonsterFallingInit
_08051774:
	bl SA_XMonsterFalling
	b _080517B8
_0805177A:
	bl SA_XMonsterLandingInit
_0805177E:
	bl SA_XMonsterLanding
	b _080517B8
_08051784:
	bl SA_XMonsterTurningAroundInit
	b _080517B8
_0805178A:
	bl SA_XMonsterTurningAround
	b _080517B8
_08051790:
	bl SA_XMonsterScreamingGroundedInit
	b _080517B8
_08051796:
	bl SA_XMonsterScreamingGrounded
	b _080517B8
_0805179C:
	bl SA_XMonsterScreamingAirborneInit
	b _080517B8
_080517A2:
	bl SA_XMonsterScreamingAirborne
	b _080517B8
_080517A8:
	bl SA_XMonsterPanting
	b _080517B8
_080517AE:
	bl SA_XMonsterDying
	b _080517B8
_080517B4:
	bl SA_XMonsterTurningIntoCoreX
_080517B8:
	bl UpdateSubSpriteData1Animation
	bl SA_XMonsterSyncSubSprites
	pop {r0}
	bx r0

	thumb_func_start SA_XMonsterPart
SA_XMonsterPart: @ 0x080517C4
	push {lr}
	ldr r0, _080517D8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _080517DC
	bl SA_XMonsterPartInit
	b _080517E4
	.align 2, 0
_080517D8: .4byte gCurrentSprite
_080517DC:
	bl SA_XMonsterPartIdle
	bl SA_XMonsterSyncSubSprites
_080517E4:
	pop {r0}
	bx r0

	thumb_func_start ContinualXSpawnerIdle
ContinualXSpawnerIdle: @ 0x080517E8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	ldr r0, _08051804 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r5, #3
	ands r5, r0
	cmp r5, #0
	bne _0805180C
	movs r6, #1
	ldr r0, _08051808 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r4, r0, #3
	movs r7, #0
	b _08051846
	.align 2, 0
_08051804: .4byte gFrameCounter8Bit
_08051808: .4byte gSpriteRandomNumber
_0805180C:
	cmp r5, #1
	bne _08051820
	movs r6, #0xee
	ldr r0, _0805181C @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r4, r0, #3
	movs r7, #1
	b _08051846
	.align 2, 0
_0805181C: .4byte gSpriteRandomNumber
_08051820:
	cmp r5, #2
	bne _0805183C
	movs r4, #1
	ldr r0, _08051830 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r6, r0, #4
	movs r7, #2
	b _08051846
	.align 2, 0
_08051830: .4byte gSpriteRandomNumber
_08051834:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _080518A8
_0805183C:
	movs r4, #0x9e
	ldr r0, _080518C0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsls r6, r0, #4
	movs r7, #3
_08051846:
	lsls r0, r4, #0x12
	lsls r1, r6, #0x12
	ldr r2, _080518C4 @ =gCurrentSprite
	ldr r3, _080518C8 @ =gBg1YPosition
	lsrs r0, r0, #0x10
	ldrh r3, [r3]
	adds r0, r0, r3
	strh r0, [r2, #2]
	ldr r0, _080518CC @ =gBg1XPosition
	lsrs r1, r1, #0x10
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #4]
	ldrh r4, [r2, #2]
	ldrh r6, [r2, #4]
	movs r5, #0
	movs r3, #0
	ldr r0, _080518D0 @ =gSpriteData
	mov ip, r0
_0805186C:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	mov r1, ip
	adds r2, r0, r1
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0805189E
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805189E
	ldrh r0, [r2, #0x14]
	cmp r0, #0
	beq _0805189E
	adds r0, r2, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051834
_0805189E:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _0805186C
_080518A8:
	cmp r5, #0
	beq _08051914
	bl CountPrimarySpritesThatCantAbsorbX
	cmp r0, #3
	bgt _08051914
	cmp r7, #0
	bne _080518D4
	adds r0, r6, #0
	subs r0, #0x40
	b _080518DC
	.align 2, 0
_080518C0: .4byte gSpriteRandomNumber
_080518C4: .4byte gCurrentSprite
_080518C8: .4byte gBg1YPosition
_080518CC: .4byte gBg1XPosition
_080518D0: .4byte gSpriteData
_080518D4:
	cmp r7, #1
	bne _080518E2
	adds r0, r6, #0
	adds r0, #0x40
_080518DC:
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	b _080518F4
_080518E2:
	cmp r7, #2
	bne _080518EC
	adds r0, r4, #0
	subs r0, #0x40
	b _080518F0
_080518EC:
	adds r0, r4, #0
	adds r0, #0x40
_080518F0:
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
_080518F4:
	ldr r0, _0805191C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x23
	ldrb r3, [r1]
	adds r0, #0x2a
	ldrb r0, [r0]
	str r0, [sp]
	str r4, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x38
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
_08051914:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805191C: .4byte gCurrentSprite

	thumb_func_start ContinualXSpawner
ContinualXSpawner: @ 0x08051920
	push {r4, lr}
	ldr r2, _0805193C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x26
	movs r1, #1
	strb r1, [r0]
	adds r4, r2, #0
	adds r4, #0x24
	ldrb r3, [r4]
	cmp r3, #0
	beq _08051940
	cmp r3, #2
	beq _080519A0
	b _080519A4
	.align 2, 0
_0805193C: .4byte gCurrentSprite
_08051940:
	adds r0, r2, #0
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #2
	strb r0, [r4]
	adds r0, r2, #0
	adds r0, #0x27
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r4, #0
	ldr r1, _08051990 @ =0x0000FFFC
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08051994 @ =0x08337FA4
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldr r0, _08051998 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r0, _0805199C @ =gDebugFlag
	ldrb r0, [r0]
	cmp r0, #0
	bne _080519A4
	ldrh r0, [r2]
	movs r1, #4
	orrs r0, r1
	strh r0, [r2]
	b _080519A4
	.align 2, 0
_08051990: .4byte 0x0000FFFC
_08051994: .4byte 0x08337FA4
_08051998: .4byte gIoRegisters
_0805199C: .4byte gDebugFlag
_080519A0:
	bl ContinualXSpawnerIdle
_080519A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Box2SyncSubSprites
Box2SyncSubSprites: @ 0x080519AC
	push {r4, lr}
	ldr r4, _08051A08 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _08051A0C @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _08051A10 @ =0x0879B560
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _080519DE
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_080519DE:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08051A08: .4byte gSubSpriteData1
_08051A0C: .4byte gCurrentSprite
_08051A10: .4byte 0x0879B560

	thumb_func_start Box2XMovement
Box2XMovement: @ 0x08051A14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	mov sl, r7
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	mov sb, r5
	movs r0, #0
	mov r8, r0
	ldr r6, _08051A60 @ =gCurrentSprite
	ldrh r1, [r6]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051A72
	ldr r4, _08051A64 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	adds r1, #0x6e
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08051A68 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051A6C
	adds r0, r6, #0
	adds r0, #0x24
	strb r5, [r0]
	movs r1, #1
	mov r8, r1
	b _08051AA8
	.align 2, 0
_08051A60: .4byte gCurrentSprite
_08051A64: .4byte gSubSpriteData1
_08051A68: .4byte gPreviousCollisionCheck
_08051A6C:
	ldrh r0, [r4, #0xa]
	adds r0, r7, r0
	b _08051AA6
_08051A72:
	ldr r4, _08051A98 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	subs r1, #0x6e
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08051A9C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051AA0
	adds r0, r6, #0
	adds r0, #0x24
	mov r1, sb
	strb r1, [r0]
	movs r0, #1
	mov r8, r0
	b _08051AA8
	.align 2, 0
_08051A98: .4byte gSubSpriteData1
_08051A9C: .4byte gPreviousCollisionCheck
_08051AA0:
	ldrh r0, [r4, #0xa]
	mov r1, sl
	subs r0, r0, r1
_08051AA6:
	strh r0, [r4, #0xa]
_08051AA8:
	mov r0, r8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start Box2Init
Box2Init: @ 0x08051AB8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _08051AD4 @ =gEquipment
	ldrb r1, [r0, #0xa]
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _08051ADC
	ldr r1, _08051AD8 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _08051C82
	.align 2, 0
_08051AD4: .4byte gEquipment
_08051AD8: .4byte gCurrentSprite
_08051ADC:
	ldr r6, _08051C8C @ =gCurrentSprite
	adds r0, r6, #0
	adds r0, #0x25
	strb r7, [r0]
	ldrh r0, [r6]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r3, r1, #0
	movs r5, #0
	orrs r3, r0
	strh r3, [r6]
	adds r0, r6, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _08051C90 @ =0x0000FFD8
	strh r0, [r6, #0xa]
	movs r0, #0x40
	strh r0, [r6, #0xc]
	ldr r0, _08051C94 @ =0x0000FFD0
	strh r0, [r6, #0xe]
	movs r0, #0x30
	strh r0, [r6, #0x10]
	adds r0, r6, #0
	adds r0, #0x2d
	movs r1, #7
	strb r1, [r0]
	adds r2, r6, #0
	adds r2, #0x22
	movs r0, #0xc
	strb r0, [r2]
	adds r2, #0x13
	movs r0, #2
	strb r0, [r2]
	strb r1, [r6, #0x1e]
	ldr r2, _08051C98 @ =sPrimarySpriteStats
	ldrb r1, [r6, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r6, #0x14]
	adds r2, r6, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _08051C9C @ =0x08395658
	str r0, [r6, #0x18]
	strb r5, [r6, #0x1c]
	strh r7, [r6, #0x16]
	ldr r4, _08051CA0 @ =gSubSpriteData1
	ldrh r0, [r6, #2]
	strh r0, [r4, #8]
	ldrh r0, [r6, #4]
	strh r0, [r4, #0xa]
	ldr r0, _08051CA4 @ =0x0839126C
	str r0, [r4]
	strb r5, [r4, #6]
	strh r7, [r4, #4]
	strb r5, [r4, #0xe]
	adds r0, r6, #0
	adds r0, #0x2f
	strb r5, [r0]
	ldr r0, _08051CA8 @ =0x0000FDFF
	ands r3, r0
	strh r3, [r6]
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	ldrb r2, [r6, #0x1f]
	adds r5, r6, #0
	adds r5, #0x23
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #3
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #8
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #9
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #0xa
	bl SpriteSpawnSecondary
	ldrb r2, [r6, #0x1f]
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x6c
	movs r1, #0xb
	bl SpriteSpawnSecondary
	ldrb r1, [r6, #0x1e]
	ldrh r0, [r6, #2]
	str r0, [sp]
	ldrh r0, [r6, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0xc5
	movs r2, #7
	movs r3, #0x10
	bl SpriteSpawnPrimary
_08051C82:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08051C8C: .4byte gCurrentSprite
_08051C90: .4byte 0x0000FFD8
_08051C94: .4byte 0x0000FFD0
_08051C98: .4byte sPrimarySpriteStats
_08051C9C: .4byte 0x08395658
_08051CA0: .4byte gSubSpriteData1
_08051CA4: .4byte 0x0839126C
_08051CA8: .4byte 0x0000FDFF

	thumb_func_start Box2WaitingToRunInit
Box2WaitingToRunInit: @ 0x08051CAC
	push {lr}
	ldr r1, _08051CD4 @ =gSubSpriteData1
	ldr r0, _08051CD8 @ =0x083913DC
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _08051CDC @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x18
	strb r1, [r2]
	adds r0, #0x2e
	strb r3, [r0]
	ldr r0, _08051CE0 @ =0x0000026A
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08051CD4: .4byte gSubSpriteData1
_08051CD8: .4byte 0x083913DC
_08051CDC: .4byte gCurrentSprite
_08051CE0: .4byte 0x0000026A

	thumb_func_start Box2WaitingToRun
Box2WaitingToRun: @ 0x08051CE4
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08051D08
	ldr r1, _08051D20 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08051D08
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
_08051D08:
	ldr r1, _08051D20 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051D1A
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
_08051D1A:
	pop {r0}
	bx r0
	.align 2, 0
_08051D20: .4byte gCurrentSprite

	thumb_func_start Box2SlowRunningInit
Box2SlowRunningInit: @ 0x08051D24
	push {lr}
	bl MakeSpriteFaceSamusDirection
	ldr r0, _08051D40 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051D4C
	ldr r1, _08051D44 @ =gSubSpriteData1
	ldr r0, _08051D48 @ =0x08391354
	b _08051D50
	.align 2, 0
_08051D40: .4byte gCurrentSprite
_08051D44: .4byte gSubSpriteData1
_08051D48: .4byte 0x08391354
_08051D4C:
	ldr r1, _08051D6C @ =gSubSpriteData1
	ldr r0, _08051D70 @ =0x083912C4
_08051D50:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _08051D74 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x1a
	strb r1, [r2]
	adds r0, #0x2e
	strb r3, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08051D6C: .4byte gSubSpriteData1
_08051D70: .4byte 0x083912C4
_08051D74: .4byte gCurrentSprite

	thumb_func_start Box2SlowRunning
Box2SlowRunning: @ 0x08051D78
	push {r4, r5, lr}
	ldr r4, _08051DAC @ =gSubSpriteData1
	ldr r0, [r4, #4]
	ldr r1, _08051DB0 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _08051DB4 @ =0x00010003
	cmp r0, r1
	bne _08051DCE
	ldr r0, _08051DB8 @ =0x00000279
	bl SoundPlay
	ldr r0, _08051DBC @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051DC0
	ldrh r0, [r4, #8]
	subs r0, #0x28
	ldrh r1, [r4, #0xa]
	adds r1, #0x78
	movs r2, #0x38
	bl ParticleSet
	b _08051DCE
	.align 2, 0
_08051DAC: .4byte gSubSpriteData1
_08051DB0: .4byte 0x00FFFFFF
_08051DB4: .4byte 0x00010003
_08051DB8: .4byte 0x00000279
_08051DBC: .4byte gCurrentSprite
_08051DC0:
	ldrh r0, [r4, #8]
	subs r0, #0x28
	ldrh r1, [r4, #0xa]
	subs r1, #0x78
	movs r2, #0x38
	bl ParticleSet
_08051DCE:
	ldr r5, _08051E18 @ =gCurrentSprite
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	movs r1, #0x37
	bl Box2XMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08051E12
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08051E00
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #7
	bne _08051E00
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
_08051E00:
	ldr r1, _08051E18 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051E12
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
_08051E12:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08051E18: .4byte gCurrentSprite

	thumb_func_start Box2FastRunningInit
Box2FastRunningInit: @ 0x08051E1C
	push {lr}
	ldr r2, _08051E34 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051E40
	ldr r1, _08051E38 @ =gSubSpriteData1
	ldr r0, _08051E3C @ =0x08391384
	b _08051E44
	.align 2, 0
_08051E34: .4byte gCurrentSprite
_08051E38: .4byte gSubSpriteData1
_08051E3C: .4byte 0x08391384
_08051E40:
	ldr r1, _08051E60 @ =gSubSpriteData1
	ldr r0, _08051E64 @ =0x083912F4
_08051E44:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0xa
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08051E60: .4byte gSubSpriteData1
_08051E64: .4byte 0x083912F4

	thumb_func_start Box2FastRunning
Box2FastRunning: @ 0x08051E68
	push {r4, lr}
	ldr r4, _08051E9C @ =gSubSpriteData1
	ldr r0, [r4, #4]
	ldr r1, _08051EA0 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _08051EA4 @ =0x00010003
	cmp r0, r1
	bne _08051EBE
	ldr r0, _08051EA8 @ =0x00000279
	bl SoundPlay
	ldr r0, _08051EAC @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051EB0
	ldrh r0, [r4, #8]
	subs r0, #0x3c
	ldrh r1, [r4, #0xa]
	adds r1, #0xa0
	movs r2, #0x38
	bl ParticleSet
	b _08051EBE
	.align 2, 0
_08051E9C: .4byte gSubSpriteData1
_08051EA0: .4byte 0x00FFFFFF
_08051EA4: .4byte 0x00010003
_08051EA8: .4byte 0x00000279
_08051EAC: .4byte gCurrentSprite
_08051EB0:
	ldrh r0, [r4, #8]
	subs r0, #0x3c
	ldrh r1, [r4, #0xa]
	subs r1, #0xa0
	movs r2, #0x38
	bl ParticleSet
_08051EBE:
	movs r0, #8
	movs r1, #0x37
	bl Box2XMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08051F1A
	ldr r2, _08051EDC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08051EE0
	subs r0, #1
	b _08051F2A
	.align 2, 0
_08051EDC: .4byte gCurrentSprite
_08051EE0:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051F04
	ldr r0, _08051EFC @ =gSubSpriteData1
	ldrh r0, [r0, #0xa]
	subs r0, #0xc8
	ldr r1, _08051F00 @ =gSamusData
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	ble _08051F1A
	b _08051F12
	.align 2, 0
_08051EFC: .4byte gSubSpriteData1
_08051F00: .4byte gSamusData
_08051F04:
	ldr r0, _08051F34 @ =gSubSpriteData1
	ldrh r0, [r0, #0xa]
	adds r0, #0xc8
	ldr r1, _08051F38 @ =gSamusData
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bge _08051F1A
_08051F12:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1d
	strb r0, [r1]
_08051F1A:
	ldr r1, _08051F3C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051F2C
	adds r1, #0x24
	movs r0, #0x3b
_08051F2A:
	strb r0, [r1]
_08051F2C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08051F34: .4byte gSubSpriteData1
_08051F38: .4byte gSamusData
_08051F3C: .4byte gCurrentSprite

	thumb_func_start Box2SkiddingInit
Box2SkiddingInit: @ 0x08051F40
	push {lr}
	ldr r2, _08051F58 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08051F64
	ldr r1, _08051F5C @ =gSubSpriteData1
	ldr r0, _08051F60 @ =0x08391444
	b _08051F68
	.align 2, 0
_08051F58: .4byte gCurrentSprite
_08051F5C: .4byte gSubSpriteData1
_08051F60: .4byte 0x08391444
_08051F64:
	ldr r1, _08051F88 @ =gSubSpriteData1
	ldr r0, _08051F8C @ =0x08391424
_08051F68:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _08051F90 @ =0x00000263
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08051F88: .4byte gSubSpriteData1
_08051F8C: .4byte 0x08391424
_08051F90: .4byte 0x00000263

	thumb_func_start Box2Skidding
Box2Skidding: @ 0x08051F94
	push {r4, r5, lr}
	ldr r4, _08051FE0 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	lsrs r0, r0, #2
	movs r1, #0x1f
	cmp r0, #5
	bls _08051FA8
	movs r1, #0x37
_08051FA8:
	bl Box2XMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08051FD8
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08051FC6
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
_08051FC6:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _08051FD8
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
_08051FD8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08051FE0: .4byte gCurrentSprite

	thumb_func_start Box2StopSkiddingInit
Box2StopSkiddingInit: @ 0x08051FE4
	push {lr}
	ldr r2, _08051FFC @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08052008
	ldr r1, _08052000 @ =gSubSpriteData1
	ldr r0, _08052004 @ =0x08391454
	b _0805200C
	.align 2, 0
_08051FFC: .4byte gCurrentSprite
_08052000: .4byte gSubSpriteData1
_08052004: .4byte 0x08391454
_08052008:
	ldr r1, _08052020 @ =gSubSpriteData1
	ldr r0, _08052024 @ =0x08391434
_0805200C:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08052020: .4byte gSubSpriteData1
_08052024: .4byte 0x08391434

	thumb_func_start Box2StopSkidding
Box2StopSkidding: @ 0x08052028
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08052048
	ldr r1, _08052044 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3b
	strb r0, [r2]
	adds r1, #0x2f
	movs r0, #3
	b _08052058
	.align 2, 0
_08052044: .4byte gCurrentSprite
_08052048:
	ldr r1, _08052060 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805205A
	adds r1, #0x24
	movs r0, #0x3b
_08052058:
	strb r0, [r1]
_0805205A:
	pop {r0}
	bx r0
	.align 2, 0
_08052060: .4byte gCurrentSprite

	thumb_func_start Box2BonkingInit
Box2BonkingInit: @ 0x08052064
	push {lr}
	ldr r1, _080520A8 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	subs r0, #0x10
	movs r3, #0
	movs r2, #0
	strh r0, [r1, #8]
	ldr r0, _080520AC @ =0x08391214
	str r0, [r1]
	strb r3, [r1, #6]
	strh r2, [r1, #4]
	ldr r2, _080520B0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r3, [r0]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	ldr r0, _080520B4 @ =0x00000267
	bl SoundPlay
	movs r0, #0x14
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	pop {r0}
	bx r0
	.align 2, 0
_080520A8: .4byte gSubSpriteData1
_080520AC: .4byte 0x08391214
_080520B0: .4byte gCurrentSprite
_080520B4: .4byte 0x00000267

	thumb_func_start Box2Bonking
Box2Bonking: @ 0x080520B8
	push {r4, r5, r6, r7, lr}
	ldr r4, _080520DC @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _080520E0 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080520E8
	strh r1, [r4, #8]
	ldr r0, _080520E4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x4b
	strb r1, [r0]
	b _080521A0
	.align 2, 0
_080520DC: .4byte gSubSpriteData1
_080520E0: .4byte gPreviousVerticalCollisionCheck
_080520E4: .4byte gCurrentSprite
_080520E8:
	ldr r6, _08052114 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r6
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _08052118 @ =0x08390550
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0805211C @ =0x00007FFF
	cmp r1, r0
	bne _08052120
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #8]
	ldrh r1, [r1]
	adds r0, r0, r1
	strh r0, [r4, #8]
	b _0805217A
	.align 2, 0
_08052114: .4byte gCurrentSprite
_08052118: .4byte 0x08390550
_0805211C: .4byte 0x00007FFF
_08052120:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	mov r0, ip
	strb r2, [r0]
	ldrh r0, [r4, #8]
	adds r0, r0, r3
	strh r0, [r4, #8]
	cmp r2, #0x10
	bne _0805217A
	ldrh r1, [r6]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805215E
	ldrh r0, [r4, #8]
	subs r0, #0x34
	ldrh r1, [r4, #0xa]
	subs r1, #0x40
	movs r2, #0x38
	bl ParticleSet
	ldrh r0, [r4, #8]
	subs r0, #0x34
	ldrh r1, [r4, #0xa]
	adds r1, #0x80
	movs r2, #0x38
	bl ParticleSet
	b _0805217A
_0805215E:
	ldrh r0, [r4, #8]
	subs r0, #0x34
	ldrh r1, [r4, #0xa]
	subs r1, #0x80
	movs r2, #0x38
	bl ParticleSet
	ldrh r0, [r4, #8]
	subs r0, #0x34
	ldrh r1, [r4, #0xa]
	adds r1, #0x40
	movs r2, #0x38
	bl ParticleSet
_0805217A:
	ldr r0, _08052190 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08052198
	ldr r1, _08052194 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	adds r0, #6
	b _0805219E
	.align 2, 0
_08052190: .4byte gCurrentSprite
_08052194: .4byte gSubSpriteData1
_08052198:
	ldr r1, _080521A8 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	subs r0, #6
_0805219E:
	strh r0, [r1, #0xa]
_080521A0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080521A8: .4byte gSubSpriteData1

	thumb_func_start Box2LandingFromBonkInit
Box2LandingFromBonkInit: @ 0x080521AC
	push {lr}
	ldr r1, _080521DC @ =gSubSpriteData1
	ldr r0, _080521E0 @ =0x08391224
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _080521E4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x4c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	ldr r0, _080521E8 @ =0x0000027A
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_080521DC: .4byte gSubSpriteData1
_080521E0: .4byte 0x08391224
_080521E4: .4byte gCurrentSprite
_080521E8: .4byte 0x0000027A

	thumb_func_start Box2LandingFromBonk
Box2LandingFromBonk: @ 0x080521EC
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08052240
	ldr r2, _08052218 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08052220
	ldr r1, _0805221C @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08052238
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3b
	b _0805223E
	.align 2, 0
_08052218: .4byte gCurrentSprite
_0805221C: .4byte gSamusData
_08052220:
	ldr r1, _08052234 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _08052238
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3b
	b _0805223E
	.align 2, 0
_08052234: .4byte gSamusData
_08052238:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x17
_0805223E:
	strb r0, [r1]
_08052240:
	pop {r0}
	bx r0

	thumb_func_start Box2LandingInit
Box2LandingInit: @ 0x08052244
	push {lr}
	ldr r1, _0805226C @ =gSubSpriteData1
	ldr r0, _08052270 @ =0x08391224
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r0, _08052274 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r1, #0x3a
	strb r1, [r2]
	adds r0, #0x31
	strb r3, [r0]
	ldr r0, _08052278 @ =0x0000027A
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_0805226C: .4byte gSubSpriteData1
_08052270: .4byte 0x08391224
_08052274: .4byte gCurrentSprite
_08052278: .4byte 0x0000027A

	thumb_func_start Box2Landing
Box2Landing: @ 0x0805227C
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080522B0
	ldr r1, _08052298 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	cmp r0, #0
	bne _0805229C
	adds r1, #0x24
	movs r0, #0x27
	b _080522AE
	.align 2, 0
_08052298: .4byte gCurrentSprite
_0805229C:
	subs r0, #1
	strb r0, [r3]
	movs r2, #0x7f
	ands r2, r0
	cmp r2, #0
	bne _080522AA
	strb r2, [r3]
_080522AA:
	adds r1, #0x24
	movs r0, #0x3b
_080522AE:
	strb r0, [r1]
_080522B0:
	pop {r0}
	bx r0

	thumb_func_start Box2FinishedCrawlingInit
Box2FinishedCrawlingInit: @ 0x080522B4
	push {r4, lr}
	ldr r2, _080522E4 @ =gSubSpriteData1
	ldr r0, _080522E8 @ =0x083913B4
	str r0, [r2]
	ldr r1, _080522EC @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r1
	mov ip, r0
	movs r3, #0
	movs r0, #2
	mov r4, ip
	strb r0, [r4]
	strb r3, [r2, #6]
	strh r3, [r2, #4]
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	movs r0, #0x99
	lsls r0, r0, #2
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080522E4: .4byte gSubSpriteData1
_080522E8: .4byte 0x083913B4
_080522EC: .4byte gCurrentSprite

	thumb_func_start Box2FinishCrawling
Box2FinishCrawling: @ 0x080522F0
	push {r4, r5, lr}
	ldr r4, _08052310 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #1
	bls _08052314
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08052346
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	b _08052346
	.align 2, 0
_08052310: .4byte gCurrentSprite
_08052314:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08052346
	bl SamusCheckOnCeilingLadder
	cmp r0, #0
	beq _0805232C
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3b
	b _08052344
_0805232C:
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805233E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x3b
	b _08052344
_0805233E:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x19
_08052344:
	strb r0, [r1]
_08052346:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start Box2JumpWarningInit
Box2JumpWarningInit: @ 0x0805234C
	push {r4, lr}
	ldr r0, _08052370 @ =gSamusData
	ldrh r4, [r0, #0x16]
	ldr r0, _08052374 @ =gSubSpriteData1
	ldrh r2, [r0, #0xa]
	adds r1, r2, #0
	subs r1, #0x78
	adds r3, r0, #0
	cmp r1, r4
	bge _08052378
	adds r0, r2, #0
	adds r0, #0x78
	cmp r0, r4
	ble _08052378
	bl Box2StoppingToFireMissilesInit
	b _0805238A
	.align 2, 0
_08052370: .4byte gSamusData
_08052374: .4byte gSubSpriteData1
_08052378:
	ldr r0, _08052390 @ =0x08391244
	str r0, [r3]
	movs r0, #0
	strb r0, [r3, #6]
	strh r0, [r3, #4]
	ldr r0, _08052394 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3c
	strb r1, [r0]
_0805238A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052390: .4byte 0x08391244
_08052394: .4byte gCurrentSprite

	thumb_func_start Box2JumpWarning
Box2JumpWarning: @ 0x08052398
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080523AA
	ldr r0, _080523B0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3d
	strb r1, [r0]
_080523AA:
	pop {r0}
	bx r0
	.align 2, 0
_080523B0: .4byte gCurrentSprite

	thumb_func_start Box2JumpingInit
Box2JumpingInit: @ 0x080523B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r5, #0
	ldr r1, _080523F4 @ =gSubSpriteData1
	ldr r0, _080523F8 @ =0x08391214
	str r0, [r1]
	strb r5, [r1, #6]
	movs r2, #0
	strh r5, [r1, #4]
	ldr r3, _080523FC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x3e
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #2
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _080524B2
	bl SamusCheckOnCeilingLadder
	cmp r0, #0
	beq _08052400
	bl MakeSpriteFaceSamusDirection
	b _08052404
	.align 2, 0
_080523F4: .4byte gSubSpriteData1
_080523F8: .4byte 0x08391214
_080523FC: .4byte gCurrentSprite
_08052400:
	bl MakeSpriteFaceAwayFromSamusDirection
_08052404:
	ldr r6, _08052458 @ =gCurrentSprite
	ldrh r1, [r6]
	movs r0, #0x80
	lsls r0, r0, #2
	mov r8, r0
	ands r0, r1
	cmp r0, #0
	beq _08052468
	ldr r4, _0805245C @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	subs r0, #0x20
	ldrh r1, [r4, #0xa]
	movs r2, #0xaf
	lsls r2, r2, #1
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _08052460 @ =gPreviousCollisionCheck
	ldrb r0, [r7]
	cmp r0, #0
	beq _08052434
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08052434:
	ldrh r0, [r4, #8]
	subs r0, #0x20
	ldrh r1, [r4, #0xa]
	adds r1, #0x78
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0
	beq _0805244C
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0805244C:
	cmp r5, #0
	beq _080524B2
	ldrh r1, [r6]
	ldr r0, _08052464 @ =0x0000FDFF
	ands r0, r1
	b _080524A8
	.align 2, 0
_08052458: .4byte gCurrentSprite
_0805245C: .4byte gSubSpriteData1
_08052460: .4byte gPreviousCollisionCheck
_08052464: .4byte 0x0000FDFF
_08052468:
	ldr r4, _080524C4 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	subs r0, #0x20
	ldrh r1, [r4, #0xa]
	ldr r2, _080524C8 @ =0xFFFFFEA2
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r7, _080524CC @ =gPreviousCollisionCheck
	ldrb r0, [r7]
	cmp r0, #0
	beq _08052486
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08052486:
	ldrh r0, [r4, #8]
	subs r0, #0x20
	ldrh r1, [r4, #0xa]
	subs r1, #0x78
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r7]
	cmp r0, #0
	beq _0805249E
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0805249E:
	cmp r5, #0
	beq _080524B2
	ldrh r1, [r6]
	mov r0, r8
	orrs r0, r1
_080524A8:
	strh r0, [r6]
	adds r1, r6, #0
	adds r1, #0x2f
	movs r0, #0x82
	strb r0, [r1]
_080524B2:
	ldr r0, _080524D0 @ =0x00000265
	bl SoundPlay
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080524C4: .4byte gSubSpriteData1
_080524C8: .4byte 0xFFFFFEA2
_080524CC: .4byte gPreviousCollisionCheck
_080524D0: .4byte 0x00000265

	thumb_func_start Box2Jumping
Box2Jumping: @ 0x080524D4
	push {r4, r5, r6, lr}
	ldr r3, _080524FC @ =gCurrentSprite
	adds r4, r3, #0
	adds r4, #0x31
	ldrb r2, [r4]
	ldr r1, _08052500 @ =0x08390518
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r5, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08052504 @ =0x00007FFF
	cmp r1, r0
	bne _08052508
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x39
	strb r0, [r1]
	b _08052570
	.align 2, 0
_080524FC: .4byte gCurrentSprite
_08052500: .4byte 0x08390518
_08052504: .4byte 0x00007FFF
_08052508:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	strb r2, [r4]
	ldr r4, _08052548 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, r0, r5
	strh r0, [r4, #8]
	cmp r2, #0x17
	bne _08052568
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805254C
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	subs r1, #0x40
	movs r2, #0x38
	bl ParticleSet
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	adds r1, #0x80
	movs r2, #0x38
	bl ParticleSet
	b _08052568
	.align 2, 0
_08052548: .4byte gSubSpriteData1
_0805254C:
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	subs r1, #0x80
	movs r2, #0x38
	bl ParticleSet
	ldrh r0, [r4, #8]
	subs r0, #0x10
	ldrh r1, [r4, #0xa]
	adds r1, #0x40
	movs r2, #0x38
	bl ParticleSet
_08052568:
	movs r0, #0xc
	movs r1, #0x37
	bl Box2XMovement
_08052570:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Box2StoppingToFireMissilesInit
Box2StoppingToFireMissilesInit: @ 0x08052578
	push {r4, lr}
	ldr r2, _080525A8 @ =gSubSpriteData1
	ldr r0, _080525AC @ =0x083913B4
	str r0, [r2]
	ldr r1, _080525B0 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r1
	mov ip, r0
	movs r3, #0
	movs r0, #3
	mov r4, ip
	strb r0, [r4]
	strb r3, [r2, #6]
	strh r3, [r2, #4]
	adds r1, #0x24
	movs r0, #0x28
	strb r0, [r1]
	movs r0, #0x99
	lsls r0, r0, #2
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080525A8: .4byte gSubSpriteData1
_080525AC: .4byte 0x083913B4
_080525B0: .4byte gCurrentSprite

	thumb_func_start Box2StoppingToFireMissiles
Box2StoppingToFireMissiles: @ 0x080525B4
	push {r4, r5, lr}
	ldr r5, _080525D4 @ =gCurrentSprite
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #1
	bls _080525D8
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080525E8
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	b _080525E8
	.align 2, 0
_080525D4: .4byte gCurrentSprite
_080525D8:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080525E8
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
_080525E8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Box2LoweringToFireMissilesInit
Box2LoweringToFireMissilesInit: @ 0x080525F0
	push {lr}
	ldr r1, _08052614 @ =gSubSpriteData1
	ldr r0, _08052618 @ =0x08391464
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805261C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2a
	strb r1, [r0]
	movs r0, #0x9a
	lsls r0, r0, #2
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08052614: .4byte gSubSpriteData1
_08052618: .4byte 0x08391464
_0805261C: .4byte gCurrentSprite

	thumb_func_start Box2LoweringToFireMissiles
Box2LoweringToFireMissiles: @ 0x08052620
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805263E
	ldr r0, _08052644 @ =gCurrentSprite
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x2c
	strb r1, [r0]
	ldr r0, _08052648 @ =gSubSpriteData1
	ldr r1, _0805264C @ =0x083914A4
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
_0805263E:
	pop {r0}
	bx r0
	.align 2, 0
_08052644: .4byte gCurrentSprite
_08052648: .4byte gSubSpriteData1
_0805264C: .4byte 0x083914A4

	thumb_func_start Box2FiringMissiles
Box2FiringMissiles: @ 0x08052650
	push {r4, r5, r6, lr}
	sub sp, #0xc
	bl CheckEndOfSubSpriteData1Animation
	adds r6, r0, #0
	cmp r6, #0
	beq _0805268C
	ldr r0, _0805267C @ =gCurrentSprite
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x2e
	strb r1, [r0]
	ldr r0, _08052680 @ =gSubSpriteData1
	ldr r1, _08052684 @ =0x0839150C
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	ldr r0, _08052688 @ =0x00000269
	bl SoundPlay
	b _0805274C
	.align 2, 0
_0805267C: .4byte gCurrentSprite
_08052680: .4byte gSubSpriteData1
_08052684: .4byte 0x0839150C
_08052688: .4byte 0x00000269
_0805268C:
	ldr r3, _080526C4 @ =gCurrentSprite
	ldrh r4, [r3, #2]
	ldrh r5, [r3, #4]
	ldr r0, _080526C8 @ =gSubSpriteData1
	ldr r1, [r0, #4]
	ldr r0, _080526CC @ =0x00FFFFFF
	ands r1, r0
	movs r0, #0x80
	lsls r0, r0, #0xc
	cmp r1, r0
	bne _080526D0
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x8c
	str r0, [sp]
	adds r0, r5, #0
	subs r0, #0x30
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x6d
	movs r1, #0
	bl SpriteSpawnSecondary
	b _0805274C
	.align 2, 0
_080526C4: .4byte gCurrentSprite
_080526C8: .4byte gSubSpriteData1
_080526CC: .4byte 0x00FFFFFF
_080526D0:
	ldr r0, _080526F8 @ =0x00080003
	cmp r1, r0
	bne _080526FC
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x90
	str r0, [sp]
	adds r0, r5, #0
	subs r0, #0x18
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x6d
	movs r1, #1
	bl SpriteSpawnSecondary
	b _0805274C
	.align 2, 0
_080526F8: .4byte 0x00080003
_080526FC:
	ldr r0, _08052724 @ =0x00080006
	cmp r1, r0
	bne _08052728
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x90
	str r0, [sp]
	adds r0, r5, #0
	adds r0, #0x18
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x6d
	movs r1, #2
	bl SpriteSpawnSecondary
	b _0805274C
	.align 2, 0
_08052724: .4byte 0x00080006
_08052728:
	ldr r0, _08052754 @ =0x00080009
	cmp r1, r0
	bne _0805274C
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x8c
	str r0, [sp]
	adds r0, r5, #0
	adds r0, #0x30
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x6d
	movs r1, #3
	bl SpriteSpawnSecondary
_0805274C:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08052754: .4byte 0x00080009

	thumb_func_start Box2DoneFiringMissiles
Box2DoneFiringMissiles: @ 0x08052758
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805276A
	ldr r0, _08052770 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x17
	strb r1, [r0]
_0805276A:
	pop {r0}
	bx r0
	.align 2, 0
_08052770: .4byte gCurrentSprite

	thumb_func_start Box2DyingInit
Box2DyingInit: @ 0x08052774
	ldr r0, _0805279C @ =gCurrentSprite
	ldr r1, _080527A0 @ =0x08395658
	str r1, [r0, #0x18]
	movs r2, #0
	strb r2, [r0, #0x1c]
	movs r3, #0
	strh r2, [r0, #0x16]
	adds r1, r0, #0
	adds r1, #0x31
	strb r3, [r1]
	adds r0, #0x24
	movs r1, #0x44
	strb r1, [r0]
	ldr r0, _080527A4 @ =gSubSpriteData1
	ldr r1, _080527A8 @ =0x0839126C
	str r1, [r0]
	strb r3, [r0, #6]
	strh r2, [r0, #4]
	bx lr
	.align 2, 0
_0805279C: .4byte gCurrentSprite
_080527A0: .4byte 0x08395658
_080527A4: .4byte gSubSpriteData1
_080527A8: .4byte 0x0839126C

	thumb_func_start Box2Dying
Box2Dying: @ 0x080527AC
	push {r4, lr}
	ldr r4, _080527D0 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _080527D4 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080527DC
	strh r1, [r4, #8]
	ldr r0, _080527D8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x45
	strb r1, [r0]
	b _080527E2
	.align 2, 0
_080527D0: .4byte gSubSpriteData1
_080527D4: .4byte gPreviousVerticalCollisionCheck
_080527D8: .4byte gCurrentSprite
_080527DC:
	ldrh r0, [r4, #8]
	adds r0, #0x10
	strh r0, [r4, #8]
_080527E2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start Box2ExplodingInit
Box2ExplodingInit: @ 0x080527E8
	ldr r1, _08052808 @ =gCurrentSprite
	ldr r0, _0805280C @ =0x083956B8
	str r0, [r1, #0x18]
	movs r2, #0
	strb r2, [r1, #0x1c]
	movs r3, #0
	strh r2, [r1, #0x16]
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	ldr r0, _08052810 @ =gSubSpriteData1
	ldr r1, _08052814 @ =0x0839126C
	str r1, [r0]
	strb r3, [r0, #6]
	strh r2, [r0, #4]
	bx lr
	.align 2, 0
_08052808: .4byte gCurrentSprite
_0805280C: .4byte 0x083956B8
_08052810: .4byte gSubSpriteData1
_08052814: .4byte 0x0839126C

	thumb_func_start Box2Exploding
Box2Exploding: @ 0x08052818
	push {r4, lr}
	ldr r0, _08052838 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r2, #7
	ands r2, r0
	ldr r4, _0805283C @ =gCurrentSprite
	cmp r2, #0
	bne _08052842
	adds r1, r4, #0
	adds r1, #0x20
	ldrb r0, [r1]
	cmp r0, #0
	bne _08052840
	movs r0, #0xb
	strb r0, [r1]
	b _08052842
	.align 2, 0
_08052838: .4byte gFrameCounter8Bit
_0805283C: .4byte gCurrentSprite
_08052840:
	strb r2, [r1]
_08052842:
	ldrh r0, [r4, #4]
	lsrs r0, r0, #2
	ldr r1, _08052870 @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _08052874 @ =0xFFE70000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xbe
	bhi _0805286A
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805286A
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x47
	strb r0, [r1]
_0805286A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052870: .4byte gBg1XPosition
_08052874: .4byte 0xFFE70000

	thumb_func_start Box2BrainRisingInit
Box2BrainRisingInit: @ 0x08052878
	push {lr}
	ldr r3, _080528A4 @ =gCurrentSprite
	ldr r0, _080528A8 @ =0x083958C8
	str r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	movs r2, #0
	strh r0, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x48
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
	adds r0, #0xe
	strb r2, [r0]
	movs r0, #3
	bl StartStopEventBasedEffect
	pop {r0}
	bx r0
	.align 2, 0
_080528A4: .4byte gCurrentSprite
_080528A8: .4byte 0x083958C8

	thumb_func_start Box2BrainRising
Box2BrainRising: @ 0x080528AC
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r0, _080528E0 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	ldr r2, _080528E4 @ =gCurrentSprite
	cmp r0, #0
	bne _080528C6
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_080528C6:
	ldrh r4, [r2, #2]
	ldrh r5, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x42
	bls _080528D6
	b _08052AAC
_080528D6:
	lsls r0, r0, #2
	ldr r1, _080528E8 @ =_080528EC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080528E0: .4byte gFrameCounter8Bit
_080528E4: .4byte gCurrentSprite
_080528E8: .4byte _080528EC
_080528EC: @ jump table
	.4byte _080529F8 @ case 0
	.4byte _08052A44 @ case 1
	.4byte _08052AAC @ case 2
	.4byte _08052AAC @ case 3
	.4byte _08052AAC @ case 4
	.4byte _08052AAC @ case 5
	.4byte _08052AAC @ case 6
	.4byte _08052AAC @ case 7
	.4byte _08052A4C @ case 8
	.4byte _08052AAC @ case 9
	.4byte _08052AAC @ case 10
	.4byte _08052AAC @ case 11
	.4byte _08052AAC @ case 12
	.4byte _08052AAC @ case 13
	.4byte _08052AAC @ case 14
	.4byte _08052AAC @ case 15
	.4byte _08052A56 @ case 16
	.4byte _08052AAC @ case 17
	.4byte _08052AAC @ case 18
	.4byte _08052AAC @ case 19
	.4byte _08052AAC @ case 20
	.4byte _08052AAC @ case 21
	.4byte _08052AAC @ case 22
	.4byte _08052AAC @ case 23
	.4byte _08052AAC @ case 24
	.4byte _08052AAC @ case 25
	.4byte _08052AAC @ case 26
	.4byte _08052AAC @ case 27
	.4byte _08052AAC @ case 28
	.4byte _08052AAC @ case 29
	.4byte _08052A66 @ case 30
	.4byte _08052AAC @ case 31
	.4byte _08052AAC @ case 32
	.4byte _08052AAC @ case 33
	.4byte _08052AAC @ case 34
	.4byte _08052AAC @ case 35
	.4byte _08052AAC @ case 36
	.4byte _08052AAC @ case 37
	.4byte _08052A76 @ case 38
	.4byte _08052AAC @ case 39
	.4byte _08052AAC @ case 40
	.4byte _08052AAC @ case 41
	.4byte _08052AAC @ case 42
	.4byte _08052AAC @ case 43
	.4byte _08052AAC @ case 44
	.4byte _08052AAC @ case 45
	.4byte _08052A80 @ case 46
	.4byte _08052AAC @ case 47
	.4byte _08052AAC @ case 48
	.4byte _08052AAC @ case 49
	.4byte _08052AAC @ case 50
	.4byte _08052AAC @ case 51
	.4byte _08052AAC @ case 52
	.4byte _08052AAC @ case 53
	.4byte _08052AAC @ case 54
	.4byte _08052AAC @ case 55
	.4byte _08052AAC @ case 56
	.4byte _08052AAC @ case 57
	.4byte _08052AAC @ case 58
	.4byte _08052AAC @ case 59
	.4byte _08052AAC @ case 60
	.4byte _08052AAC @ case 61
	.4byte _08052AAC @ case 62
	.4byte _08052AAC @ case 63
	.4byte _08052AAC @ case 64
	.4byte _08052AAC @ case 65
	.4byte _08052A90 @ case 66
_080529F8:
	ldr r0, _08052A38 @ =gCurrentSprite
	ldrb r2, [r0, #0x1f]
	adds r0, #0x23
	ldrb r3, [r0]
	str r4, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x6e
	movs r1, #0
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _08052A3C @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x23
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x48
	adds r1, r5, #0
	movs r2, #0x30
	bl ParticleSet
	ldr r0, _08052A40 @ =0x0000026E
	bl unk_3b1c
	b _08052AAC
	.align 2, 0
_08052A38: .4byte gCurrentSprite
_08052A3C: .4byte gSpriteData
_08052A40: .4byte 0x0000026E
_08052A44:
	adds r1, r5, #0
	adds r1, #0x50
	adds r0, r4, #0
	b _08052A6E
_08052A4C:
	adds r0, r4, #0
	adds r0, #0x86
	adds r1, r5, #0
	adds r1, #0x70
	b _08052A5E
_08052A56:
	adds r0, r4, #0
	adds r0, #0x86
	adds r1, r5, #0
	subs r1, #0x70
_08052A5E:
	movs r2, #0x30
	bl ParticleSet
	b _08052AAC
_08052A66:
	adds r0, r4, #0
	adds r0, #0x14
	adds r1, r5, #0
	subs r1, #0xa
_08052A6E:
	movs r2, #0x35
	bl ParticleSet
	b _08052AAC
_08052A76:
	adds r0, r4, #0
	adds r0, #0x5c
	adds r1, r5, #0
	adds r1, #0x90
	b _08052A88
_08052A80:
	adds r0, r4, #0
	adds r0, #0x5c
	adds r1, r5, #0
	subs r1, #0x90
_08052A88:
	movs r2, #0x2f
	bl ParticleSet
	b _08052AAC
_08052A90:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x49
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
	b _08052AB6
_08052AAC:
	ldr r1, _08052AC0 @ =gCurrentSprite
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08052AB6:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052AC0: .4byte gCurrentSprite

	thumb_func_start Box2BrainFloating
Box2BrainFloating: @ 0x08052AC4
	push {lr}
	ldr r2, _08052AE0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08052ADC
	strh r0, [r2]
_08052ADC:
	pop {r0}
	bx r0
	.align 2, 0
_08052AE0: .4byte gCurrentSprite

	thumb_func_start Box2IdleInit
Box2IdleInit: @ 0x08052AE4
	push {lr}
	ldr r2, _08052AFC @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08052B08
	ldr r1, _08052B00 @ =gSubSpriteData1
	ldr r0, _08052B04 @ =0x08391324
	b _08052B0C
	.align 2, 0
_08052AFC: .4byte gCurrentSprite
_08052B00: .4byte gSubSpriteData1
_08052B04: .4byte 0x08391324
_08052B08:
	ldr r1, _08052B20 @ =gSubSpriteData1
	ldr r0, _08052B24 @ =0x08391294
_08052B0C:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08052B20: .4byte gSubSpriteData1
_08052B24: .4byte 0x08391294

	thumb_func_start Box2Crawling
Box2Crawling: @ 0x08052B28
	push {lr}
	movs r0, #1
	movs r1, #7
	bl Box2XMovement
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Box2PartSetBoxWorkVar2
Box2PartSetBoxWorkVar2: @ 0x08052B38
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	ldr r2, _08052B5C @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, r3
	bhs _08052B56
	strb r3, [r1]
_08052B56:
	pop {r0}
	bx r0
	.align 2, 0
_08052B5C: .4byte gSpriteData

	thumb_func_start Box2PartCenterSetImmunity
Box2PartCenterSetImmunity: @ 0x08052B60
	push {lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldr r1, _08052B88 @ =gSpriteData
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x29
	adds r3, r1, #0
	cmp r0, #0x19
	bhi _08052C2C
	lsls r0, r0, #2
	ldr r1, _08052B8C @ =_08052B90
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08052B88: .4byte gSpriteData
_08052B8C: .4byte _08052B90
_08052B90: @ jump table
	.4byte _08052BF8 @ case 0
	.4byte _08052BF8 @ case 1
	.4byte _08052C2C @ case 2
	.4byte _08052BF8 @ case 3
	.4byte _08052C2C @ case 4
	.4byte _08052BF8 @ case 5
	.4byte _08052C2C @ case 6
	.4byte _08052C2C @ case 7
	.4byte _08052C2C @ case 8
	.4byte _08052C2C @ case 9
	.4byte _08052C2C @ case 10
	.4byte _08052C2C @ case 11
	.4byte _08052C2C @ case 12
	.4byte _08052C2C @ case 13
	.4byte _08052C2C @ case 14
	.4byte _08052C2C @ case 15
	.4byte _08052C2C @ case 16
	.4byte _08052C2C @ case 17
	.4byte _08052C2C @ case 18
	.4byte _08052C2C @ case 19
	.4byte _08052C2C @ case 20
	.4byte _08052C2C @ case 21
	.4byte _08052C1C @ case 22
	.4byte _08052C1C @ case 23
	.4byte _08052C1C @ case 24
	.4byte _08052C1C @ case 25
_08052BF8:
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r3
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08052C2C
	ldr r0, _08052C18 @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0x40
	orrs r1, r2
	b _08052C36
	.align 2, 0
_08052C18: .4byte gCurrentSprite
_08052C1C:
	ldr r0, _08052C28 @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0x40
	orrs r1, r2
	b _08052C36
	.align 2, 0
_08052C28: .4byte gCurrentSprite
_08052C2C:
	ldr r0, _08052C3C @ =gCurrentSprite
	adds r0, #0x34
	ldrb r2, [r0]
	movs r1, #0xbf
	ands r1, r2
_08052C36:
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08052C3C: .4byte gCurrentSprite

	thumb_func_start Box2PartRemoveIgnoreProjectiles
Box2PartRemoveIgnoreProjectiles: @ 0x08052C40
	ldr r2, _08052C4C @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08052C50 @ =0x00007FFF
	ands r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_08052C4C: .4byte gCurrentSprite
_08052C50: .4byte 0x00007FFF

	thumb_func_start Box2PartInit
Box2PartInit: @ 0x08052C54
	push {r4, lr}
	ldr r2, _08052C8C @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08052C90 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	subs r1, #5
	movs r0, #2
	strb r0, [r1]
	ldrb r0, [r2, #0x1e]
	adds r4, r2, #0
	cmp r0, #6
	bhi _08052C94
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xb
	b _08052C9A
	.align 2, 0
_08052C8C: .4byte gCurrentSprite
_08052C90: .4byte 0x0000FFFB
_08052C94:
	adds r1, r4, #0
	adds r1, #0x22
	movs r0, #0xd
_08052C9A:
	strb r0, [r1]
	ldrb r0, [r4, #0x1e]
	cmp r0, #0xb
	bls _08052CA4
	b _08052E00
_08052CA4:
	lsls r0, r0, #2
	ldr r1, _08052CB0 @ =_08052CB4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08052CB0: .4byte _08052CB4
_08052CB4: @ jump table
	.4byte _08052CE4 @ case 0
	.4byte _08052DC4 @ case 1
	.4byte _08052CE4 @ case 2
	.4byte _08052DC4 @ case 3
	.4byte _08052DC4 @ case 4
	.4byte _08052DC4 @ case 5
	.4byte _08052D34 @ case 6
	.4byte _08052E00 @ case 7
	.4byte _08052DC4 @ case 8
	.4byte _08052D80 @ case 9
	.4byte _08052DC4 @ case 10
	.4byte _08052DC4 @ case 11
_08052CE4:
	ldr r0, _08052D28 @ =0x0000FFB8
	strh r0, [r4, #0xa]
	movs r0, #0x48
	strh r0, [r4, #0xc]
	ldr r0, _08052D2C @ =0x0000FFE0
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #2
	strb r0, [r1]
	subs r1, #0x10
	strb r0, [r1]
	ldr r1, _08052D30 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	bl Box2SyncSubSprites
	ldrb r0, [r4, #0x1e]
	cmp r0, #2
	bne _08052E04
	movs r0, #7
	strh r0, [r4, #0x16]
	b _08052E04
	.align 2, 0
_08052D28: .4byte 0x0000FFB8
_08052D2C: .4byte 0x0000FFE0
_08052D30: .4byte sSecondarySpriteStats
_08052D34:
	movs r2, #0
	movs r3, #0
	ldr r0, _08052D70 @ =0x0000FFD0
	strh r0, [r4, #0xa]
	movs r0, #0x40
	strh r0, [r4, #0xc]
	ldr r0, _08052D74 @ =0x0000FFE0
	strh r0, [r4, #0xe]
	movs r0, #0x20
	strh r0, [r4, #0x10]
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	subs r1, #0x10
	movs r0, #2
	strb r0, [r1]
	ldr r1, _08052D78 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	ldr r0, _08052D7C @ =0x08395868
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _08052E04
	.align 2, 0
_08052D70: .4byte 0x0000FFD0
_08052D74: .4byte 0x0000FFE0
_08052D78: .4byte sSecondarySpriteStats
_08052D7C: .4byte 0x08395868
_08052D80:
	ldr r0, _08052DB8 @ =0x0000FFE0
	strh r0, [r4, #0xa]
	movs r0, #0x20
	strh r0, [r4, #0xc]
	ldr r0, _08052DBC @ =0x0000FFC0
	strh r0, [r4, #0xe]
	movs r0, #0x40
	strh r0, [r4, #0x10]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #2
	strb r0, [r1]
	ldr r1, _08052DC0 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	bl Box2SyncSubSprites
	b _08052E04
	.align 2, 0
_08052DB8: .4byte 0x0000FFE0
_08052DBC: .4byte 0x0000FFC0
_08052DC0: .4byte sSecondarySpriteStats
_08052DC4:
	movs r2, #0
	ldr r1, _08052DF8 @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	ldr r1, _08052DFC @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	bl Box2SyncSubSprites
	b _08052E04
	.align 2, 0
_08052DF8: .4byte 0x0000FFFC
_08052DFC: .4byte sSecondarySpriteStats
_08052E00:
	movs r0, #0
	strh r0, [r4]
_08052E04:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Box2PartFrontLeftLeg
Box2PartFrontLeftLeg: @ 0x08052E0C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r4, _08052E40 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov sb, r0
	mov sl, sb
	ldr r0, _08052E44 @ =gSpriteData
	mov r2, sb
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	mov r8, r1
	ldrh r0, [r1]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08052E48
	strh r1, [r4]
	b _08052F96
	.align 2, 0
_08052E40: .4byte gCurrentSprite
_08052E44: .4byte gSpriteData
_08052E48:
	ldrh r2, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r2
	cmp r0, #0
	beq _08052E56
	b _08052F96
_08052E56:
	ldr r1, _08052E78 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r5, [r0]
	ldrh r6, [r4, #2]
	ldrh r7, [r4, #4]
	mov r0, r8
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bne _08052E7C
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r0, r2
	strh r0, [r4]
	b _08052ED2
	.align 2, 0
_08052E78: .4byte sSecondarySpriteStats
_08052E7C:
	mov r0, sb
	bl Box2PartRemoveIgnoreProjectiles
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x10
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08052EE0
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08052EE6
	mov r0, r8
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08052EC8
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	movs r0, #0x1f
	ands r1, r0
	cmp r1, #0
	bne _08052F96
	adds r0, r6, #0
	adds r0, #0x30
	adds r1, r7, #0
	movs r2, #0x2e
	bl ParticleSet
	b _08052F96
_08052EC8:
	ldrh r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	orrs r1, r0
	strh r1, [r4]
_08052ED2:
	adds r0, r6, #0
	adds r0, #0x32
	adds r1, r7, #0
	movs r2, #0x2f
	bl ParticleSet
	b _08052F96
_08052EE0:
	ldrh r1, [r4, #0x14]
	cmp r1, #0
	bne _08052F28
_08052EE6:
	ldr r1, _08052F20 @ =gSpriteData
	mov r2, sl
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	ldrb r2, [r0]
	movs r1, #0xfe
	ands r1, r2
	strb r1, [r0]
	ldr r1, _08052F24 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #4
	movs r3, #0
	orrs r0, r2
	strh r0, [r1]
	movs r0, #0xff
	strh r0, [r1, #0x14]
	adds r1, #0x2e
	strb r3, [r1]
	adds r0, r6, #0
	adds r0, #0x32
	adds r1, r7, #0
	movs r2, #0x2f
	bl ParticleSet
	mov r0, sl
	b _08052F5A
	.align 2, 0
_08052F20: .4byte gSpriteData
_08052F24: .4byte gCurrentSprite
_08052F28:
	lsrs r0, r5, #2
	cmp r1, r0
	bhs _08052F38
	ldr r0, [r4, #0x18]
	ldr r1, _08052F34 @ =0x08395420
	b _08052F42
	.align 2, 0
_08052F34: .4byte 0x08395420
_08052F38:
	lsrs r0, r5, #1
	cmp r1, r0
	bhs _08052F68
	ldr r0, [r4, #0x18]
	ldr r1, _08052F64 @ =0x08395410
_08052F42:
	cmp r0, r1
	beq _08052F96
	str r1, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r0, r6, #0
	adds r0, #0x24
	adds r1, r7, #0
	movs r2, #0x2d
	bl ParticleSet
	mov r0, sb
_08052F5A:
	movs r1, #1
	bl Box2PartSetBoxWorkVar2
	b _08052F96
	.align 2, 0
_08052F64: .4byte 0x08395410
_08052F68:
	ldrh r1, [r4, #0x14]
	lsls r0, r5, #1
	adds r0, r0, r5
	asrs r0, r0, #2
	cmp r1, r0
	bge _08052F96
	ldr r0, [r4, #0x18]
	ldr r1, _08052FA4 @ =0x08395400
	cmp r0, r1
	beq _08052F96
	str r1, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r0, r6, #0
	adds r0, #0x24
	adds r1, r7, #0
	movs r2, #0x2d
	bl ParticleSet
	mov r0, sl
	movs r1, #1
	bl Box2PartSetBoxWorkVar2
_08052F96:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08052FA4: .4byte 0x08395400

	thumb_func_start Box2PartFrontRightLeg
Box2PartFrontRightLeg: @ 0x08052FA8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r4, _08052FDC @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov sb, r0
	str r0, [sp]
	ldr r0, _08052FE0 @ =gSpriteData
	mov r2, sb
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	mov r8, r1
	ldrh r0, [r1]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08052FE4
	strh r1, [r4]
	b _08053132
	.align 2, 0
_08052FDC: .4byte gCurrentSprite
_08052FE0: .4byte gSpriteData
_08052FE4:
	ldrh r2, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	mov sl, r0
	ands r0, r2
	cmp r0, #0
	beq _08052FF4
	b _08053132
_08052FF4:
	ldr r1, _08053014 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r5, [r0]
	ldrh r6, [r4, #2]
	ldrh r7, [r4, #4]
	mov r0, r8
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bne _08053018
	mov r0, sl
	orrs r0, r2
	strh r0, [r4]
	b _0805306C
	.align 2, 0
_08053014: .4byte sSecondarySpriteStats
_08053018:
	mov r0, sb
	bl Box2PartRemoveIgnoreProjectiles
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x10
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _0805307A
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08053080
	mov r0, r8
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08053064
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	movs r0, #0x1f
	ands r1, r0
	cmp r1, #0
	bne _08053132
	adds r0, r6, #0
	adds r0, #0x30
	adds r1, r7, #0
	movs r2, #0x2e
	bl ParticleSet
	b _08053132
_08053064:
	ldrh r0, [r4]
	mov r1, sl
	orrs r1, r0
	strh r1, [r4]
_0805306C:
	adds r0, r6, #0
	adds r0, #0x32
	adds r1, r7, #0
	movs r2, #0x2f
	bl ParticleSet
	b _08053132
_0805307A:
	ldrh r1, [r4, #0x14]
	cmp r1, #0
	bne _080530C4
_08053080:
	ldr r1, _080530BC @ =gSpriteData
	ldr r2, [sp]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	ldrb r2, [r0]
	movs r1, #0xfd
	ands r1, r2
	strb r1, [r0]
	ldr r1, _080530C0 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r0, #4
	movs r3, #0
	orrs r0, r2
	strh r0, [r1]
	movs r0, #0xff
	strh r0, [r1, #0x14]
	adds r1, #0x2e
	strb r3, [r1]
	adds r0, r6, #0
	adds r0, #0x32
	adds r1, r7, #0
	movs r2, #0x2f
	bl ParticleSet
	ldr r0, [sp]
	b _080530F6
	.align 2, 0
_080530BC: .4byte gSpriteData
_080530C0: .4byte gCurrentSprite
_080530C4:
	lsrs r0, r5, #2
	cmp r1, r0
	bhs _080530D4
	ldr r0, [r4, #0x18]
	ldr r1, _080530D0 @ =0x08395588
	b _080530DE
	.align 2, 0
_080530D0: .4byte 0x08395588
_080530D4:
	lsrs r0, r5, #1
	cmp r1, r0
	bhs _08053104
	ldr r0, [r4, #0x18]
	ldr r1, _08053100 @ =0x08395578
_080530DE:
	cmp r0, r1
	beq _08053132
	str r1, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r0, r6, #0
	adds r0, #0x24
	adds r1, r7, #0
	movs r2, #0x2d
	bl ParticleSet
	mov r0, sb
_080530F6:
	movs r1, #1
	bl Box2PartSetBoxWorkVar2
	b _08053132
	.align 2, 0
_08053100: .4byte 0x08395578
_08053104:
	ldrh r1, [r4, #0x14]
	lsls r0, r5, #1
	adds r0, r0, r5
	asrs r0, r0, #2
	cmp r1, r0
	bge _08053132
	ldr r0, [r4, #0x18]
	ldr r1, _08053144 @ =0x08395568
	cmp r0, r1
	beq _08053132
	str r1, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r2, [r4, #0x16]
	adds r0, r6, #0
	adds r0, #0x24
	adds r1, r7, #0
	movs r2, #0x2d
	bl ParticleSet
	ldr r0, [sp]
	movs r1, #1
	bl Box2PartSetBoxWorkVar2
_08053132:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08053144: .4byte 0x08395568

	thumb_func_start Box2PartTopShell
Box2PartTopShell: @ 0x08053148
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r4, _08053178 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov sb, r0
	ldr r0, _0805317C @ =gSpriteData
	mov r2, sb
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #3
	adds r7, r1, r0
	ldrh r0, [r7]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _08053180
	strh r1, [r4]
	b _08053270
	.align 2, 0
_08053178: .4byte gCurrentSprite
_0805317C: .4byte gSpriteData
_08053180:
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	mov sl, r0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	bne _08053270
	ldr r1, _080531DC @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r6, [r0]
	ldrh r3, [r4, #2]
	ldrh r2, [r4, #4]
	mov r8, r2
	mov r0, sb
	str r3, [sp]
	bl Box2PartCenterSetImmunity
	ldrh r1, [r4, #0x14]
	ldr r3, [sp]
	cmp r1, #0
	bne _080531E0
	adds r2, r7, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	movs r0, #0xfb
	ands r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x32
	mov r1, r8
	movs r2, #0x2f
	bl ParticleSet
	ldrh r1, [r4]
	mov r0, sl
	orrs r0, r1
	strh r0, [r4]
	adds r1, r7, #0
	adds r1, #0x24
	movs r0, #0x43
	strb r0, [r1]
	b _08053252
	.align 2, 0
_080531DC: .4byte sSecondarySpriteStats
_080531E0:
	lsrs r0, r6, #2
	cmp r1, r0
	bhs _080531F0
	ldr r0, [r4, #0x18]
	ldr r1, _080531EC @ =0x08395648
	b _08053210
	.align 2, 0
_080531EC: .4byte 0x08395648
_080531F0:
	lsrs r0, r6, #1
	cmp r1, r0
	bhs _08053200
	ldr r0, [r4, #0x18]
	ldr r1, _080531FC @ =0x08395638
	b _08053210
	.align 2, 0
_080531FC: .4byte 0x08395638
_08053200:
	ldrh r1, [r4, #0x14]
	lsls r0, r6, #1
	adds r0, r0, r6
	asrs r0, r0, #2
	cmp r1, r0
	bge _0805322C
	ldr r0, [r4, #0x18]
	ldr r1, _08053228 @ =0x08395628
_08053210:
	cmp r0, r1
	beq _08053252
	str r1, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	adds r0, r3, #0
	adds r0, #0x24
	mov r1, r8
	movs r2, #0x30
	bl ParticleSet
	b _08053252
	.align 2, 0
_08053228: .4byte 0x08395628
_0805322C:
	cmp r1, r6
	bhs _08053252
	ldr r0, [r4, #0x18]
	ldr r2, _08053280 @ =0x08395618
	cmp r0, r2
	beq _08053252
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #2
	strb r0, [r1]
	str r2, [r4, #0x18]
	strb r5, [r4, #0x1c]
	strh r5, [r4, #0x16]
	adds r0, r3, #0
	adds r0, #0x24
	mov r1, r8
	movs r2, #0x30
	bl ParticleSet
_08053252:
	ldr r0, _08053284 @ =gCurrentSprite
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08053270
	mov r0, sb
	movs r1, #2
	bl Box2PartSetBoxWorkVar2
	movs r0, #0x9e
	lsls r0, r0, #2
	bl SoundPlay
_08053270:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08053280: .4byte 0x08395618
_08053284: .4byte gCurrentSprite

	thumb_func_start Box2PartBottomShell
Box2PartBottomShell: @ 0x08053288
	push {r4, r5, lr}
	ldr r3, _080532AC @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _080532B0 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r2, r0, r2
	ldrh r0, [r2]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _080532B4
	strh r1, [r3]
	b _08053340
	.align 2, 0
_080532AC: .4byte gCurrentSprite
_080532B0: .4byte gSpriteData
_080532B4:
	ldrh r4, [r3]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r0, r5, #0
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	bne _08053340
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	beq _080532E8
	cmp r0, #0x3c
	bgt _080532DE
	cmp r0, #8
	beq _080532E8
	cmp r0, #0x18
	beq _080532E8
	b _08053330
_080532DE:
	cmp r0, #0x46
	beq _080532F4
	cmp r0, #0x48
	beq _08053328
	b _08053330
_080532E8:
	ldr r0, [r3, #0x18]
	ldr r1, _080532F0 @ =0x08395728
	b _08053334
	.align 2, 0
_080532F0: .4byte 0x08395728
_080532F4:
	ldr r0, [r3, #0x18]
	ldr r2, _0805331C @ =0x08395728
	cmp r0, r2
	beq _08053302
	str r2, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r1, [r3, #0x16]
_08053302:
	ldr r0, _08053320 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r1, #7
	ands r1, r0
	cmp r1, #0
	bne _08053340
	adds r3, #0x20
	ldrb r0, [r3]
	cmp r0, #0
	bne _08053324
	movs r0, #0xc
	strb r0, [r3]
	b _08053340
	.align 2, 0
_0805331C: .4byte 0x08395728
_08053320: .4byte gFrameCounter8Bit
_08053324:
	strb r1, [r3]
	b _08053340
_08053328:
	adds r0, r5, #0
	orrs r0, r4
	strh r0, [r3]
	b _08053340
_08053330:
	ldr r0, [r3, #0x18]
	ldr r1, _08053348 @ =0x08395718
_08053334:
	cmp r0, r1
	beq _08053340
	str r1, [r3, #0x18]
	movs r0, #0
	strb r0, [r3, #0x1c]
	strh r0, [r3, #0x16]
_08053340:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08053348: .4byte 0x08395718

	thumb_func_start Box2PartDefault
Box2PartDefault: @ 0x0805334C
	push {r4, r5, r6, lr}
	ldr r4, _08053370 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _08053374 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r5, r0, r2
	ldrh r0, [r5]
	movs r6, #1
	adds r1, r6, #0
	ands r1, r0
	cmp r1, #0
	bne _08053378
	strh r1, [r4]
	b _080533F2
	.align 2, 0
_08053370: .4byte gCurrentSprite
_08053374: .4byte gSpriteData
_08053378:
	ldrh r2, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r1, #0
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	bne _080533F2
	adds r0, r5, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x47
	beq _080533CC
	cmp r0, #0x47
	bgt _0805339E
	cmp r0, #0x46
	beq _080533A8
	b _080533F2
_0805339E:
	cmp r0, #0x48
	beq _080533D4
	cmp r0, #0x49
	beq _080533EC
	b _080533F2
_080533A8:
	ldr r0, _080533C4 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _080533F2
	adds r1, r4, #0
	adds r1, #0x20
	ldrb r0, [r1]
	cmp r0, #0
	bne _080533C8
	movs r0, #0xd
	strb r0, [r1]
	b _080533F2
	.align 2, 0
_080533C4: .4byte gFrameCounter8Bit
_080533C8:
	strb r3, [r1]
	b _080533F2
_080533CC:
	adds r0, r4, #0
	adds r0, #0x20
	strb r3, [r0]
	b _080533F2
_080533D4:
	ldr r0, _080533E8 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _080533F2
	movs r0, #4
	eors r0, r2
	b _080533F0
	.align 2, 0
_080533E8: .4byte gFrameCounter8Bit
_080533EC:
	adds r0, r1, #0
	orrs r0, r2
_080533F0:
	strh r0, [r4]
_080533F2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start Box2MissileInit
Box2MissileInit: @ 0x080533F8
	push {r4, lr}
	ldr r0, _08053488 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0805348C @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r2, #0
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	ldr r0, _08053490 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08053494 @ =0x0000FFF8
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #8
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08053498 @ =0x083957E8
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r2, [r4, #0x16]
	ldr r1, _0805349C @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r1, ip
	adds r1, #0x2b
	movs r0, #0xc0
	strb r0, [r1]
	adds r0, #0x40
	strh r0, [r4, #0x12]
	adds r1, #3
	movs r0, #0x24
	strb r0, [r1]
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r4, #6]
	subs r1, #0xa
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2d
	strb r3, [r0]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	ldr r0, _080534A0 @ =0x0000026B
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053488: .4byte gCurrentSprite
_0805348C: .4byte 0x0000FFFB
_08053490: .4byte gIoRegisters
_08053494: .4byte 0x0000FFF8
_08053498: .4byte 0x083957E8
_0805349C: .4byte sSecondarySpriteStats
_080534A0: .4byte 0x0000026B

	thumb_func_start Box2MissileLaunching
Box2MissileLaunching: @ 0x080534A4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r5, _08053524 @ =gCurrentSprite
	ldrh r0, [r5, #0x14]
	cmp r0, #0
	bne _080534BC
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
_080534BC:
	adds r6, r5, #0
	adds r6, #0x2e
	ldrb r1, [r6]
	lsrs r1, r1, #1
	ldrh r0, [r5, #2]
	subs r0, r0, r1
	movs r2, #0
	mov r8, r2
	strh r0, [r5, #2]
	cmp r1, #2
	bhi _080534EC
	adds r7, r5, #0
	adds r7, #0x2b
	ldrb r0, [r7]
	ldr r2, _08053528 @ =gSamusData
	ldrh r1, [r2, #0x18]
	subs r1, #0x40
	ldrh r2, [r2, #0x16]
	ldrh r3, [r5, #2]
	ldrh r4, [r5, #4]
	str r4, [sp]
	bl RotateSpriteTowardsSamus
	strb r0, [r7]
_080534EC:
	ldrb r0, [r6]
	subs r0, #2
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08053518
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	mov r2, r8
	strb r2, [r6]
	adds r0, #1
	strb r1, [r0]
_08053518:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08053524: .4byte gCurrentSprite
_08053528: .4byte gSamusData

	thumb_func_start Box2MissileMoving
Box2MissileMoving: @ 0x0805352C
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r1, _0805354C @ =gCurrentSprite
	ldrh r0, [r1, #6]
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08053544
	ldrh r0, [r1, #0x14]
	cmp r0, #0
	bne _08053550
_08053544:
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	b _080535F8
	.align 2, 0
_0805354C: .4byte gCurrentSprite
_08053550:
	ldrb r1, [r1, #0x1e]
	movs r2, #8
	cmp r1, #3
	beq _08053566
	movs r2, #0x28
	cmp r1, #2
	beq _08053566
	movs r2, #0x68
	cmp r1, #1
	bne _08053566
	movs r2, #0x48
_08053566:
	ldr r4, _080535D0 @ =gSamusData
	ldrh r0, [r4, #0x18]
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r4, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0x18
	movs r3, #0x28
	bl MoveSpriteTowardsTarget
	ldr r5, _080535D4 @ =gCurrentSprite
	adds r6, r5, #0
	adds r6, #0x2b
	ldrb r0, [r6]
	ldrh r1, [r4, #0x18]
	subs r1, #0x40
	ldrh r2, [r4, #0x16]
	ldrh r3, [r5, #2]
	ldrh r4, [r5, #4]
	str r4, [sp]
	bl RotateSpriteTowardsSamus
	strb r0, [r6]
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080535D8 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _080535B0
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
_080535B0:
	ldr r0, _080535DC @ =gCurrentAffectingClipdata
	ldrh r4, [r0, #2]
	cmp r4, #1
	bne _080535E0
	adds r6, r5, #0
	adds r6, #0x2d
	ldrb r0, [r6]
	cmp r0, #0
	bne _080535F8
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	movs r2, #0x39
	bl ParticleSet
	strb r4, [r6]
	b _080535F8
	.align 2, 0
_080535D0: .4byte gSamusData
_080535D4: .4byte gCurrentSprite
_080535D8: .4byte gPreviousCollisionCheck
_080535DC: .4byte gCurrentAffectingClipdata
_080535E0:
	adds r4, r5, #0
	adds r4, #0x2d
	ldrb r0, [r4]
	cmp r0, #0
	beq _080535F8
	ldrh r0, [r5, #2]
	ldrh r1, [r5, #4]
	movs r2, #0x39
	bl ParticleSet
	movs r0, #0
	strb r0, [r4]
_080535F8:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start Box2MissileExploding
Box2MissileExploding: @ 0x08053600
	push {lr}
	ldr r1, _08053620 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	movs r2, #0x25
	bl ParticleSet
	movs r0, #0x9b
	lsls r0, r0, #2
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08053620: .4byte gCurrentSprite

	thumb_func_start Box2BrainTopInit
Box2BrainTopInit: @ 0x08053624
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r5, _080536B0 @ =gCurrentSprite
	ldrh r1, [r5]
	ldr r0, _080536B4 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	strh r0, [r5]
	ldr r0, _080536B8 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r5, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	movs r2, #0x20
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _080536BC @ =0x0000FFE0
	strh r1, [r5, #0xa]
	movs r0, #0x40
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r2, [r5, #0x10]
	ldr r0, _080536C0 @ =0x08395808
	str r0, [r5, #0x18]
	strb r3, [r5, #0x1c]
	strh r4, [r5, #0x16]
	ldr r1, _080536C4 @ =sSecondarySpriteStats
	ldrb r0, [r5, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0x5a
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldrb r2, [r5, #0x1f]
	subs r0, #2
	ldrb r3, [r0]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x6f
	movs r1, #0
	bl SpriteSpawnSecondary
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080536B0: .4byte gCurrentSprite
_080536B4: .4byte 0x0000FFFB
_080536B8: .4byte gIoRegisters
_080536BC: .4byte 0x0000FFE0
_080536C0: .4byte 0x08395808
_080536C4: .4byte sSecondarySpriteStats

	thumb_func_start Box2BrainTopRising
Box2BrainTopRising: @ 0x080536C8
	push {lr}
	ldr r0, _080536E8 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r2, #7
	ands r2, r0
	ldr r3, _080536EC @ =gCurrentSprite
	cmp r2, #0
	bne _0805370C
	adds r1, r3, #0
	adds r1, #0x20
	ldrb r0, [r1]
	cmp r0, #0
	bne _080536F0
	movs r0, #0xb
	strb r0, [r1]
	b _080536F2
	.align 2, 0
_080536E8: .4byte gFrameCounter8Bit
_080536EC: .4byte gCurrentSprite
_080536F0:
	strb r2, [r1]
_080536F2:
	ldr r2, _08053738 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x20
	ldrb r1, [r1]
	adds r0, #0x20
	strb r1, [r0]
_0805370C:
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805373C
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #0x3c
	mov r1, ip
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	b _08053742
	.align 2, 0
_08053738: .4byte gSpriteData
_0805373C:
	ldrh r0, [r3, #2]
	subs r0, #2
	strh r0, [r3, #2]
_08053742:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start Box2BrainTopFloating
Box2BrainTopFloating: @ 0x08053748
	push {r4, r5, r6, lr}
	ldr r0, _08053768 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	movs r2, #7
	ands r2, r0
	ldr r3, _0805376C @ =gCurrentSprite
	cmp r2, #0
	bne _0805378C
	adds r1, r3, #0
	adds r1, #0x20
	ldrb r0, [r1]
	cmp r0, #0
	bne _08053770
	movs r0, #0xb
	strb r0, [r1]
	b _08053772
	.align 2, 0
_08053768: .4byte gFrameCounter8Bit
_0805376C: .4byte gCurrentSprite
_08053770:
	strb r2, [r1]
_08053772:
	ldr r2, _080537EC @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x20
	ldrb r1, [r1]
	adds r0, #0x20
	strb r1, [r0]
_0805378C:
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _080537F0 @ =0x08390578
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080537F4 @ =0x00007FFF
	cmp r1, r0
	bne _080537AA
	ldrh r4, [r5]
	movs r2, #0
_080537AA:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
	movs r4, #0
	strh r0, [r3, #2]
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080537E6
	subs r1, #0xa
	movs r0, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x20
	strb r4, [r0]
	ldr r2, _080537EC @ =gSpriteData
	adds r0, #0xf
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x20
	strb r4, [r0]
_080537E6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080537EC: .4byte gSpriteData
_080537F0: .4byte 0x08390578
_080537F4: .4byte 0x00007FFF

	thumb_func_start Box2BrainTopTransformingInit
Box2BrainTopTransformingInit: @ 0x080537F8
	push {r4, lr}
	ldr r3, _0805381C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	ldrh r2, [r3]
	movs r0, #0
	ldr r1, _08053820 @ =0x00008020
	movs r4, #0x25
	strb r0, [r4, r3]
	movs r0, #0x2c
	strh r0, [r3, #6]
	orrs r1, r2
	strh r1, [r3]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805381C: .4byte gCurrentSprite
_08053820: .4byte 0x00008020

	thumb_func_start Box2BrainTopTransforming
Box2BrainTopTransforming: @ 0x08053824
	push {r4, r5, lr}
	movs r5, #0x59
	ldr r2, _0805387C @ =gWrittenToMosaic_H
	ldr r1, _08053880 @ =0x083BDED6
	ldr r4, _08053884 @ =gCurrentSprite
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x13
	bhi _08053888
	ldrh r2, [r4, #6]
	movs r0, #0x59
	movs r1, #0
	bl SpriteLoadGfx
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _08053896
	adds r0, r4, #0
	adds r0, #0x24
	strb r5, [r0]
	strb r5, [r4, #0x1d]
	ldrh r0, [r4, #2]
	adds r0, #0x5c
	strh r0, [r4, #2]
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x7f
	ands r0, r1
	strb r0, [r2]
	b _08053896
	.align 2, 0
_0805387C: .4byte gWrittenToMosaic_H
_08053880: .4byte 0x083BDED6
_08053884: .4byte gCurrentSprite
_08053888:
	cmp r0, #0x14
	bne _08053896
	movs r0, #0x59
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_08053896:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start Box2BrainBottomInit
Box2BrainBottomInit: @ 0x0805389C
	push {r4, lr}
	ldr r0, _08053908 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0805390C @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	ldr r0, _08053910 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r2, #3
	adds r0, r2, #0
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x22
	strb r2, [r0]
	adds r0, #5
	strb r3, [r0]
	adds r1, #7
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	ldr r1, _08053914 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08053918 @ =0x083958D8
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053908: .4byte gCurrentSprite
_0805390C: .4byte 0x0000FFFB
_08053910: .4byte gIoRegisters
_08053914: .4byte 0x0000FFFC
_08053918: .4byte 0x083958D8

	thumb_func_start Box2BrainBottomIdle
Box2BrainBottomIdle: @ 0x0805391C
	push {r4, lr}
	ldr r2, _0805394C @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r4, [r0]
	ldr r3, _08053950 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrh r1, [r0, #2]
	strh r1, [r2, #2]
	ldrh r1, [r0, #4]
	strh r1, [r2, #4]
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08053954
	ldrh r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	b _0805395A
	.align 2, 0
_0805394C: .4byte gCurrentSprite
_08053950: .4byte gSpriteData
_08053954:
	ldrh r1, [r2]
	ldr r0, _08053978 @ =0x0000FFDF
	ands r0, r1
_0805395A:
	strh r0, [r2]
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r3
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x59
	bne _08053970
	movs r0, #0
	strh r0, [r2]
_08053970:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053978: .4byte 0x0000FFDF

	thumb_func_start Box2
Box2: @ 0x0805397C
	push {lr}
	ldr r0, _08053994 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x4c
	bls _0805398A
	b _08053B90
_0805398A:
	lsls r0, r0, #2
	ldr r1, _08053998 @ =_0805399C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08053994: .4byte gCurrentSprite
_08053998: .4byte _0805399C
_0805399C: @ jump table
	.4byte _08053AD0 @ case 0
	.4byte _08053AD6 @ case 1
	.4byte _08053ADA @ case 2
	.4byte _08053B90 @ case 3
	.4byte _08053B90 @ case 4
	.4byte _08053B90 @ case 5
	.4byte _08053B90 @ case 6
	.4byte _08053B12 @ case 7
	.4byte _08053B16 @ case 8
	.4byte _08053B90 @ case 9
	.4byte _08053B90 @ case 10
	.4byte _08053B90 @ case 11
	.4byte _08053B90 @ case 12
	.4byte _08053B90 @ case 13
	.4byte _08053B90 @ case 14
	.4byte _08053B90 @ case 15
	.4byte _08053B90 @ case 16
	.4byte _08053B90 @ case 17
	.4byte _08053B90 @ case 18
	.4byte _08053B90 @ case 19
	.4byte _08053B90 @ case 20
	.4byte _08053B90 @ case 21
	.4byte _08053B90 @ case 22
	.4byte _08053AE0 @ case 23
	.4byte _08053AE4 @ case 24
	.4byte _08053AEA @ case 25
	.4byte _08053AEE @ case 26
	.4byte _08053AF4 @ case 27
	.4byte _08053AF8 @ case 28
	.4byte _08053AFE @ case 29
	.4byte _08053B02 @ case 30
	.4byte _08053B08 @ case 31
	.4byte _08053B0C @ case 32
	.4byte _08053B90 @ case 33
	.4byte _08053B90 @ case 34
	.4byte _08053B90 @ case 35
	.4byte _08053B90 @ case 36
	.4byte _08053B90 @ case 37
	.4byte _08053B90 @ case 38
	.4byte _08053B4E @ case 39
	.4byte _08053B52 @ case 40
	.4byte _08053B58 @ case 41
	.4byte _08053B5C @ case 42
	.4byte _08053B90 @ case 43
	.4byte _08053B62 @ case 44
	.4byte _08053B90 @ case 45
	.4byte _08053B68 @ case 46
	.4byte _08053B90 @ case 47
	.4byte _08053B90 @ case 48
	.4byte _08053B90 @ case 49
	.4byte _08053B90 @ case 50
	.4byte _08053B90 @ case 51
	.4byte _08053B90 @ case 52
	.4byte _08053B90 @ case 53
	.4byte _08053B90 @ case 54
	.4byte _08053B1C @ case 55
	.4byte _08053B20 @ case 56
	.4byte _08053B30 @ case 57
	.4byte _08053B34 @ case 58
	.4byte _08053B3A @ case 59
	.4byte _08053B3E @ case 60
	.4byte _08053B44 @ case 61
	.4byte _08053B48 @ case 62
	.4byte _08053B90 @ case 63
	.4byte _08053B90 @ case 64
	.4byte _08053B90 @ case 65
	.4byte _08053B90 @ case 66
	.4byte _08053B6E @ case 67
	.4byte _08053B72 @ case 68
	.4byte _08053B78 @ case 69
	.4byte _08053B7C @ case 70
	.4byte _08053B82 @ case 71
	.4byte _08053B86 @ case 72
	.4byte _08053B8C @ case 73
	.4byte _08053B90 @ case 74
	.4byte _08053B26 @ case 75
	.4byte _08053B2A @ case 76
_08053AD0:
	bl Box2Init
	b _08053B90
_08053AD6:
	bl Box2IdleInit
_08053ADA:
	bl Box2Crawling
	b _08053B90
_08053AE0:
	bl Box2WaitingToRunInit
_08053AE4:
	bl Box2WaitingToRun
	b _08053B90
_08053AEA:
	bl Box2SlowRunningInit
_08053AEE:
	bl Box2SlowRunning
	b _08053B90
_08053AF4:
	bl Box2FastRunningInit
_08053AF8:
	bl Box2FastRunning
	b _08053B90
_08053AFE:
	bl Box2SkiddingInit
_08053B02:
	bl Box2Skidding
	b _08053B90
_08053B08:
	bl Box2StopSkiddingInit
_08053B0C:
	bl Box2StopSkidding
	b _08053B90
_08053B12:
	bl Box2FinishedCrawlingInit
_08053B16:
	bl Box2FinishCrawling
	b _08053B90
_08053B1C:
	bl Box2BonkingInit
_08053B20:
	bl Box2Bonking
	b _08053B90
_08053B26:
	bl Box2LandingFromBonkInit
_08053B2A:
	bl Box2LandingFromBonk
	b _08053B90
_08053B30:
	bl Box2LandingInit
_08053B34:
	bl Box2Landing
	b _08053B90
_08053B3A:
	bl Box2JumpWarningInit
_08053B3E:
	bl Box2JumpWarning
	b _08053B90
_08053B44:
	bl Box2JumpingInit
_08053B48:
	bl Box2Jumping
	b _08053B90
_08053B4E:
	bl Box2StoppingToFireMissilesInit
_08053B52:
	bl Box2StoppingToFireMissiles
	b _08053B90
_08053B58:
	bl Box2LoweringToFireMissilesInit
_08053B5C:
	bl Box2LoweringToFireMissiles
	b _08053B90
_08053B62:
	bl Box2FiringMissiles
	b _08053B90
_08053B68:
	bl Box2DoneFiringMissiles
	b _08053B90
_08053B6E:
	bl Box2DyingInit
_08053B72:
	bl Box2Dying
	b _08053B90
_08053B78:
	bl Box2ExplodingInit
_08053B7C:
	bl Box2Exploding
	b _08053B90
_08053B82:
	bl Box2BrainRisingInit
_08053B86:
	bl Box2BrainRising
	b _08053B90
_08053B8C:
	bl Box2BrainFloating
_08053B90:
	bl UpdateSubSpriteData1Animation
	bl SyncCurrentSpritePositionWithSubSprite1Position
	pop {r0}
	bx r0

	thumb_func_start Box2Part
Box2Part: @ 0x08053B9C
	push {r4, lr}
	ldr r0, _08053BB4 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0
	bne _08053BB8
	bl Box2PartInit
	b _08053C80
	.align 2, 0
_08053BB4: .4byte gCurrentSprite
_08053BB8:
	ldrb r0, [r2, #0x1e]
	cmp r0, #2
	beq _08053BF8
	cmp r0, #2
	bgt _08053BC8
	cmp r0, #0
	beq _08053BD2
	b _08053C60
_08053BC8:
	cmp r0, #6
	beq _08053C20
	cmp r0, #8
	beq _08053C38
	b _08053C60
_08053BD2:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08053BF4 @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _08053BEA
	strb r3, [r4]
_08053BEA:
	bl Box2PartFrontLeftLeg
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _08053C80
	.align 2, 0
_08053BF4: .4byte gSubSpriteData1
_08053BF8:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08053C1C @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _08053C10
	strb r3, [r4]
_08053C10:
	bl Box2PartFrontRightLeg
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _08053C80
	.align 2, 0
_08053C1C: .4byte gSubSpriteData1
_08053C20:
	ldr r0, _08053C34 @ =gSubSpriteData1
	adds r1, r2, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	strb r1, [r0, #0xe]
	bl Box2PartTopShell
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _08053C80
	.align 2, 0
_08053C34: .4byte gSubSpriteData1
_08053C38:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08053C5C @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _08053C50
	strb r3, [r4]
_08053C50:
	bl Box2PartBottomShell
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _08053C80
	.align 2, 0
_08053C5C: .4byte gSubSpriteData1
_08053C60:
	adds r4, r2, #0
	adds r4, #0x2c
	ldrb r2, [r4]
	movs r0, #0x7f
	ldr r1, _08053C88 @ =gSubSpriteData1
	ldrb r3, [r1, #0xe]
	adds r1, r0, #0
	ands r1, r2
	ands r0, r3
	cmp r1, r0
	bhs _08053C78
	strb r3, [r4]
_08053C78:
	bl Box2PartDefault
	bl Box2SyncSubSprites
_08053C80:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053C88: .4byte gSubSpriteData1

	thumb_func_start Box2Missile
Box2Missile: @ 0x08053C8C
	push {lr}
	ldr r0, _08053CA4 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08053CB8
	cmp r0, #2
	bgt _08053CA8
	cmp r0, #0
	beq _08053CB2
	b _08053CC8
	.align 2, 0
_08053CA4: .4byte gCurrentSprite
_08053CA8:
	cmp r0, #0x18
	beq _08053CBE
	cmp r0, #0x37
	beq _08053CC4
	b _08053CC8
_08053CB2:
	bl Box2MissileInit
	b _08053CC8
_08053CB8:
	bl Box2MissileLaunching
	b _08053CC8
_08053CBE:
	bl Box2MissileMoving
	b _08053CC8
_08053CC4:
	bl Box2MissileExploding
_08053CC8:
	pop {r0}
	bx r0

	thumb_func_start Box2BrainTop
Box2BrainTop: @ 0x08053CCC
	push {lr}
	ldr r0, _08053CE8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x18
	beq _08053D02
	cmp r0, #0x18
	bgt _08053CEC
	cmp r0, #0
	beq _08053CF6
	cmp r0, #2
	beq _08053CFC
	b _08053D10
	.align 2, 0
_08053CE8: .4byte gCurrentSprite
_08053CEC:
	cmp r0, #0x45
	beq _08053D08
	cmp r0, #0x46
	beq _08053D0C
	b _08053D10
_08053CF6:
	bl Box2BrainTopInit
	b _08053D10
_08053CFC:
	bl Box2BrainTopRising
	b _08053D10
_08053D02:
	bl Box2BrainTopFloating
	b _08053D10
_08053D08:
	bl Box2BrainTopTransformingInit
_08053D0C:
	bl Box2BrainTopTransforming
_08053D10:
	pop {r0}
	bx r0

	thumb_func_start Box2BrainBottom
Box2BrainBottom: @ 0x08053D14
	push {lr}
	ldr r0, _08053D34 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _08053D2C
	bl Box2BrainBottomInit
_08053D2C:
	bl Box2BrainBottomIdle
	pop {r0}
	bx r0
	.align 2, 0
_08053D34: .4byte gCurrentSprite

	thumb_func_start OmagaMetroidSyncSubSPrites
OmagaMetroidSyncSubSPrites: @ 0x08053D38
	push {r4, lr}
	ldr r4, _08053D94 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _08053D98 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _08053D9C @ =0x0879B634
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _08053D6A
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_08053D6A:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053D94: .4byte gSubSpriteData1
_08053D98: .4byte gCurrentSprite
_08053D9C: .4byte 0x0879B634

	thumb_func_start OmegaMetroidPartSetDrawOrder
OmegaMetroidPartSetDrawOrder: @ 0x08053DA0
	push {lr}
	ldr r0, _08053DB8 @ =gCurrentSprite
	ldrb r2, [r0, #0x1e]
	adds r3, r0, #0
	cmp r2, #7
	bhi _08053DF8
	lsls r0, r2, #2
	ldr r1, _08053DBC @ =_08053DC0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08053DB8: .4byte gCurrentSprite
_08053DBC: .4byte _08053DC0
_08053DC0: @ jump table
	.4byte _08053DE0 @ case 0
	.4byte _08053DE0 @ case 1
	.4byte _08053DE0 @ case 2
	.4byte _08053DF8 @ case 3
	.4byte _08053DF0 @ case 4
	.4byte _08053DE8 @ case 5
	.4byte _08053DF0 @ case 6
	.4byte _08053DF0 @ case 7
_08053DE0:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #3
	b _08053DF6
_08053DE8:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #5
	b _08053DF6
_08053DF0:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xc
_08053DF6:
	strb r0, [r1]
_08053DF8:
	pop {r0}
	bx r0

	thumb_func_start OmegaMetroidPartSetDrawOrder_2
OmegaMetroidPartSetDrawOrder_2: @ 0x08053DFC
	push {lr}
	ldr r1, _08053E10 @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	blt _08053E22
	cmp r0, #2
	bgt _08053E14
	adds r1, #0x22
	movs r0, #0xb
	b _08053E20
	.align 2, 0
_08053E10: .4byte gCurrentSprite
_08053E14:
	cmp r0, #7
	bgt _08053E22
	cmp r0, #4
	blt _08053E22
	adds r1, #0x22
	movs r0, #0xd
_08053E20:
	strb r0, [r1]
_08053E22:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidUpdatePalette
OmegaMetroidUpdatePalette: @ 0x08053E28
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	ldr r0, _08053E4C @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	ldr r2, _08053E50 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r4, _08053E54 @ =gBossWork1
	ldrb r1, [r4]
	cmp r1, #0
	beq _08053E58
	cmp r1, #1
	beq _08053E70
	b _08053E86
	.align 2, 0
_08053E4C: .4byte gCurrentSprite
_08053E50: .4byte sPrimarySpriteStats
_08053E54: .4byte gBossWork1
_08053E58:
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bgt _08053E86
	ldr r6, _08053E6C @ =0x08399168
	movs r0, #1
	strb r0, [r4]
	b _08053E8A
	.align 2, 0
_08053E6C: .4byte 0x08399168
_08053E70:
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhi _08053E86
	ldr r6, _08053EB4 @ =0x08399188
	movs r0, #2
	strb r0, [r4]
	movs r7, #1
_08053E86:
	cmp r7, #0
	beq _08053EAC
_08053E8A:
	ldr r0, _08053EB8 @ =0x040000D4
	str r6, [r0]
	ldr r1, _08053EBC @ =0x05000340
	str r1, [r0, #4]
	ldr r2, _08053EC0 @ =0x8000000B
	str r2, [r0, #8]
	ldr r1, [r0, #8]
	str r6, [r0]
	ldr r1, _08053EC4 @ =0x050003A0
	str r1, [r0, #4]
	str r2, [r0, #8]
	ldr r1, [r0, #8]
	str r6, [r0]
	ldr r1, _08053EC8 @ =0x050003C0
	str r1, [r0, #4]
	str r2, [r0, #8]
	ldr r0, [r0, #8]
_08053EAC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08053EB4: .4byte 0x08399188
_08053EB8: .4byte 0x040000D4
_08053EBC: .4byte 0x05000340
_08053EC0: .4byte 0x8000000B
_08053EC4: .4byte 0x050003A0
_08053EC8: .4byte 0x050003C0

	thumb_func_start OmegaMetroidSA_XIceBeamCollision
OmegaMetroidSA_XIceBeamCollision: @ 0x08053ECC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r2, _08053F80 @ =gCurrentSprite
	ldrh r1, [r2, #2]
	ldrh r3, [r2, #4]
	ldrh r0, [r2, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r2, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0x14]
	ldrh r0, [r2, #0xe]
	adds r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sl, r0
	ldrh r0, [r2, #0x10]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sb, r3
	movs r0, #0
	mov r8, r0
_08053F0A:
	ldr r1, _08053F84 @ =gSpriteData
	mov r2, r8
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r4, r0, r1
	ldrh r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08053F88
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08053F88
	ldrb r7, [r4, #0x1d]
	cmp r7, #0
	bne _08053F88
	ldrh r5, [r4, #2]
	ldrh r6, [r4, #4]
	ldrh r3, [r4, #0xa]
	adds r3, r5, r3
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	ldrh r2, [r4, #0xc]
	adds r2, r5, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldrh r1, [r4, #0xe]
	adds r1, r6, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r4, #0x10]
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r3, [sp]
	str r2, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r2, sl
	mov r3, sb
	bl CheckObjectsTouching
	cmp r0, #0
	beq _08053F88
	strh r7, [r4]
	movs r0, #2
	movs r1, #0x11
	adds r2, r5, #0
	adds r3, r6, #0
	bl ProjectileRandomSpriteDebris
	b _08053F96
	.align 2, 0
_08053F80: .4byte gCurrentSprite
_08053F84: .4byte gSpriteData
_08053F88:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #0x17
	bls _08053F0A
_08053F96:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidUpdateHeartPalette
OmegaMetroidUpdateHeartPalette: @ 0x08053FA8
	push {lr}
	ldr r1, _08053FCC @ =gCurrentSprite
	ldrh r0, [r1, #0x14]
	cmp r0, #0
	beq _08053FF0
	adds r2, r1, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	adds r0, #1
	movs r3, #0
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x38
	bne _08053FD0
	movs r0, #1
	strb r0, [r2]
	b _08053FDE
	.align 2, 0
_08053FCC: .4byte gCurrentSprite
_08053FD0:
	cmp r0, #0xe
	bne _08053FDA
	adds r1, #0x20
	movs r0, #3
	b _08053FEE
_08053FDA:
	cmp r0, #0x1c
	bne _08053FE6
_08053FDE:
	adds r0, r1, #0
	adds r0, #0x20
	strb r3, [r0]
	b _08053FF0
_08053FE6:
	cmp r0, #0x2a
	bne _08053FF0
	adds r1, #0x20
	movs r0, #4
_08053FEE:
	strb r0, [r1]
_08053FF0:
	pop {r0}
	bx r0

	thumb_func_start OmegaMetroidUpdateHealthThreshold
OmegaMetroidUpdateHealthThreshold: @ 0x08053FF4
	push {r4, lr}
	bl EventCheckAfter_IceBeamRecovered
	cmp r0, #0
	beq _0805409C
	ldr r0, _08054014 @ =gCurrentSprite
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r1, #0x7f
	ands r1, r0
	cmp r1, #0x10
	bne _0805401C
	ldr r0, _08054018 @ =0x00000222
	bl CheckPlayNotAlreadyPlayingSound
	b _08054026
	.align 2, 0
_08054014: .4byte gCurrentSprite
_08054018: .4byte 0x00000222
_0805401C:
	cmp r1, #0xe
	bne _08054026
	ldr r0, _0805405C @ =0x0000021B
	bl CheckPlayNotAlreadyPlayingSound
_08054026:
	ldr r4, _08054060 @ =gCurrentSprite
	ldrh r2, [r4, #0x14]
	cmp r2, #0
	bne _0805406C
	ldr r0, _08054064 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0
	beq _0805406C
	adds r0, r4, #0
	adds r0, #0x20
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x25
	strb r0, [r1]
	ldr r0, _08054068 @ =gBossWork5
	strh r2, [r0]
	movs r0, #0x6c
	bl EventCheckAdvance
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x3a
	bl ParticleSet
	b _08054094
	.align 2, 0
_0805405C: .4byte 0x0000021B
_08054060: .4byte gCurrentSprite
_08054064: .4byte gSubSpriteData1
_08054068: .4byte gBossWork5
_0805406C:
	ldr r3, _080540A4 @ =gBossWork5
	ldr r0, _080540A8 @ =gSubSpriteData1
	ldr r2, _080540AC @ =gCurrentSprite
	ldrh r0, [r0, #0xc]
	ldrh r1, [r2, #0x14]
	subs r0, r0, r1
	ldrh r1, [r3]
	adds r0, r0, r1
	strh r0, [r3]
	lsls r0, r0, #0x10
	movs r1, #0x96
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08054094
	adds r0, r2, #0
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x25
	strb r1, [r0]
	strh r2, [r3]
_08054094:
	ldr r0, _080540A8 @ =gSubSpriteData1
	ldr r1, _080540AC @ =gCurrentSprite
	ldrh r1, [r1, #0x14]
	strh r1, [r0, #0xc]
_0805409C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080540A4: .4byte gBossWork5
_080540A8: .4byte gSubSpriteData1
_080540AC: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidCheckSamusOnLowHealth
OmegaMetroidCheckSamusOnLowHealth: @ 0x080540B0
	push {lr}
	ldr r0, _080540C8 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x3f
	bne _080540D0
	ldr r0, _080540CC @ =gEquipment
	ldrh r0, [r0]
	cmp r0, #0x62
	bhi _080540D0
	movs r0, #1
	b _080540D2
	.align 2, 0
_080540C8: .4byte gSamusData
_080540CC: .4byte gEquipment
_080540D0:
	movs r0, #0
_080540D2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start OmegaMetroidBodyBlinking
OmegaMetroidBodyBlinking: @ 0x080540D8
	push {lr}
	ldr r2, _0805411C @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r1, [r1]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08054110
	movs r0, #4
	ands r1, r0
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0805410A
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_0805410A:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_08054110:
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0805411C: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidFullBodyBlinking
OmegaMetroidFullBodyBlinking: @ 0x08054120
	push {lr}
	ldr r2, _08054164 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r1, [r1]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08054158
	movs r0, #4
	ands r1, r0
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08054152
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_08054152:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_08054158:
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08054164: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidCheckSamusInFrontRange
OmegaMetroidCheckSamusInFrontRange: @ 0x08054168
	push {lr}
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #0xbe
	lsls r1, r1, #1
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08054194
	ldr r0, _0805418C @ =gSubSpriteData1
	ldr r1, _08054190 @ =gSamusData
	ldrh r0, [r0, #0xa]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08054194
	movs r0, #1
	b _08054196
	.align 2, 0
_0805418C: .4byte gSubSpriteData1
_08054190: .4byte gSamusData
_08054194:
	movs r0, #0
_08054196:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start OmegaMEtroidCheckBehindRightTrigger
OmegaMEtroidCheckBehindRightTrigger: @ 0x0805419C
	push {lr}
	ldr r0, _080541B8 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	lsrs r1, r1, #2
	ldr r0, _080541BC @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0xcc
	bhi _080541C0
	movs r0, #0
	b _080541C2
	.align 2, 0
_080541B8: .4byte gSubSpriteData1
_080541BC: .4byte gBg1XPosition
_080541C0:
	movs r0, #1
_080541C2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start OmegaMetroidCheckInFrontOfMiddleTrigger
OmegaMetroidCheckInFrontOfMiddleTrigger: @ 0x080541C8
	push {lr}
	ldr r0, _080541E4 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	lsrs r1, r1, #2
	ldr r0, _080541E8 @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0x78
	bls _080541EC
	movs r0, #0
	b _080541EE
	.align 2, 0
_080541E4: .4byte gSubSpriteData1
_080541E8: .4byte gBg1XPosition
_080541EC:
	movs r0, #1
_080541EE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start OmegaMetroidCheckInFrontOfLeftTrigger
OmegaMetroidCheckInFrontOfLeftTrigger: @ 0x080541F4
	push {lr}
	ldr r0, _08054210 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	lsrs r1, r1, #2
	ldr r0, _08054214 @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0x50
	bls _08054218
	movs r0, #0
	b _0805421A
	.align 2, 0
_08054210: .4byte gSubSpriteData1
_08054214: .4byte gBg1XPosition
_08054218:
	movs r0, #1
_0805421A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start OmegaMetroidXMovement
OmegaMetroidXMovement: @ 0x08054220
	push {r4, r5, lr}
	ldr r1, _0805424C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r4, [r0]
	adds r5, r4, #0
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08054254
	bl OmegaMEtroidCheckBehindRightTrigger
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08054268
	ldr r1, _08054250 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	adds r0, r4, r0
	b _08054266
	.align 2, 0
_0805424C: .4byte gCurrentSprite
_08054250: .4byte gSubSpriteData1
_08054254:
	bl OmegaMetroidCheckInFrontOfLeftTrigger
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _08054268
	ldr r1, _08054270 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	subs r0, r0, r5
_08054266:
	strh r0, [r1, #0xa]
_08054268:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08054270: .4byte gSubSpriteData1

	thumb_func_start OmegaMetroidBackwardsMovement
OmegaMetroidBackwardsMovement: @ 0x08054274
	push {lr}
	ldr r1, _0805428C @ =gSubSpriteData1
	ldrh r0, [r1, #4]
	subs r0, #1
	adds r2, r1, #0
	cmp r0, #7
	bhi _080542EC
	lsls r0, r0, #2
	ldr r1, _08054290 @ =_08054294
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805428C: .4byte gSubSpriteData1
_08054290: .4byte _08054294
_08054294: @ jump table
	.4byte _080542B4 @ case 0
	.4byte _080542B8 @ case 1
	.4byte _080542BC @ case 2
	.4byte _080542EC @ case 3
	.4byte _080542B4 @ case 4
	.4byte _080542B8 @ case 5
	.4byte _080542D0 @ case 6
	.4byte _080542D8 @ case 7
_080542B4:
	movs r1, #2
	b _080542EE
_080542B8:
	movs r1, #3
	b _080542EE
_080542BC:
	ldrb r0, [r2, #6]
	cmp r0, #1
	bne _080542D0
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _080542D4 @ =0x0000021D
	bl SoundPlay
_080542D0:
	movs r1, #4
	b _080542EE
	.align 2, 0
_080542D4: .4byte 0x0000021D
_080542D8:
	ldrb r0, [r2, #6]
	cmp r0, #1
	bne _080542EC
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _08054300 @ =0x0000021D
	bl SoundPlay
_080542EC:
	movs r1, #0
_080542EE:
	ldr r0, _08054304 @ =gCurrentSprite
	adds r0, #0x30
	strb r1, [r0]
	bl OmegaMetroidXMovement
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_08054300: .4byte 0x0000021D
_08054304: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidForwardMovement
OmegaMetroidForwardMovement: @ 0x08054308
	push {lr}
	ldr r0, _08054320 @ =gSubSpriteData1
	ldrh r1, [r0, #4]
	adds r2, r0, #0
	cmp r1, #7
	bhi _08054380
	lsls r0, r1, #2
	ldr r1, _08054324 @ =_08054328
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08054320: .4byte gSubSpriteData1
_08054324: .4byte _08054328
_08054328: @ jump table
	.4byte _0805435C @ case 0
	.4byte _08054348 @ case 1
	.4byte _08054380 @ case 2
	.4byte _08054380 @ case 3
	.4byte _0805435C @ case 4
	.4byte _08054364 @ case 5
	.4byte _08054368 @ case 6
	.4byte _0805436C @ case 7
_08054348:
	ldrb r0, [r2, #6]
	cmp r0, #1
	bne _0805435C
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _08054360 @ =0x0000021D
	bl SoundPlay
_0805435C:
	movs r2, #2
	b _08054382
	.align 2, 0
_08054360: .4byte 0x0000021D
_08054364:
	movs r2, #3
	b _08054382
_08054368:
	movs r2, #4
	b _08054382
_0805436C:
	ldrb r0, [r2, #6]
	cmp r0, #1
	bne _08054380
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _080543B8 @ =0x0000021D
	bl SoundPlay
_08054380:
	movs r2, #0
_08054382:
	ldr r0, _080543BC @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r1, [r1]
	adds r3, r0, #0
	cmp r1, #0x24
	beq _0805439A
	cmp r2, #0
	beq _0805439A
	subs r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
_0805439A:
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	bl OmegaMetroidXMovement
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _080543B4
	bl OmegaMetroidCheckSamusInFrontRange
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_080543B4:
	pop {r1}
	bx r1
	.align 2, 0
_080543B8: .4byte 0x0000021D
_080543BC: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidSlowMovement
OmegaMetroidSlowMovement: @ 0x080543C0
	push {lr}
	ldr r0, _080543D4 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	ldrb r1, [r1]
	adds r2, r0, #0
	cmp r1, #0x24
	beq _080543D8
	movs r1, #0
	b _080543E2
	.align 2, 0
_080543D4: .4byte gCurrentSprite
_080543D8:
	ldr r0, _08054400 @ =gSubSpriteData1
	ldrh r1, [r0, #4]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r1, r0, #0x1f
_080543E2:
	adds r0, r2, #0
	adds r0, #0x30
	strb r1, [r0]
	bl OmegaMetroidXMovement
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _080543FC
	bl OmegaMetroidCheckSamusInFrontRange
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_080543FC:
	pop {r1}
	bx r1
	.align 2, 0
_08054400: .4byte gSubSpriteData1

	thumb_func_start OmegaMetroidStandingMovement
OmegaMetroidStandingMovement: @ 0x08054404
	push {r4, lr}
	ldr r0, _08054420 @ =gCurrentSprite
	adds r0, #0x30
	movs r1, #1
	strb r1, [r0]
	movs r4, #0
	bl OmegaMetroidCheckSamusInFrontRange
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08054424
	movs r4, #2
	b _08054430
	.align 2, 0
_08054420: .4byte gCurrentSprite
_08054424:
	bl OmegaMetroidXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08054430
	movs r4, #1
_08054430:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start OmegaMetroidInit
OmegaMetroidInit: @ 0x08054438
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x10
	ldr r1, _080545E0 @ =gBossWork1
	movs r0, #0
	strb r0, [r1]
	ldr r7, _080545E4 @ =gCurrentSprite
	ldrh r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r3, r1, #0
	movs r6, #0
	movs r5, #0
	orrs r3, r0
	strh r3, [r7]
	adds r2, r7, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrh r0, [r7, #2]
	mov r8, r0
	ldrh r1, [r7, #4]
	mov sb, r1
	strh r0, [r7, #6]
	strh r1, [r7, #8]
	ldr r1, _080545E8 @ =gAbilityRestingYPosition
	ldr r0, _080545EC @ =0xFFFFFE80
	add r0, r8
	strh r0, [r1]
	ldr r1, _080545F0 @ =gAbilityRestingXPosition
	ldr r0, _080545F4 @ =0xFFFFFDC0
	add r0, sb
	strh r0, [r1]
	movs r0, #0xe0
	lsls r0, r0, #1
	adds r1, r0, #0
	ldrh r0, [r7, #4]
	adds r1, r1, r0
	strh r1, [r7, #4]
	ldr r4, _080545F8 @ =gSubSpriteData1
	ldrh r0, [r7, #2]
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	adds r0, r7, #0
	adds r0, #0x27
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _080545FC @ =0x0000FF90
	strh r0, [r7, #0xa]
	movs r1, #0x40
	strh r1, [r7, #0xc]
	adds r0, #0x10
	strh r0, [r7, #0xe]
	strh r1, [r7, #0x10]
	adds r1, r7, #0
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	movs r0, #3
	strb r0, [r7, #0x1e]
	ldr r2, _08054600 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r7, #0x14]
	strh r0, [r4, #0xc]
	ldr r0, _08054604 @ =gBossWork5
	strh r5, [r0]
	ldr r0, _08054608 @ =0x083966A0
	str r0, [r4]
	strb r6, [r4, #6]
	strh r5, [r4, #4]
	adds r1, r7, #0
	adds r1, #0x25
	movs r0, #0x16
	strb r0, [r1]
	ldr r0, _0805460C @ =0x0000FDFF
	ands r3, r0
	strh r3, [r7]
	subs r1, #1
	movs r0, #0x37
	strb r0, [r1]
	adds r1, #0xd
	movs r0, #1
	strb r0, [r1]
	subs r1, #3
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x2d
	strb r6, [r0]
	subs r0, #2
	strb r6, [r0]
	ldrb r2, [r7, #0x1f]
	adds r6, r7, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #5
	bl SpriteSpawnSecondary
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x70
	movs r1, #7
	bl SpriteSpawnSecondary
	ldrb r3, [r6]
	movs r0, #0x10
	str r0, [sp]
	mov r1, r8
	str r1, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	str r5, [sp, #0xc]
	movs r0, #0x4c
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	adds r1, r7, #0
	adds r1, #0x2f
	strb r0, [r1]
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080545E0: .4byte gBossWork1
_080545E4: .4byte gCurrentSprite
_080545E8: .4byte gAbilityRestingYPosition
_080545EC: .4byte 0xFFFFFE80
_080545F0: .4byte gAbilityRestingXPosition
_080545F4: .4byte 0xFFFFFDC0
_080545F8: .4byte gSubSpriteData1
_080545FC: .4byte 0x0000FF90
_08054600: .4byte sPrimarySpriteStats
_08054604: .4byte gBossWork5
_08054608: .4byte 0x083966A0
_0805460C: .4byte 0x0000FDFF

	thumb_func_start OmegaMetroidWaitingToAppear
OmegaMetroidWaitingToAppear: @ 0x08054610
	push {lr}
	ldr r2, _08054648 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _08054642
	adds r1, #8
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08054642
	subs r1, #0xa
	movs r0, #0x38
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _0805464C @ =0x00007FFF
	ands r0, r1
	strh r0, [r2]
_08054642:
	pop {r0}
	bx r0
	.align 2, 0
_08054648: .4byte gCurrentSprite
_0805464C: .4byte 0x00007FFF

	thumb_func_start OmegaMetroidFirstJump
OmegaMetroidFirstJump: @ 0x08054650
	push {r4, r5, r6, r7, lr}
	ldr r1, _08054688 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	subs r0, #0x10
	strh r0, [r1, #0xa]
	ldr r3, _0805468C @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r4, [r0]
	ldr r7, _08054690 @ =0x08395900
	lsls r0, r4, #1
	adds r0, r0, r7
	ldrh r6, [r0]
	movs r5, #0
	ldrsh r2, [r0, r5]
	ldr r0, _08054694 @ =0x00007FFF
	adds r5, r1, #0
	cmp r2, r0
	bne _08054698
	subs r1, r4, #1
	lsls r1, r1, #1
	adds r1, r1, r7
	ldrh r0, [r5, #8]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _080546A2
	.align 2, 0
_08054688: .4byte gSubSpriteData1
_0805468C: .4byte gCurrentSprite
_08054690: .4byte 0x08395900
_08054694: .4byte 0x00007FFF
_08054698:
	adds r0, r4, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r5, #8]
	adds r0, r0, r6
_080546A2:
	strh r0, [r5, #8]
	adds r1, r3, #0
	ldrh r4, [r1, #6]
	ldrh r0, [r5, #8]
	cmp r0, r4
	bls _080546DC
	movs r2, #0
	movs r3, #0
	strh r4, [r5, #8]
	adds r1, #0x24
	movs r0, #0x3a
	strb r0, [r1]
	ldr r0, _080546D4 @ =0x083966B8
	str r0, [r5]
	strb r2, [r5, #6]
	strh r3, [r5, #4]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _080546D8 @ =0x0000021F
	bl SoundPlay
	b _0805470E
	.align 2, 0
_080546D4: .4byte 0x083966B8
_080546D8: .4byte 0x0000021F
_080546DC:
	ldrh r1, [r5, #8]
	ldrh r0, [r3, #6]
	subs r0, #0x78
	cmp r1, r0
	ble _0805470E
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x10
	bls _0805470E
	ldr r2, _08054714 @ =gSpriteData
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r3, r0, #0
	adds r3, #0x24
	ldrb r0, [r3]
	cmp r0, #8
	bne _0805470E
	movs r0, #0x17
	strb r0, [r3]
_0805470E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08054714: .4byte gSpriteData

	thumb_func_start OmegaMetroidLandingFromFirstJump
OmegaMetroidLandingFromFirstJump: @ 0x08054718
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054736
	ldr r1, _0805473C @ =gSubSpriteData1
	ldr r0, _08054740 @ =0x08396858
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08054744 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3c
	strb r1, [r0]
_08054736:
	pop {r0}
	bx r0
	.align 2, 0
_0805473C: .4byte gSubSpriteData1
_08054740: .4byte 0x08396858
_08054744: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidLandedAfterFirstJump
OmegaMetroidLandedAfterFirstJump: @ 0x08054748
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054774
	ldr r1, _08054778 @ =gSubSpriteData1
	ldr r0, _0805477C @ =0x08396870
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _08054780 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3e
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _08054784 @ =0x00000219
	bl SoundPlay
_08054774:
	pop {r0}
	bx r0
	.align 2, 0
_08054778: .4byte gSubSpriteData1
_0805477C: .4byte 0x08396870
_08054780: .4byte gCurrentSprite
_08054784: .4byte 0x00000219

	thumb_func_start OmegaMetroidScreamingAfterFirstJump
OmegaMetroidScreamingAfterFirstJump: @ 0x08054788
	push {lr}
	ldr r3, _080547B4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _080547B0
	ldr r0, _080547B8 @ =gSubSpriteData1
	ldr r1, _080547BC @ =0x08396898
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x40
	strb r0, [r1]
_080547B0:
	pop {r0}
	bx r0
	.align 2, 0
_080547B4: .4byte gCurrentSprite
_080547B8: .4byte gSubSpriteData1
_080547BC: .4byte 0x08396898

	thumb_func_start OmegaMetroidFinishedScreamingAfterFirstJump
OmegaMetroidFinishedScreamingAfterFirstJump: @ 0x080547C0
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080547FC
	bl MakeSpriteFaceSamusDirection
	ldr r3, _080547EC @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _080547F0
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2b
	strb r0, [r1]
	b _080547FC
	.align 2, 0
_080547EC: .4byte gCurrentSprite
_080547F0:
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0x1f
	strb r1, [r0]
	adds r0, #9
	strb r2, [r0]
_080547FC:
	pop {r0}
	bx r0

	thumb_func_start OmegaMetroidJumpWarningInit
OmegaMetroidJumpWarningInit: @ 0x08054800
	push {lr}
	ldr r1, _08054820 @ =gSubSpriteData1
	ldr r0, _08054824 @ =0x08396688
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08054828 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	ldr r0, _0805482C @ =0x0000021E
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_08054820: .4byte gSubSpriteData1
_08054824: .4byte 0x08396688
_08054828: .4byte gCurrentSprite
_0805482C: .4byte 0x0000021E

	thumb_func_start OmegaMetroidJumpWarning
OmegaMetroidJumpWarning: @ 0x08054830
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054856
	ldr r1, _0805485C @ =gSubSpriteData1
	ldr r0, _08054860 @ =0x083966A0
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r0, _08054864 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x31
	strb r2, [r1]
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
_08054856:
	pop {r0}
	bx r0
	.align 2, 0
_0805485C: .4byte gSubSpriteData1
_08054860: .4byte 0x083966A0
_08054864: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidJumping
OmegaMetroidJumping: @ 0x08054868
	push {r4, r5, r6, lr}
	ldr r5, _08054894 @ =gCurrentSprite
	adds r3, r5, #0
	adds r3, #0x31
	ldrb r2, [r3]
	ldr r1, _08054898 @ =0x08395948
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0805489C @ =0x00007FFF
	cmp r1, r0
	bne _080548A0
	adds r0, r5, #0
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x1c
	strb r1, [r0]
	strb r2, [r3]
	b _080548B0
	.align 2, 0
_08054894: .4byte gCurrentSprite
_08054898: .4byte 0x08395948
_0805489C: .4byte 0x00007FFF
_080548A0:
	adds r0, r2, #1
	strb r0, [r3]
	ldr r1, _080548B8 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r4
	strh r0, [r1, #8]
	bl OmegaMetroidXMovement
_080548B0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080548B8: .4byte gSubSpriteData1

	thumb_func_start OmegaMEtroidFalling
OmegaMEtroidFalling: @ 0x080548BC
	push {r4, r5, r6, lr}
	ldr r0, _080548EC @ =gCurrentSprite
	adds r5, r0, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r3, _080548F0 @ =0x08395978
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _080548F4 @ =0x00007FFF
	cmp r1, r0
	bne _080548FC
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r2, _080548F8 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #8]
	adds r4, r2, #0
	b _0805490A
	.align 2, 0
_080548EC: .4byte gCurrentSprite
_080548F0: .4byte 0x08395978
_080548F4: .4byte 0x00007FFF
_080548F8: .4byte gSubSpriteData1
_080548FC:
	adds r0, r2, #1
	strb r0, [r5]
	ldr r1, _08054944 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r4
	strh r0, [r1, #8]
	adds r4, r1, #0
_0805490A:
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r0, _08054948 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08054938
	strh r2, [r4, #8]
	ldr r0, _0805494C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1d
	strb r1, [r0]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _08054950 @ =0x0000021F
	bl SoundPlay
_08054938:
	bl OmegaMetroidXMovement
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08054944: .4byte gSubSpriteData1
_08054948: .4byte gPreviousVerticalCollisionCheck
_0805494C: .4byte gCurrentSprite
_08054950: .4byte 0x0000021F

	thumb_func_start OmegaMetroidLandingInit
OmegaMetroidLandingInit: @ 0x08054954
	ldr r1, _0805496C @ =gSubSpriteData1
	ldr r0, _08054970 @ =0x083966B8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08054974 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1e
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805496C: .4byte gSubSpriteData1
_08054970: .4byte 0x083966B8
_08054974: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidLanding
OmegaMetroidLanding: @ 0x08054978
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080549E0
	bl EventCheckAfter_SaXKilledByOmega
	cmp r0, #0
	bne _080549B0
	bl OmegaMetroidCheckSamusOnLowHealth
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080549B0
	ldr r1, _080549A8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	ldrh r2, [r1]
	ldr r0, _080549AC @ =0x0000FDFF
	ands r0, r2
	strh r0, [r1]
	b _080549E0
	.align 2, 0
_080549A8: .4byte gCurrentSprite
_080549AC: .4byte 0x0000FDFF
_080549B0:
	bl MakeSpriteFaceSamusDirection
	ldr r3, _080549D0 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _080549D4
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2b
	strb r0, [r1]
	b _080549E0
	.align 2, 0
_080549D0: .4byte gCurrentSprite
_080549D4:
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0x1f
	strb r1, [r0]
	adds r0, #9
	strb r2, [r0]
_080549E0:
	pop {r0}
	bx r0

	thumb_func_start OmegaMetroidIdleInit
OmegaMetroidIdleInit: @ 0x080549E4
	push {lr}
	ldr r0, _080549FC @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x2d
	ldrb r2, [r2]
	adds r3, r0, #0
	cmp r2, #1
	bne _08054A08
	ldr r1, _08054A00 @ =gSubSpriteData1
	ldr r0, _08054A04 @ =0x08396600
	b _08054A20
	.align 2, 0
_080549FC: .4byte gCurrentSprite
_08054A00: .4byte gSubSpriteData1
_08054A04: .4byte 0x08396600
_08054A08:
	cmp r2, #2
	bne _08054A1C
	ldr r1, _08054A14 @ =gSubSpriteData1
	ldr r0, _08054A18 @ =0x08396730
	b _08054A20
	.align 2, 0
_08054A14: .4byte gSubSpriteData1
_08054A18: .4byte 0x08396730
_08054A1C:
	ldr r1, _08054A34 @ =gSubSpriteData1
	ldr r0, _08054A38 @ =0x083965D8
_08054A20:
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08054A34: .4byte gSubSpriteData1
_08054A38: .4byte 0x083965D8

	thumb_func_start OmegaMetroidIdle
OmegaMetroidIdle: @ 0x08054A3C
	push {r4, lr}
	ldr r0, _08054A94 @ =gCurrentSprite
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _08054A5E
	ldr r0, _08054A98 @ =gSubSpriteData1
	ldr r0, [r0, #4]
	ldr r1, _08054A9C @ =0x00FFFFFF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #9
	cmp r0, r1
	bne _08054A5E
	ldr r0, _08054AA0 @ =0x00000223
	bl SoundPlay
_08054A5E:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054AF2
	bl EventCheckAfter_SaXKilledByOmega
	cmp r0, #0
	bne _08054AA4
	bl OmegaMetroidCheckSamusOnLowHealth
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08054AA4
	ldr r1, _08054A94 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r1]
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x17
	strb r0, [r2]
	adds r1, #0x30
	movs r0, #0x14
	b _08054AF0
	.align 2, 0
_08054A94: .4byte gCurrentSprite
_08054A98: .4byte gSubSpriteData1
_08054A9C: .4byte 0x00FFFFFF
_08054AA0: .4byte 0x00000223
_08054AA4:
	bl MakeSpriteFaceSamusDirection
	ldr r4, _08054AC4 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08054AC8
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	adds r1, #0xc
	movs r0, #0x14
	b _08054AF0
	.align 2, 0
_08054AC4: .4byte gCurrentSprite
_08054AC8:
	bl OmegaMetroidCheckSamusInFrontRange
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08054ADA
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	b _08054AF0
_08054ADA:
	bl EventCheckAfter_SaXKilledByOmega
	cmp r0, #0
	beq _08054AEA
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x23
	b _08054AF0
_08054AEA:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #1
_08054AF0:
	strb r0, [r1]
_08054AF2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start OmegaMetroidWalkingBeforeSA_XInit
OmegaMetroidWalkingBeforeSA_XInit: @ 0x08054AF8
	ldr r1, _08054B14 @ =gSubSpriteData1
	ldr r0, _08054B18 @ =0x08396758
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08054B1C @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	movs r2, #2
	strb r2, [r1]
	adds r0, #0x2d
	strb r2, [r0]
	bx lr
	.align 2, 0
_08054B14: .4byte gSubSpriteData1
_08054B18: .4byte 0x08396758
_08054B1C: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidWalkingBeforeSA_X
OmegaMetroidWalkingBeforeSA_X: @ 0x08054B20
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _08054B58 @ =gCurrentSprite
	movs r0, #0x30
	adds r0, r0, r4
	mov r8, r0
	movs r6, #0
	strb r6, [r0]
	adds r7, r4, #0
	adds r7, #0x2d
	ldrb r0, [r7]
	cmp r0, #2
	bne _08054B64
	bl OmegaMetroidForwardMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054BAC
	ldr r0, _08054B5C @ =gSubSpriteData1
	ldr r1, _08054B60 @ =0x083967C8
	str r1, [r0]
	strb r6, [r0, #6]
	strh r6, [r0, #4]
	movs r0, #3
	strb r0, [r7]
	b _08054BAC
	.align 2, 0
_08054B58: .4byte gCurrentSprite
_08054B5C: .4byte gSubSpriteData1
_08054B60: .4byte 0x083967C8
_08054B64:
	bl OmegaMetroidStandingMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054BAC
	cmp r5, #2
	bne _08054B82
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
	b _08054BAC
_08054B82:
	cmp r5, #1
	bne _08054BA2
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	movs r0, #0x14
	mov r1, r8
	strb r0, [r1]
	b _08054BAC
_08054BA2:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
	strb r6, [r7]
_08054BAC:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidSlowWalkInit
OmegaMetroidSlowWalkInit: @ 0x08054BB8
	ldr r1, _08054BD8 @ =gSubSpriteData1
	ldr r0, _08054BDC @ =0x08396758
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _08054BE0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x22
	strb r0, [r2]
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_08054BD8: .4byte gSubSpriteData1
_08054BDC: .4byte 0x08396758
_08054BE0: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidSlowWalk
OmegaMetroidSlowWalk: @ 0x08054BE4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _08054C0C @ =gCurrentSprite
	movs r0, #0x30
	adds r0, r0, r4
	mov r8, r0
	movs r6, #0
	strb r6, [r0]
	adds r7, r4, #0
	adds r7, #0x2d
	ldrb r0, [r7]
	cmp r0, #1
	beq _08054C4E
	cmp r0, #1
	bgt _08054C10
	cmp r0, #0
	beq _08054C1A
	b _08054CFC
	.align 2, 0
_08054C0C: .4byte gCurrentSprite
_08054C10:
	cmp r0, #2
	beq _08054C90
	cmp r0, #3
	beq _08054CB4
	b _08054CFC
_08054C1A:
	bl OmegaMetroidSlowMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054CFC
	ldr r0, _08054C40 @ =gSubSpriteData1
	ldr r1, _08054C44 @ =0x08396758
	str r1, [r0]
	strb r6, [r0, #6]
	strh r6, [r0, #4]
	cmp r5, #0
	beq _08054C48
	movs r0, #2
	strb r0, [r7]
	b _08054CFC
	.align 2, 0
_08054C40: .4byte gSubSpriteData1
_08054C44: .4byte 0x08396758
_08054C48:
	movs r0, #1
	strb r0, [r7]
	b _08054CFC
_08054C4E:
	bl OmegaMetroidForwardMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054CFC
	cmp r5, #0
	beq _08054C78
	ldr r0, _08054C70 @ =gSubSpriteData1
	ldr r1, _08054C74 @ =0x083967C8
	str r1, [r0]
	movs r1, #3
	strb r1, [r7]
	adds r1, r0, #0
	b _08054C80
	.align 2, 0
_08054C70: .4byte gSubSpriteData1
_08054C74: .4byte 0x083967C8
_08054C78:
	ldr r1, _08054C88 @ =gSubSpriteData1
	ldr r0, _08054C8C @ =0x083967B0
	str r0, [r1]
	strb r6, [r7]
_08054C80:
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	b _08054CFC
	.align 2, 0
_08054C88: .4byte gSubSpriteData1
_08054C8C: .4byte 0x083967B0
_08054C90:
	bl OmegaMetroidForwardMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054CFC
	ldr r0, _08054CAC @ =gSubSpriteData1
	ldr r1, _08054CB0 @ =0x083967C8
	str r1, [r0]
	strb r6, [r0, #6]
	strh r6, [r0, #4]
	movs r0, #3
	strb r0, [r7]
	b _08054CFC
	.align 2, 0
_08054CAC: .4byte gSubSpriteData1
_08054CB0: .4byte 0x083967C8
_08054CB4:
	bl OmegaMetroidStandingMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054CFC
	cmp r5, #2
	bne _08054CD2
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
	b _08054CFC
_08054CD2:
	cmp r5, #1
	bne _08054CF2
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	movs r0, #0x14
	mov r1, r8
	strb r0, [r1]
	b _08054CFC
_08054CF2:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
	strb r6, [r7]
_08054CFC:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidWalkInit
OmegaMetroidWalkInit: @ 0x08054D08
	ldr r1, _08054D28 @ =gSubSpriteData1
	ldr r0, _08054D2C @ =0x083967D8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _08054D30 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x24
	strb r0, [r2]
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_08054D28: .4byte gSubSpriteData1
_08054D2C: .4byte 0x083967D8
_08054D30: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidWalk
OmegaMetroidWalk: @ 0x08054D34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _08054D5C @ =gCurrentSprite
	movs r0, #0x30
	adds r0, r0, r4
	mov r8, r0
	movs r6, #0
	strb r6, [r0]
	adds r7, r4, #0
	adds r7, #0x2d
	ldrb r0, [r7]
	cmp r0, #1
	beq _08054D9E
	cmp r0, #1
	bgt _08054D60
	cmp r0, #0
	beq _08054D6A
	b _08054E4C
	.align 2, 0
_08054D5C: .4byte gCurrentSprite
_08054D60:
	cmp r0, #2
	beq _08054DE0
	cmp r0, #3
	beq _08054E04
	b _08054E4C
_08054D6A:
	bl OmegaMetroidSlowMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054E4C
	ldr r0, _08054D90 @ =gSubSpriteData1
	ldr r1, _08054D94 @ =0x083967D8
	str r1, [r0]
	strb r6, [r0, #6]
	strh r6, [r0, #4]
	cmp r5, #0
	beq _08054D98
	movs r0, #2
	strb r0, [r7]
	b _08054E4C
	.align 2, 0
_08054D90: .4byte gSubSpriteData1
_08054D94: .4byte 0x083967D8
_08054D98:
	movs r0, #1
	strb r0, [r7]
	b _08054E4C
_08054D9E:
	bl OmegaMetroidForwardMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054E4C
	cmp r5, #0
	beq _08054DC8
	ldr r0, _08054DC0 @ =gSubSpriteData1
	ldr r1, _08054DC4 @ =0x08396848
	str r1, [r0]
	movs r1, #3
	strb r1, [r7]
	adds r1, r0, #0
	b _08054DD0
	.align 2, 0
_08054DC0: .4byte gSubSpriteData1
_08054DC4: .4byte 0x08396848
_08054DC8:
	ldr r1, _08054DD8 @ =gSubSpriteData1
	ldr r0, _08054DDC @ =0x08396830
	str r0, [r1]
	strb r6, [r7]
_08054DD0:
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	b _08054E4C
	.align 2, 0
_08054DD8: .4byte gSubSpriteData1
_08054DDC: .4byte 0x08396830
_08054DE0:
	bl OmegaMetroidForwardMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054E4C
	ldr r0, _08054DFC @ =gSubSpriteData1
	ldr r1, _08054E00 @ =0x08396848
	str r1, [r0]
	strb r6, [r0, #6]
	strh r6, [r0, #4]
	movs r0, #3
	strb r0, [r7]
	b _08054E4C
	.align 2, 0
_08054DFC: .4byte gSubSpriteData1
_08054E00: .4byte 0x08396848
_08054E04:
	bl OmegaMetroidStandingMovement
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054E4C
	cmp r5, #2
	bne _08054E22
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
	b _08054E4C
_08054E22:
	cmp r5, #1
	bne _08054E42
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	movs r0, #0x14
	mov r1, r8
	strb r0, [r1]
	b _08054E4C
_08054E42:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
	strb r6, [r7]
_08054E4C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidSwipingInit
OmegaMetroidSwipingInit: @ 0x08054E58
	push {r4, lr}
	ldr r1, _08054E8C @ =gSubSpriteData1
	ldr r0, _08054E90 @ =0x08396918
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r4, _08054E94 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	bl EventCheckAfter_SaXKilledByOmega
	cmp r0, #0
	beq _08054E9C
	ldr r0, _08054E98 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r2, r0, #2
	cmp r2, #0
	bne _08054E84
	movs r2, #1
_08054E84:
	adds r0, r4, #0
	adds r0, #0x2e
	strb r2, [r0]
	b _08054EA4
	.align 2, 0
_08054E8C: .4byte gSubSpriteData1
_08054E90: .4byte 0x08396918
_08054E94: .4byte gCurrentSprite
_08054E98: .4byte gSpriteRandomNumber
_08054E9C:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #3
	strb r0, [r1]
_08054EA4:
	ldr r0, _08054ED4 @ =gCurrentSprite
	adds r0, #0x36
	ldrb r1, [r0]
	ldr r2, _08054ED8 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r2, r0, #0
	adds r2, #0x25
	movs r1, #0x15
	strb r1, [r2]
	movs r1, #0x40
	strh r1, [r0, #0xc]
	movs r1, #0x90
	strh r1, [r0, #0x10]
	movs r0, #0x88
	lsls r0, r0, #2
	bl SoundPlay
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054ED4: .4byte gCurrentSprite
_08054ED8: .4byte gSpriteData

	thumb_func_start OmegaMetroidSwiping
OmegaMetroidSwiping: @ 0x08054EDC
	push {r4, lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08054FA4
	ldr r2, _08054F78 @ =gSubSpriteData1
	ldr r1, [r2]
	ldr r0, _08054F7C @ =0x08396918
	cmp r1, r0
	bne _08054EF4
	ldr r0, _08054F80 @ =0x083966D8
	str r0, [r2]
_08054EF4:
	bl EventCheckAfter_SaXKilledByOmega
	adds r1, r0, #0
	cmp r1, #0
	bne _08054F14
	ldr r0, _08054F84 @ =gEquipment
	ldrh r0, [r0]
	cmp r0, #0x62
	bhi _08054F14
	ldr r0, _08054F88 @ =gPoseLock
	ldrb r0, [r0]
	cmp r0, #0x80
	bne _08054F14
	ldr r0, _08054F8C @ =gCurrentSprite
	adds r0, #0x2e
	strb r1, [r0]
_08054F14:
	bl OmegaMetroidCheckSamusInFrontRange
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _08054F26
	ldr r0, _08054F8C @ =gCurrentSprite
	adds r0, #0x2e
	strb r1, [r0]
_08054F26:
	ldr r4, _08054F8C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _08054FD8
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r1, [r0]
	ldr r2, _08054F90 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r2, r0, #0
	adds r2, #0x25
	movs r1, #0x16
	strb r1, [r2]
	movs r1, #0x30
	strh r1, [r0, #0xc]
	movs r1, #0x40
	strh r1, [r0, #0x10]
	bl OmegaMetroidCheckInFrontOfMiddleTrigger
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08054F94
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	adds r1, #0xc
	movs r0, #0x14
	strb r0, [r1]
	b _08054FD8
	.align 2, 0
_08054F78: .4byte gSubSpriteData1
_08054F7C: .4byte 0x08396918
_08054F80: .4byte 0x083966D8
_08054F84: .4byte gEquipment
_08054F88: .4byte gPoseLock
_08054F8C: .4byte gCurrentSprite
_08054F90: .4byte gSpriteData
_08054F94:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
	adds r1, #9
	movs r0, #1
	strb r0, [r1]
	b _08054FD8
_08054FA4:
	ldr r0, _08054FC0 @ =gSubSpriteData1
	ldr r1, [r0, #4]
	ldr r0, _08054FC4 @ =0x00FFFFFF
	ands r1, r0
	movs r0, #0x80
	lsls r0, r0, #9
	cmp r1, r0
	bne _08054FCC
	ldr r1, _08054FC8 @ =gCurrentSprite
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	b _08054FD8
	.align 2, 0
_08054FC0: .4byte gSubSpriteData1
_08054FC4: .4byte 0x00FFFFFF
_08054FC8: .4byte gCurrentSprite
_08054FCC:
	ldr r0, _08054FE0 @ =0x00010002
	cmp r1, r0
	bne _08054FD8
	ldr r0, _08054FE4 @ =0x00000221
	bl SoundPlay
_08054FD8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054FE0: .4byte 0x00010002
_08054FE4: .4byte 0x00000221

	thumb_func_start OmegaMetroidVerticalJumpInit
OmegaMetroidVerticalJumpInit: @ 0x08054FE8
	ldr r1, _08055010 @ =gSubSpriteData1
	ldr r0, _08055014 @ =0x083966B8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _08055018 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	adds r1, #1
	movs r0, #0x17
	strb r0, [r1]
	bx lr
	.align 2, 0
_08055010: .4byte gSubSpriteData1
_08055014: .4byte 0x083966B8
_08055018: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidVerticalJump
OmegaMetroidVerticalJump: @ 0x0805501C
	push {r4, r5, r6, lr}
	ldr r0, _0805504C @ =gCurrentSprite
	adds r5, r0, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r3, _08055050 @ =0x08395990
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08055054 @ =0x00007FFF
	cmp r1, r0
	bne _0805505C
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r2, _08055058 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #8]
	adds r4, r2, #0
	b _0805506A
	.align 2, 0
_0805504C: .4byte gCurrentSprite
_08055050: .4byte 0x08395990
_08055054: .4byte 0x00007FFF
_08055058: .4byte gSubSpriteData1
_0805505C:
	adds r0, r2, #1
	strb r0, [r5]
	ldr r1, _080550A4 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r4
	strh r0, [r1, #8]
	adds r4, r1, #0
_0805506A:
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r2, r0, #0
	ldr r0, _080550A8 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080550C6
	strh r2, [r4, #8]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _080550AC @ =0x0000021F
	bl SoundPlay
	ldr r2, _080550B0 @ =gCurrentSprite
	ldr r1, _080550B4 @ =gSamusData
	ldrh r0, [r2, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bhs _080550B8
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0
	b _080550C4
	.align 2, 0
_080550A4: .4byte gSubSpriteData1
_080550A8: .4byte gPreviousVerticalCollisionCheck
_080550AC: .4byte 0x0000021F
_080550B0: .4byte gCurrentSprite
_080550B4: .4byte gSamusData
_080550B8:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1d
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x16
_080550C4:
	strb r0, [r1]
_080550C6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start omegaMetroidSpawnSA_X
omegaMetroidSpawnSA_X: @ 0x080550CC
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _08055114 @ =gCurrentSprite
	ldr r0, _08055118 @ =0xFFFFFE80
	adds r1, r0, #0
	ldrh r2, [r4, #6]
	adds r1, r1, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _0805511C @ =0xFFFFFC80
	adds r0, r2, #0
	ldrh r2, [r4, #8]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r2, r4, #0
	adds r2, #0x23
	ldrb r3, [r2]
	movs r2, #0x10
	str r2, [sp]
	str r1, [sp, #4]
	subs r0, #0x20
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x4d
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	adds r4, #0x2f
	strb r0, [r4]
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055114: .4byte gCurrentSprite
_08055118: .4byte 0xFFFFFE80
_0805511C: .4byte 0xFFFFFC80

	thumb_func_start OmegaMetroidWaitingForSA_XInit
OmegaMetroidWaitingForSA_XInit: @ 0x08055120
	ldr r1, _08055148 @ =gSubSpriteData1
	ldr r0, _0805514C @ =0x083965D8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _08055150 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2d
	strb r2, [r0]
	adds r1, #0xa
	movs r0, #9
	strb r0, [r1]
	bx lr
	.align 2, 0
_08055148: .4byte gSubSpriteData1
_0805514C: .4byte 0x083965D8
_08055150: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidWaitingForSA_X
OmegaMetroidWaitingForSA_X: @ 0x08055154
	push {r4, r5, lr}
	ldr r4, _08055194 @ =gSamusData
	ldrh r0, [r4, #0x18]
	subs r0, #0x20
	movs r2, #0x24
	ldrsh r1, [r4, r2]
	ldrh r2, [r4, #0x16]
	adds r1, r1, r2
	subs r1, #0x10
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08055198 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08055178
	ldrh r0, [r4, #0x16]
	subs r0, #8
	strh r0, [r4, #0x16]
_08055178:
	ldr r1, _0805519C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r5, r1, #0
	cmp r0, #6
	bls _08055188
	b _0805534A
_08055188:
	lsls r0, r0, #2
	ldr r1, _080551A0 @ =_080551A4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08055194: .4byte gSamusData
_08055198: .4byte gPreviousCollisionCheck
_0805519C: .4byte gCurrentSprite
_080551A0: .4byte _080551A4
_080551A4: @ jump table
	.4byte _080551C0 @ case 0
	.4byte _08055214 @ case 1
	.4byte _08055248 @ case 2
	.4byte _08055288 @ case 3
	.4byte _080552C8 @ case 4
	.4byte _080552F4 @ case 5
	.4byte _08055324 @ case 6
_080551C0:
	ldr r0, _080551E0 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #7
	bhi _080551E4
	ldrb r2, [r1]
	movs r0, #0x4d
	movs r1, #0
	bl SpriteLoadGfx
	b _080551F2
	.align 2, 0
_080551E0: .4byte gCurrentSprite
_080551E4:
	cmp r0, #8
	bne _080551F2
	movs r0, #0x4d
	movs r1, #0
	movs r2, #2
	bl SpriteLoadPal
_080551F2:
	ldr r1, _08055210 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	cmp r0, #0
	beq _08055200
	b _0805534A
_08055200:
	adds r0, r1, #0
	adds r0, #0x2d
	movs r1, #1
	strb r1, [r0]
	movs r0, #0x64
	strb r0, [r2]
	b _0805534A
	.align 2, 0
_08055210: .4byte gCurrentSprite
_08055214:
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r4, r0, #0
	cmp r4, #0
	beq _08055224
	subs r0, #1
	b _08055348
_08055224:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	bne _0805522E
	b _0805534A
_0805522E:
	ldr r0, _08055240 @ =gSubSpriteData1
	ldr r1, _08055244 @ =0x08396858
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #2
	b _08055348
	.align 2, 0
_08055240: .4byte gSubSpriteData1
_08055244: .4byte 0x08396858
_08055248:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	bne _08055252
	b _0805534A
_08055252:
	ldr r1, _08055278 @ =gSubSpriteData1
	ldr r0, _0805527C @ =0x08396870
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _08055280 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2d
	movs r0, #3
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _08055284 @ =0x00000219
	bl SoundPlay
	b _0805534A
	.align 2, 0
_08055278: .4byte gSubSpriteData1
_0805527C: .4byte 0x08396870
_08055280: .4byte gCurrentSprite
_08055284: .4byte 0x00000219
_08055288:
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r4, r0, #0
	cmp r4, #0
	beq _08055298
	subs r0, #1
	b _08055348
_08055298:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805534A
	ldr r0, _080552C0 @ =gSubSpriteData1
	ldr r1, _080552C4 @ =0x08396898
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #4
	strb r0, [r1]
	subs r1, #0xb
	movs r0, #0xc
	strb r0, [r1]
	bl omegaMetroidSpawnSA_X
	b _0805534A
	.align 2, 0
_080552C0: .4byte gSubSpriteData1
_080552C4: .4byte 0x08396898
_080552C8:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805534A
	ldr r1, _080552E8 @ =gSubSpriteData1
	ldr r0, _080552EC @ =0x08396758
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _080552F0 @ =gCurrentSprite
	adds r0, #0x2d
	movs r1, #5
	strb r1, [r0]
	b _0805534A
	.align 2, 0
_080552E8: .4byte gSubSpriteData1
_080552EC: .4byte 0x08396758
_080552F0: .4byte gCurrentSprite
_080552F4:
	adds r0, r5, #0
	adds r0, #0x30
	movs r4, #0
	strb r4, [r0]
	bl OmegaMetroidForwardMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805534A
	ldr r0, _0805531C @ =gSubSpriteData1
	ldr r1, _08055320 @ =0x083967C8
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #6
	b _08055348
	.align 2, 0
_0805531C: .4byte gSubSpriteData1
_08055320: .4byte 0x083967C8
_08055324:
	adds r0, r5, #0
	adds r0, #0x30
	movs r4, #0
	strb r4, [r0]
	bl OmegaMetroidStandingMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805534A
	ldr r0, _08055350 @ =gSubSpriteData1
	ldr r1, _08055354 @ =0x08396600
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0xb
_08055348:
	strb r0, [r1]
_0805534A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055350: .4byte gSubSpriteData1
_08055354: .4byte 0x08396600

	thumb_func_start OmegaMetroidWatchingSA_X
OmegaMetroidWatchingSA_X: @ 0x08055358
	push {lr}
	bl OmegaMetroidSA_XIceBeamCollision
	ldr r2, _080553A0 @ =gSpriteData
	ldr r0, _080553A4 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x45
	bne _0805539A
	mov r1, ip
	adds r1, #0x24
	movs r3, #0
	movs r0, #0xc
	strb r0, [r1]
	ldr r1, _080553A8 @ =gSubSpriteData1
	ldr r0, _080553AC @ =0x08396628
	str r0, [r1]
	strb r3, [r1, #6]
	movs r2, #0
	strh r3, [r1, #4]
	mov r0, ip
	adds r0, #0x2e
	strb r2, [r0]
	ldr r0, _080553B0 @ =0x0000021A
	bl SoundPlay
_0805539A:
	pop {r0}
	bx r0
	.align 2, 0
_080553A0: .4byte gSpriteData
_080553A4: .4byte gCurrentSprite
_080553A8: .4byte gSubSpriteData1
_080553AC: .4byte 0x08396628
_080553B0: .4byte 0x0000021A

	thumb_func_start OmegaMetroidDamagedBySA_X
OmegaMetroidDamagedBySA_X: @ 0x080553B4
	push {r4, lr}
	bl OmegaMetroidSA_XIceBeamCollision
	bl OmegaMetroidBodyBlinking
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080553EE
	ldr r1, _080553F4 @ =gSubSpriteData1
	ldr r0, _080553F8 @ =0x083968B0
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r2, _080553FC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #9
	strb r0, [r1]
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #2
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	adds r2, #0x2d
	strb r3, [r2]
_080553EE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080553F4: .4byte gSubSpriteData1
_080553F8: .4byte 0x083968B0
_080553FC: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidWalkingBackwardsFromSA_X
OmegaMetroidWalkingBackwardsFromSA_X: @ 0x08055400
	push {r4, r5, r6, lr}
	bl OmegaMetroidSA_XIceBeamCollision
	bl OmegaMetroidBodyBlinking
	ldr r5, _0805541C @ =gCurrentSprite
	adds r6, r5, #0
	adds r6, #0x2d
	ldrb r4, [r6]
	cmp r4, #0
	beq _08055420
	cmp r4, #1
	beq _08055470
	b _08055490
	.align 2, 0
_0805541C: .4byte gCurrentSprite
_08055420:
	adds r0, r5, #0
	adds r0, #0x30
	strb r4, [r0]
	bl OmegaMetroidBackwardsMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08055490
	ldr r0, _08055460 @ =gSubSpriteData1
	ldr r1, _08055464 @ =0x08396908
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	ldrh r1, [r5]
	ldr r0, _08055468 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r5]
	movs r0, #1
	strb r0, [r6]
	ldr r2, _0805546C @ =gSpriteData
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x31
	movs r1, #0x1a
	strb r1, [r0]
	b _08055490
	.align 2, 0
_08055460: .4byte gSubSpriteData1
_08055464: .4byte 0x08396908
_08055468: .4byte 0x0000FDFF
_0805546C: .4byte gSpriteData
_08055470:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08055490
	ldr r1, _08055498 @ =gSubSpriteData1
	ldr r0, _0805549C @ =0x08396628
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	movs r0, #0x3c
	strb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0xa
	strb r0, [r1]
_08055490:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055498: .4byte gSubSpriteData1
_0805549C: .4byte 0x08396628

	thumb_func_start OmegaMetroidDamagedBySA_X2
OmegaMetroidDamagedBySA_X2: @ 0x080554A0
	push {r4, r5, r6, lr}
	bl OmegaMetroidSA_XIceBeamCollision
	bl OmegaMetroidBodyBlinking
	ldr r5, _080554D4 @ =gSubSpriteData1
	ldr r0, [r5, #4]
	ldr r1, _080554D8 @ =0x00FFFFFF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #9
	cmp r0, r1
	bne _080554C0
	ldr r0, _080554DC @ =0x0000021A
	bl SoundPlay
_080554C0:
	ldr r6, _080554E0 @ =gCurrentSprite
	adds r1, r6, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r4, r0, #0
	cmp r4, #0
	beq _080554E4
	subs r0, #1
	b _080554FA
	.align 2, 0
_080554D4: .4byte gSubSpriteData1
_080554D8: .4byte 0x00FFFFFF
_080554DC: .4byte 0x0000021A
_080554E0: .4byte gCurrentSprite
_080554E4:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080554FC
	ldr r0, _08055504 @ =0x083965D8
	str r0, [r5]
	strb r4, [r5, #6]
	strh r4, [r5, #4]
	adds r1, r6, #0
	adds r1, #0x24
	movs r0, #0xd
_080554FA:
	strb r0, [r1]
_080554FC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055504: .4byte 0x083965D8

	thumb_func_start OmegaMetroidWaitingToSwipeSA_X
OmegaMetroidWaitingToSwipeSA_X: @ 0x08055508
	push {lr}
	bl OmegaMetroidSA_XIceBeamCollision
	bl OmegaMetroidBodyBlinking
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08055536
	ldr r1, _0805553C @ =gSubSpriteData1
	ldr r0, _08055540 @ =0x08396918
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _08055544 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0xe
	strb r1, [r0]
	movs r0, #0x88
	lsls r0, r0, #2
	bl SoundPlay
_08055536:
	pop {r0}
	bx r0
	.align 2, 0
_0805553C: .4byte gSubSpriteData1
_08055540: .4byte 0x08396918
_08055544: .4byte gCurrentSprite

	thumb_func_start OmegaMEtroidSwipingSA_X
OmegaMEtroidSwipingSA_X: @ 0x08055548
	push {lr}
	bl OmegaMetroidSA_XIceBeamCollision
	bl OmegaMetroidBodyBlinking
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805558C
	ldr r1, _08055580 @ =gSubSpriteData1
	ldr r0, _08055584 @ =0x08396660
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _08055588 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0xf
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
	subs r1, #2
	movs r0, #4
	strb r0, [r1]
	b _080555DA
	.align 2, 0
_08055580: .4byte gSubSpriteData1
_08055584: .4byte 0x08396660
_08055588: .4byte gCurrentSprite
_0805558C:
	ldr r1, _080555A4 @ =gSubSpriteData1
	ldrh r0, [r1, #4]
	cmp r0, #2
	bne _080555AC
	ldrb r0, [r1, #6]
	cmp r0, #1
	bne _080555DA
	ldr r0, _080555A8 @ =0x00000221
	bl SoundPlay
	b _080555DA
	.align 2, 0
_080555A4: .4byte gSubSpriteData1
_080555A8: .4byte 0x00000221
_080555AC:
	cmp r0, #3
	bne _080555DA
	ldrb r0, [r1, #6]
	cmp r0, #1
	bne _080555DA
	ldr r2, _080555E0 @ =gSpriteData
	ldr r0, _080555E4 @ =gCurrentSprite
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x24
	movs r1, #0x47
	strb r1, [r0]
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _080555E8 @ =0x000002AF
	bl SoundPlay
_080555DA:
	pop {r0}
	bx r0
	.align 2, 0
_080555E0: .4byte gSpriteData
_080555E4: .4byte gCurrentSprite
_080555E8: .4byte 0x000002AF

	thumb_func_start OmegaMetroidKilledSA_X
OmegaMetroidKilledSA_X: @ 0x080555EC
	push {r4, lr}
	ldr r4, _08055648 @ =gSubSpriteData1
	ldr r0, [r4, #4]
	ldr r1, _0805564C @ =0x00FFFFFF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #9
	cmp r0, r1
	bne _08055606
	movs r0, #0x89
	lsls r0, r0, #2
	bl SoundPlay
_08055606:
	bl EventCheckAfter_IceBeamRecovered
	cmp r0, #0
	beq _08055640
	ldr r0, _08055650 @ =gCurrentSprite
	mov ip, r0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xbf
	ands r0, r1
	movs r3, #0
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08055654 @ =0x08396858
	str r0, [r4]
	strb r3, [r4, #6]
	movs r1, #0
	strh r3, [r4, #4]
	mov r0, ip
	adds r0, #0x2d
	strb r1, [r0]
	movs r0, #0x32
	movs r1, #7
	bl PlayMusic
_08055640:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055648: .4byte gSubSpriteData1
_0805564C: .4byte 0x00FFFFFF
_08055650: .4byte gCurrentSprite
_08055654: .4byte 0x08396858

	thumb_func_start OmegaMetroidScreamingAfterIceBeamObtained
OmegaMetroidScreamingAfterIceBeamObtained: @ 0x08055658
	push {r4, r5, r6, lr}
	ldr r5, _08055674 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x10
	bne _08055678
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
	b _080556F8
	.align 2, 0
_08055674: .4byte gCurrentSprite
_08055678:
	adds r6, r5, #0
	adds r6, #0x2d
	ldrb r4, [r6]
	cmp r4, #0
	bne _080556B4
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080556F8
	ldr r0, _080556A8 @ =gSubSpriteData1
	ldr r1, _080556AC @ =0x08396870
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	movs r0, #1
	strb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _080556B0 @ =0x00000219
	bl SoundPlay
	b _080556F8
	.align 2, 0
_080556A8: .4byte gSubSpriteData1
_080556AC: .4byte 0x08396870
_080556B0: .4byte 0x00000219
_080556B4:
	cmp r4, #1
	bne _080556E4
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _080556F8
	ldr r0, _080556DC @ =gSubSpriteData1
	ldr r1, _080556E0 @ =0x08396898
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	movs r0, #2
	strb r0, [r6]
	b _080556F8
	.align 2, 0
_080556DC: .4byte gSubSpriteData1
_080556E0: .4byte 0x08396898
_080556E4:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _080556F8
	adds r0, r5, #0
	adds r0, #0x24
	movs r2, #0
	movs r1, #0x1f
	strb r1, [r0]
	strb r2, [r6]
_080556F8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidWalkingBackwardsInit
OmegaMetroidWalkingBackwardsInit: @ 0x08055700
	push {r4, lr}
	ldr r3, _08055748 @ =gSubSpriteData1
	ldr r0, _0805574C @ =0x083968B0
	str r0, [r3]
	movs r0, #0
	strb r0, [r3, #6]
	strh r0, [r3, #4]
	ldr r2, _08055750 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x26
	strb r0, [r1]
	ldrh r1, [r2]
	movs r4, #0x80
	lsls r4, r4, #2
	adds r0, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldrh r1, [r3, #0xa]
	lsrs r1, r1, #2
	ldr r0, _08055754 @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0x78
	bhi _08055758
	ldrh r0, [r3, #0xc]
	cmp r0, #0
	beq _08055758
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #2
	b _0805575E
	.align 2, 0
_08055748: .4byte gSubSpriteData1
_0805574C: .4byte 0x083968B0
_08055750: .4byte gCurrentSprite
_08055754: .4byte gBg1XPosition
_08055758:
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #1
_0805575E:
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x36
	ldrb r1, [r0]
	ldr r2, _0805578C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r1, r0, r2
	adds r2, r1, #0
	adds r2, #0x25
	ldrb r0, [r2]
	cmp r0, #0x15
	bne _08055786
	movs r0, #0x16
	strb r0, [r2]
	movs r0, #0x30
	strh r0, [r1, #0xc]
	movs r0, #0x40
	strh r0, [r1, #0x10]
_08055786:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805578C: .4byte gSpriteData

	thumb_func_start OmegaMetroidWalkingBackwards
OmegaMetroidWalkingBackwards: @ 0x08055790
	push {r4, r5, lr}
	ldr r4, _080557D4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	adds r5, r4, #0
	adds r5, #0x2d
	ldrb r0, [r5]
	cmp r0, #0
	beq _080557E4
	bl OmegaMetroidBackwardsMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805583C
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805583C
	ldr r0, _080557D8 @ =gSubSpriteData1
	ldr r1, _080557DC @ =0x08396908
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	ldrh r1, [r4]
	ldr r0, _080557E0 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r4]
	b _0805583C
	.align 2, 0
_080557D4: .4byte gCurrentSprite
_080557D8: .4byte gSubSpriteData1
_080557DC: .4byte 0x08396908
_080557E0: .4byte 0x0000FDFF
_080557E4:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805583C
	ldr r2, _0805580C @ =gSubSpriteData1
	ldrh r1, [r2, #0xc]
	cmp r1, #0
	bne _08055814
	ldr r0, _08055810 @ =0x08396858
	str r0, [r2]
	strb r1, [r2, #6]
	movs r0, #0
	strh r1, [r2, #4]
	adds r1, r4, #0
	adds r1, #0x2f
	strb r0, [r1]
	subs r1, #0xb
	movs r0, #0x44
	b _0805583A
	.align 2, 0
_0805580C: .4byte gSubSpriteData1
_08055810: .4byte 0x08396858
_08055814:
	ldr r0, _08055830 @ =gSamusData
	ldrb r0, [r0, #0xc]
	cmp r0, #0x3f
	bhi _08055834
	bl OmegaMetroidCheckSamusInFrontRange
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08055834
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	b _0805583A
	.align 2, 0
_08055830: .4byte gSamusData
_08055834:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x23
_0805583A:
	strb r0, [r1]
_0805583C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidDyingInit
OmegaMetroidDyingInit: @ 0x08055844
	push {r4, r5, lr}
	ldr r4, _08055884 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r5, #0
	movs r0, #1
	strb r0, [r1]
	bl OmegaMetroidFullBodyBlinking
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805587C
	ldr r0, _08055888 @ =gSubSpriteData1
	ldr r1, _0805588C @ =0x08396870
	str r1, [r0]
	strb r5, [r0, #6]
	strh r5, [r0, #4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, _08055890 @ =0x00000219
	bl SoundPlay
_0805587C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055884: .4byte gCurrentSprite
_08055888: .4byte gSubSpriteData1
_0805588C: .4byte 0x08396870
_08055890: .4byte 0x00000219

	thumb_func_start OmegaMetroidDying1
OmegaMetroidDying1: @ 0x08055894
	push {r4, lr}
	ldr r4, _080558D8 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl OmegaMetroidFullBodyBlinking
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _080558D2
	ldr r0, _080558DC @ =gSubSpriteData1
	ldr r1, _080558E0 @ =0x08396628
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x48
	strb r0, [r1]
	movs r0, #0x78
	strb r0, [r3]
	movs r0, #0
	bl FadeMusic
_080558D2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080558D8: .4byte gCurrentSprite
_080558DC: .4byte gSubSpriteData1
_080558E0: .4byte 0x08396628

	thumb_func_start OmegaMetroidDying2
OmegaMetroidDying2: @ 0x080558E4
	push {r4, r5, lr}
	ldr r4, _08055914 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x26
	movs r2, #1
	strb r2, [r0]
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	subs r1, r0, #1
	strb r1, [r5]
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3b
	bhi _08055918
	ands r1, r2
	cmp r1, #0
	beq _0805592A
	ldrh r0, [r4]
	movs r1, #4
	eors r0, r1
	strh r0, [r4]
	b _0805592A
	.align 2, 0
_08055914: .4byte gCurrentSprite
_08055918:
	bl OmegaMetroidFullBodyBlinking
	ldrb r0, [r5]
	cmp r0, #0x3c
	bne _0805592A
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
_0805592A:
	ldr r2, _08055968 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _0805594A
	ldrh r1, [r2]
	movs r0, #4
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x4a
	strb r0, [r1]
	movs r0, #0x1d
	strb r0, [r3]
_0805594A:
	ldrh r4, [r2, #2]
	ldrh r5, [r2, #4]
	ldrb r0, [r3]
	cmp r0, #0x40
	beq _080559FE
	cmp r0, #0x40
	bgt _08055976
	cmp r0, #0x10
	beq _08055A4A
	cmp r0, #0x10
	bgt _0805596C
	cmp r0, #0
	bne _08055966
	b _08055A66
_08055966:
	b _08055A80
	.align 2, 0
_08055968: .4byte gCurrentSprite
_0805596C:
	cmp r0, #0x20
	beq _08055A32
	cmp r0, #0x30
	beq _08055A16
	b _08055A80
_08055976:
	cmp r0, #0x60
	beq _080559D0
	cmp r0, #0x60
	bgt _08055984
	cmp r0, #0x50
	beq _080559E8
	b _08055A80
_08055984:
	cmp r0, #0x6b
	beq _080559B2
	cmp r0, #0x76
	bne _08055A80
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x1c
	movs r2, #0x25
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	adds r1, #0x34
	movs r2, #0x22
	bl ParticleSet
	movs r0, #0x87
	lsls r0, r0, #2
	bl unk_3b1c
	b _08055A80
_080559B2:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	subs r1, #0x24
	movs r2, #0x21
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	subs r1, #0x4c
	movs r2, #0x25
	bl ParticleSet
	b _08055A80
_080559D0:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	adds r1, #0x58
	movs r2, #0x25
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x20
	adds r1, r5, #0
	adds r1, #0x20
	b _08055A5E
_080559E8:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	subs r1, #0x48
	movs r2, #0x21
	bl ParticleSet
	adds r1, r5, #0
	adds r1, #0x1e
	adds r0, r4, #0
	b _08055A5E
_080559FE:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	adds r1, #0x10
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	subs r1, #0x34
	b _08055A2A
_08055A16:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	subs r1, #0x1c
	movs r2, #0x21
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x46
	adds r1, r5, #0
_08055A2A:
	movs r2, #0x22
	bl ParticleSet
	b _08055A80
_08055A32:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x24
	movs r2, #0x21
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	subs r1, #0x58
	b _08055A5E
_08055A4A:
	adds r0, r4, #0
	adds r0, #0x30
	adds r1, r5, #0
	subs r1, #0x4c
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
_08055A5E:
	movs r2, #0x2f
	bl ParticleSet
	b _08055A80
_08055A66:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	subs r1, #0x2a
	movs r2, #0x2f
	bl ParticleSet
	adds r1, r5, #0
	adds r1, #0x1e
	adds r0, r4, #0
	movs r2, #0x21
	bl ParticleSet
_08055A80:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroidDying3
OmegaMetroidDying3: @ 0x08055A88
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r1, _08055AB4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1b
	bhi _08055AB8
	ldrb r2, [r1]
	movs r0, #0xc4
	movs r1, #0
	bl SpriteLoadGfx
	b _08055AC6
	.align 2, 0
_08055AB4: .4byte gCurrentSprite
_08055AB8:
	cmp r0, #0x1c
	bne _08055AC6
	movs r0, #0xc4
	movs r1, #0
	movs r2, #7
	bl SpriteLoadPal
_08055AC6:
	ldr r5, _08055AFC @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r4, [r0]
	cmp r4, #0
	bne _08055AF4
	ldrh r1, [r5, #6]
	ldr r2, _08055B00 @ =0xFFFFFEC0
	adds r0, r2, #0
	ldrh r2, [r5, #8]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r1, [sp]
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0xc4
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SpriteSpawnPrimary
	strh r4, [r5]
_08055AF4:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055AFC: .4byte gCurrentSprite
_08055B00: .4byte 0xFFFFFEC0

	thumb_func_start OmegaMetroidPartInit
OmegaMetroidPartInit: @ 0x08055B04
	push {r4, lr}
	ldr r4, _08055B44 @ =gCurrentSprite
	ldrh r1, [r4]
	ldr r0, _08055B48 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #1
	strh r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0x16
	strb r0, [r1]
	subs r1, #1
	movs r0, #2
	strb r0, [r1]
	bl OmegaMetroidPartSetDrawOrder
	ldrb r0, [r4, #0x1e]
	cmp r0, #7
	bls _08055B3A
	b _08055CE0
_08055B3A:
	lsls r0, r0, #2
	ldr r1, _08055B4C @ =_08055B50
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08055B44: .4byte gCurrentSprite
_08055B48: .4byte 0x0000FFFB
_08055B4C: .4byte _08055B50
_08055B50: @ jump table
	.4byte _08055B70 @ case 0
	.4byte _08055B9C @ case 1
	.4byte _08055BD0 @ case 2
	.4byte _08055CE0 @ case 3
	.4byte _08055C04 @ case 4
	.4byte _08055C48 @ case 5
	.4byte _08055C7C @ case 6
	.4byte _08055CB0 @ case 7
_08055B70:
	ldr r2, _08055B94 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x28
	movs r1, #0x40
	strb r1, [r0]
	adds r3, r2, #0
	adds r3, #0x29
	movs r0, #0x28
	strb r0, [r3]
	ldr r0, _08055B98 @ =0x0000FFA0
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	adds r0, #0x38
	b _08055CD0
	.align 2, 0
_08055B94: .4byte gCurrentSprite
_08055B98: .4byte 0x0000FFA0
_08055B9C:
	ldr r2, _08055BC4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08055BC8 @ =0x0000FFC0
	strh r0, [r2, #0xa]
	movs r0, #0x40
	strh r0, [r2, #0xc]
	ldr r0, _08055BCC @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x20
	strh r0, [r2, #0x10]
	b _08055CE6
	.align 2, 0
_08055BC4: .4byte gCurrentSprite
_08055BC8: .4byte 0x0000FFC0
_08055BCC: .4byte 0x0000FFE0
_08055BD0:
	ldr r2, _08055BF8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x48
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	ldr r0, _08055BFC @ =0x0000FF20
	strh r0, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	ldr r0, _08055C00 @ =0x0000FFE0
	strh r0, [r2, #0xe]
	movs r0, #0x60
	strh r0, [r2, #0x10]
	b _08055CE6
	.align 2, 0
_08055BF8: .4byte gCurrentSprite
_08055BFC: .4byte 0x0000FF20
_08055C00: .4byte 0x0000FFE0
_08055C04:
	ldr r3, _08055C40 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #8
	strb r0, [r1]
	movs r2, #0
	ldr r1, _08055C44 @ =0x0000FFE0
	strh r1, [r3, #0xa]
	movs r0, #0x28
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	movs r0, #0x20
	strh r0, [r3, #0x10]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3]
	b _08055CE6
	.align 2, 0
_08055C40: .4byte gCurrentSprite
_08055C44: .4byte 0x0000FFE0
_08055C48:
	ldr r2, _08055C70 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08055C74 @ =0x0000FFD8
	strh r0, [r2, #0xa]
	movs r0, #0x30
	strh r0, [r2, #0xc]
	ldr r0, _08055C78 @ =0x0000FFA0
	strh r0, [r2, #0xe]
	movs r0, #0x40
	strh r0, [r2, #0x10]
	b _08055CE6
	.align 2, 0
_08055C70: .4byte gCurrentSprite
_08055C74: .4byte 0x0000FFD8
_08055C78: .4byte 0x0000FFA0
_08055C7C:
	ldr r0, _08055CA8 @ =gCurrentSprite
	mov ip, r0
	adds r0, #0x27
	movs r3, #0
	movs r2, #0x20
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x28
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	strb r2, [r0]
	ldr r0, _08055CAC @ =0x0000FFA0
	mov r1, ip
	strh r0, [r1, #0xa]
	strh r2, [r1, #0xc]
	strh r3, [r1, #0xe]
	movs r0, #0x80
	strh r0, [r1, #0x10]
	b _08055CE6
	.align 2, 0
_08055CA8: .4byte gCurrentSprite
_08055CAC: .4byte 0x0000FFA0
_08055CB0:
	ldr r2, _08055CD8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x27
	movs r0, #0x40
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	ldr r0, _08055CDC @ =0x0000FF80
	strh r0, [r2, #0xa]
	movs r1, #4
	strh r1, [r2, #0xc]
	adds r0, #0x28
_08055CD0:
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	b _08055CE6
	.align 2, 0
_08055CD8: .4byte gCurrentSprite
_08055CDC: .4byte 0x0000FF80
_08055CE0:
	ldr r1, _08055CF0 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08055CE6:
	bl OmagaMetroidSyncSubSPrites
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055CF0: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidPartIdle
OmegaMetroidPartIdle: @ 0x08055CF4
	push {r4, r5, r6, lr}
	ldr r2, _08055D18 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r4, [r0]
	ldr r1, _08055D1C @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r3, [r0]
	adds r0, r3, #0
	adds r6, r1, #0
	cmp r0, #0
	bne _08055D20
	strh r0, [r2]
	b _08055ED0
	.align 2, 0
_08055D18: .4byte gCurrentSprite
_08055D1C: .4byte gSpriteData
_08055D20:
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	beq _08055D3A
	ldrh r0, [r2]
	movs r1, #4
	orrs r1, r0
	strh r1, [r2]
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	b _08055D42
_08055D3A:
	ldrh r1, [r2]
	ldr r0, _08055D74 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
_08055D42:
	lsls r1, r4, #3
	subs r0, r1, r4
	lsls r0, r0, #3
	adds r3, r0, r6
	ldrh r0, [r3, #0x14]
	adds r5, r1, #0
	cmp r0, #0
	bne _08055D5C
	strh r0, [r2, #0x14]
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
_08055D5C:
	adds r0, r3, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #8
	cmp r0, #0x42
	bls _08055D6A
	b _08055ED0
_08055D6A:
	lsls r0, r0, #2
	ldr r1, _08055D78 @ =_08055D7C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08055D74: .4byte 0x0000FFFB
_08055D78: .4byte _08055D7C
_08055D7C: @ jump table
	.4byte _08055E88 @ case 0
	.4byte _08055ED0 @ case 1
	.4byte _08055ED0 @ case 2
	.4byte _08055ED0 @ case 3
	.4byte _08055ED0 @ case 4
	.4byte _08055ED0 @ case 5
	.4byte _08055ED0 @ case 6
	.4byte _08055E9C @ case 7
	.4byte _08055ED0 @ case 8
	.4byte _08055ED0 @ case 9
	.4byte _08055ED0 @ case 10
	.4byte _08055ED0 @ case 11
	.4byte _08055ED0 @ case 12
	.4byte _08055ED0 @ case 13
	.4byte _08055ED0 @ case 14
	.4byte _08055ED0 @ case 15
	.4byte _08055ED0 @ case 16
	.4byte _08055ED0 @ case 17
	.4byte _08055ED0 @ case 18
	.4byte _08055ED0 @ case 19
	.4byte _08055ED0 @ case 20
	.4byte _08055ED0 @ case 21
	.4byte _08055ED0 @ case 22
	.4byte _08055ED0 @ case 23
	.4byte _08055ED0 @ case 24
	.4byte _08055ED0 @ case 25
	.4byte _08055ED0 @ case 26
	.4byte _08055ED0 @ case 27
	.4byte _08055ED0 @ case 28
	.4byte _08055ED0 @ case 29
	.4byte _08055ED0 @ case 30
	.4byte _08055ED0 @ case 31
	.4byte _08055ED0 @ case 32
	.4byte _08055ED0 @ case 33
	.4byte _08055ED0 @ case 34
	.4byte _08055ED0 @ case 35
	.4byte _08055ED0 @ case 36
	.4byte _08055ED0 @ case 37
	.4byte _08055ED0 @ case 38
	.4byte _08055ED0 @ case 39
	.4byte _08055ED0 @ case 40
	.4byte _08055ED0 @ case 41
	.4byte _08055ED0 @ case 42
	.4byte _08055ED0 @ case 43
	.4byte _08055ED0 @ case 44
	.4byte _08055ED0 @ case 45
	.4byte _08055ED0 @ case 46
	.4byte _08055EA2 @ case 47
	.4byte _08055EB0 @ case 48
	.4byte _08055ED0 @ case 49
	.4byte _08055ED0 @ case 50
	.4byte _08055ED0 @ case 51
	.4byte _08055ED0 @ case 52
	.4byte _08055ED0 @ case 53
	.4byte _08055ED0 @ case 54
	.4byte _08055ED0 @ case 55
	.4byte _08055ED0 @ case 56
	.4byte _08055ED0 @ case 57
	.4byte _08055ED0 @ case 58
	.4byte _08055ED0 @ case 59
	.4byte _08055EC0 @ case 60
	.4byte _08055ED0 @ case 61
	.4byte _08055EC0 @ case 62
	.4byte _08055ED0 @ case 63
	.4byte _08055EC0 @ case 64
	.4byte _08055ED0 @ case 65
	.4byte _08055EC0 @ case 66
_08055E88:
	subs r0, r5, r4
	lsls r0, r0, #3
	adds r0, r0, r6
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #4
	bne _08055ED0
	bl OmegaMetroidPartSetDrawOrder_2
	b _08055ED0
_08055E9C:
	bl OmegaMetroidPartSetDrawOrder
	b _08055ED0
_08055EA2:
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r0, r3, #0
	orrs r0, r1
	strh r0, [r2]
	b _08055ED0
_08055EB0:
	ldrh r1, [r2]
	ldr r0, _08055EBC @ =0x0000DFFF
	ands r0, r1
	strh r0, [r2]
	b _08055ED0
	.align 2, 0
_08055EBC: .4byte 0x0000DFFF
_08055EC0:
	subs r0, r5, r4
	lsls r0, r0, #3
	adds r0, r0, r6
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_08055ED0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaMetroid
OmegaMetroid: @ 0x08055ED8
	push {lr}
	bl OmegaMetroidUpdateHeartPalette
	bl OmegaMetroidUpdateHealthThreshold
	ldr r0, _08055EF8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x4a
	bls _08055EEE
	b _0805610C
_08055EEE:
	lsls r0, r0, #2
	ldr r1, _08055EFC @ =_08055F00
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08055EF8: .4byte gCurrentSprite
_08055EFC: .4byte _08055F00
_08055F00: @ jump table
	.4byte _0805602C @ case 0
	.4byte _08056056 @ case 1
	.4byte _0805605A @ case 2
	.4byte _0805610C @ case 3
	.4byte _0805610C @ case 4
	.4byte _0805610C @ case 5
	.4byte _0805610C @ case 6
	.4byte _080560BC @ case 7
	.4byte _080560C0 @ case 8
	.4byte _080560D2 @ case 9
	.4byte _080560D8 @ case 10
	.4byte _080560C6 @ case 11
	.4byte _080560CC @ case 12
	.4byte _080560DE @ case 13
	.4byte _080560E4 @ case 14
	.4byte _080560EA @ case 15
	.4byte _080560F0 @ case 16
	.4byte _0805610C @ case 17
	.4byte _0805610C @ case 18
	.4byte _0805610C @ case 19
	.4byte _0805610C @ case 20
	.4byte _0805610C @ case 21
	.4byte _0805610C @ case 22
	.4byte _08056088 @ case 23
	.4byte _0805608C @ case 24
	.4byte _0805610C @ case 25
	.4byte _08056092 @ case 26
	.4byte _0805610C @ case 27
	.4byte _08056098 @ case 28
	.4byte _0805609E @ case 29
	.4byte _080560A2 @ case 30
	.4byte _08056074 @ case 31
	.4byte _08056078 @ case 32
	.4byte _08056060 @ case 33
	.4byte _08056064 @ case 34
	.4byte _0805606A @ case 35
	.4byte _0805606E @ case 36
	.4byte _0805607E @ case 37
	.4byte _08056082 @ case 38
	.4byte _0805610C @ case 39
	.4byte _0805610C @ case 40
	.4byte _080560A8 @ case 41
	.4byte _080560AC @ case 42
	.4byte _080560B2 @ case 43
	.4byte _080560B6 @ case 44
	.4byte _0805610C @ case 45
	.4byte _0805610C @ case 46
	.4byte _0805610C @ case 47
	.4byte _0805610C @ case 48
	.4byte _0805610C @ case 49
	.4byte _0805610C @ case 50
	.4byte _0805610C @ case 51
	.4byte _0805610C @ case 52
	.4byte _0805610C @ case 53
	.4byte _0805610C @ case 54
	.4byte _08056032 @ case 55
	.4byte _08056038 @ case 56
	.4byte _0805610C @ case 57
	.4byte _0805603E @ case 58
	.4byte _0805610C @ case 59
	.4byte _08056044 @ case 60
	.4byte _0805610C @ case 61
	.4byte _0805604A @ case 62
	.4byte _0805610C @ case 63
	.4byte _08056050 @ case 64
	.4byte _0805610C @ case 65
	.4byte _0805610C @ case 66
	.4byte _0805610C @ case 67
	.4byte _080560F6 @ case 68
	.4byte _0805610C @ case 69
	.4byte _080560FC @ case 70
	.4byte _0805610C @ case 71
	.4byte _08056102 @ case 72
	.4byte _0805610C @ case 73
	.4byte _08056108 @ case 74
_0805602C:
	bl OmegaMetroidInit
	b _0805610C
_08056032:
	bl OmegaMetroidWaitingToAppear
	b _0805610C
_08056038:
	bl OmegaMetroidFirstJump
	b _0805610C
_0805603E:
	bl OmegaMetroidLandingFromFirstJump
	b _0805610C
_08056044:
	bl OmegaMetroidLandedAfterFirstJump
	b _0805610C
_0805604A:
	bl OmegaMetroidScreamingAfterFirstJump
	b _0805610C
_08056050:
	bl OmegaMetroidFinishedScreamingAfterFirstJump
	b _0805610C
_08056056:
	bl OmegaMetroidWalkingBeforeSA_XInit
_0805605A:
	bl OmegaMetroidWalkingBeforeSA_X
	b _0805610C
_08056060:
	bl OmegaMetroidSlowWalkInit
_08056064:
	bl OmegaMetroidSlowWalk
	b _0805610C
_0805606A:
	bl OmegaMetroidWalkInit
_0805606E:
	bl OmegaMetroidWalk
	b _0805610C
_08056074:
	bl OmegaMetroidIdleInit
_08056078:
	bl OmegaMetroidIdle
	b _0805610C
_0805607E:
	bl OmegaMetroidWalkingBackwardsInit
_08056082:
	bl OmegaMetroidWalkingBackwards
	b _0805610C
_08056088:
	bl OmegaMetroidJumpWarningInit
_0805608C:
	bl OmegaMetroidJumpWarning
	b _0805610C
_08056092:
	bl OmegaMetroidJumping
	b _0805610C
_08056098:
	bl OmegaMEtroidFalling
	b _0805610C
_0805609E:
	bl OmegaMetroidLandingInit
_080560A2:
	bl OmegaMetroidLanding
	b _0805610C
_080560A8:
	bl OmegaMetroidSwipingInit
_080560AC:
	bl OmegaMetroidSwiping
	b _0805610C
_080560B2:
	bl OmegaMetroidVerticalJumpInit
_080560B6:
	bl OmegaMetroidVerticalJump
	b _0805610C
_080560BC:
	bl OmegaMetroidWaitingForSA_XInit
_080560C0:
	bl OmegaMetroidWaitingForSA_X
	b _0805610C
_080560C6:
	bl OmegaMetroidWatchingSA_X
	b _0805610C
_080560CC:
	bl OmegaMetroidDamagedBySA_X
	b _0805610C
_080560D2:
	bl OmegaMetroidWalkingBackwardsFromSA_X
	b _0805610C
_080560D8:
	bl OmegaMetroidDamagedBySA_X2
	b _0805610C
_080560DE:
	bl OmegaMetroidWaitingToSwipeSA_X
	b _0805610C
_080560E4:
	bl OmegaMEtroidSwipingSA_X
	b _0805610C
_080560EA:
	bl OmegaMetroidKilledSA_X
	b _0805610C
_080560F0:
	bl OmegaMetroidScreamingAfterIceBeamObtained
	b _0805610C
_080560F6:
	bl OmegaMetroidDyingInit
	b _0805610C
_080560FC:
	bl OmegaMetroidDying1
	b _0805610C
_08056102:
	bl OmegaMetroidDying2
	b _0805610C
_08056108:
	bl OmegaMetroidDying3
_0805610C:
	bl UpdateSubSpriteData1Animation
	bl OmagaMetroidSyncSubSPrites
	bl OmegaMetroidUpdatePalette
	pop {r0}
	bx r0

	thumb_func_start OmegaMetroidPart
OmegaMetroidPart: @ 0x0805611C
	push {lr}
	ldr r0, _08056130 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _08056134
	bl OmegaMetroidPartInit
	b _0805613C
	.align 2, 0
_08056130: .4byte gCurrentSprite
_08056134:
	bl OmegaMetroidPartIdle
	bl OmagaMetroidSyncSubSPrites
_0805613C:
	pop {r0}
	bx r0

	thumb_func_start GunshipEndSpawnBeams
GunshipEndSpawnBeams: @ 0x08056140
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r0, _08056170 @ =gCurrentSprite
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r2, #0
	ldrh r2, [r0, #2]
	adds r1, r1, r2
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	ldrh r5, [r0, #4]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	subs r1, #6
	adds r3, r0, #0
	cmp r1, #0xf
	bls _08056166
	b _08056270
_08056166:
	lsls r0, r1, #2
	ldr r1, _08056174 @ =_08056178
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08056170: .4byte gCurrentSprite
_08056174: .4byte _08056178
_08056178: @ jump table
	.4byte _080561B8 @ case 0
	.4byte _08056270 @ case 1
	.4byte _08056270 @ case 2
	.4byte _080561DC @ case 3
	.4byte _08056270 @ case 4
	.4byte _08056270 @ case 5
	.4byte _080561FA @ case 6
	.4byte _08056270 @ case 7
	.4byte _08056270 @ case 8
	.4byte _08056218 @ case 9
	.4byte _08056270 @ case 10
	.4byte _08056270 @ case 11
	.4byte _08056236 @ case 12
	.4byte _08056270 @ case 13
	.4byte _08056270 @ case 14
	.4byte _08056254 @ case 15
_080561B8:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0xcc
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x79
	movs r1, #0
	bl SpriteSpawnSecondary
	movs r0, #0xfd
	bl SoundPlay
	b _08056270
_080561DC:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0xb0
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x79
	movs r1, #1
	bl SpriteSpawnSecondary
	b _08056270
_080561FA:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x98
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x79
	movs r1, #3
	bl SpriteSpawnSecondary
	b _08056270
_08056218:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x80
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x79
	movs r1, #5
	bl SpriteSpawnSecondary
	b _08056270
_08056236:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x68
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x79
	movs r1, #7
	bl SpriteSpawnSecondary
	b _08056270
_08056254:
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r0, r4, #0
	subs r0, #0x50
	str r0, [sp]
	str r5, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x79
	movs r1, #9
	bl SpriteSpawnSecondary
_08056270:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start GunshipEndInit
GunshipEndInit: @ 0x08056278
	push {r4, lr}
	ldr r0, _080562F4 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r1, _080562F8 @ =0x0000FFFB
	ands r1, r0
	movs r2, #0
	movs r3, #0
	mov r4, ip
	adds r4, #0x22
	movs r0, #0xc
	strb r0, [r4]
	subs r4, #1
	movs r0, #3
	strb r0, [r4]
	movs r0, #8
	orrs r1, r0
	mov r4, ip
	strh r1, [r4]
	movs r0, #0x90
	strh r0, [r4, #0x12]
	mov r0, ip
	adds r0, #0x2b
	strb r2, [r0]
	adds r0, #6
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	subs r1, #7
	movs r0, #0x7f
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x40
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xb0
	strb r0, [r1]
	ldr r1, _080562FC @ =0x0000FFFC
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08056300 @ =0x0839EC68
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080562F4: .4byte gCurrentSprite
_080562F8: .4byte 0x0000FFFB
_080562FC: .4byte 0x0000FFFC
_08056300: .4byte 0x0839EC68

	thumb_func_start GunshipEndWaiting
GunshipEndWaiting: @ 0x08056304
	push {r4, lr}
	ldr r1, _08056334 @ =gCurrentSprite
	adds r4, r1, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805632C
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	movs r0, #0x5b
	movs r1, #0xe
	bl PlayMusic
	movs r0, #0x1e
	strb r0, [r4]
_0805632C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056334: .4byte gCurrentSprite

	thumb_func_start GunshipEndMovingUp
GunshipEndMovingUp: @ 0x08056338
	push {r4, lr}
	ldr r0, _08056374 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08056356
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08056356
	ldr r0, _08056378 @ =0x00000249
	bl unk_3b1c
_08056356:
	movs r4, #0
	ldr r3, _08056374 @ =gCurrentSprite
	ldrh r2, [r3, #4]
	lsrs r0, r2, #2
	ldr r1, _0805637C @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x6f
	bhi _08056380
	adds r0, r2, #1
	strh r0, [r3, #4]
	b _0805638C
	.align 2, 0
_08056374: .4byte gCurrentSprite
_08056378: .4byte 0x00000249
_0805637C: .4byte gBg1XPosition
_08056380:
	cmp r0, #0x80
	bls _0805638A
	subs r0, r2, #1
	strh r0, [r3, #4]
	b _0805638C
_0805638A:
	movs r4, #1
_0805638C:
	ldrh r2, [r3, #2]
	lsrs r0, r2, #2
	ldr r1, _080563A8 @ =gBg1YPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x2b
	bhi _080563AC
	adds r0, r2, #1
	strh r0, [r3, #2]
	b _080563BC
	.align 2, 0
_080563A8: .4byte gBg1YPosition
_080563AC:
	cmp r0, #0x3c
	bls _080563B6
	subs r0, r2, #1
	strh r0, [r3, #2]
	b _080563BC
_080563B6:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080563BC:
	cmp r4, #1
	bls _080563E0
	adds r1, r3, #0
	adds r1, #0x21
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r1, #3
	movs r0, #0x17
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r0, #1
	strb r2, [r0]
_080563E0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipEndWaitingToEnter
GunshipEndWaitingToEnter: @ 0x080563E8
	push {r4, r5, r6, lr}
	ldr r3, _08056438 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r5, _0805643C @ =0x0839AAE0
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08056440 @ =0x00007FFF
	cmp r1, r0
	bne _0805640A
	ldrh r4, [r5]
	movs r2, #0
_0805640A:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r4
	strh r0, [r3, #2]
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08056432
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	movs r0, #0
	strb r0, [r2]
_08056432:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08056438: .4byte gCurrentSprite
_0805643C: .4byte 0x0839AAE0
_08056440: .4byte 0x00007FFF

	thumb_func_start GunshipEndEntering
GunshipEndEntering: @ 0x08056444
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r0, _080564B0 @ =gCurrentSprite
	mov ip, r0
	movs r1, #0x31
	add r1, ip
	mov r8, r1
	ldrb r2, [r1]
	ldr r4, _080564B4 @ =0x0839AAE0
	lsls r0, r2, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r5, #0
	ldrsh r1, [r0, r5]
	ldr r0, _080564B8 @ =0x00007FFF
	cmp r1, r0
	bne _0805646E
	ldrh r3, [r4]
	movs r2, #0
_0805646E:
	adds r0, r2, #1
	movs r7, #0
	mov r6, r8
	strb r0, [r6]
	mov r1, ip
	ldrh r0, [r1, #2]
	adds r4, r0, r3
	movs r5, #0
	strh r4, [r1, #2]
	ldr r2, _080564BC @ =0x0839AC90
	mov r6, ip
	adds r6, #0x2e
	ldrb r3, [r6]
	lsls r1, r3, #0x18
	lsrs r0, r1, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	mov r2, ip
	strh r0, [r2, #0x12]
	lsrs r1, r1, #0x18
	cmp r1, #0x6f
	bhi _080564C0
	adds r0, r3, #1
	strb r0, [r6]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08056576
	adds r0, r4, #1
	strh r0, [r2, #2]
	b _08056576
	.align 2, 0
_080564B0: .4byte gCurrentSprite
_080564B4: .4byte 0x0839AAE0
_080564B8: .4byte 0x00007FFF
_080564BC: .4byte 0x0839AC90
_080564C0:
	mov r3, ip
	ldrh r1, [r3]
	ldr r0, _08056584 @ =0x0000FFF7
	ands r0, r1
	strh r0, [r3]
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _08056588 @ =0x0839EB48
	str r0, [r3, #0x18]
	strb r5, [r3, #0x1c]
	strh r7, [r3, #0x16]
	mov r0, ip
	adds r0, #0x2f
	strb r5, [r0]
	adds r1, #0x10
	ldrb r0, [r1]
	movs r4, #1
	orrs r0, r4
	strb r0, [r1]
	ldrb r1, [r3, #0x1e]
	ldrb r2, [r3, #0x1f]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	mov r6, ip
	ldrh r0, [r6, #2]
	str r0, [sp]
	ldrh r0, [r6, #4]
	str r0, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x7a
	bl SpriteSpawnSecondary
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r1, r8
	strb r0, [r1]
	ldr r2, _0805658C @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r3, r1, r2
	mov ip, r3
	ldrh r3, [r3]
	ldr r0, _08056590 @ =0x0000FFFB
	ands r0, r3
	mov r6, ip
	strh r0, [r6]
	adds r2, #0x18
	adds r1, r1, r2
	ldr r0, _08056594 @ =0x0839EC30
	str r0, [r1]
	strb r5, [r6, #0x1c]
	strh r7, [r6, #0x16]
	mov r1, ip
	adds r1, #0x34
	ldrb r0, [r1]
	orrs r0, r4
	strb r0, [r1]
	subs r1, #0x12
	movs r0, #0xe
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r5, [r0]
	adds r0, #2
	movs r2, #4
	strb r2, [r0]
	adds r1, #6
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x30
	strb r0, [r1]
	ldr r0, _08056598 @ =0x0000FFFC
	strh r0, [r6, #0xa]
	strh r2, [r6, #0xc]
	strh r0, [r6, #0xe]
	strh r2, [r6, #0x10]
	subs r1, #5
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2e
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
_08056576:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08056584: .4byte 0x0000FFF7
_08056588: .4byte 0x0839EB48
_0805658C: .4byte gSpriteData
_08056590: .4byte 0x0000FFFB
_08056594: .4byte 0x0839EC30
_08056598: .4byte 0x0000FFFC

	thumb_func_start GunshipEndWaitingForSamus
GunshipEndWaitingForSamus: @ 0x0805659C
	push {r4, r5, lr}
	ldr r4, _080565B4 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0x23
	bhi _080565B8
	adds r0, #1
	strb r0, [r1]
	bl GunshipEndSpawnBeams
	b _08056638
	.align 2, 0
_080565B4: .4byte gCurrentSprite
_080565B8:
	ldrh r2, [r4, #4]
	adds r0, r2, #0
	subs r0, #0x20
	ldr r5, _08056624 @ =gSamusData
	ldrh r1, [r5, #0x16]
	cmp r0, r1
	bge _08056630
	adds r0, #0x40
	cmp r0, r1
	ble _08056630
	ldrh r1, [r5, #0x18]
	ldr r0, _08056628 @ =0x000002BF
	cmp r1, r0
	bne _08056630
	bl SamusCheckMorphed
	adds r1, r0, #0
	cmp r1, #0
	bne _08056630
	ldrb r0, [r5, #5]
	cmp r0, #0
	beq _080565E6
	strb r1, [r5, #5]
_080565E6:
	ldr r1, _0805662C @ =0x0828FD04
	ldrb r0, [r5]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0x20
	bl _call_via_r1
	movs r1, #0x90
	lsls r1, r1, #1
	adds r0, r1, #0
	ldrh r1, [r4, #2]
	adds r0, r0, r1
	strh r0, [r5, #0x18]
	ldrh r0, [r4, #4]
	strh r0, [r5, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	subs r1, #0xc
	movs r0, #4
	strb r0, [r1]
	movs r0, #0x6d
	bl EventCheckAdvance
	b _08056638
	.align 2, 0
_08056624: .4byte gSamusData
_08056628: .4byte 0x000002BF
_0805662C: .4byte 0x0828FD04
_08056630:
	ldr r0, _08056640 @ =gCurrentSprite
	adds r0, #0x22
	movs r1, #0xc
	strb r1, [r0]
_08056638:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056640: .4byte gCurrentSprite

	thumb_func_start GunshipEndLockingSamus
GunshipEndLockingSamus: @ 0x08056644
	push {lr}
	ldr r1, _08056668 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08056664
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #0x38
	strb r1, [r0]
	movs r0, #0x3b
	strb r0, [r2]
_08056664:
	pop {r0}
	bx r0
	.align 2, 0
_08056668: .4byte gCurrentSprite

	thumb_func_start GunshipEndMovingSamusUp
GunshipEndMovingSamusUp: @ 0x0805666C
	push {lr}
	ldr r1, _08056690 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08056698
	adds r1, #0x24
	movs r0, #0x39
	strb r0, [r1]
	ldr r1, _08056694 @ =gDisableDrawingSamusAndScrollingFlag
	movs r0, #1
	strb r0, [r1]
	b _080566A0
	.align 2, 0
_08056690: .4byte gCurrentSprite
_08056694: .4byte gDisableDrawingSamusAndScrollingFlag
_08056698:
	ldr r1, _080566A4 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #4
	strh r0, [r1, #0x18]
_080566A0:
	pop {r0}
	bx r0
	.align 2, 0
_080566A4: .4byte gSamusData

	thumb_func_start GunshipEndStartingEngine1
GunshipEndStartingEngine1: @ 0x080566A8
	push {r4, r5, r6, lr}
	ldr r4, _08056718 @ =gCurrentSprite
	adds r6, r4, #0
	adds r6, #0x31
	ldrb r5, [r6]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08056712
	adds r1, r4, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x3a
	strb r0, [r1]
	ldr r0, _0805671C @ =0x0839EC68
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	movs r2, #0
	strh r3, [r4, #0x16]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	strb r2, [r6]
	ldrh r0, [r4]
	movs r1, #8
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	adds r0, #0x2b
	strb r2, [r0]
	ldr r1, _08056720 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	strh r3, [r0]
	ldr r0, _08056724 @ =0x082F474E
	ldr r1, _08056728 @ =0x040000D4
	str r0, [r1]
	ldr r0, _0805672C @ =0x05000336
	str r0, [r1, #4]
	ldr r0, _08056730 @ =0x80000005
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	ldr r0, _08056734 @ =0x0000024A
	bl unk_3b1c
_08056712:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08056718: .4byte gCurrentSprite
_0805671C: .4byte 0x0839EC68
_08056720: .4byte gSpriteData
_08056724: .4byte 0x082F474E
_08056728: .4byte 0x040000D4
_0805672C: .4byte 0x05000336
_08056730: .4byte 0x80000005
_08056734: .4byte 0x0000024A

	thumb_func_start GunshipEndStartingEngine2
GunshipEndStartingEngine2: @ 0x08056738
	push {r4, r5, r6, lr}
	ldr r2, _08056794 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _08056798 @ =0x0839ABC4
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0805679C @ =0x00007FFF
	cmp r1, r0
	bne _0805675A
	ldrh r4, [r5]
	movs r3, #0
_0805675A:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
	movs r4, #0
	strh r0, [r2, #2]
	adds r5, r2, #0
	adds r5, #0x2f
	ldrb r1, [r5]
	cmp r1, #0
	bne _080567A4
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080567FE
	ldr r0, _080567A0 @ =0x0839EC08
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r1, [r2, #0x16]
	movs r0, #0x3c
	strb r0, [r3]
	movs r0, #1
	strb r0, [r5]
	b _080567FE
	.align 2, 0
_08056794: .4byte gCurrentSprite
_08056798: .4byte 0x0839ABC4
_0805679C: .4byte 0x00007FFF
_080567A0: .4byte 0x0839EC08
_080567A4:
	cmp r1, #1
	bne _080567D0
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	bne _080567FE
	ldr r0, _080567CC @ =0x0839EC78
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r1, [r2, #0x16]
	movs r0, #0x5a
	strb r0, [r3]
	movs r0, #2
	strb r0, [r5]
	b _080567FE
	.align 2, 0
_080567CC: .4byte 0x0839EC78
_080567D0:
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080567FE
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3b
	strb r0, [r1]
	strb r4, [r3]
	strb r4, [r5]
	adds r0, r2, #0
	adds r0, #0x30
	strb r4, [r0]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #7
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
_080567FE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start GunshipEndTakingOff
GunshipEndTakingOff: @ 0x08056804
	push {lr}
	ldr r1, _08056828 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r2, [r3]
	adds r0, r2, #0
	cmp r0, #0x3f
	bls _0805682C
	ldrh r0, [r1, #2]
	subs r0, #8
	strh r0, [r1, #2]
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	bl unk_6df04
	b _0805685A
	.align 2, 0
_08056828: .4byte gCurrentSprite
_0805682C:
	cmp r0, #0x37
	bls _0805683A
	ldrh r0, [r1, #2]
	subs r0, #8
	strh r0, [r1, #2]
	adds r0, r2, #4
	b _08056858
_0805683A:
	cmp r0, #0x2f
	bls _08056848
	ldrh r0, [r1, #2]
	subs r0, #2
	strh r0, [r1, #2]
	adds r0, r2, #4
	b _08056858
_08056848:
	cmp r0, #0x1f
	bls _08056856
	ldrh r0, [r1, #2]
	subs r0, #1
	strh r0, [r1, #2]
	adds r0, r2, #2
	b _08056858
_08056856:
	adds r0, r2, #1
_08056858:
	strb r0, [r3]
_0805685A:
	ldr r3, _0805688C @ =gCurrentSprite
	ldr r1, _08056890 @ =0x0839ACD0
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r3, #0x12]
	ldrb r0, [r2]
	cmp r0, #0x1f
	bls _08056886
	subs r0, #0x20
	asrs r0, r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _08056894 @ =0x0839AC84
	adds r0, r0, r1
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x2b
	strb r1, [r0]
_08056886:
	pop {r0}
	bx r0
	.align 2, 0
_0805688C: .4byte gCurrentSprite
_08056890: .4byte 0x0839ACD0
_08056894: .4byte 0x0839AC84

	thumb_func_start GunshipEndDone
GunshipEndDone: @ 0x08056898
	bx lr
	.align 2, 0

	thumb_func_start GunshipEndBottomIdle
GunshipEndBottomIdle: @ 0x0805689C
	push {lr}
	ldr r2, _080568E0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	movs r0, #7
	ands r1, r0
	cmp r1, #0
	bne _0805690C
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	lsls r0, r0, #5
	ldr r1, _080568E4 @ =0x082F474E
	adds r0, r0, r1
	ldr r1, _080568E8 @ =0x040000D4
	str r0, [r1]
	ldr r0, _080568EC @ =0x05000336
	str r0, [r1, #4]
	ldr r0, _080568F0 @ =0x80000005
	str r0, [r1, #8]
	ldr r0, [r1, #8]
	adds r2, #0x2f
	ldrb r0, [r2]
	cmp r0, #0
	beq _080568FA
	ldrb r0, [r3]
	adds r1, r0, #0
	cmp r1, #0
	beq _080568F4
	subs r0, #1
	b _0805690A
	.align 2, 0
_080568E0: .4byte gCurrentSprite
_080568E4: .4byte 0x082F474E
_080568E8: .4byte 0x040000D4
_080568EC: .4byte 0x05000336
_080568F0: .4byte 0x80000005
_080568F4:
	strb r1, [r2]
	movs r0, #1
	b _0805690A
_080568FA:
	ldrb r0, [r3]
	cmp r0, #5
	bls _08056908
	movs r0, #1
	strb r0, [r2]
	movs r0, #5
	b _0805690A
_08056908:
	adds r0, #1
_0805690A:
	strb r0, [r3]
_0805690C:
	pop {r0}
	bx r0

	thumb_func_start GunshiEndpBeamInit
GunshiEndpBeamInit: @ 0x08056910
	push {r4, lr}
	ldr r0, _08056974 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08056978 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #1
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	adds r0, #2
	movs r1, #4
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r2, #0xb
	movs r0, #0x10
	strb r0, [r2]
	ldr r0, _0805697C @ =0x0000FFFC
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	ldr r0, _08056980 @ =0x0839EBB8
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	subs r1, #2
	movs r0, #0xd
	strb r0, [r1]
	adds r1, #0xc
	movs r0, #9
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056974: .4byte gCurrentSprite
_08056978: .4byte 0x0000FFFB
_0805697C: .4byte 0x0000FFFC
_08056980: .4byte 0x0839EBB8

	thumb_func_start GunshipEndBeamMovingDown
GunshipEndBeamMovingDown: @ 0x08056984
	push {lr}
	ldr r1, _080569A4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrb r0, [r1, #0x1e]
	adds r2, r1, #0
	cmp r0, #0
	beq _080569A8
	subs r0, #1
	strb r0, [r2, #0x1e]
	ldrh r0, [r2, #2]
	adds r0, #4
	strh r0, [r2, #2]
	b _080569EA
	.align 2, 0
_080569A4: .4byte gCurrentSprite
_080569A8:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080569C0
	ldrh r0, [r2, #2]
	adds r0, #4
	strh r0, [r2, #2]
	b _080569CA
_080569C0:
	ldrh r0, [r2, #2]
	subs r0, #0x20
	strh r0, [r2, #2]
	movs r0, #9
	strb r0, [r1]
_080569CA:
	ldr r0, _080569F0 @ =gSpriteData
	lsls r1, r3, #3
	subs r1, r1, r3
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x37
	bne _080569EA
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #2
	movs r0, #5
	strb r0, [r1]
_080569EA:
	pop {r0}
	bx r0
	.align 2, 0
_080569F0: .4byte gSpriteData

	thumb_func_start GunshipEndBeamMovingUp
GunshipEndBeamMovingUp: @ 0x080569F4
	push {r4, lr}
	ldr r1, _08056A1C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r4, [r0]
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r3, r1, #0
	cmp r0, #8
	bls _08056A20
	movs r0, #0
	strb r0, [r2]
	ldrh r0, [r3, #2]
	adds r0, #0x20
	b _08056A24
	.align 2, 0
_08056A1C: .4byte gCurrentSprite
_08056A20:
	ldrh r0, [r3, #2]
	subs r0, #4
_08056A24:
	strh r0, [r3, #2]
	ldr r0, _08056A44 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x39
	bne _08056A3C
	movs r0, #0
	strh r0, [r3]
_08056A3C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056A44: .4byte gSpriteData

	thumb_func_start GunshipEnd
GunshipEnd: @ 0x08056A48
	push {lr}
	ldr r0, _08056A68 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _08056A5E
	b _08056BAA
_08056A5E:
	lsls r0, r0, #2
	ldr r1, _08056A6C @ =_08056A70
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08056A68: .4byte gCurrentSprite
_08056A6C: .4byte _08056A70
_08056A70: @ jump table
	.4byte _08056B64 @ case 0
	.4byte _08056B6A @ case 1
	.4byte _08056B70 @ case 2
	.4byte _08056BAA @ case 3
	.4byte _08056BAA @ case 4
	.4byte _08056BAA @ case 5
	.4byte _08056BAA @ case 6
	.4byte _08056BAA @ case 7
	.4byte _08056BAA @ case 8
	.4byte _08056BAA @ case 9
	.4byte _08056BAA @ case 10
	.4byte _08056BAA @ case 11
	.4byte _08056BAA @ case 12
	.4byte _08056BAA @ case 13
	.4byte _08056BAA @ case 14
	.4byte _08056BAA @ case 15
	.4byte _08056BAA @ case 16
	.4byte _08056BAA @ case 17
	.4byte _08056BAA @ case 18
	.4byte _08056BAA @ case 19
	.4byte _08056BAA @ case 20
	.4byte _08056BAA @ case 21
	.4byte _08056BAA @ case 22
	.4byte _08056B76 @ case 23
	.4byte _08056B7C @ case 24
	.4byte _08056BAA @ case 25
	.4byte _08056B82 @ case 26
	.4byte _08056BAA @ case 27
	.4byte _08056BAA @ case 28
	.4byte _08056BAA @ case 29
	.4byte _08056BAA @ case 30
	.4byte _08056BAA @ case 31
	.4byte _08056BAA @ case 32
	.4byte _08056BAA @ case 33
	.4byte _08056BAA @ case 34
	.4byte _08056BAA @ case 35
	.4byte _08056BAA @ case 36
	.4byte _08056BAA @ case 37
	.4byte _08056BAA @ case 38
	.4byte _08056BAA @ case 39
	.4byte _08056BAA @ case 40
	.4byte _08056BAA @ case 41
	.4byte _08056BAA @ case 42
	.4byte _08056BAA @ case 43
	.4byte _08056BAA @ case 44
	.4byte _08056BAA @ case 45
	.4byte _08056BAA @ case 46
	.4byte _08056BAA @ case 47
	.4byte _08056BAA @ case 48
	.4byte _08056BAA @ case 49
	.4byte _08056BAA @ case 50
	.4byte _08056BAA @ case 51
	.4byte _08056BAA @ case 52
	.4byte _08056BAA @ case 53
	.4byte _08056BAA @ case 54
	.4byte _08056B88 @ case 55
	.4byte _08056B8E @ case 56
	.4byte _08056B94 @ case 57
	.4byte _08056B9A @ case 58
	.4byte _08056BA0 @ case 59
	.4byte _08056BA6 @ case 60
_08056B64:
	bl GunshipEndInit
	b _08056BAA
_08056B6A:
	bl GunshipEndWaiting
	b _08056BAA
_08056B70:
	bl GunshipEndMovingUp
	b _08056BAA
_08056B76:
	bl GunshipEndWaitingToEnter
	b _08056BAA
_08056B7C:
	bl GunshipEndEntering
	b _08056BAA
_08056B82:
	bl GunshipEndWaitingForSamus
	b _08056BAA
_08056B88:
	bl GunshipEndLockingSamus
	b _08056BAA
_08056B8E:
	bl GunshipEndMovingSamusUp
	b _08056BAA
_08056B94:
	bl GunshipEndStartingEngine1
	b _08056BAA
_08056B9A:
	bl GunshipEndStartingEngine2
	b _08056BAA
_08056BA0:
	bl GunshipEndTakingOff
	b _08056BAA
_08056BA6:
	bl GunshipEndDone
_08056BAA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GunshipEndBottom
GunshipEndBottom: @ 0x08056BB0
	push {lr}
	ldr r0, _08056BCC @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	bne _08056BC8
	bl GunshipEndBottomIdle
_08056BC8:
	pop {r0}
	bx r0
	.align 2, 0
_08056BCC: .4byte gCurrentSprite

	thumb_func_start GunshipEndBeam
GunshipEndBeam: @ 0x08056BD0
	push {lr}
	ldr r0, _08056BF0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08056BFE
	cmp r0, #2
	bgt _08056BF4
	cmp r0, #0
	beq _08056BFA
	b _08056C08
	.align 2, 0
_08056BF0: .4byte gCurrentSprite
_08056BF4:
	cmp r0, #0x18
	beq _08056C04
	b _08056C08
_08056BFA:
	bl GunshiEndpBeamInit
_08056BFE:
	bl GunshipEndBeamMovingDown
	b _08056C08
_08056C04:
	bl GunshipEndBeamMovingUp
_08056C08:
	ldr r1, _08056C20 @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	bne _08056C1C
	ldrh r0, [r1]
	cmp r0, #0
	bne _08056C1C
	movs r0, #0xfd
	bl StopSound
_08056C1C:
	pop {r0}
	bx r0
	.align 2, 0
_08056C20: .4byte gCurrentSprite

	thumb_func_start ElectricWaterDamageBox2Init
ElectricWaterDamageBox2Init: @ 0x08056C24
	push {r4, lr}
	ldr r0, _08056C78 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	movs r0, #4
	movs r2, #0
	movs r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #0x27
	movs r0, #0x30
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _08056C7C @ =0x0000FF80
	mov r4, ip
	strh r0, [r4, #0xa]
	movs r1, #0x20
	strh r1, [r4, #0xc]
	adds r0, #0x60
	strh r0, [r4, #0xe]
	strh r1, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _08056C80 @ =0x0839F658
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056C78: .4byte gCurrentSprite
_08056C7C: .4byte 0x0000FF80
_08056C80: .4byte 0x0839F658

	thumb_func_start ElectricWaterDamageBox2Idle
ElectricWaterDamageBox2Idle: @ 0x08056C84
	push {lr}
	ldr r2, _08056CA8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08056CAC @ =0x03001346
	ldrb r0, [r0]
	cmp r0, #0
	beq _08056CA4
	subs r1, #2
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0
	strb r0, [r1]
_08056CA4:
	pop {r0}
	bx r0
	.align 2, 0
_08056CA8: .4byte gCurrentSprite
_08056CAC: .4byte 0x03001346

	thumb_func_start ElectricWaterDamageBox2DamagingSamus
ElectricWaterDamageBox2DamagingSamus: @ 0x08056CB0
	push {lr}
	ldr r2, _08056CDC @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _08056CE0 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	ldr r1, _08056CE4 @ =gSamusData
	ldrh r0, [r1, #0x18]
	strh r0, [r2, #2]
	ldrh r0, [r1, #0x16]
	strh r0, [r2, #4]
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08056CE8
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0xb
	b _08056CEE
	.align 2, 0
_08056CDC: .4byte gCurrentSprite
_08056CE0: .4byte 0x0000FFFB
_08056CE4: .4byte gSamusData
_08056CE8:
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0
_08056CEE:
	strb r0, [r1]
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, _08056D1C @ =0x03001346
	ldrb r3, [r0]
	cmp r3, #0
	bne _08056D18
	subs r1, #0xa
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _08056D20 @ =0x0839F6C8
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	movs r1, #0
	strh r3, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x25
	strb r1, [r0]
_08056D18:
	pop {r0}
	bx r0
	.align 2, 0
_08056D1C: .4byte 0x03001346
_08056D20: .4byte 0x0839F6C8

	thumb_func_start ElectricWaterDamageBox2Stopping
ElectricWaterDamageBox2Stopping: @ 0x08056D24
	push {r4, r5, lr}
	ldr r4, _08056D6C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r1, _08056D70 @ =gSamusData
	ldrh r0, [r1, #0x18]
	movs r5, #0
	strh r0, [r4, #2]
	ldrh r0, [r1, #0x16]
	strh r0, [r4, #4]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08056D64
	ldrh r0, [r4]
	movs r1, #4
	orrs r0, r1
	strh r0, [r4]
	ldr r0, _08056D74 @ =0x0839F658
	str r0, [r4, #0x18]
	strb r5, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x25
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
_08056D64:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056D6C: .4byte gCurrentSprite
_08056D70: .4byte gSamusData
_08056D74: .4byte 0x0839F658

	thumb_func_start ElectricWaterDamageBox2
ElectricWaterDamageBox2: @ 0x08056D78
	push {lr}
	ldr r0, _08056D90 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08056DA4
	cmp r0, #2
	bgt _08056D94
	cmp r0, #0
	beq _08056D9E
	b _08056DB4
	.align 2, 0
_08056D90: .4byte gCurrentSprite
_08056D94:
	cmp r0, #0x18
	beq _08056DAA
	cmp r0, #0x1a
	beq _08056DB0
	b _08056DB4
_08056D9E:
	bl ElectricWaterDamageBox2Init
	b _08056DB4
_08056DA4:
	bl ElectricWaterDamageBox2Idle
	b _08056DB4
_08056DAA:
	bl ElectricWaterDamageBox2DamagingSamus
	b _08056DB4
_08056DB0:
	bl ElectricWaterDamageBox2Stopping
_08056DB4:
	ldr r0, _08056DCC @ =gCurrentEventBasedEffect
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08056DC6
	ldr r1, _08056DD0 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
_08056DC6:
	pop {r0}
	bx r0
	.align 2, 0
_08056DCC: .4byte gCurrentEventBasedEffect
_08056DD0: .4byte gCurrentSprite

	thumb_func_start FrozenRidleySetCollision
FrozenRidleySetCollision: @ 0x08056DD4
	push {lr}
	adds r3, r0, #0
	ldr r1, _08056DEC @ =gCurrentSprite
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	ldr r2, _08056DF0 @ =gCurrentClipdataAffectingAction
	strb r3, [r2]
	adds r0, #0x20
	bl ProcessClipdata
	pop {r0}
	bx r0
	.align 2, 0
_08056DEC: .4byte gCurrentSprite
_08056DF0: .4byte gCurrentClipdataAffectingAction

	thumb_func_start FrozenRidleyInit
FrozenRidleyInit: @ 0x08056DF4
	push {r4, r5, lr}
	ldr r4, _08056E64 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x21
	movs r3, #0
	movs r0, #3
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xc
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x58
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x48
	strb r0, [r1]
	movs r5, #0
	ldr r0, _08056E68 @ =0x0000FE98
	strh r0, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	ldr r0, _08056E6C @ =0x0000FFA0
	strh r0, [r4, #0xe]
	movs r0, #0x60
	strh r0, [r4, #0x10]
	strb r5, [r4, #0x1c]
	strh r3, [r4, #0x16]
	bl EventCheckOn_PowerOutage
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bne _08056E74
	movs r1, #1
	strh r0, [r4, #0x14]
	ldr r0, _08056E70 @ =0x083A123C
	str r0, [r4, #0x18]
	adds r0, r4, #0
	adds r0, #0x24
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #2
	bl FrozenRidleySetCollision
	b _08056EAE
	.align 2, 0
_08056E64: .4byte gCurrentSprite
_08056E68: .4byte 0x0000FE98
_08056E6C: .4byte 0x0000FFA0
_08056E70: .4byte 0x083A123C
_08056E74:
	cmp r0, #2
	bne _08056E90
	ldr r0, _08056E8C @ =0x083A12F4
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x25
	strb r5, [r0]
	b _08056EAE
	.align 2, 0
_08056E8C: .4byte 0x083A12F4
_08056E90:
	movs r2, #1
	movs r0, #1
	strh r0, [r4, #0x14]
	ldr r0, _08056EB4 @ =0x083A123C
	str r0, [r4, #0x18]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #8
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	bl FrozenRidleySetCollision
_08056EAE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056EB4: .4byte 0x083A123C

	thumb_func_start FrozenRidleyWaitForSamus
FrozenRidleyWaitForSamus: @ 0x08056EB8
	push {lr}
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #4
	bne _08056EEA
	ldr r0, _08056EF0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #2
	strb r1, [r2]
	ldr r1, _08056EF4 @ =0x083A124C
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0xa0
	strb r1, [r0]
	movs r0, #0x8d
	lsls r0, r0, #2
	bl SoundPlay
_08056EEA:
	pop {r0}
	bx r0
	.align 2, 0
_08056EF0: .4byte gCurrentSprite
_08056EF4: .4byte 0x083A124C

	thumb_func_start FrozenRidleySpawningX
FrozenRidleySpawningX: @ 0x08056EF8
	push {r4, lr}
	sub sp, #0xc
	ldr r2, _08056F44 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _08056F3C
	subs r1, #0xa
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08056F48 @ =0x083A1284
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r4, [r2, #0x16]
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r2, #2]
	subs r0, #0xa0
	str r0, [sp]
	ldrh r0, [r2, #4]
	subs r0, #0x20
	str r0, [sp, #4]
	str r4, [sp, #8]
	movs r0, #0x73
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnSecondary
_08056F3C:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056F44: .4byte gCurrentSprite
_08056F48: .4byte 0x083A1284

	thumb_func_start FrozenRidleyClosingEye
FrozenRidleyClosingEye: @ 0x08056F4C
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08056F70
	ldr r0, _08056F74 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x1a
	strb r1, [r2]
	ldr r1, _08056F78 @ =0x083A123C
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0x3c
	strb r1, [r0]
_08056F70:
	pop {r0}
	bx r0
	.align 2, 0
_08056F74: .4byte gCurrentSprite
_08056F78: .4byte 0x083A123C

	thumb_func_start FrozenRidleyXSpawning
FrozenRidleyXSpawning: @ 0x08056F7C
	push {lr}
	ldr r2, _08056FB4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _08056FAE
	subs r1, #0xa
	movs r0, #0x1c
	strb r0, [r1]
	ldr r0, _08056FB8 @ =0x083A12A4
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	movs r0, #0
	strh r3, [r2, #0x16]
	adds r1, #1
	strb r0, [r1]
	strh r3, [r2, #0x14]
	ldr r0, _08056FBC @ =0x00000235
	bl SoundPlay
_08056FAE:
	pop {r0}
	bx r0
	.align 2, 0
_08056FB4: .4byte gCurrentSprite
_08056FB8: .4byte 0x083A12A4
_08056FBC: .4byte 0x00000235

	thumb_func_start FrozenRidleyCrumbling
FrozenRidleyCrumbling: @ 0x08056FC0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08056FF0
	ldr r1, _08056FE8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #8
	strb r0, [r2]
	ldr r0, _08056FEC @ =0x083A12F4
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	movs r0, #1
	bl FrozenRidleySetCollision
	b _08057008
	.align 2, 0
_08056FE8: .4byte gCurrentSprite
_08056FEC: .4byte 0x083A12F4
_08056FF0:
	ldr r1, _0805700C @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #4
	bne _08057008
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _08057008
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	movs r2, #0x3b
	bl ParticleSet
_08057008:
	pop {r0}
	bx r0
	.align 2, 0
_0805700C: .4byte gCurrentSprite

	thumb_func_start FrozenRidleyXInit
FrozenRidleyXInit: @ 0x08057010
	push {r4, r5, lr}
	ldr r0, _08057088 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r3, _0805708C @ =0x0000FFFB
	ands r3, r0
	movs r4, #0
	movs r5, #0
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _08057090 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	movs r0, #0x20
	orrs r3, r0
	mov r1, ip
	strh r3, [r1]
	adds r1, #0x2e
	movs r0, #0x2c
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08057094 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	strb r4, [r2, #0x1c]
	strh r5, [r2, #0x16]
	ldr r0, _08057098 @ =0x08306008
	str r0, [r2, #0x18]
	mov r0, ip
	adds r0, #0x25
	strb r4, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0805709C @ =0x00000236
	bl SoundPlay
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057088: .4byte gCurrentSprite
_0805708C: .4byte 0x0000FFFB
_08057090: .4byte gIoRegisters
_08057094: .4byte 0x0000FFFC
_08057098: .4byte 0x08306008
_0805709C: .4byte 0x00000236

	thumb_func_start FrozenRidleyXRidleySpawning
FrozenRidleyXRidleySpawning: @ 0x080570A0
	push {lr}
	ldr r2, _08057104 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r2
	mov ip, r0
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080570BC
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_080570BC:
	mov r1, ip
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080570EE
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _08057108 @ =0x0000FFDF
	ands r0, r1
	movs r1, #0
	strh r0, [r2]
	adds r3, r2, #0
	adds r3, #0x2f
	movs r0, #0x1e
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
_080570EE:
	ldr r2, _0805710C @ =gWrittenToMosaic_H
	ldr r1, _08057110 @ =0x083BDED6
	mov r3, ip
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_08057104: .4byte gCurrentSprite
_08057108: .4byte 0x0000FFDF
_0805710C: .4byte gWrittenToMosaic_H
_08057110: .4byte 0x083BDED6

	thumb_func_start FrozenRidleyXFlyingAway
FrozenRidleyXFlyingAway: @ 0x08057114
	push {r4, r5, r6, lr}
	ldr r2, _08057144 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r1, [r3]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0805712E
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_0805712E:
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	beq _08057148
	subs r0, #1
	strb r0, [r1]
	b _08057198
	.align 2, 0
_08057144: .4byte gCurrentSprite
_08057148:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1a
	ldrh r1, [r2, #4]
	adds r0, r0, r1
	strh r0, [r2, #4]
	movs r6, #0x31
	adds r6, r6, r2
	mov ip, r6
	ldrb r3, [r6]
	ldr r5, _08057184 @ =0x0839F718
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08057188 @ =0x00007FFF
	cmp r1, r0
	bne _0805718C
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r2, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08057196
	.align 2, 0
_08057184: .4byte 0x0839F718
_08057188: .4byte 0x00007FFF
_0805718C:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
_08057196:
	strh r0, [r2, #2]
_08057198:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FrozenRidley
FrozenRidley: @ 0x080571A0
	push {lr}
	ldr r0, _080571B8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _08057256
	lsls r0, r0, #2
	ldr r1, _080571BC @ =_080571C0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080571B8: .4byte gCurrentSprite
_080571BC: .4byte _080571C0
_080571C0: @ jump table
	.4byte _08057234 @ case 0
	.4byte _0805723A @ case 1
	.4byte _08057240 @ case 2
	.4byte _08057256 @ case 3
	.4byte _08057256 @ case 4
	.4byte _08057256 @ case 5
	.4byte _08057256 @ case 6
	.4byte _08057256 @ case 7
	.4byte _08057256 @ case 8
	.4byte _08057256 @ case 9
	.4byte _08057256 @ case 10
	.4byte _08057256 @ case 11
	.4byte _08057256 @ case 12
	.4byte _08057256 @ case 13
	.4byte _08057256 @ case 14
	.4byte _08057256 @ case 15
	.4byte _08057256 @ case 16
	.4byte _08057256 @ case 17
	.4byte _08057256 @ case 18
	.4byte _08057256 @ case 19
	.4byte _08057256 @ case 20
	.4byte _08057256 @ case 21
	.4byte _08057256 @ case 22
	.4byte _08057256 @ case 23
	.4byte _08057246 @ case 24
	.4byte _08057256 @ case 25
	.4byte _0805724C @ case 26
	.4byte _08057256 @ case 27
	.4byte _08057252 @ case 28
_08057234:
	bl FrozenRidleyInit
	b _08057256
_0805723A:
	bl FrozenRidleyWaitForSamus
	b _08057256
_08057240:
	bl FrozenRidleySpawningX
	b _08057256
_08057246:
	bl FrozenRidleyClosingEye
	b _08057256
_0805724C:
	bl FrozenRidleyXSpawning
	b _08057256
_08057252:
	bl FrozenRidleyCrumbling
_08057256:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start FrozenRidleyX
FrozenRidleyX: @ 0x0805725C
	push {lr}
	ldr r0, _08057274 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _08057284
	cmp r0, #2
	bgt _08057278
	cmp r0, #0
	beq _0805727E
	b _0805728E
	.align 2, 0
_08057274: .4byte gCurrentSprite
_08057278:
	cmp r0, #0x18
	beq _0805728A
	b _0805728E
_0805727E:
	bl FrozenRidleyXInit
	b _0805728E
_08057284:
	bl FrozenRidleyXRidleySpawning
	b _0805728E
_0805728A:
	bl FrozenRidleyXFlyingAway
_0805728E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GoldSciserDoorLockIdle
GoldSciserDoorLockIdle: @ 0x08057294
	push {lr}
	movs r0, #0x8b
	bl CountPrimarySprite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _080572AE
	ldr r0, _080572B4 @ =gDoorUnlockTimer
	movs r1, #0x3c
	strb r1, [r0]
	ldr r0, _080572B8 @ =gCurrentSprite
	strh r2, [r0]
_080572AE:
	pop {r0}
	bx r0
	.align 2, 0
_080572B4: .4byte gDoorUnlockTimer
_080572B8: .4byte gCurrentSprite

	thumb_func_start GoldSciserDoorLock
GoldSciserDoorLock: @ 0x080572BC
	push {r4, r5, lr}
	ldr r2, _080572D8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x26
	movs r4, #1
	strb r4, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r3, [r1]
	cmp r3, #0
	beq _080572DC
	cmp r3, #2
	beq _08057344
	b _08057348
	.align 2, 0
_080572D8: .4byte gCurrentSprite
_080572DC:
	adds r0, r2, #0
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #2
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x27
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r5, #0
	ldr r1, _08057330 @ =0x0000FFFC
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _08057334 @ =0x08337FA4
	str r0, [r2, #0x18]
	strb r5, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldr r0, _08057338 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r0, _0805733C @ =gDebugFlag
	ldrb r0, [r0]
	cmp r0, #0
	bne _08057328
	ldrh r0, [r2]
	movs r1, #4
	orrs r0, r1
	strh r0, [r2]
_08057328:
	ldr r0, _08057340 @ =0x03000047
	strb r4, [r0]
	b _08057348
	.align 2, 0
_08057330: .4byte 0x0000FFFC
_08057334: .4byte 0x08337FA4
_08057338: .4byte gIoRegisters
_0805733C: .4byte gDebugFlag
_08057340: .4byte 0x03000047
_08057344:
	bl GoldSciserDoorLockIdle
_08057348:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start GoldZebesianDoorLockIdle
GoldZebesianDoorLockIdle: @ 0x08057350
	push {lr}
	movs r0, #0xa2
	bl CountPrimarySprite
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805736A
	ldr r0, _08057370 @ =gDoorUnlockTimer
	movs r1, #0x3c
	strb r1, [r0]
	ldr r0, _08057374 @ =gCurrentSprite
	strh r2, [r0]
_0805736A:
	pop {r0}
	bx r0
	.align 2, 0
_08057370: .4byte gDoorUnlockTimer
_08057374: .4byte gCurrentSprite

	thumb_func_start GoldZebesianDoorLock
GoldZebesianDoorLock: @ 0x08057378
	push {r4, r5, lr}
	ldr r2, _08057394 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x26
	movs r4, #1
	strb r4, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	ldrb r3, [r1]
	cmp r3, #0
	beq _08057398
	cmp r3, #2
	beq _08057400
	b _08057404
	.align 2, 0
_08057394: .4byte gCurrentSprite
_08057398:
	adds r0, r2, #0
	adds r0, #0x25
	strb r3, [r0]
	movs r0, #2
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x27
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r5, #0
	ldr r1, _080573EC @ =0x0000FFFC
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	ldr r0, _080573F0 @ =0x08337FA4
	str r0, [r2, #0x18]
	strb r5, [r2, #0x1c]
	strh r3, [r2, #0x16]
	ldr r0, _080573F4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r0, _080573F8 @ =gDebugFlag
	ldrb r0, [r0]
	cmp r0, #0
	bne _080573E4
	ldrh r0, [r2]
	movs r1, #4
	orrs r0, r1
	strh r0, [r2]
_080573E4:
	ldr r0, _080573FC @ =0x03000047
	strb r4, [r0]
	b _08057404
	.align 2, 0
_080573EC: .4byte 0x0000FFFC
_080573F0: .4byte 0x08337FA4
_080573F4: .4byte gIoRegisters
_080573F8: .4byte gDebugFlag
_080573FC: .4byte 0x03000047
_08057400:
	bl GoldZebesianDoorLockIdle
_08057404:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MegaXUpdatePalette
MegaXUpdatePalette: @ 0x0805740C
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _0805742C @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	ldr r1, _08057430 @ =sSecondarySpriteStats
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r4, _08057434 @ =gBossWork1
	ldrb r1, [r4]
	cmp r1, #0
	beq _08057438
	cmp r1, #1
	beq _08057450
	b _08057466
	.align 2, 0
_0805742C: .4byte gCurrentSprite
_08057430: .4byte sSecondarySpriteStats
_08057434: .4byte gBossWork1
_08057438:
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bgt _08057466
	ldr r7, _0805744C @ =0x083A5498
	movs r0, #1
	strb r0, [r4]
	b _0805746A
	.align 2, 0
_0805744C: .4byte 0x083A5498
_08057450:
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhi _08057466
	ldr r7, _08057480 @ =0x083A54B8
	movs r0, #2
	strb r0, [r4]
	movs r6, #1
_08057466:
	cmp r6, #0
	beq _08057478
_0805746A:
	ldr r1, _08057484 @ =0x040000D4
	str r7, [r1]
	ldr r0, _08057488 @ =0x05000380
	str r0, [r1, #4]
	ldr r0, _0805748C @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_08057478:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08057480: .4byte 0x083A54B8
_08057484: .4byte 0x040000D4
_08057488: .4byte 0x05000380
_0805748C: .4byte 0x80000010

	thumb_func_start MegaXDestroyShields
MegaXDestroyShields: @ 0x08057490
	push {r4, lr}
	movs r3, #0
	ldr r4, _080574D8 @ =gSpriteData
_08057496:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r2, r0, r4
	ldrh r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080574C6
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080574C6
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x4a
	bne _080574C6
	ldrh r0, [r2, #0x14]
	cmp r0, #0
	beq _080574C6
	movs r0, #0
	strh r0, [r2, #0x14]
_080574C6:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0x17
	bls _08057496
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080574D8: .4byte gSpriteData

	thumb_func_start MegaXTurningIntoX_Unused
MegaXTurningIntoX_Unused: @ 0x080574DC
	push {lr}
	ldr r1, _08057508 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldrh r0, [r1, #6]
	subs r0, #1
	strh r0, [r1, #6]
	lsls r0, r0, #0x10
	adds r3, r1, #0
	cmp r0, #0
	beq _08057514
	ldr r2, _0805750C @ =gWrittenToMosaic_H
	ldr r1, _08057510 @ =0x083BDED6
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _08057532
	.align 2, 0
_08057508: .4byte gCurrentSprite
_0805750C: .4byte gWrittenToMosaic_H
_08057510: .4byte 0x083BDED6
_08057514:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1b
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _08057544 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _08057548 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
_08057532:
	ldrh r0, [r3, #6]
	cmp r0, #7
	bhi _0805754C
	adds r2, r0, #0
	movs r0, #0x21
	movs r1, #6
	bl SpriteLoadGfx
	b _0805755A
	.align 2, 0
_08057544: .4byte 0x0000FFDF
_08057548: .4byte gIoRegisters
_0805754C:
	cmp r0, #8
	bne _0805755A
	movs r0, #0x21
	movs r1, #6
	movs r2, #2
	bl SpriteLoadPal
_0805755A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start VariaSuitAbilityInit
VariaSuitAbilityInit: @ 0x08057560
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _08057580 @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r7, #0x10
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	beq _08057588
	ldr r1, _08057584 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _08057694
	.align 2, 0
_08057580: .4byte gEquipment
_08057584: .4byte gCurrentSprite
_08057588:
	ldr r0, _0805769C @ =gBossWork1
	strb r6, [r0]
	ldr r5, _080576A0 @ =gCurrentSprite
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080576A4 @ =0xFFFFFF00
	adds r1, r0, #0
	ldrh r0, [r5, #2]
	adds r1, r1, r0
	movs r4, #0
	strh r1, [r5, #2]
	ldrh r0, [r5, #4]
	subs r0, #0x80
	strh r0, [r5, #4]
	strh r1, [r5, #6]
	strh r0, [r5, #8]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	ldrh r2, [r5]
	movs r0, #4
	orrs r2, r0
	orrs r2, r4
	strh r2, [r5]
	ldr r3, _080576A8 @ =sPrimarySpriteStats
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	adds r1, r5, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	ldr r0, _080576AC @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r5, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x25
	strb r4, [r0]
	movs r1, #0x80
	lsls r1, r1, #8
	adds r0, r1, #0
	orrs r2, r0
	strh r2, [r5]
	adds r0, r5, #0
	adds r0, #0x27
	strb r7, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r0, #1
	strb r7, [r0]
	ldr r1, _080576B0 @ =0x0000FFE0
	strh r1, [r5, #0xa]
	movs r0, #0x20
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _080576B4 @ =0x083A59B0
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r6, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	strh r7, [r5, #0x12]
	adds r0, #2
	strb r4, [r0]
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	adds r4, r5, #0
	adds r4, #0x23
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x78
	bl SpriteSpawnSecondary
	ldrb r1, [r5, #0x1e]
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x60
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1c
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1c
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r5, #0x1f]
	ldrb r3, [r4]
	ldrh r0, [r5, #2]
	str r0, [sp]
	ldrh r0, [r5, #4]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x1c
	movs r1, #2
	bl SpriteSpawnSecondary
_08057694:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805769C: .4byte gBossWork1
_080576A0: .4byte gCurrentSprite
_080576A4: .4byte 0xFFFFFF00
_080576A8: .4byte sPrimarySpriteStats
_080576AC: .4byte gIoRegisters
_080576B0: .4byte 0x0000FFE0
_080576B4: .4byte 0x083A59B0

	thumb_func_start VariaSuitAbilityWaitingToSpawn
VariaSuitAbilityWaitingToSpawn: @ 0x080576B8
	push {lr}
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _080576EA
	ldr r2, _080576F0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	movs r1, #0
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	movs r0, #0x40
	movs r1, #7
	bl PlayMusic
_080576EA:
	pop {r0}
	bx r0
	.align 2, 0
_080576F0: .4byte gCurrentSprite

	thumb_func_start VariaSuitAbilitySpawning
VariaSuitAbilitySpawning: @ 0x080576F4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r3, _08057724 @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08057728 @ =0x083A1304
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r5, [r0]
	movs r4, #0
	ldrsh r1, [r0, r4]
	ldr r0, _0805772C @ =0x00007FFF
	adds r4, r3, #0
	cmp r1, r0
	bne _08057730
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r6
	ldrh r0, [r4, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0805773A
	.align 2, 0
_08057724: .4byte gCurrentSprite
_08057728: .4byte 0x083A1304
_0805772C: .4byte 0x00007FFF
_08057730:
	adds r0, r2, #1
	mov r7, ip
	strb r0, [r7]
	ldrh r0, [r4, #2]
	adds r0, r0, r5
_0805773A:
	strh r0, [r4, #2]
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r2, [r6]
	ldr r5, _08057764 @ =0x083A1386
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08057768 @ =0x00007FFF
	cmp r1, r0
	bne _0805776C
	subs r1, r2, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r4, #4]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _08057774
	.align 2, 0
_08057764: .4byte 0x083A1386
_08057768: .4byte 0x00007FFF
_0805776C:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r4, #4]
	adds r0, r0, r3
_08057774:
	strh r0, [r4, #4]
	adds r1, r4, #0
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	cmp r0, #0
	bne _080577A4
	ldrh r2, [r1, #0x12]
	ldr r0, _08057794 @ =0x000001FF
	cmp r2, r0
	bhi _08057798
	adds r0, r2, #0
	adds r0, #0x10
	strh r0, [r1, #0x12]
	b _08057870
	.align 2, 0
_08057794: .4byte 0x000001FF
_08057798:
	movs r0, #1
	strb r0, [r3]
	adds r1, #0x2f
	movs r0, #0x3c
	strb r0, [r1]
	b _08057870
_080577A4:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	bne _08057870
	subs r1, #0xb
	movs r0, #0x39
	strb r0, [r1]
	ldrb r2, [r4, #0x1f]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #3
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r4, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x4a
	movs r1, #7
	bl SpriteSpawnSecondary
_08057870:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start VariaSuitAbilityMovingInit
VariaSuitAbilityMovingInit: @ 0x08057878
	ldr r3, _0805789C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x3a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805789C: .4byte gCurrentSprite

	thumb_func_start VariaSuitAbilityMoving
VariaSuitAbilityMoving: @ 0x080578A0
	push {lr}
	sub sp, #8
	ldr r0, _080578BC @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080578C8
	ldr r1, _080578C0 @ =gSamusData
	ldr r2, _080578C4 @ =0xFFFFFEC0
	adds r0, r2, #0
	ldrh r2, [r1, #0x18]
	adds r0, r0, r2
	b _080578CE
	.align 2, 0
_080578BC: .4byte gFrameCounter8Bit
_080578C0: .4byte gSamusData
_080578C4: .4byte 0xFFFFFEC0
_080578C8:
	ldr r1, _080578EC @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
_080578CE:
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldrh r1, [r1, #0x16]
	movs r0, #2
	str r0, [sp]
	movs r0, #0xc0
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0x38
	movs r3, #0x50
	bl XParasiteMoveWithSound
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_080578EC: .4byte gSamusData

	thumb_func_start VariaSuitAbilityShrinking
VariaSuitAbilityShrinking: @ 0x080578F0
	push {lr}
	ldr r2, _08057908 @ =gCurrentSprite
	ldrh r1, [r2, #0x12]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bls _0805790C
	adds r0, r1, #0
	subs r0, #0x10
	strh r0, [r2, #0x12]
	b _08057922
	.align 2, 0
_08057908: .4byte gCurrentSprite
_0805790C:
	ldrh r1, [r2]
	ldr r0, _08057928 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #9
	strb r0, [r1]
_08057922:
	pop {r0}
	bx r0
	.align 2, 0
_08057928: .4byte 0x0000FFFB

	thumb_func_start VariaSuitAbilityShrinked
VariaSuitAbilityShrinked: @ 0x0805792C
	bx lr
	.align 2, 0

	thumb_func_start VariaSuitAbilityTurningIntoCoreX
VariaSuitAbilityTurningIntoCoreX: @ 0x08057930
	push {lr}
	ldr r1, _0805795C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805794A
	adds r1, #0x24
	movs r0, #0x3f
	strb r0, [r1]
_0805794A:
	ldrb r0, [r2]
	cmp r0, #7
	bhi _08057960
	adds r2, r0, #0
	movs r0, #0x21
	movs r1, #6
	bl SpriteLoadGfx
	b _0805796E
	.align 2, 0
_0805795C: .4byte gCurrentSprite
_08057960:
	cmp r0, #8
	bne _0805796E
	movs r0, #0x21
	movs r1, #6
	movs r2, #2
	bl SpriteLoadPal
_0805796E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start VariaSuitAbilityCoreXMovingInit
VariaSuitAbilityCoreXMovingInit: @ 0x08057974
	ldr r3, _08057998 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x40
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_08057998: .4byte gCurrentSprite

	thumb_func_start VariaSuitAbilityCoreXMoving
VariaSuitAbilityCoreXMoving: @ 0x0805799C
	push {lr}
	sub sp, #8
	ldr r1, _080579C4 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0xc0
	str r2, [sp, #4]
	movs r2, #0x1c
	movs r3, #0x28
	bl XParasiteMoveWithSound
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_080579C4: .4byte gSamusData

	thumb_func_start VariaSuitAbilityCoreXMovingInit_Unused
VariaSuitAbilityCoreXMovingInit_Unused: @ 0x080579C8
	ldr r3, _080579EC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x42
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_080579EC: .4byte gCurrentSprite

	thumb_func_start VariaSuitAbilityCoreXMoving_Unused
VariaSuitAbilityCoreXMoving_Unused: @ 0x080579F0
	push {lr}
	sub sp, #8
	ldr r1, _08057A18 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x48
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0xc0
	str r2, [sp, #4]
	movs r2, #0x1c
	movs r3, #0x28
	bl XParasiteMoveWithSound
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_08057A18: .4byte gSamusData

	thumb_func_start MegaXShieldInit
MegaXShieldInit: @ 0x08057A1C
	push {r4, lr}
	ldr r0, _08057AA0 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08057AA4 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r2, #0
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x22
	movs r0, #3
	strb r0, [r1]
	ldr r1, _08057AA8 @ =gIoRegisters
	ldrb r1, [r1, #0xa]
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0xc
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08057AAC @ =0x0000FFE0
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #0x20
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08057AB0 @ =0x083A5EF8
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r2, [r4, #0x16]
	mov r0, ip
	adds r0, #0x25
	movs r2, #2
	strb r2, [r0]
	ldr r1, _08057AB4 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	mov r0, ip
	adds r0, #0x24
	strb r2, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #0x12]
	mov r0, ip
	adds r0, #0x30
	strb r3, [r0]
	ldrb r0, [r4, #0x1e]
	lsls r0, r0, #5
	mov r1, ip
	adds r1, #0x2f
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057AA0: .4byte gCurrentSprite
_08057AA4: .4byte 0x0000FFFB
_08057AA8: .4byte gIoRegisters
_08057AAC: .4byte 0x0000FFE0
_08057AB0: .4byte 0x083A5EF8
_08057AB4: .4byte sSecondarySpriteStats

	thumb_func_start MegaXShieldIdle
MegaXShieldIdle: @ 0x08057AB8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08057AD8 @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	adds r4, r0, #0
	cmp r5, #0
	bne _08057ADC
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x22
	bl ParticleSet
	strh r5, [r4]
	b _08057BD6
	.align 2, 0
_08057AD8: .4byte gCurrentSprite
_08057ADC:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #3
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0
	beq _08057B08
	ldrh r1, [r4, #0x12]
	ldr r0, _08057B00 @ =0x0000013F
	cmp r1, r0
	bhi _08057B04
	adds r0, r1, #2
	strh r0, [r4, #0x12]
	b _08057B18
	.align 2, 0
_08057B00: .4byte 0x0000013F
_08057B04:
	movs r0, #0
	b _08057B16
_08057B08:
	ldrh r0, [r4, #0x12]
	cmp r0, #0xc0
	bls _08057B14
	subs r0, #2
	strh r0, [r4, #0x12]
	b _08057B18
_08057B14:
	movs r0, #1
_08057B16:
	strb r0, [r2]
_08057B18:
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r6, [r0]
	ldrh r3, [r4, #0x12]
	adds r0, #0xc
	ldrb r7, [r0]
	ldr r1, _08057B5C @ =0x080A4FA4
	lsls r0, r7, #1
	adds r0, r0, r1
	movs r5, #0
	ldrsh r2, [r0, r5]
	mov r8, r1
	cmp r2, #0
	bge _08057B64
	rsbs r2, r2, #0
	lsls r1, r3, #0x10
	asrs r0, r1, #0x10
	muls r0, r2, r0
	adds r5, r1, #0
	cmp r0, #0
	bge _08057B44
	adds r0, #0xff
_08057B44:
	lsls r0, r0, #8
	lsrs r3, r0, #0x10
	ldr r1, _08057B60 @ =gSpriteData
	lsls r2, r6, #3
	subs r0, r2, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	subs r0, r0, r3
	strh r0, [r4, #2]
	mov ip, r1
	b _08057B8A
	.align 2, 0
_08057B5C: .4byte 0x080A4FA4
_08057B60: .4byte gSpriteData
_08057B64:
	lsls r1, r3, #0x10
	asrs r0, r1, #0x10
	muls r2, r0, r2
	adds r5, r1, #0
	cmp r2, #0
	bge _08057B72
	adds r2, #0xff
_08057B72:
	lsls r1, r2, #8
	ldr r2, _08057BB8 @ =gSpriteData
	lsls r3, r6, #3
	subs r0, r3, r6
	lsls r0, r0, #3
	adds r0, r0, r2
	lsrs r1, r1, #0x10
	ldrh r0, [r0, #2]
	adds r1, r1, r0
	strh r1, [r4, #2]
	mov ip, r2
	adds r2, r3, #0
_08057B8A:
	adds r0, r7, #0
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, r8
	movs r3, #0
	ldrsh r1, [r0, r3]
	cmp r1, #0
	bge _08057BBC
	rsbs r1, r1, #0
	asrs r0, r5, #0x10
	muls r0, r1, r0
	cmp r0, #0
	bge _08057BA6
	adds r0, #0xff
_08057BA6:
	lsls r0, r0, #8
	lsrs r1, r0, #0x10
	subs r0, r2, r6
	lsls r0, r0, #3
	add r0, ip
	ldrh r0, [r0, #4]
	subs r0, r0, r1
	strh r0, [r4, #4]
	b _08057BD6
	.align 2, 0
_08057BB8: .4byte gSpriteData
_08057BBC:
	asrs r0, r5, #0x10
	muls r0, r1, r0
	cmp r0, #0
	bge _08057BC6
	adds r0, #0xff
_08057BC6:
	lsls r1, r0, #8
	subs r0, r2, r6
	lsls r0, r0, #3
	add r0, ip
	lsrs r1, r1, #0x10
	ldrh r0, [r0, #4]
	adds r1, r1, r0
	strh r1, [r4, #4]
_08057BD6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start VariaSuitAbility
VariaSuitAbility: @ 0x08057BE0
	push {lr}
	ldr r0, _08057BF8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5f
	bls _08057BEE
	b _08057DD2
_08057BEE:
	lsls r0, r0, #2
	ldr r1, _08057BFC @ =_08057C00
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08057BF8: .4byte gCurrentSprite
_08057BFC: .4byte _08057C00
_08057C00: @ jump table
	.4byte _08057D80 @ case 0
	.4byte _08057DD2 @ case 1
	.4byte _08057DD2 @ case 2
	.4byte _08057DD2 @ case 3
	.4byte _08057DD2 @ case 4
	.4byte _08057DD2 @ case 5
	.4byte _08057DD2 @ case 6
	.4byte _08057DD2 @ case 7
	.4byte _08057DD2 @ case 8
	.4byte _08057DD2 @ case 9
	.4byte _08057DD2 @ case 10
	.4byte _08057DD2 @ case 11
	.4byte _08057DD2 @ case 12
	.4byte _08057DD2 @ case 13
	.4byte _08057DD2 @ case 14
	.4byte _08057DD2 @ case 15
	.4byte _08057DD2 @ case 16
	.4byte _08057DD2 @ case 17
	.4byte _08057DD2 @ case 18
	.4byte _08057DD2 @ case 19
	.4byte _08057DD2 @ case 20
	.4byte _08057DD2 @ case 21
	.4byte _08057DD2 @ case 22
	.4byte _08057DD2 @ case 23
	.4byte _08057DD2 @ case 24
	.4byte _08057DD2 @ case 25
	.4byte _08057DD2 @ case 26
	.4byte _08057DD2 @ case 27
	.4byte _08057DD2 @ case 28
	.4byte _08057DD2 @ case 29
	.4byte _08057DD2 @ case 30
	.4byte _08057DD2 @ case 31
	.4byte _08057DD2 @ case 32
	.4byte _08057DD2 @ case 33
	.4byte _08057DD2 @ case 34
	.4byte _08057DD2 @ case 35
	.4byte _08057DD2 @ case 36
	.4byte _08057DD2 @ case 37
	.4byte _08057DD2 @ case 38
	.4byte _08057DD2 @ case 39
	.4byte _08057DD2 @ case 40
	.4byte _08057DD2 @ case 41
	.4byte _08057DD2 @ case 42
	.4byte _08057DD2 @ case 43
	.4byte _08057DD2 @ case 44
	.4byte _08057DD2 @ case 45
	.4byte _08057DD2 @ case 46
	.4byte _08057DD2 @ case 47
	.4byte _08057DD2 @ case 48
	.4byte _08057DD2 @ case 49
	.4byte _08057DD2 @ case 50
	.4byte _08057DD2 @ case 51
	.4byte _08057DD2 @ case 52
	.4byte _08057DD2 @ case 53
	.4byte _08057DD2 @ case 54
	.4byte _08057D86 @ case 55
	.4byte _08057D8C @ case 56
	.4byte _08057D92 @ case 57
	.4byte _08057D98 @ case 58
	.4byte _08057D9E @ case 59
	.4byte _08057DA4 @ case 60
	.4byte _08057DAA @ case 61
	.4byte _08057DD2 @ case 62
	.4byte _08057DB0 @ case 63
	.4byte _08057DB6 @ case 64
	.4byte _08057DD2 @ case 65
	.4byte _08057DD2 @ case 66
	.4byte _08057DD2 @ case 67
	.4byte _08057DD2 @ case 68
	.4byte _08057DD2 @ case 69
	.4byte _08057DD2 @ case 70
	.4byte _08057DD2 @ case 71
	.4byte _08057DD2 @ case 72
	.4byte _08057DD2 @ case 73
	.4byte _08057DD2 @ case 74
	.4byte _08057DD2 @ case 75
	.4byte _08057DD2 @ case 76
	.4byte _08057DD2 @ case 77
	.4byte _08057DD2 @ case 78
	.4byte _08057DD2 @ case 79
	.4byte _08057DD2 @ case 80
	.4byte _08057DD2 @ case 81
	.4byte _08057DD2 @ case 82
	.4byte _08057DD2 @ case 83
	.4byte _08057DD2 @ case 84
	.4byte _08057DD2 @ case 85
	.4byte _08057DD2 @ case 86
	.4byte _08057DD2 @ case 87
	.4byte _08057DD2 @ case 88
	.4byte _08057DD2 @ case 89
	.4byte _08057DD2 @ case 90
	.4byte _08057DD2 @ case 91
	.4byte _08057DBC @ case 92
	.4byte _08057DC2 @ case 93
	.4byte _08057DC8 @ case 94
	.4byte _08057DCE @ case 95
_08057D80:
	bl VariaSuitAbilityInit
	b _08057DD2
_08057D86:
	bl VariaSuitAbilityWaitingToSpawn
	b _08057DD2
_08057D8C:
	bl VariaSuitAbilitySpawning
	b _08057DD2
_08057D92:
	bl VariaSuitAbilityMovingInit
	b _08057DD2
_08057D98:
	bl VariaSuitAbilityMoving
	b _08057DD2
_08057D9E:
	bl VariaSuitAbilityShrinking
	b _08057DD2
_08057DA4:
	bl VariaSuitAbilityShrinked
	b _08057DD2
_08057DAA:
	bl VariaSuitAbilityTurningIntoCoreX
	b _08057DD2
_08057DB0:
	bl VariaSuitAbilityCoreXMovingInit
	b _08057DD2
_08057DB6:
	bl VariaSuitAbilityCoreXMoving
	b _08057DD2
_08057DBC:
	bl CoreXAbilityMovingToTargetInit
	b _08057DD2
_08057DC2:
	bl CoreXAbilityMovingToTarget
	b _08057DD2
_08057DC8:
	bl CoreXAbilityWaitingAtTarget
	b _08057DD2
_08057DCE:
	bl CoreXAbilityGettingAbsorbed
_08057DD2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MegaX
MegaX: @ 0x08057DD8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08057E30 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x23
	ldrb r7, [r1]
	adds r5, r0, #0
	adds r5, #0x24
	ldrb r3, [r5]
	adds r4, r0, #0
	cmp r3, #0
	beq _08057E38
	cmp r3, #0x18
	bne _08057EB0
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r0, [r4]
	movs r1, #4
	eors r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _08057E1A
	b _0805813E
_08057E1A:
	ldr r0, _08057E34 @ =gSpriteData
	lsls r1, r7, #3
	subs r1, r1, r7
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	movs r0, #0x3d
	strb r0, [r1]
	strh r2, [r4]
	b _0805813E
	.align 2, 0
_08057E30: .4byte gCurrentSprite
_08057E34: .4byte gSpriteData
_08057E38:
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #4
	strb r0, [r1]
	subs r1, #0x13
	movs r0, #3
	strb r0, [r1]
	ldr r1, _08057EDC @ =gIoRegisters
	ldrb r1, [r1, #0xa]
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x21
	strb r0, [r1]
	ldr r1, _08057EE0 @ =sSecondarySpriteStats
	ldrb r0, [r4, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x27
	movs r1, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08057EE4 @ =0x0000FF70
	strh r1, [r4, #0xa]
	movs r0, #0x90
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	ldr r0, _08057EE8 @ =0x083A5E70
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0x18
	strb r0, [r1]
	movs r0, #2
	strb r0, [r5]
	ldrh r0, [r4]
	ldr r3, _08057EEC @ =0x00004008
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x10
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	adds r0, #0x2b
	strb r2, [r0]
_08057EB0:
	ldr r2, _08057EF0 @ =gSpriteData
	lsls r3, r7, #3
	subs r0, r3, r7
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	strh r1, [r4, #2]
	ldrh r1, [r0, #4]
	strh r1, [r4, #4]
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x37
	mov r8, r2
	adds r6, r3, #0
	cmp r0, #4
	bls _08057ED2
	b _0805813A
_08057ED2:
	lsls r0, r0, #2
	ldr r1, _08057EF4 @ =_08057EF8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08057EDC: .4byte gIoRegisters
_08057EE0: .4byte sSecondarySpriteStats
_08057EE4: .4byte 0x0000FF70
_08057EE8: .4byte 0x083A5E70
_08057EEC: .4byte 0x00004008
_08057EF0: .4byte gSpriteData
_08057EF4: .4byte _08057EF8
_08057EF8: @ jump table
	.4byte _08057F0C @ case 0
	.4byte _08057F16 @ case 1
	.4byte _08057FE4 @ case 2
	.4byte _08057FEC @ case 3
	.4byte _08057F38 @ case 4
_08057F0C:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	b _0805813A
_08057F16:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r4]
	ldr r0, _08057F34 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	subs r0, r6, r7
	lsls r0, r0, #3
	add r0, r8
	ldrh r0, [r0, #0x12]
	strh r0, [r4, #0x12]
	b _0805813A
	.align 2, 0
_08057F34: .4byte 0x0000FFFB
_08057F38:
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08057FBC @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08057F6C
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _08057F66
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r4, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_08057F66:
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
_08057F6C:
	subs r0, r6, r7
	lsls r0, r0, #3
	add r0, r8
	ldrh r0, [r0, #0x12]
	strh r0, [r4, #0x12]
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bhi _08057FC4
	adds r0, r4, #0
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldrh r1, [r4]
	ldr r0, _08057FC0 @ =0x0000BFF7
	ands r0, r1
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x24
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	subs r1, #0xe
	movs r0, #0
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, #0x18
	ldrh r1, [r4, #4]
	movs r2, #0x3a
	bl ParticleSet
	b _0805813A
	.align 2, 0
_08057FBC: .4byte gFrameCounter8Bit
_08057FC0: .4byte 0x0000BFF7
_08057FC4:
	ldr r0, _08057FE0 @ =0x0000017F
	cmp r1, r0
	bls _08057FCC
	b _0805813A
_08057FCC:
	adds r1, r4, #0
	adds r1, #0x27
	movs r0, #0x22
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	b _0805813A
	.align 2, 0
_08057FE0: .4byte 0x0000017F
_08057FE4:
	ldrh r1, [r4]
	ldr r0, _08058040 @ =0x00007FFF
	ands r0, r1
	strh r0, [r4]
_08057FEC:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x10
	bne _080580DC
	movs r0, #0xdf
	lsls r0, r0, #1
	bl SoundPlay
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	movs r3, #0
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _08058044 @ =0x083A5ED0
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	movs r2, #0
	mov ip, r2
	strh r3, [r4, #0x16]
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	bne _0805804C
	adds r0, r4, #0
	adds r0, #0x25
	mov r3, ip
	strb r3, [r0]
	ldr r1, _08058048 @ =gSpriteData
	subs r0, r6, r7
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	movs r1, #0x3b
	strb r1, [r0]
	bl MegaXDestroyShields
	b _0805813E
	.align 2, 0
_08058040: .4byte 0x00007FFF
_08058044: .4byte 0x083A5ED0
_08058048: .4byte gSpriteData
_0805804C:
	ldr r3, _08058078 @ =gSpriteData
	subs r0, r6, r7
	lsls r0, r0, #3
	adds r5, r0, r3
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #0x3c
	strb r0, [r1]
	ldrh r2, [r4, #2]
	ldr r1, _0805807C @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x40
	mov r8, r3
	adds r3, r1, #0
	cmp r2, r0
	ble _08058080
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	b _08058086
	.align 2, 0
_08058078: .4byte gSpriteData
_0805807C: .4byte gSamusData
_08058080:
	ldrh r1, [r5]
	ldr r0, _080580A8 @ =0x0000FBFF
	ands r0, r1
_08058086:
	strh r0, [r5]
	ldr r1, _080580AC @ =gCurrentSprite
	ldrh r0, [r1, #4]
	adds r4, r1, #0
	ldrh r3, [r3, #0x16]
	cmp r0, r3
	bls _080580B0
	subs r0, r6, r7
	lsls r0, r0, #3
	add r0, r8
	ldrh r2, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	orrs r1, r2
	b _080580BC
	.align 2, 0
_080580A8: .4byte 0x0000FBFF
_080580AC: .4byte gCurrentSprite
_080580B0:
	subs r0, r6, r7
	lsls r0, r0, #3
	add r0, r8
	ldrh r2, [r0]
	ldr r1, _08058148 @ =0x0000FDFF
	ands r1, r2
_080580BC:
	strh r1, [r0]
	subs r0, r6, r7
	lsls r0, r0, #3
	mov r1, r8
	adds r2, r0, r1
	adds r0, r2, #0
	adds r0, #0x2f
	movs r1, #0x50
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #2
	movs r1, #0x38
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
_080580DC:
	subs r0, r6, r7
	lsls r0, r0, #3
	add r0, r8
	adds r0, #0x2d
	ldrb r1, [r0]
	cmp r1, #0
	beq _0805813A
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _08058112
	movs r0, #4
	ands r1, r0
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0805810C
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r2, [r4, #0x1f]
	adds r0, r0, r2
	movs r1, #0xd
	subs r1, r1, r0
_0805810C:
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
_08058112:
	subs r0, r6, r7
	lsls r0, r0, #3
	add r0, r8
	adds r0, #0x2d
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	cmp r3, #0
	bne _0805813A
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xbf
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x20
	strb r3, [r0]
_0805813A:
	bl MegaXUpdatePalette
_0805813E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058148: .4byte 0x0000FDFF

	thumb_func_start CoreXShellVaria
CoreXShellVaria: @ 0x0805814C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	ldr r2, _08058190 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov r8, r0
	ldr r1, _08058194 @ =sSecondarySpriteStats
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r6, [r0]
	adds r4, r2, #0
	adds r4, #0x24
	ldrb r3, [r4]
	adds r5, r2, #0
	cmp r3, #0
	beq _08058198
	cmp r3, #0x18
	bne _08058206
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _0805818A
	b _080584FC
_0805818A:
	movs r0, #0
	strh r0, [r5]
	b _080584FC
	.align 2, 0
_08058190: .4byte gCurrentSprite
_08058194: .4byte sSecondarySpriteStats
_08058198:
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	strh r0, [r5]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	subs r1, #0x13
	movs r0, #5
	strb r0, [r1]
	ldr r0, _08058234 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r5, #0
	adds r1, #0x21
	strb r0, [r1]
	strh r6, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x27
	movs r1, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _08058238 @ =0x0000FFB0
	strh r1, [r5, #0xa]
	movs r0, #0x50
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	ldr r0, _0805823C @ =0x083A5E40
	str r0, [r5, #0x18]
	strb r2, [r5, #0x1c]
	strh r3, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x25
	strb r2, [r0]
	movs r0, #2
	strb r0, [r4]
	ldrh r0, [r5]
	ldr r3, _08058240 @ =0x00004008
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r5]
	movs r0, #0x10
	strh r0, [r5, #0x12]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r2, [r0]
_08058206:
	ldr r2, _08058244 @ =gSpriteData
	mov r0, r8
	lsls r3, r0, #3
	subs r0, r3, r0
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0, #2]
	strh r1, [r5, #2]
	ldrh r1, [r0, #4]
	strh r1, [r5, #4]
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #0x37
	mov ip, r2
	adds r7, r3, #0
	cmp r0, #9
	bls _0805822A
	b _080584FC
_0805822A:
	lsls r0, r0, #2
	ldr r1, _08058248 @ =_0805824C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08058234: .4byte gIoRegisters
_08058238: .4byte 0x0000FFB0
_0805823C: .4byte 0x083A5E40
_08058240: .4byte 0x00004008
_08058244: .4byte gSpriteData
_08058248: .4byte _0805824C
_0805824C: @ jump table
	.4byte _08058274 @ case 0
	.4byte _0805827E @ case 1
	.4byte _080584FC @ case 2
	.4byte _080584FC @ case 3
	.4byte _080582A0 @ case 4
	.4byte _080584FC @ case 5
	.4byte _080584FC @ case 6
	.4byte _080584FC @ case 7
	.4byte _08058300 @ case 8
	.4byte _08058310 @ case 9
_08058274:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	b _080584FC
_0805827E:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r5]
	ldr r0, _0805829C @ =0x0000FFFB
	ands r0, r1
	strh r0, [r5]
	mov r1, r8
	subs r0, r7, r1
	lsls r0, r0, #3
	add r0, ip
	ldrh r0, [r0, #0x12]
	strh r0, [r5, #0x12]
	b _080584FC
	.align 2, 0
_0805829C: .4byte 0x0000FFFB
_080582A0:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	mov r2, r8
	subs r0, r7, r2
	lsls r0, r0, #3
	add r0, ip
	ldrh r0, [r0, #0x12]
	strh r0, [r5, #0x12]
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bhi _080582E0
	ldrh r1, [r5]
	ldr r0, _080582DC @ =0x0000BFF7
	ands r0, r1
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	b _080584FC
	.align 2, 0
_080582DC: .4byte 0x0000BFF7
_080582E0:
	ldr r0, _080582FC @ =0x0000017F
	cmp r1, r0
	bls _080582E8
	b _080584FC
_080582E8:
	adds r1, r5, #0
	adds r1, #0x27
	movs r0, #0x22
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	b _080584FC
	.align 2, 0
_080582FC: .4byte 0x0000017F
_08058300:
	ldrh r0, [r5]
	ldr r1, _08058344 @ =0x00007FFF
	ands r1, r0
	strh r1, [r5]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #0x18
	strb r0, [r1]
_08058310:
	ldrh r4, [r5, #0x14]
	cmp r4, #0
	bne _0805834C
	adds r0, r5, #0
	adds r0, #0x25
	strb r4, [r0]
	ldr r0, _08058348 @ =0x083A5B68
	str r0, [r5, #0x18]
	strb r4, [r5, #0x1c]
	strh r4, [r5, #0x16]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	mov r3, r8
	subs r0, r7, r3
	lsls r0, r0, #3
	add r0, ip
	adds r0, #0x24
	movs r1, #0x5c
	strb r1, [r0]
	movs r0, #0xc1
	bl SoundPlay
	b _080584FC
	.align 2, 0
_08058344: .4byte 0x00007FFF
_08058348: .4byte 0x083A5B68
_0805834C:
	adds r0, r6, #0
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r4, r0
	bhi _0805836C
	ldr r0, _08058368 @ =0x083A5E60
	str r0, [r5, #0x18]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #3
	b _08058384
	.align 2, 0
_08058368: .4byte 0x083A5E60
_0805836C:
	ldrh r4, [r5, #0x14]
	lsls r0, r6, #1
	movs r1, #3
	bl __divsi3
	cmp r4, r0
	bgt _08058386
	ldr r0, _080583C8 @ =0x083A5E50
	str r0, [r5, #0x18]
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #2
_08058384:
	strb r0, [r1]
_08058386:
	adds r6, r5, #0
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r1, #0x7f
	ands r1, r0
	cmp r1, #1
	bne _080583CC
	movs r0, #0x32
	bl CountPrimarySprite
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bhi _08058482
	adds r0, r6, #0
	adds r0, #0x23
	ldrb r3, [r0]
	movs r0, #0x20
	str r0, [sp]
	ldrh r0, [r6, #2]
	str r0, [sp, #4]
	ldrh r0, [r6, #4]
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x32
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnNewXParasite
	b _08058482
	.align 2, 0
_080583C8: .4byte 0x083A5E50
_080583CC:
	cmp r1, #0x10
	bne _08058482
	movs r0, #0xc2
	bl SoundPlay
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldr r1, _0805840C @ =gSpriteData
	mov r2, r8
	subs r0, r7, r2
	lsls r0, r0, #3
	adds r3, r0, r1
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0xb4
	strb r0, [r1]
	ldrh r1, [r5, #2]
	ldr r0, _08058410 @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #0x40
	cmp r1, r0
	ble _08058414
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	b _0805841A
	.align 2, 0
_0805840C: .4byte gSpriteData
_08058410: .4byte gSamusData
_08058414:
	ldrh r1, [r3]
	ldr r0, _08058440 @ =0x0000FBFF
	ands r0, r1
_0805841A:
	strh r0, [r3]
	ldr r0, _08058444 @ =gCurrentSprite
	ldr r1, _08058448 @ =gSamusData
	ldrh r0, [r0, #4]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _08058450
	ldr r0, _0805844C @ =gSpriteData
	mov r3, r8
	subs r1, r7, r3
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	orrs r0, r2
	b _08058460
	.align 2, 0
_08058440: .4byte 0x0000FBFF
_08058444: .4byte gCurrentSprite
_08058448: .4byte gSamusData
_0805844C: .4byte gSpriteData
_08058450:
	ldr r0, _080584C0 @ =gSpriteData
	mov r2, r8
	subs r1, r7, r2
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrh r2, [r1]
	ldr r0, _080584C4 @ =0x0000FDFF
	ands r0, r2
_08058460:
	strh r0, [r1]
	ldr r1, _080584C0 @ =gSpriteData
	mov r3, r8
	subs r0, r7, r3
	lsls r0, r0, #3
	adds r2, r0, r1
	adds r0, r2, #0
	adds r0, #0x2f
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #2
	movs r1, #0x1c
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
_08058482:
	ldr r1, _080584C0 @ =gSpriteData
	mov r2, r8
	subs r0, r7, r2
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x2d
	ldrb r4, [r0]
	mov ip, r1
	cmp r4, #0
	beq _080584FC
	movs r0, #3
	ands r0, r4
	cmp r0, #0
	bne _080584D2
	movs r0, #4
	ands r4, r0
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _080584CC
	ldr r0, _080584C8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	ldrb r3, [r0, #0x1f]
	adds r1, r1, r3
	movs r2, #0xd
	subs r2, r2, r1
	adds r0, #0x20
	strb r2, [r0]
	b _080584D2
	.align 2, 0
_080584C0: .4byte gSpriteData
_080584C4: .4byte 0x0000FDFF
_080584C8: .4byte gCurrentSprite
_080584CC:
	ldr r0, _08058508 @ =gCurrentSprite
	adds r0, #0x20
	strb r1, [r0]
_080584D2:
	mov r1, r8
	subs r0, r7, r1
	lsls r0, r0, #3
	add r0, ip
	adds r0, #0x2d
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	cmp r4, #0
	bne _080584FC
	ldr r1, _08058508 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x34
	ldrb r2, [r3]
	movs r0, #0xbf
	ands r0, r2
	strb r0, [r3]
	adds r1, #0x20
	strb r4, [r1]
_080584FC:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058508: .4byte gCurrentSprite

	thumb_func_start MegaXShield
MegaXShield: @ 0x0805850C
	push {lr}
	ldr r0, _08058520 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08058524
	cmp r0, #2
	beq _0805852A
	b _0805852E
	.align 2, 0
_08058520: .4byte gCurrentSprite
_08058524:
	bl MegaXShieldInit
	b _0805852E
_0805852A:
	bl MegaXShieldIdle
_0805852E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start OmegaHuskSetCollision
OmegaHuskSetCollision: @ 0x08058534
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _080585D8 @ =gCurrentSprite
	ldrh r7, [r0, #2]
	ldr r1, _080585DC @ =0xFFFFFC80
	adds r4, r1, #0
	ldrh r0, [r0, #4]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r6, _080585E0 @ =gCurrentClipdataAffectingAction
	strb r5, [r6]
	movs r0, #0x20
	rsbs r0, r0, #0
	adds r0, r0, r7
	mov r8, r0
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	adds r0, r7, #0
	subs r0, #0x60
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	adds r0, r7, #0
	subs r0, #0xa0
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	adds r0, r7, #0
	subs r0, #0xe0
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	ldr r1, _080585E4 @ =0xFFFFFEE0
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	ldr r1, _080585E8 @ =0xFFFFFEA0
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	ldr r1, _080585EC @ =0xFFFFFE60
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	ldr r1, _080585F0 @ =0xFFFFFE20
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	ldr r1, _080585F4 @ =0xFFFFFDE0
	adds r0, r7, r1
	adds r1, r4, #0
	bl ProcessClipdata
	strb r5, [r6]
	subs r4, #0x40
	mov r0, r8
	adds r1, r4, #0
	bl ProcessClipdata
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080585D8: .4byte gCurrentSprite
_080585DC: .4byte 0xFFFFFC80
_080585E0: .4byte gCurrentClipdataAffectingAction
_080585E4: .4byte 0xFFFFFEE0
_080585E8: .4byte 0xFFFFFEA0
_080585EC: .4byte 0xFFFFFE60
_080585F0: .4byte 0xFFFFFE20
_080585F4: .4byte 0xFFFFFDE0

	thumb_func_start OmegaMetroidHuskInit
OmegaMetroidHuskInit: @ 0x080585F8
	push {r4, lr}
	ldr r0, _08058650 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08058654 @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	movs r3, #0
	mov r1, ip
	strh r0, [r1]
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	adds r1, #5
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x58
	strb r0, [r1]
	ldr r1, _08058658 @ =0x0000FFFC
	mov r4, ip
	strh r1, [r4, #0xa]
	movs r0, #4
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r0, [r4, #0x10]
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0805865C @ =0x083A7458
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058650: .4byte gCurrentSprite
_08058654: .4byte 0x0000FFFB
_08058658: .4byte 0x0000FFFC
_0805865C: .4byte 0x083A7458

	thumb_func_start OmegaMetroidHuskWaitingForSamus
OmegaMetroidHuskWaitingForSamus: @ 0x08058660
	push {lr}
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #0xbc
	lsls r1, r1, #1
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #0
	beq _08058684
	ldr r0, _08058688 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	ldr r0, _0805868C @ =gDisableScrolling
	strb r1, [r0]
	movs r0, #2
	bl OmegaHuskSetCollision
_08058684:
	pop {r0}
	bx r0
	.align 2, 0
_08058688: .4byte gCurrentSprite
_0805868C: .4byte gDisableScrolling

	thumb_func_start OmegaMetroidHuskWaitForOmegaMetroidToSpawn
OmegaMetroidHuskWaitForOmegaMetroidToSpawn: @ 0x08058690
	push {r4, r5, r6, lr}
	ldr r2, _0805878C @ =gSamusData
	ldrh r1, [r2, #0x18]
	ldr r4, _08058790 @ =gCurrentSprite
	ldrh r5, [r4, #2]
	adds r0, r5, #0
	subs r0, #0x80
	cmp r1, r0
	ble _08058784
	ldrh r1, [r2, #0x16]
	ldrh r6, [r4, #4]
	ldr r2, _08058794 @ =0xFFFFFD80
	adds r0, r6, r2
	cmp r1, r0
	bge _08058784
	adds r1, r4, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #8
	strb r0, [r1]
	ldr r2, _08058798 @ =gSpriteData
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, #0x31
	strb r3, [r0]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	ldr r1, _0805879C @ =0xFFFFFEC0
	adds r0, r5, r1
	adds r4, r6, #0
	adds r4, #0x40
	adds r1, r4, #0
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r5, #0
	subs r0, #0xc0
	adds r1, r6, #0
	adds r1, #0x32
	movs r2, #0x30
	bl ParticleSet
	adds r0, r5, #0
	subs r0, #0x60
	adds r1, r6, #0
	adds r1, #0x48
	movs r2, #0x30
	bl ParticleSet
	ldr r0, _080587A0 @ =0xFFFFFE3E
	adds r2, r5, r0
	movs r0, #0
	movs r1, #1
	adds r3, r4, #0
	bl SpriteDebrisInit
	ldr r1, _080587A4 @ =0xFFFFFE68
	adds r2, r5, r1
	adds r3, r6, #0
	adds r3, #0x20
	movs r0, #0
	movs r1, #4
	bl SpriteDebrisInit
	ldr r0, _080587A8 @ =0xFFFFFE88
	adds r2, r5, r0
	adds r3, r6, #0
	adds r3, #0x2a
	movs r0, #0
	movs r1, #5
	bl SpriteDebrisInit
	ldr r1, _080587AC @ =0xFFFFFEB6
	adds r2, r5, r1
	adds r3, r6, #0
	adds r3, #0x24
	movs r0, #0
	movs r1, #8
	bl SpriteDebrisInit
	ldr r0, _080587B0 @ =0xFFFFFED4
	adds r2, r5, r0
	subs r4, #0x10
	movs r0, #0
	movs r1, #0x11
	adds r3, r4, #0
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0xf0
	adds r3, r6, #0
	adds r3, #0x3a
	movs r0, #0
	movs r1, #4
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0xc8
	adds r3, r6, #0
	adds r3, #0x3c
	movs r0, #0
	movs r1, #5
	bl SpriteDebrisInit
	adds r2, r5, #0
	subs r2, #0x8c
	movs r0, #0
	movs r1, #1
	adds r3, r4, #0
	bl SpriteDebrisInit
	movs r0, #0x86
	lsls r0, r0, #2
	bl unk_3b1c
_08058784:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805878C: .4byte gSamusData
_08058790: .4byte gCurrentSprite
_08058794: .4byte 0xFFFFFD80
_08058798: .4byte gSpriteData
_0805879C: .4byte 0xFFFFFEC0
_080587A0: .4byte 0xFFFFFE3E
_080587A4: .4byte 0xFFFFFE68
_080587A8: .4byte 0xFFFFFE88
_080587AC: .4byte 0xFFFFFEB6
_080587B0: .4byte 0xFFFFFED4

	thumb_func_start OmegaMetroidHuskGettingCrushedInit
OmegaMetroidHuskGettingCrushedInit: @ 0x080587B4
	push {lr}
	ldr r1, _080587D4 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #0x18
	strb r0, [r2]
	ldr r0, _080587D8 @ =0x083A7468
	str r0, [r1, #0x18]
	strb r3, [r1, #0x1c]
	strh r3, [r1, #0x16]
	ldr r0, _080587DC @ =0x00000225
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_080587D4: .4byte gCurrentSprite
_080587D8: .4byte 0x083A7468
_080587DC: .4byte 0x00000225

	thumb_func_start OmegaMetroidHuskGettingCrushed
OmegaMetroidHuskGettingCrushed: @ 0x080587E0
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _08058804
	ldr r0, _08058808 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x1a
	strb r1, [r2]
	ldr r1, _0805880C @ =0x083A7498
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0x3c
	strb r1, [r0]
_08058804:
	pop {r0}
	bx r0
	.align 2, 0
_08058808: .4byte gCurrentSprite
_0805880C: .4byte 0x083A7498

	thumb_func_start OmegaMetroidHuskWaiting
OmegaMetroidHuskWaiting: @ 0x08058810
	push {lr}
	ldr r1, _08058834 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08058830
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #0x1c
	strb r1, [r0]
	movs r0, #0x1e
	strb r0, [r2]
_08058830:
	pop {r0}
	bx r0
	.align 2, 0
_08058834: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidHuskDisappearing
OmegaMetroidHuskDisappearing: @ 0x08058838
	push {lr}
	ldr r3, _08058868 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08058852
	ldrh r0, [r3]
	movs r1, #4
	eors r0, r1
	strh r0, [r3]
_08058852:
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _08058862
	strh r0, [r3]
_08058862:
	pop {r0}
	bx r0
	.align 2, 0
_08058868: .4byte gCurrentSprite

	thumb_func_start OmegaMetroidHusk
OmegaMetroidHusk: @ 0x0805886C
	push {lr}
	ldr r0, _0805888C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _08058930
	lsls r0, r0, #2
	ldr r1, _08058890 @ =_08058894
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805888C: .4byte gCurrentSprite
_08058890: .4byte _08058894
_08058894: @ jump table
	.4byte _08058908 @ case 0
	.4byte _0805890E @ case 1
	.4byte _08058914 @ case 2
	.4byte _08058930 @ case 3
	.4byte _08058930 @ case 4
	.4byte _08058930 @ case 5
	.4byte _08058930 @ case 6
	.4byte _08058930 @ case 7
	.4byte _08058930 @ case 8
	.4byte _08058930 @ case 9
	.4byte _08058930 @ case 10
	.4byte _08058930 @ case 11
	.4byte _08058930 @ case 12
	.4byte _08058930 @ case 13
	.4byte _08058930 @ case 14
	.4byte _08058930 @ case 15
	.4byte _08058930 @ case 16
	.4byte _08058930 @ case 17
	.4byte _08058930 @ case 18
	.4byte _08058930 @ case 19
	.4byte _08058930 @ case 20
	.4byte _08058930 @ case 21
	.4byte _08058930 @ case 22
	.4byte _0805891A @ case 23
	.4byte _08058920 @ case 24
	.4byte _08058930 @ case 25
	.4byte _08058926 @ case 26
	.4byte _08058930 @ case 27
	.4byte _0805892C @ case 28
_08058908:
	bl OmegaMetroidHuskInit
	b _08058930
_0805890E:
	bl OmegaMetroidHuskWaitingForSamus
	b _08058930
_08058914:
	bl OmegaMetroidHuskWaitForOmegaMetroidToSpawn
	b _08058930
_0805891A:
	bl OmegaMetroidHuskGettingCrushedInit
	b _08058930
_08058920:
	bl OmegaMetroidHuskGettingCrushed
	b _08058930
_08058926:
	bl OmegaMetroidHuskWaiting
	b _08058930
_0805892C:
	bl OmegaMetroidHuskDisappearing
_08058930:
	pop {r0}
	bx r0

	thumb_func_start IceBeamAbilitySpawningFromX
IceBeamAbilitySpawningFromX: @ 0x08058934
	push {r4, lr}
	ldr r0, _08058964 @ =gCurrentSprite
	adds r4, r0, #0
	adds r4, #0x2e
	ldrb r1, [r4]
	subs r1, #1
	strb r1, [r4]
	ldr r3, _08058968 @ =gWrittenToMosaic_H
	ldr r2, _0805896C @ =0x083BDED6
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #7
	bhi _08058970
	ldrb r2, [r4]
	movs r0, #0x4d
	movs r1, #0
	bl SpriteLoadGfx
	b _0805897E
	.align 2, 0
_08058964: .4byte gCurrentSprite
_08058968: .4byte gWrittenToMosaic_H
_0805896C: .4byte 0x083BDED6
_08058970:
	cmp r1, #8
	bne _0805897E
	movs r0, #0x4d
	movs r1, #0
	movs r2, #2
	bl SpriteLoadPal
_0805897E:
	ldr r2, _080589A0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805899A
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x5c
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _080589A4 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r2]
_0805899A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080589A0: .4byte gCurrentSprite
_080589A4: .4byte 0x0000FFDF

	thumb_func_start IceBeamAbilityInit
IceBeamAbilityInit: @ 0x080589A8
	push {r4, r5, r6, lr}
	ldr r3, _08058A04 @ =gCurrentSprite
	ldrh r0, [r3]
	ldr r5, _08058A08 @ =0x0000FFFB
	ands r5, r0
	movs r6, #0
	movs r2, #0
	strh r5, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r6, [r0]
	adds r0, #2
	movs r4, #0x10
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r1, _08058A0C @ =0x0000FFDC
	strh r1, [r3, #0xa]
	movs r0, #0x24
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldr r0, _08058A10 @ =0x083A86A4
	str r0, [r3, #0x18]
	strb r6, [r3, #0x1c]
	strh r2, [r3, #0x16]
	adds r1, r3, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x59
	bne _08058A14
	ldrh r0, [r3, #2]
	subs r0, #0x48
	strh r0, [r3, #2]
	movs r0, #0x5a
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r4, [r0]
	movs r1, #0x20
	adds r0, r5, #0
	orrs r0, r1
	strh r0, [r3]
	b _08058A26
	.align 2, 0
_08058A04: .4byte gCurrentSprite
_08058A08: .4byte 0x0000FFFB
_08058A0C: .4byte 0x0000FFDC
_08058A10: .4byte 0x083A86A4
_08058A14:
	movs r0, #1
	strb r0, [r1]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r6, [r0]
_08058A26:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start IceBeamAbilitySpawning
IceBeamAbilitySpawning: @ 0x08058A2C
	push {lr}
	ldr r1, _08058A58 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	adds r2, #8
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08058A54
	adds r0, r1, #0
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	ldr r0, _08058A5C @ =0x000002AE
	bl SoundPlay
_08058A54:
	pop {r0}
	bx r0
	.align 2, 0
_08058A58: .4byte gCurrentSprite
_08058A5C: .4byte 0x000002AE

	thumb_func_start IceBeamAbilityEntering
IceBeamAbilityEntering: @ 0x08058A60
	push {r4, r5, r6, lr}
	ldr r2, _08058ACC @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _08058AD0 @ =0x08328480
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _08058AD4 @ =0x00007FFF
	cmp r1, r0
	bne _08058A8A
	ldrh r4, [r5]
	movs r3, #0
_08058A8A:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
	movs r4, #0
	strh r0, [r2, #2]
	ldrh r3, [r2, #4]
	lsrs r1, r3, #2
	ldr r0, _08058AD8 @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	ldr r6, _08058ADC @ =0xFFC60000
	adds r1, r1, r6
	lsrs r1, r1, #0x10
	cmp r1, #4
	bhi _08058AE0
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x17
	strb r0, [r1]
	mov r0, ip
	strb r4, [r0]
	adds r0, r2, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	b _08058AE4
	.align 2, 0
_08058ACC: .4byte gCurrentSprite
_08058AD0: .4byte 0x08328480
_08058AD4: .4byte 0x00007FFF
_08058AD8: .4byte gBg1XPosition
_08058ADC: .4byte 0xFFC60000
_08058AE0:
	adds r0, r3, #6
	strh r0, [r2, #4]
_08058AE4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start IceBeamAbilityFloatingBeforeSA_X
IceBeamAbilityFloatingBeforeSA_X: @ 0x08058AEC
	push {r4, r5, r6, r7, lr}
	ldr r2, _08058B54 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r1, #8
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08058B64
	adds r5, r2, #0
	adds r5, #0x31
	ldrb r1, [r5]
	ldr r4, _08058B58 @ =0x083A74A8
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r6, #0
	ldrsh r0, [r0, r6]
	ldr r6, _08058B5C @ =0x00007FFF
	cmp r0, r6
	bne _08058B22
	ldrh r3, [r4]
	movs r1, #0
_08058B22:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #2]
	adds r0, r0, r3
	strh r0, [r2, #2]
	adds r5, r2, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _08058B60 @ =0x083A752A
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r3, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r6
	bne _08058B46
	ldrh r3, [r4]
	movs r1, #0
_08058B46:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r2, #4]
	adds r0, r0, r3
	strh r0, [r2, #4]
	b _08058B78
	.align 2, 0
_08058B54: .4byte gCurrentSprite
_08058B58: .4byte 0x083A74A8
_08058B5C: .4byte 0x00007FFF
_08058B60: .4byte 0x083A752A
_08058B64:
	movs r0, #0x2c
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
_08058B78:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start IceBeamAbilityTurningIntoSA_X
IceBeamAbilityTurningIntoSA_X: @ 0x08058B80
	push {lr}
	ldr r1, _08058BB8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldr r3, _08058BBC @ =gWrittenToMosaic_H
	ldr r2, _08058BC0 @ =0x083BDED6
	adds r1, #0x2e
	ldrb r0, [r1]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r3]
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #7
	bhi _08058BC4
	ldrb r2, [r1]
	movs r0, #0xc9
	movs r1, #0
	bl SpriteLoadGfx
	b _08058BD2
	.align 2, 0
_08058BB8: .4byte gCurrentSprite
_08058BBC: .4byte gWrittenToMosaic_H
_08058BC0: .4byte 0x083BDED6
_08058BC4:
	cmp r0, #8
	bne _08058BD2
	movs r0, #0xc9
	movs r1, #0
	movs r2, #2
	bl SpriteLoadPal
_08058BD2:
	ldr r2, _08058BF0 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _08058BEA
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x59
	strb r1, [r0]
	movs r0, #0xc9
	strb r0, [r2, #0x1d]
_08058BEA:
	pop {r0}
	bx r0
	.align 2, 0
_08058BF0: .4byte gCurrentSprite

	thumb_func_start IceBeamAbilitySpawningFromSA_XInit
IceBeamAbilitySpawningFromSA_XInit: @ 0x08058BF4
	ldr r3, _08058C34 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x5d
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xc
	strb r0, [r1]
	subs r1, #3
	movs r0, #4
	strb r0, [r1]
	ldr r0, _08058C38 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
	adds r0, #0xf
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	bx lr
	.align 2, 0
_08058C34: .4byte gCurrentSprite
_08058C38: .4byte gIoRegisters

	thumb_func_start IceBeamAbilityGoingToTarget
IceBeamAbilityGoingToTarget: @ 0x08058C3C
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r0, _08058CD0 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	ldr r5, _08058CD4 @ =gCurrentSprite
	cmp r0, #0
	bne _08058C56
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
_08058C56:
	adds r1, r5, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r4, _08058CD8 @ =gAbilityRestingYPosition
	ldrh r0, [r4]
	ldr r6, _08058CDC @ =gAbilityRestingXPosition
	ldrh r1, [r6]
	movs r2, #2
	str r2, [sp]
	ldr r2, _08058CE0 @ =0x00000141
	str r2, [sp, #4]
	movs r2, #0x10
	movs r3, #0x18
	bl XParasiteMoveWithSound
	ldrh r2, [r5, #2]
	ldrh r1, [r4]
	adds r0, r1, #6
	cmp r2, r0
	bge _08058CC8
	subs r0, r1, #6
	cmp r2, r0
	ble _08058CC8
	ldrh r2, [r5, #4]
	ldrh r1, [r6]
	adds r0, r1, #6
	cmp r2, r0
	bge _08058CC8
	subs r0, r1, #6
	cmp r2, r0
	ble _08058CC8
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x5e
	strb r0, [r1]
	ldrh r1, [r5]
	ldr r0, _08058CE4 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	strh r0, [r5]
	adds r0, r5, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r1, _08058CE8 @ =0x0828FD04
	ldr r0, _08058CEC @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #7
	bl _call_via_r1
	ldr r0, _08058CF0 @ =gPoseLock
	strb r4, [r0]
_08058CC8:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058CD0: .4byte gFrameCounter8Bit
_08058CD4: .4byte gCurrentSprite
_08058CD8: .4byte gAbilityRestingYPosition
_08058CDC: .4byte gAbilityRestingXPosition
_08058CE0: .4byte 0x00000141
_08058CE4: .4byte 0x0000FFFB
_08058CE8: .4byte 0x0828FD04
_08058CEC: .4byte gSamusData
_08058CF0: .4byte gPoseLock

	thumb_func_start IceBeamAbilityWaiting
IceBeamAbilityWaiting: @ 0x08058CF4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r3, _08058DEC @ =gCurrentSprite
	movs r0, #0x31
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	ldr r4, _08058DF0 @ =0x083031E0
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r2, [r0]
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldr r7, _08058DF4 @ =0x00007FFF
	mov r8, r7
	cmp r0, r8
	bne _08058D1C
	ldrh r2, [r4]
	movs r1, #0
_08058D1C:
	adds r0, r1, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3, #2]
	adds r0, r0, r2
	movs r6, #0
	strh r0, [r3, #2]
	adds r5, r3, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r4, _08058DF8 @ =0x08303262
	lsls r0, r1, #1
	adds r0, r0, r4
	ldrh r2, [r0]
	movs r7, #0
	ldrsh r0, [r0, r7]
	cmp r0, r8
	bne _08058D44
	ldrh r2, [r4]
	movs r1, #0
_08058D44:
	adds r0, r1, #1
	strb r0, [r5]
	ldrh r0, [r3, #4]
	adds r0, r0, r2
	strh r0, [r3, #4]
	ldrh r4, [r3]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r4
	cmp r0, #0
	beq _08058E10
	ldr r1, _08058DFC @ =gPreventMovementTimer
	movs r0, #0x64
	strh r0, [r1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x5f
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	strb r0, [r1]
	adds r1, #9
	strb r6, [r1]
	strb r0, [r5]
	subs r1, #1
	strb r6, [r1]
	mov r1, ip
	strb r0, [r1]
	movs r0, #0x80
	orrs r0, r4
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x2b
	strb r6, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #0x12]
	movs r0, #0x14
	strh r0, [r3, #6]
	strb r6, [r3, #0x1c]
	movs r0, #0
	strh r0, [r3, #0x16]
	ldr r0, _08058E00 @ =0x083A86EC
	str r0, [r3, #0x18]
	ldr r4, _08058E04 @ =gSamusData
	movs r5, #0x26
	ldrsh r0, [r4, r5]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r7, [r4, #0x18]
	adds r0, r0, r7
	ldrh r1, [r4, #0x16]
	movs r2, #0x1d
	bl ParticleSet
	movs r0, #0x6b
	bl EventCheckAdvance
	ldr r1, _08058E08 @ =0x0828FD04
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #4
	bl _call_via_r1
	ldr r1, _08058E0C @ =0x030012F0
	movs r0, #0x30
	strb r0, [r1, #3]
	movs r0, #0x92
	bl SoundPlay
	movs r0, #0
	bl FadeMusic
	b _08058E22
	.align 2, 0
_08058DEC: .4byte gCurrentSprite
_08058DF0: .4byte 0x083031E0
_08058DF4: .4byte 0x00007FFF
_08058DF8: .4byte 0x08303262
_08058DFC: .4byte gPreventMovementTimer
_08058E00: .4byte 0x083A86EC
_08058E04: .4byte gSamusData
_08058E08: .4byte 0x0828FD04
_08058E0C: .4byte 0x030012F0
_08058E10:
	ldr r0, _08058E2C @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _08058E22
	movs r0, #0xc3
	bl SoundPlay
_08058E22:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058E2C: .4byte gFrameCounter8Bit

	thumb_func_start IceBeamAbilityGettingAbsorbed
IceBeamAbilityGettingAbsorbed: @ 0x08058E30
	push {r4, r5, lr}
	ldr r4, _08058E54 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	bl HealSamusOfOneTank
	bl XParasiteStickToSamus
	ldrh r0, [r4, #6]
	adds r5, r0, #0
	cmp r5, #0
	beq _08058E58
	subs r0, #1
	strh r0, [r4, #6]
	b _08058E6A
	.align 2, 0
_08058E54: .4byte gCurrentSprite
_08058E58:
	ldrh r0, [r4, #0x12]
	cmp r0, #0x50
	bls _08058E64
	subs r0, #8
	strh r0, [r4, #0x12]
	b _08058E6A
_08058E64:
	bl ProjectileLoadBeamGraphics
	strh r5, [r4]
_08058E6A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start IceBeamAbility
IceBeamAbility: @ 0x08058E70
	push {lr}
	ldr r0, _08058E88 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x5f
	bls _08058E7E
	b _0805904E
_08058E7E:
	lsls r0, r0, #2
	ldr r1, _08058E8C @ =_08058E90
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08058E88: .4byte gCurrentSprite
_08058E8C: .4byte _08058E90
_08058E90: @ jump table
	.4byte _08059010 @ case 0
	.4byte _08059016 @ case 1
	.4byte _0805901C @ case 2
	.4byte _0805904E @ case 3
	.4byte _0805904E @ case 4
	.4byte _0805904E @ case 5
	.4byte _0805904E @ case 6
	.4byte _0805904E @ case 7
	.4byte _0805904E @ case 8
	.4byte _0805904E @ case 9
	.4byte _0805904E @ case 10
	.4byte _0805904E @ case 11
	.4byte _0805904E @ case 12
	.4byte _0805904E @ case 13
	.4byte _0805904E @ case 14
	.4byte _0805904E @ case 15
	.4byte _0805904E @ case 16
	.4byte _0805904E @ case 17
	.4byte _0805904E @ case 18
	.4byte _0805904E @ case 19
	.4byte _0805904E @ case 20
	.4byte _0805904E @ case 21
	.4byte _0805904E @ case 22
	.4byte _08059022 @ case 23
	.4byte _08059028 @ case 24
	.4byte _0805904E @ case 25
	.4byte _0805904E @ case 26
	.4byte _0805904E @ case 27
	.4byte _0805904E @ case 28
	.4byte _0805904E @ case 29
	.4byte _0805904E @ case 30
	.4byte _0805904E @ case 31
	.4byte _0805904E @ case 32
	.4byte _0805904E @ case 33
	.4byte _0805904E @ case 34
	.4byte _0805904E @ case 35
	.4byte _0805904E @ case 36
	.4byte _0805904E @ case 37
	.4byte _0805904E @ case 38
	.4byte _0805904E @ case 39
	.4byte _0805904E @ case 40
	.4byte _0805904E @ case 41
	.4byte _0805904E @ case 42
	.4byte _0805904E @ case 43
	.4byte _0805904E @ case 44
	.4byte _0805904E @ case 45
	.4byte _0805904E @ case 46
	.4byte _0805904E @ case 47
	.4byte _0805904E @ case 48
	.4byte _0805904E @ case 49
	.4byte _0805904E @ case 50
	.4byte _0805904E @ case 51
	.4byte _0805904E @ case 52
	.4byte _0805904E @ case 53
	.4byte _0805904E @ case 54
	.4byte _0805904E @ case 55
	.4byte _0805904E @ case 56
	.4byte _0805904E @ case 57
	.4byte _0805904E @ case 58
	.4byte _0805904E @ case 59
	.4byte _0805904E @ case 60
	.4byte _0805904E @ case 61
	.4byte _0805904E @ case 62
	.4byte _0805904E @ case 63
	.4byte _0805904E @ case 64
	.4byte _0805904E @ case 65
	.4byte _0805904E @ case 66
	.4byte _0805904E @ case 67
	.4byte _0805904E @ case 68
	.4byte _0805904E @ case 69
	.4byte _0805904E @ case 70
	.4byte _0805904E @ case 71
	.4byte _0805904E @ case 72
	.4byte _0805904E @ case 73
	.4byte _0805904E @ case 74
	.4byte _0805904E @ case 75
	.4byte _0805904E @ case 76
	.4byte _0805904E @ case 77
	.4byte _0805904E @ case 78
	.4byte _0805904E @ case 79
	.4byte _0805904E @ case 80
	.4byte _0805904E @ case 81
	.4byte _0805904E @ case 82
	.4byte _0805904E @ case 83
	.4byte _0805904E @ case 84
	.4byte _0805904E @ case 85
	.4byte _0805904E @ case 86
	.4byte _0805904E @ case 87
	.4byte _0805904E @ case 88
	.4byte _0805902E @ case 89
	.4byte _08059032 @ case 90
	.4byte _0805904E @ case 91
	.4byte _08059038 @ case 92
	.4byte _0805903E @ case 93
	.4byte _08059044 @ case 94
	.4byte _0805904A @ case 95
_08059010:
	bl IceBeamAbilityInit
	b _0805904E
_08059016:
	bl IceBeamAbilitySpawning
	b _0805904E
_0805901C:
	bl IceBeamAbilityEntering
	b _0805904E
_08059022:
	bl IceBeamAbilityFloatingBeforeSA_X
	b _0805904E
_08059028:
	bl IceBeamAbilityTurningIntoSA_X
	b _0805904E
_0805902E:
	bl IceBeamAbilityInit
_08059032:
	bl IceBeamAbilitySpawningFromX
	b _0805904E
_08059038:
	bl IceBeamAbilitySpawningFromSA_XInit
	b _0805904E
_0805903E:
	bl IceBeamAbilityGoingToTarget
	b _0805904E
_08059044:
	bl IceBeamAbilityWaiting
	b _0805904E
_0805904A:
	bl IceBeamAbilityGettingAbsorbed
_0805904E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MetroidHusk
MetroidHusk: @ 0x08059054
	push {r4, r5, lr}
	ldr r3, _080590A8 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	adds r5, r3, #0
	adds r5, #0x24
	ldrb r4, [r5]
	cmp r4, #0
	bne _080590A0
	adds r0, r3, #0
	adds r0, #0x22
	movs r2, #4
	strb r2, [r0]
	adds r0, #3
	strb r4, [r0]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _080590AC @ =0x0000FFFC
	strh r0, [r3, #0xa]
	strh r2, [r3, #0xc]
	strh r0, [r3, #0xe]
	strh r2, [r3, #0x10]
	movs r0, #2
	strb r0, [r5]
	ldr r0, _080590B0 @ =0x083A8F44
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r4, [r3, #0x16]
_080590A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080590A8: .4byte gCurrentSprite
_080590AC: .4byte 0x0000FFFC
_080590B0: .4byte 0x083A8F44

	thumb_func_start RidleyMove
RidleyMove: @ 0x080590B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldr r4, [sp, #0x28]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #4]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	mov sl, r3
	lsls r4, r4, #0x18
	lsrs r6, r4, #0x18
	movs r0, #0
	mov r8, r0
	movs r7, #0
	ldr r1, _0805911C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x25
	ldrb r0, [r0]
	movs r2, #0xc8
	cmp r0, #0x1b
	bne _080590F4
	adds r2, #0x58
_080590F4:
	ldrh r1, [r1]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08059128
	ldr r1, _08059120 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	ldrh r1, [r1, #0xa]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08059124 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08059140
	movs r1, #1
	mov r8, r1
	b _08059140
	.align 2, 0
_0805911C: .4byte gCurrentSprite
_08059120: .4byte gSubSpriteData1
_08059124: .4byte gPreviousCollisionCheck
_08059128:
	ldr r1, _08059170 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	ldrh r1, [r1, #0xa]
	subs r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08059174 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08059140
	movs r2, #1
	mov r8, r2
_08059140:
	ldr r0, _08059178 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0805917C
	ldr r4, _08059170 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, #0xe0
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _08059174 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08059192
	ldrh r0, [r4, #8]
	adds r0, #0xa0
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	b _0805918E
	.align 2, 0
_08059170: .4byte gSubSpriteData1
_08059174: .4byte gPreviousCollisionCheck
_08059178: .4byte gCurrentSprite
_0805917C:
	ldr r1, _080591E4 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	ldr r5, _080591E8 @ =0xFFFFFE80
	adds r0, r0, r5
	ldrh r1, [r1, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _080591EC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
_0805918E:
	cmp r0, #0
	beq _08059198
_08059192:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_08059198:
	movs r4, #0
	ldr r2, _080591F0 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r3, r2, #0
	cmp r0, #0
	beq _08059214
	mov r0, r8
	cmp r0, #0
	bne _0805927E
	movs r1, #0x2f
	adds r1, r1, r3
	mov ip, r1
	ldrb r0, [r1]
	cmp r0, #0
	bne _080591F4
	ldr r2, _080591E4 @ =gSubSpriteData1
	ldrh r1, [r2, #0xa]
	movs r0, #0x80
	lsls r0, r0, #1
	add r0, sb
	cmp r1, r0
	bgt _08059232
	adds r1, r3, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, sl
	bhs _080591D8
	adds r0, #1
	strb r0, [r1]
_080591D8:
	ldrb r0, [r1]
	asrs r0, r6
	ldrh r5, [r2, #0xa]
	adds r0, r0, r5
	strh r0, [r2, #0xa]
	b _0805927A
	.align 2, 0
_080591E4: .4byte gSubSpriteData1
_080591E8: .4byte 0xFFFFFE80
_080591EC: .4byte gPreviousCollisionCheck
_080591F0: .4byte gCurrentSprite
_080591F4:
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805927E
	ldr r1, _08059210 @ =gSubSpriteData1
	mov r2, ip
	ldrb r0, [r2]
	asrs r0, r6
	ldrh r5, [r1, #0xa]
	adds r0, r0, r5
	strh r0, [r1, #0xa]
	b _0805927A
	.align 2, 0
_08059210: .4byte gSubSpriteData1
_08059214:
	mov r0, r8
	cmp r0, #0
	bne _08059278
	movs r1, #0x2f
	adds r1, r1, r3
	mov ip, r1
	ldrb r0, [r1]
	cmp r0, #0
	bne _0805925A
	ldr r2, _08059240 @ =gSubSpriteData1
	ldrh r1, [r2, #0xa]
	ldr r0, _08059244 @ =0xFFFFFF00
	add r0, sb
	cmp r1, r0
	bge _08059248
_08059232:
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r2, ip
	strb r0, [r2]
	b _0805927A
	.align 2, 0
_08059240: .4byte gSubSpriteData1
_08059244: .4byte 0xFFFFFF00
_08059248:
	adds r1, r3, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, sl
	bhs _08059256
	adds r0, #1
	strb r0, [r1]
_08059256:
	ldrb r1, [r1]
	b _0805926A
_0805925A:
	subs r0, #1
	mov r5, ip
	strb r0, [r5]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805927E
	ldr r2, _08059274 @ =gSubSpriteData1
	ldrb r1, [r5]
_0805926A:
	asrs r1, r6
	ldrh r0, [r2, #0xa]
	subs r0, r0, r1
	strh r0, [r2, #0xa]
	b _0805927A
	.align 2, 0
_08059274: .4byte gSubSpriteData1
_08059278:
	movs r4, #1
_0805927A:
	cmp r4, #0
	beq _080592A2
_0805927E:
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	ldrb r0, [r0]
	cmp r0, #0x1b
	beq _080592A2
	subs r1, #0xc
	movs r0, #3
	strb r0, [r1]
_080592A2:
	movs r4, #0
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _08059318
	cmp r7, #0
	bne _0805937A
	movs r5, #0x2e
	adds r5, r5, r3
	mov ip, r5
	ldrb r0, [r5]
	cmp r0, #0
	bne _080592F8
	ldr r2, _080592D8 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, [sp]
	subs r0, #4
	cmp r1, r0
	ble _080592DC
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r5]
	b _08059376
	.align 2, 0
_080592D8: .4byte gSubSpriteData1
_080592DC:
	adds r1, r3, #0
	adds r1, #0x31
	ldrb r0, [r1]
	ldr r5, [sp, #4]
	cmp r0, r5
	bhs _080592EC
	adds r0, #1
	strb r0, [r1]
_080592EC:
	ldrb r0, [r1]
	asrs r0, r6
	ldrh r1, [r2, #8]
	adds r0, r0, r1
	strh r0, [r2, #8]
	b _08059376
_080592F8:
	subs r0, #1
	mov r2, ip
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805937A
	ldr r1, _08059314 @ =gSubSpriteData1
	ldrb r0, [r2]
	asrs r0, r6
	ldrh r5, [r1, #8]
	adds r0, r0, r5
	strh r0, [r1, #8]
	b _08059376
	.align 2, 0
_08059314: .4byte gSubSpriteData1
_08059318:
	cmp r7, #0
	bne _08059374
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _08059356
	ldr r2, _08059340 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, [sp]
	adds r0, #4
	cmp r1, r0
	bge _08059344
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	b _08059376
	.align 2, 0
_08059340: .4byte gSubSpriteData1
_08059344:
	adds r1, r3, #0
	adds r1, #0x31
	ldrb r0, [r1]
	ldr r5, [sp, #4]
	cmp r0, r5
	bhs _08059364
	adds r0, #1
	strb r0, [r1]
	b _08059364
_08059356:
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805937A
	ldr r2, _08059370 @ =gSubSpriteData1
_08059364:
	ldrb r1, [r1]
	asrs r1, r6
	ldrh r0, [r2, #8]
	subs r0, r0, r1
	strh r0, [r2, #8]
	b _08059376
	.align 2, 0
_08059370: .4byte gSubSpriteData1
_08059374:
	movs r4, #1
_08059376:
	cmp r4, #0
	beq _0805938E
_0805937A:
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	eors r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
_0805938E:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start UpdateSubSpriteData2Animation
UpdateSubSpriteData2Animation: @ 0x080593A0
	push {lr}
	ldr r2, _080593D8 @ =gSubSpriteData2
	ldrb r0, [r2, #6]
	adds r0, #1
	strb r0, [r2, #6]
	ldrh r1, [r2, #4]
	ldr r3, [r2]
	lsls r1, r1, #3
	adds r1, r1, r3
	ldrb r1, [r1, #4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	bhs _080593D4
	movs r0, #1
	strb r0, [r2, #6]
	ldrh r0, [r2, #4]
	adds r0, #1
	strh r0, [r2, #4]
	ldrh r0, [r2, #4]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #4]
	cmp r0, #0
	bne _080593D4
	strh r0, [r2, #4]
_080593D4:
	pop {r0}
	bx r0
	.align 2, 0
_080593D8: .4byte gSubSpriteData2

	thumb_func_start RidleySyncSubSpritesPosition
RidleySyncSubSpritesPosition: @ 0x080593DC
	push {r4, lr}
	ldr r4, _0805941C @ =gSubSpriteData2
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _08059420 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08059424
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r1, [r4, #0xa]
	ldrh r0, [r0, #4]
	subs r1, r1, r0
	strh r1, [r2, #4]
	b _08059436
	.align 2, 0
_0805941C: .4byte gSubSpriteData2
_08059420: .4byte gCurrentSprite
_08059424:
	ldrb r0, [r2, #0x1e]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #1
	adds r1, r1, r3
	ldrh r0, [r1, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
_08059436:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RidleySyncSubSprites
RidleySyncSubSprites: @ 0x0805943C
	push {r4, lr}
	ldr r4, _080594A0 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _080594A4 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _080594A8 @ =0x0879B708
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _0805946E
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_0805946E:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	ldrb r1, [r2, #0x1e]
	cmp r0, #0
	beq _080594AC
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r1, [r4, #0xa]
	ldrh r0, [r0, #4]
	subs r1, r1, r0
	strh r1, [r2, #4]
	b _080594BC
	.align 2, 0
_080594A0: .4byte gSubSpriteData1
_080594A4: .4byte gCurrentSprite
_080594A8: .4byte 0x0879B708
_080594AC:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
_080594BC:
	ldrb r0, [r2, #0x1e]
	cmp r0, #1
	bne _080594CC
	ldr r0, _080594D4 @ =gSubSpriteData2
	ldrh r1, [r2, #2]
	strh r1, [r0, #8]
	ldrh r1, [r2, #4]
	strh r1, [r0, #0xa]
_080594CC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080594D4: .4byte gSubSpriteData2

	thumb_func_start RidleyTailSyncSubSprites
RidleyTailSyncSubSprites: @ 0x080594D8
	push {r4, lr}
	ldr r4, _0805953C @ =gSubSpriteData2
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _08059540 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _08059544 @ =0x0879B708
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _0805950A
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_0805950A:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	ldrb r1, [r2, #0x1e]
	cmp r0, #0
	beq _08059548
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r1, [r4, #0xa]
	ldrh r0, [r0, #4]
	subs r1, r1, r0
	strh r1, [r2, #4]
	b _08059558
	.align 2, 0
_0805953C: .4byte gSubSpriteData2
_08059540: .4byte gCurrentSprite
_08059544: .4byte 0x0879B708
_08059548:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
_08059558:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyUpdatePalette
RidleyUpdatePalette: @ 0x08059560
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _08059584 @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	ldr r2, _08059588 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r4, _0805958C @ =gBossWork1
	ldrb r1, [r4]
	cmp r1, #0
	beq _08059590
	cmp r1, #1
	beq _080595A8
	b _080595BE
	.align 2, 0
_08059584: .4byte gCurrentSprite
_08059588: .4byte sPrimarySpriteStats
_0805958C: .4byte gBossWork1
_08059590:
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bgt _080595BE
	ldr r7, _080595A4 @ =0x083AE06C
	movs r0, #1
	strb r0, [r4]
	b _080595C2
	.align 2, 0
_080595A4: .4byte 0x083AE06C
_080595A8:
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r5, r0
	bhi _080595BE
	ldr r7, _080595D8 @ =0x083AE0AC
	movs r0, #2
	strb r0, [r4]
	movs r6, #1
_080595BE:
	cmp r6, #0
	beq _080595D0
_080595C2:
	ldr r1, _080595DC @ =0x040000D4
	str r7, [r1]
	ldr r0, _080595E0 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _080595E4 @ =0x80000020
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_080595D0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080595D8: .4byte 0x083AE0AC
_080595DC: .4byte 0x040000D4
_080595E0: .4byte 0x05000300
_080595E4: .4byte 0x80000020

	thumb_func_start RidleySetBackgroundPriority
RidleySetBackgroundPriority: @ 0x080595E8
	push {lr}
	ldr r2, _0805960C @ =gCurrentSprite
	ldrh r0, [r2, #2]
	lsrs r0, r0, #2
	ldr r1, _08059610 @ =gBg1YPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _08059614 @ =0xFF410000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0x1c
	bhi _08059618
	adds r1, r2, #0
	adds r1, #0x21
	movs r0, #2
	b _08059624
	.align 2, 0
_0805960C: .4byte gCurrentSprite
_08059610: .4byte gBg1YPosition
_08059614: .4byte 0xFF410000
_08059618:
	ldr r0, _0805962C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
_08059624:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0805962C: .4byte gIoRegisters

	thumb_func_start RidleyUpdateClawOam
RidleyUpdateClawOam: @ 0x08059630
	push {lr}
	ldr r0, _08059654 @ =gCurrentSprite
	adds r3, r0, #0
	adds r3, #0x25
	ldrb r0, [r3]
	cmp r0, #0x1b
	bne _08059660
	ldr r1, _08059658 @ =gSubSpriteData1
	ldr r0, [r1]
	ldr r2, _0805965C @ =0x083A9F74
	cmp r0, r2
	beq _08059676
	str r2, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	b _08059676
	.align 2, 0
_08059654: .4byte gCurrentSprite
_08059658: .4byte gSubSpriteData1
_0805965C: .4byte 0x083A9F74
_08059660:
	ldr r1, _0805967C @ =gSubSpriteData1
	ldr r0, [r1]
	ldr r2, _08059680 @ =0x083A9944
	cmp r0, r2
	beq _08059676
	str r2, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	movs r0, #0x1a
	strb r0, [r3]
_08059676:
	pop {r0}
	bx r0
	.align 2, 0
_0805967C: .4byte gSubSpriteData1
_08059680: .4byte 0x083A9944

	thumb_func_start RidleyTailStrikingCheckPlayEffects
RidleyTailStrikingCheckPlayEffects: @ 0x08059684
	push {lr}
	ldr r2, _080596B4 @ =gCurrentSprite
	ldrh r0, [r2, #6]
	adds r0, #0x14
	ldr r1, _080596B8 @ =0x0000053E
	cmp r0, r1
	bgt _080596AA
	ldrh r0, [r2, #2]
	adds r0, #0x14
	cmp r0, r1
	ble _080596AA
	movs r0, #0x28
	movs r1, #0x81
	bl ScreenShakeStartVertical
	movs r0, #0xf4
	lsls r0, r0, #1
	bl SoundPlay
_080596AA:
	ldr r1, _080596B4 @ =gCurrentSprite
	ldrh r0, [r1, #2]
	strh r0, [r1, #6]
	pop {r0}
	bx r0
	.align 2, 0
_080596B4: .4byte gCurrentSprite
_080596B8: .4byte 0x0000053E

	thumb_func_start RidleyTailStrikeYMovement
RidleyTailStrikeYMovement: @ 0x080596BC
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r0, _080596EC @ =gSamusData
	ldr r4, _080596F0 @ =gSubSpriteData1
	ldrh r2, [r4, #8]
	ldrh r0, [r0, #0x18]
	adds r1, r2, #0
	cmp r0, r1
	blo _080596E6
	ldr r0, _080596F4 @ =0x0000043F
	cmp r1, r0
	bhi _080596E6
	ldr r0, _080596F8 @ =gCurrentSprite
	ldrh r0, [r0, #2]
	adds r0, #0x14
	ldr r1, _080596FC @ =0x0000053E
	cmp r0, r1
	bgt _080596E6
	adds r0, r3, r2
	strh r0, [r4, #8]
_080596E6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080596EC: .4byte gSamusData
_080596F0: .4byte gSubSpriteData1
_080596F4: .4byte 0x0000043F
_080596F8: .4byte gCurrentSprite
_080596FC: .4byte 0x0000053E

	thumb_func_start RidleyFloatingMovement
RidleyFloatingMovement: @ 0x08059700
	push {r4, lr}
	sub sp, #4
	ldr r0, _08059718 @ =gCurrentSprite
	adds r0, #0x25
	ldrb r0, [r0]
	cmp r0, #0x1b
	bne _08059724
	ldr r0, _0805971C @ =gXParasiteTargetYPosition
	ldrh r2, [r0]
	ldr r0, _08059720 @ =gXParasiteTargetXPosition
	ldrh r1, [r0]
	b _0805975C
	.align 2, 0
_08059718: .4byte gCurrentSprite
_0805971C: .4byte gXParasiteTargetYPosition
_08059720: .4byte gXParasiteTargetXPosition
_08059724:
	ldr r0, _08059748 @ =gFrameCounter8Bit
	ldrb r2, [r0]
	ldr r0, _0805974C @ =gSamusData
	ldrh r4, [r0, #0x18]
	ldr r1, _08059750 @ =0x000002BF
	adds r3, r0, #0
	cmp r4, r1
	bls _08059758
	movs r0, #0x40
	ands r2, r0
	cmp r2, #0
	bne _08059758
	ldr r1, _08059754 @ =0xFFFFFE00
	adds r0, r4, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	b _0805975A
	.align 2, 0
_08059748: .4byte gFrameCounter8Bit
_0805974C: .4byte gSamusData
_08059750: .4byte 0x000002BF
_08059754: .4byte 0xFFFFFE00
_08059758:
	ldrh r2, [r3, #0x18]
_0805975A:
	ldrh r1, [r3, #0x16]
_0805975C:
	movs r0, #2
	str r0, [sp]
	adds r0, r2, #0
	movs r2, #0x18
	movs r3, #0x18
	bl RidleyMove
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyUpdateHealthThreshold
RidleyUpdateHealthThreshold: @ 0x08059774
	push {r4, lr}
	ldr r4, _080597B4 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08059820
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x10
	bne _08059798
	ldr r0, _080597B8 @ =0x000001E1
	bl CheckPlayNotAlreadyPlayingSound
_08059798:
	ldrh r2, [r4, #0x14]
	cmp r2, #0
	bne _080597C4
	ldr r0, _080597BC @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0
	beq _080597C4
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x1f
	strb r1, [r0]
	ldr r0, _080597C0 @ =gBossWork5
	strh r2, [r0]
	b _08059818
	.align 2, 0
_080597B4: .4byte gCurrentSprite
_080597B8: .4byte 0x000001E1
_080597BC: .4byte gSubSpriteData1
_080597C0: .4byte gBossWork5
_080597C4:
	ldr r2, _080597F8 @ =gBossWork5
	ldr r0, _080597FC @ =gSubSpriteData1
	ldr r3, _08059800 @ =gCurrentSprite
	ldrh r0, [r0, #0xc]
	ldrh r1, [r3, #0x14]
	subs r0, r0, r1
	ldrh r1, [r2]
	adds r0, r0, r1
	strh r0, [r2]
	lsls r0, r0, #0x10
	movs r1, #0xfa
	lsls r1, r1, #0x11
	cmp r0, r1
	bls _08059804
	adds r1, r3, #0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x18
	beq _080597F2
	cmp r0, #0x1a
	beq _080597F2
	movs r0, #0x1f
	strb r0, [r1]
_080597F2:
	movs r0, #0
	strh r0, [r2]
	b _08059818
	.align 2, 0
_080597F8: .4byte gBossWork5
_080597FC: .4byte gSubSpriteData1
_08059800: .4byte gCurrentSprite
_08059804:
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _08059818
	ldr r0, _08059828 @ =0x000001DF
	bl CheckPlayNotAlreadyPlayingSound
_08059818:
	ldr r0, _0805982C @ =gSubSpriteData1
	ldr r1, _08059830 @ =gCurrentSprite
	ldrh r1, [r1, #0x14]
	strh r1, [r0, #0xc]
_08059820:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059828: .4byte 0x000001DF
_0805982C: .4byte gSubSpriteData1
_08059830: .4byte gCurrentSprite

	thumb_func_start RidleyWaveBeamCollsiion
RidleyWaveBeamCollsiion: @ 0x08059834
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r3, _08059908 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	bne _080598F8
	ldrh r0, [r3, #0x14]
	cmp r0, #0
	beq _080598F8
	ldrh r1, [r3, #2]
	ldrh r2, [r3, #4]
	ldrh r0, [r3, #0xa]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	ldrh r0, [r3, #0xc]
	adds r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sl, r1
	ldrh r0, [r3, #0xe]
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	ldrh r0, [r3, #0x10]
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	movs r7, #0
_08059882:
	ldr r1, _0805990C @ =gProjectileData
	lsls r0, r7, #5
	adds r4, r0, r1
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080598EE
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080598EE
	ldrb r0, [r4, #0xf]
	cmp r0, #4
	bne _080598EE
	ldrh r5, [r4, #8]
	ldrh r6, [r4, #0xa]
	ldrh r0, [r4, #0x16]
	adds r0, r5, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r4, #0x18]
	adds r1, r5, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r2, [r4, #0x1a]
	adds r2, r6, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldrh r3, [r4, #0x1c]
	adds r3, r6, r3
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov ip, r3
	ldr r3, [sp, #0x10]
	str r3, [sp]
	mov r3, sl
	str r3, [sp, #4]
	mov r3, sb
	str r3, [sp, #8]
	mov r3, r8
	str r3, [sp, #0xc]
	mov r3, ip
	bl CheckObjectsTouching
	cmp r0, #0
	beq _080598EE
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #7
	bl ParticleSet
	movs r0, #0
	strb r0, [r4]
_080598EE:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0xf
	bls _08059882
_080598F8:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08059908: .4byte gCurrentSprite
_0805990C: .4byte gProjectileData

	thumb_func_start RidleyCheckGrabSamusLeft
RidleyCheckGrabSamusLeft: @ 0x08059910
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0xb4
	lsls r2, r2, #0x10
	adds r0, r0, r2
	lsrs r7, r0, #0x10
	ldr r0, _08059938 @ =gSubSpriteData1
	ldr r2, [r0]
	ldr r0, _0805993C @ =0x083A9A2C
	cmp r2, r0
	beq _08059930
	ldr r0, _08059940 @ =0x083A9A44
	cmp r2, r0
	bne _08059944
_08059930:
	adds r0, r1, #0
	subs r0, #0x82
	b _08059948
	.align 2, 0
_08059938: .4byte gSubSpriteData1
_0805993C: .4byte 0x083A9A2C
_08059940: .4byte 0x083A9A44
_08059944:
	adds r0, r1, #0
	subs r0, #0xe6
_08059948:
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r6, _08059978 @ =gSamusData
	movs r0, #0x24
	ldrsh r1, [r6, r0]
	adds r1, r4, r1
	adds r0, r7, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _0805997C @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _08059980
	movs r2, #0x28
	ldrsh r1, [r6, r2]
	adds r1, r4, r1
	adds r0, r7, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _08059980
	movs r0, #1
	b _08059982
	.align 2, 0
_08059978: .4byte gSamusData
_0805997C: .4byte gPreviousCollisionCheck
_08059980:
	movs r0, #0
_08059982:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start RidleyCheckGrabSamusRight
RidleyCheckGrabSamusRight: @ 0x08059988
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0xb4
	lsls r2, r2, #0x10
	adds r0, r0, r2
	lsrs r7, r0, #0x10
	ldr r0, _080599B0 @ =gSubSpriteData1
	ldr r2, [r0]
	ldr r0, _080599B4 @ =0x083A9A2C
	cmp r2, r0
	beq _080599A8
	ldr r0, _080599B8 @ =0x083A9A44
	cmp r2, r0
	bne _080599BC
_080599A8:
	adds r0, r1, #0
	adds r0, #0x82
	b _080599C0
	.align 2, 0
_080599B0: .4byte gSubSpriteData1
_080599B4: .4byte 0x083A9A2C
_080599B8: .4byte 0x083A9A44
_080599BC:
	adds r0, r1, #0
	adds r0, #0xe6
_080599C0:
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r6, _080599F0 @ =gSamusData
	movs r0, #0x24
	ldrsh r1, [r6, r0]
	adds r1, r4, r1
	adds r0, r7, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r5, _080599F4 @ =gPreviousCollisionCheck
	ldrb r0, [r5]
	cmp r0, #0
	bne _080599F8
	movs r2, #0x28
	ldrsh r1, [r6, r2]
	adds r1, r4, r1
	adds r0, r7, #0
	bl SpriteUtilCheckCollisionAtPosition
	ldrb r0, [r5]
	cmp r0, #0
	bne _080599F8
	movs r0, #1
	b _080599FA
	.align 2, 0
_080599F0: .4byte gSamusData
_080599F4: .4byte gPreviousCollisionCheck
_080599F8:
	movs r0, #0
_080599FA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start RidleySamusGrabbed
RidleySamusGrabbed: @ 0x08059A00
	push {r4, lr}
	ldr r2, _08059A40 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08059A78
	ldr r3, _08059A44 @ =0x0000F7FF
	ands r3, r1
	strh r3, [r2]
	ldr r4, _08059A48 @ =gSamusData
	ldrh r0, [r2, #2]
	adds r0, #0xb4
	strh r0, [r4, #0x18]
	ldr r0, _08059A4C @ =gSubSpriteData1
	ldr r1, [r0]
	ldr r0, _08059A50 @ =0x083A9A2C
	cmp r1, r0
	beq _08059A2E
	ldr r0, _08059A54 @ =0x083A9A44
	cmp r1, r0
	bne _08059A60
_08059A2E:
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _08059A58
	ldrh r0, [r2, #4]
	adds r0, #0x82
	strh r0, [r4, #0x16]
	b _08059A86
	.align 2, 0
_08059A40: .4byte gCurrentSprite
_08059A44: .4byte 0x0000F7FF
_08059A48: .4byte gSamusData
_08059A4C: .4byte gSubSpriteData1
_08059A50: .4byte 0x083A9A2C
_08059A54: .4byte 0x083A9A44
_08059A58:
	ldrh r0, [r2, #4]
	subs r0, #0x82
	strh r0, [r4, #0x16]
	b _08059A86
_08059A60:
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _08059A70
	ldrh r0, [r2, #4]
	adds r0, #0xe6
	strh r0, [r4, #0x16]
	b _08059A86
_08059A70:
	ldrh r0, [r2, #4]
	subs r0, #0xe6
	strh r0, [r4, #0x16]
	b _08059A86
_08059A78:
	adds r1, r2, #0
	adds r1, #0x25
	ldrb r0, [r1]
	cmp r0, #0x1b
	bne _08059A86
	movs r0, #0x1a
	strb r0, [r1]
_08059A86:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RidleySetSideHitboxes
RidleySetSideHitboxes: @ 0x08059A8C
	push {lr}
	ldr r2, _08059AA4 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08059AAC
	ldr r0, _08059AA8 @ =0x0000FF80
	strh r0, [r2, #0xe]
	movs r0, #0xe0
	b _08059AB2
	.align 2, 0
_08059AA4: .4byte gCurrentSprite
_08059AA8: .4byte 0x0000FF80
_08059AAC:
	ldr r0, _08059AB8 @ =0x0000FF20
	strh r0, [r2, #0xe]
	movs r0, #0x80
_08059AB2:
	strh r0, [r2, #0x10]
	pop {r0}
	bx r0
	.align 2, 0
_08059AB8: .4byte 0x0000FF20

	thumb_func_start RidleyXMovement_Unused
RidleyXMovement_Unused: @ 0x08059ABC
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r7, r5, #0
	movs r6, #0
	ldr r1, _08059AFC @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x25
	ldrb r0, [r0]
	movs r2, #0xa0
	cmp r0, #0x1b
	bne _08059AD6
	adds r2, #0x80
_08059AD6:
	ldrh r1, [r1]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08059B08
	ldr r4, _08059B00 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, #0x40
	ldrh r1, [r4, #0xa]
	adds r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08059B04 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08059B1E
	ldrh r0, [r4, #0xa]
	adds r0, r5, r0
	b _08059B30
	.align 2, 0
_08059AFC: .4byte gCurrentSprite
_08059B00: .4byte gSubSpriteData1
_08059B04: .4byte gPreviousCollisionCheck
_08059B08:
	ldr r4, _08059B24 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, #0x40
	ldrh r1, [r4, #0xa]
	subs r1, r1, r2
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08059B28 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08059B2C
_08059B1E:
	movs r6, #1
	b _08059B32
	.align 2, 0
_08059B24: .4byte gSubSpriteData1
_08059B28: .4byte gPreviousCollisionCheck
_08059B2C:
	ldrh r0, [r4, #0xa]
	subs r0, r0, r7
_08059B30:
	strh r0, [r4, #0xa]
_08059B32:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start RidleyTailXMovement
RidleyTailXMovement: @ 0x08059B3C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	mov r8, r6
	ldr r0, _08059B84 @ =gCurrentSprite
	adds r0, #0x23
	ldrb r5, [r0]
	movs r7, #0
	ldr r1, _08059B88 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08059B94
	ldr r4, _08059B8C @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, #0x40
	ldrh r1, [r4, #0xa]
	adds r1, #0xa0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08059B90 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _08059BAA
	ldrh r0, [r4, #0xa]
	adds r0, r6, r0
	b _08059BBE
	.align 2, 0
_08059B84: .4byte gCurrentSprite
_08059B88: .4byte gSpriteData
_08059B8C: .4byte gSubSpriteData1
_08059B90: .4byte gPreviousCollisionCheck
_08059B94:
	ldr r4, _08059BB0 @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, #0x40
	ldrh r1, [r4, #0xa]
	subs r1, #0xa0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _08059BB4 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _08059BB8
_08059BAA:
	movs r7, #1
	b _08059BC4
	.align 2, 0
_08059BB0: .4byte gSubSpriteData1
_08059BB4: .4byte gPreviousCollisionCheck
_08059BB8:
	ldrh r0, [r4, #0xa]
	mov r1, r8
	subs r0, r0, r1
_08059BBE:
	strh r0, [r4, #0xa]
	cmp r7, #0
	beq _08059BDA
_08059BC4:
	ldr r1, _08059BE8 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
_08059BDA:
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08059BE8: .4byte gSpriteData

	thumb_func_start RidleyScreamingInit
RidleyScreamingInit: @ 0x08059BEC
	push {r4, r5, lr}
	ldr r1, _08059C3C @ =gSubSpriteData1
	ldr r0, _08059C40 @ =0x083A9A14
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r4, _08059C44 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	adds r5, r4, #0
	adds r5, #0x25
	ldrb r0, [r5]
	cmp r0, #0x1b
	bne _08059C20
	ldr r1, _08059C48 @ =0x0828FD04
	ldr r0, _08059C4C @ =gSamusData
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xfa
	bl _call_via_r1
_08059C20:
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08059C50
	movs r0, #2
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0x3c
	strb r0, [r1]
	movs r0, #0xef
	lsls r0, r0, #1
	bl SoundPlay
	b _08059C64
	.align 2, 0
_08059C3C: .4byte gSubSpriteData1
_08059C40: .4byte 0x083A9A14
_08059C44: .4byte gCurrentSprite
_08059C48: .4byte 0x0828FD04
_08059C4C: .4byte gSamusData
_08059C50:
	movs r0, #0
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0xb4
	strb r0, [r1]
	movs r0, #0xf0
	lsls r0, r0, #1
	bl unk_3b1c
_08059C64:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyScreaming
RidleyScreaming: @ 0x08059C6C
	push {r4, r5, lr}
	ldr r4, _08059C94 @ =gCurrentSprite
	adds r2, r4, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	subs r1, r0, #1
	strb r1, [r2]
	lsls r0, r1, #0x18
	cmp r0, #0
	bne _08059CCC
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08059C98
	bl RidleyUpdateClawOam
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x29
	strb r0, [r1]
	b _08059E32
	.align 2, 0
_08059C94: .4byte gCurrentSprite
_08059C98:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r2, #0
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	orrs r0, r2
	adds r1, r4, #0
	adds r1, #0x2c
	strb r2, [r1]
	subs r1, #0xc
	strb r2, [r1]
	movs r1, #0x2c
	strh r1, [r4, #6]
	ldr r1, _08059CC8 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	b _08059E32
	.align 2, 0
_08059CC8: .4byte 0x0000FFFB
_08059CCC:
	ldrh r0, [r4, #0x14]
	cmp r0, #0
	beq _08059CE2
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1d
	bls _08059CDC
	b _08059E32
_08059CDC:
	bl RidleyFloatingMovement
	b _08059E32
_08059CE2:
	ldr r0, _08059D04 @ =gSubSpriteData1
	ldrh r4, [r0, #8]
	ldrh r5, [r0, #0xa]
	ldrb r0, [r2]
	cmp r0, #0x40
	beq _08059DB0
	cmp r0, #0x40
	bgt _08059D12
	cmp r0, #0x10
	bne _08059CF8
	b _08059DFC
_08059CF8:
	cmp r0, #0x10
	bgt _08059D08
	cmp r0, #0
	bne _08059D02
	b _08059E18
_08059D02:
	b _08059E32
	.align 2, 0
_08059D04: .4byte gSubSpriteData1
_08059D08:
	cmp r0, #0x20
	beq _08059DE4
	cmp r0, #0x30
	beq _08059DC8
	b _08059E32
_08059D12:
	cmp r0, #0x70
	beq _08059D5E
	cmp r0, #0x70
	bgt _08059D24
	cmp r0, #0x50
	beq _08059D94
	cmp r0, #0x60
	beq _08059D7C
	b _08059E32
_08059D24:
	cmp r0, #0x80
	beq _08059D46
	cmp r0, #0x90
	beq _08059D2E
	b _08059E32
_08059D2E:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	subs r1, #0x10
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x20
	adds r1, r5, #0
	subs r1, #0x1a
	b _08059D74
_08059D46:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x1c
	movs r2, #0x25
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	adds r1, #0x34
	b _08059DDC
_08059D5E:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	subs r1, #0x24
	movs r2, #0x21
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	subs r1, #0x4c
_08059D74:
	movs r2, #0x25
	bl ParticleSet
	b _08059E32
_08059D7C:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	adds r1, #0x58
	movs r2, #0x25
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x20
	adds r1, r5, #0
	adds r1, #0x20
	b _08059E10
_08059D94:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	adds r1, #0x2a
	movs r2, #0x2f
	bl ParticleSet
	adds r1, r5, #0
	subs r1, #0x1e
	adds r0, r4, #0
	movs r2, #0x21
	bl ParticleSet
	b _08059E32
_08059DB0:
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
	adds r1, #0x10
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	subs r1, #0x34
	b _08059DDC
_08059DC8:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	subs r1, #0x1c
	movs r2, #0x21
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x46
	adds r1, r5, #0
_08059DDC:
	movs r2, #0x22
	bl ParticleSet
	b _08059E32
_08059DE4:
	adds r0, r4, #0
	subs r0, #0x20
	adds r1, r5, #0
	adds r1, #0x24
	movs r2, #0x21
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x40
	adds r1, r5, #0
	subs r1, #0x58
	b _08059E10
_08059DFC:
	adds r0, r4, #0
	adds r0, #0x30
	adds r1, r5, #0
	adds r1, #0x4c
	movs r2, #0x2f
	bl ParticleSet
	adds r0, r4, #0
	subs r0, #0x40
	adds r1, r5, #0
_08059E10:
	movs r2, #0x2f
	bl ParticleSet
	b _08059E32
_08059E18:
	adds r0, r4, #0
	subs r0, #0x48
	adds r1, r5, #0
	subs r1, #0x2a
	movs r2, #0x2f
	bl ParticleSet
	adds r1, r5, #0
	adds r1, #0x1e
	adds r0, r4, #0
	movs r2, #0x21
	bl ParticleSet
_08059E32:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start RidleyTurningIntoCoreX
RidleyTurningIntoCoreX: @ 0x08059E38
	push {lr}
	ldr r2, _08059E74 @ =gWrittenToMosaic_H
	ldr r1, _08059E78 @ =0x083BDED6
	ldr r3, _08059E7C @ =gCurrentSprite
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08059E62
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0x59
	strb r1, [r0]
	movs r0, #0x49
	strb r0, [r3, #0x1d]
_08059E62:
	ldrh r0, [r3, #6]
	cmp r0, #0x13
	bhi _08059E80
	adds r2, r0, #0
	movs r0, #0x49
	movs r1, #0
	bl SpriteLoadGfx
	b _08059E8E
	.align 2, 0
_08059E74: .4byte gWrittenToMosaic_H
_08059E78: .4byte 0x083BDED6
_08059E7C: .4byte gCurrentSprite
_08059E80:
	cmp r0, #0x14
	bne _08059E8E
	movs r0, #0x49
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_08059E8E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyForming
RidleyForming: @ 0x08059E94
	push {r4, r5, lr}
	ldr r3, _08059ED0 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldr r4, _08059ED4 @ =gSubSpriteData1
	ldrb r0, [r4, #6]
	subs r0, #1
	strb r0, [r4, #6]
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	beq _08059EE0
	ldr r2, _08059ED8 @ =gWrittenToMosaic_H
	ldr r1, _08059EDC @ =0x083BDED6
	mov r3, ip
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	b _08059EFA
	.align 2, 0
_08059ED0: .4byte gCurrentSprite
_08059ED4: .4byte gSubSpriteData1
_08059ED8: .4byte gWrittenToMosaic_H
_08059EDC: .4byte 0x083BDED6
_08059EE0:
	ldrh r1, [r3]
	ldr r0, _08059F00 @ =0x00007FDF
	ands r0, r1
	movs r2, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _08059F04 @ =0x083A9A5C
	str r0, [r4]
	strb r2, [r4, #6]
	strh r5, [r4, #4]
_08059EFA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059F00: .4byte 0x00007FDF
_08059F04: .4byte 0x083A9A5C

	thumb_func_start RidleyScreamingAfterSpawn
RidleyScreamingAfterSpawn: @ 0x08059F08
	push {lr}
	ldr r1, _08059F70 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #4
	bne _08059F1E
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _08059F1E
	ldr r0, _08059F74 @ =0x000001DD
	bl SoundPlay
_08059F1E:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _08059F6A
	ldr r2, _08059F78 @ =gSubSpriteData1
	ldr r0, _08059F7C @ =0x083A996C
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	movs r3, #0
	strh r0, [r2, #4]
	ldr r0, _08059F70 @ =gCurrentSprite
	mov ip, r0
	mov r1, ip
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	ldrh r0, [r2, #8]
	subs r0, #0xe0
	strh r0, [r2, #8]
	mov r1, ip
	ldrh r0, [r1, #2]
	subs r0, #0xe0
	strh r0, [r1, #2]
	adds r1, #0x27
	movs r0, #0x38
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x40
	strb r0, [r1]
	ldr r0, _08059F80 @ =0x0000FFA0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r0, #0xa0
	strh r0, [r1, #0xc]
_08059F6A:
	pop {r0}
	bx r0
	.align 2, 0
_08059F70: .4byte gCurrentSprite
_08059F74: .4byte 0x000001DD
_08059F78: .4byte gSubSpriteData1
_08059F7C: .4byte 0x083A996C
_08059F80: .4byte 0x0000FFA0

	thumb_func_start RidleyRisingAfterSpawn
RidleyRisingAfterSpawn: @ 0x08059F84
	push {r4, r5, r6, r7, lr}
	ldr r5, _08059FB8 @ =gSubSpriteData1
	ldrh r3, [r5, #8]
	ldr r0, _08059FBC @ =0x0000027F
	cmp r3, r0
	bls _08059FD8
	ldr r0, _08059FC0 @ =gCurrentSprite
	adds r0, #0x31
	mov ip, r0
	ldrb r2, [r0]
	ldr r6, _08059FC4 @ =0x083A9F9C
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _08059FC8 @ =0x00007FFF
	cmp r1, r0
	bne _08059FCC
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r0, r3, r0
	strh r0, [r5, #8]
	b _0805A014
	.align 2, 0
_08059FB8: .4byte gSubSpriteData1
_08059FBC: .4byte 0x0000027F
_08059FC0: .4byte gCurrentSprite
_08059FC4: .4byte 0x083A9F9C
_08059FC8: .4byte 0x00007FFF
_08059FCC:
	adds r0, r2, #1
	mov r1, ip
	strb r0, [r1]
	adds r0, r3, r4
	strh r0, [r5, #8]
	b _0805A014
_08059FD8:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805A014
	bl RidleyUpdateClawOam
	ldr r3, _0805A01C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	ldr r0, _0805A020 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	adds r0, #1
	lsls r0, r0, #4
	subs r0, #1
	adds r1, r3, #0
	adds r1, #0x2b
	strb r0, [r1]
_0805A014:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A01C: .4byte gCurrentSprite
_0805A020: .4byte gSpriteRandomNumber

	thumb_func_start RidleyInit
RidleyInit: @ 0x0805A024
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r1, _0805A1B0 @ =gBossWork1
	movs r0, #0
	strb r0, [r1]
	ldr r7, _0805A1B4 @ =gCurrentSprite
	ldrh r1, [r7]
	ldr r2, _0805A1B8 @ =0x00008240
	adds r0, r2, #0
	movs r6, #0
	movs r5, #0
	orrs r0, r1
	strh r0, [r7]
	adds r1, r7, #0
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x25
	movs r4, #2
	strb r4, [r0]
	adds r1, #5
	movs r0, #0x58
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	adds r2, r7, #0
	adds r2, #0x29
	movs r0, #0x50
	strb r0, [r2]
	ldr r0, _0805A1BC @ =0x0000FEC0
	strh r0, [r7, #0xa]
	strh r1, [r7, #0xc]
	bl RidleySetSideHitboxes
	strb r4, [r7, #0x1e]
	ldr r2, _0805A1C0 @ =sPrimarySpriteStats
	ldrb r1, [r7, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r7, #0x14]
	ldr r4, _0805A1C4 @ =gSubSpriteData1
	strh r0, [r4, #0xc]
	ldr r0, _0805A1C8 @ =gBossWork5
	strh r5, [r0]
	adds r1, r7, #0
	adds r1, #0x24
	movs r0, #0x5a
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x2c
	strb r0, [r1]
	ldrh r1, [r7]
	ldr r0, _0805A1CC @ =0x0000FFFB
	ands r0, r1
	strh r0, [r7]
	ldrh r0, [r7, #2]
	strh r0, [r4, #8]
	ldrh r0, [r7, #4]
	strh r0, [r4, #0xa]
	ldr r0, _0805A1D0 @ =0x083A9A5C
	str r0, [r4]
	strb r6, [r4, #6]
	strh r5, [r4, #4]
	strb r6, [r4, #0xe]
	ldrb r2, [r7, #0x1f]
	adds r6, r7, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7b
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7b
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #7
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #6
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #5
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #4
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #3
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #2
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #1
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7c
	movs r1, #0
	bl SpriteSpawnSecondary
	ldrb r2, [r7, #0x1f]
	ldrb r3, [r6]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7b
	movs r1, #3
	bl SpriteSpawnSecondary
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A1B0: .4byte gBossWork1
_0805A1B4: .4byte gCurrentSprite
_0805A1B8: .4byte 0x00008240
_0805A1BC: .4byte 0x0000FEC0
_0805A1C0: .4byte sPrimarySpriteStats
_0805A1C4: .4byte gSubSpriteData1
_0805A1C8: .4byte gBossWork5
_0805A1CC: .4byte 0x0000FFFB
_0805A1D0: .4byte 0x083A9A5C

	thumb_func_start RidleyIdleInit
RidleyIdleInit: @ 0x0805A1D4
	push {lr}
	bl RidleyUpdateClawOam
	ldr r3, _0805A21C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0805A220 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	adds r0, #1
	lsls r0, r0, #4
	subs r0, #1
	adds r1, #7
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x25
	ldrb r0, [r1]
	cmp r0, #0x1b
	beq _0805A216
	movs r0, #0x1a
	strb r0, [r1]
_0805A216:
	pop {r0}
	bx r0
	.align 2, 0
_0805A21C: .4byte gCurrentSprite
_0805A220: .4byte gSpriteRandomNumber

	thumb_func_start RidleyIdle
RidleyIdle: @ 0x0805A224
	push {r4, r5, lr}
	bl RidleyUpdateClawOam
	bl RidleyFloatingMovement
	ldr r4, _0805A258 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0
	bne _0805A25C
	adds r5, r4, #0
	adds r5, #0x25
	ldrb r0, [r5]
	cmp r0, #0x1b
	beq _0805A26E
	movs r0, #0x7d
	bl CountSecondarySprite
	cmp r0, #0
	bne _0805A260
	movs r0, #2
	strb r0, [r5]
	adds r1, r4, #0
	b _0805A368
	.align 2, 0
_0805A258: .4byte gCurrentSprite
_0805A25C:
	subs r0, #1
	strb r0, [r1]
_0805A260:
	ldr r0, _0805A278 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x25
	ldrb r1, [r1]
	adds r5, r0, #0
	cmp r1, #0x1b
	bne _0805A280
_0805A26E:
	ldr r0, _0805A27C @ =gXParasiteTargetXPosition
	ldrh r2, [r0]
	ldr r5, _0805A278 @ =gCurrentSprite
	b _0805A284
	.align 2, 0
_0805A278: .4byte gCurrentSprite
_0805A27C: .4byte gXParasiteTargetXPosition
_0805A280:
	ldr r0, _0805A2E0 @ =gSamusData
	ldrh r2, [r0, #0x16]
_0805A284:
	adds r4, r5, #0
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805A304
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805A2F0
	adds r5, #0x25
	ldrb r0, [r5]
	cmp r0, #0x1b
	beq _0805A36E
	ldr r0, _0805A2E0 @ =gSamusData
	ldrh r1, [r0, #0x18]
	ldr r0, _0805A2E4 @ =gSubSpriteData1
	ldrh r0, [r0, #8]
	adds r0, #0x80
	cmp r1, r0
	ble _0805A36E
	ldrh r0, [r4, #4]
	lsrs r0, r0, #2
	ldr r1, _0805A2E8 @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x63
	bhi _0805A36E
	ldr r0, _0805A2EC @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805A36E
	movs r0, #0x7d
	bl CountSecondarySprite
	cmp r0, #0
	bne _0805A36E
	movs r0, #2
	strb r0, [r5]
	adds r1, r4, #0
	b _0805A368
	.align 2, 0
_0805A2E0: .4byte gSamusData
_0805A2E4: .4byte gSubSpriteData1
_0805A2E8: .4byte gBg1XPosition
_0805A2EC: .4byte gSpriteRandomNumber
_0805A2F0:
	ldr r0, _0805A300 @ =gSubSpriteData1
	ldrh r0, [r0, #0xa]
	cmp r2, r0
	bhs _0805A36E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #9
	b _0805A36C
	.align 2, 0
_0805A300: .4byte gSubSpriteData1
_0805A304:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805A324
	ldr r0, _0805A320 @ =gSubSpriteData1
	ldrh r0, [r0, #0xa]
	cmp r2, r0
	bls _0805A36E
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #9
	b _0805A36C
	.align 2, 0
_0805A320: .4byte gSubSpriteData1
_0805A324:
	adds r4, r5, #0
	adds r4, #0x25
	ldrb r0, [r4]
	cmp r0, #0x1b
	beq _0805A36E
	ldr r0, _0805A374 @ =gSamusData
	ldrh r1, [r0, #0x18]
	ldr r0, _0805A378 @ =gSubSpriteData1
	ldrh r0, [r0, #8]
	adds r0, #0x80
	cmp r1, r0
	ble _0805A36E
	ldrh r0, [r5, #4]
	lsrs r0, r0, #2
	ldr r1, _0805A37C @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x8c
	bls _0805A36E
	ldr r0, _0805A380 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805A36E
	movs r0, #0x7d
	bl CountSecondarySprite
	cmp r0, #0
	bne _0805A36E
	movs r0, #2
	strb r0, [r4]
	adds r1, r5, #0
_0805A368:
	adds r1, #0x24
	movs r0, #0x2f
_0805A36C:
	strb r0, [r1]
_0805A36E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A374: .4byte gSamusData
_0805A378: .4byte gSubSpriteData1
_0805A37C: .4byte gBg1XPosition
_0805A380: .4byte gSpriteRandomNumber

	thumb_func_start RidleyTurningAroundInit
RidleyTurningAroundInit: @ 0x0805A384
	ldr r1, _0805A39C @ =gSubSpriteData1
	ldr r0, _0805A3A0 @ =0x083A9A2C
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805A3A4 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #4
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805A39C: .4byte gSubSpriteData1
_0805A3A0: .4byte 0x083A9A2C
_0805A3A4: .4byte gCurrentSprite

	thumb_func_start RidleyTurningAround
RidleyTurningAround: @ 0x0805A3A8
	push {lr}
	bl RidleyFloatingMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805A3D8
	ldr r1, _0805A3DC @ =gSubSpriteData1
	ldr r0, _0805A3E0 @ =0x083A9A44
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r2, _0805A3E4 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #5
	strb r0, [r1]
	ldrh r0, [r2]
	movs r1, #0x40
	eors r0, r1
	strh r0, [r2]
	bl RidleySetSideHitboxes
_0805A3D8:
	pop {r0}
	bx r0
	.align 2, 0
_0805A3DC: .4byte gSubSpriteData1
_0805A3E0: .4byte 0x083A9A44
_0805A3E4: .4byte gCurrentSprite

	thumb_func_start RidleyTurningAroundSecondPart
RidleyTurningAroundSecondPart: @ 0x0805A3E8
	push {lr}
	bl RidleyUpdateClawOam
	bl RidleyFloatingMovement
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805A406
	bl RidleyUpdateClawOam
	ldr r0, _0805A40C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
_0805A406:
	pop {r0}
	bx r0
	.align 2, 0
_0805A40C: .4byte gCurrentSprite

	thumb_func_start RidleyFlyingBackwardsInit
RidleyFlyingBackwardsInit: @ 0x0805A410
	ldr r0, _0805A420 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x24
	movs r2, #0xa
	strb r2, [r1]
	adds r0, #0x2b
	strb r2, [r0]
	bx lr
	.align 2, 0
_0805A420: .4byte gCurrentSprite

	thumb_func_start RidleyFlyingBackwards
RidleyFlyingBackwards: @ 0x0805A424
	push {lr}
	bl RidleyUpdateClawOam
	bl RidleyFloatingMovement
	ldr r1, _0805A44C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805A446
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
_0805A446:
	pop {r0}
	bx r0
	.align 2, 0
_0805A44C: .4byte gCurrentSprite

	thumb_func_start RidleyPreparingTailAttack
RidleyPreparingTailAttack: @ 0x0805A450
	push {lr}
	bl RidleyUpdateClawOam
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyTailAttack
RidleyTailAttack: @ 0x0805A45C
	push {lr}
	bl RidleyUpdateClawOam
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyShootingFireInit
RidleyShootingFireInit: @ 0x0805A468
	ldr r1, _0805A480 @ =gSubSpriteData1
	ldr r0, _0805A484 @ =0x083A9994
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805A488 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x30
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805A480: .4byte gSubSpriteData1
_0805A484: .4byte 0x083A9994
_0805A488: .4byte gCurrentSprite

	thumb_func_start RidleyShootingFire
RidleyShootingFire: @ 0x0805A48C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	bl RidleyFloatingMovement
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805A4EE
	ldr r2, _0805A4B8 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805A4C4
	ldr r0, _0805A4BC @ =gSamusData
	ldr r1, _0805A4C0 @ =gSubSpriteData1
	ldrh r0, [r0, #0x16]
	ldrh r1, [r1, #0xa]
	cmp r0, r1
	blo _0805A4D0
	b _0805A4E4
	.align 2, 0
_0805A4B8: .4byte gCurrentSprite
_0805A4BC: .4byte gSamusData
_0805A4C0: .4byte gSubSpriteData1
_0805A4C4:
	ldr r0, _0805A4DC @ =gSamusData
	ldr r1, _0805A4E0 @ =gSubSpriteData1
	ldrh r0, [r0, #0x16]
	ldrh r1, [r1, #0xa]
	cmp r0, r1
	bls _0805A4E4
_0805A4D0:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #3
	strb r0, [r1]
	b _0805A58E
	.align 2, 0
_0805A4DC: .4byte gSamusData
_0805A4E0: .4byte gSubSpriteData1
_0805A4E4:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _0805A58E
_0805A4EE:
	ldr r2, _0805A508 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	adds r5, r2, #0
	cmp r0, #0
	beq _0805A50C
	movs r6, #0x80
	lsls r6, r6, #2
	ldrh r0, [r5, #4]
	adds r0, #0xa0
	b _0805A512
	.align 2, 0
_0805A508: .4byte gCurrentSprite
_0805A50C:
	movs r6, #0
	ldrh r0, [r5, #4]
	subs r0, #0xa0
_0805A512:
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r3, r5, #0
	ldrh r0, [r3, #2]
	subs r0, #0x20
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r7, r1, #0
	ldr r2, _0805A550 @ =gSubSpriteData1
	ldrb r0, [r2, #6]
	cmp r0, #1
	bne _0805A58E
	ldrh r0, [r2, #4]
	cmp r0, #3
	bne _0805A558
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	str r1, [sp]
	str r4, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x7d
	movs r1, #0
	bl SpriteSpawnSecondary
	ldr r0, _0805A554 @ =0x000001E3
	bl SoundPlay
	b _0805A58E
	.align 2, 0
_0805A550: .4byte gSubSpriteData1
_0805A554: .4byte 0x000001E3
_0805A558:
	cmp r0, #7
	bne _0805A574
	ldrb r2, [r3, #0x1f]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r3, [r0]
	str r1, [sp]
	str r4, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x7d
	movs r1, #2
	bl SpriteSpawnSecondary
	b _0805A58E
_0805A574:
	cmp r0, #0xb
	bne _0805A58E
	ldrb r2, [r5, #0x1f]
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r3, [r0]
	str r7, [sp]
	str r4, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x7d
	movs r1, #4
	bl SpriteSpawnSecondary
_0805A58E:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyPartInit
RidleyPartInit: @ 0x0805A598
	push {r4, lr}
	ldr r2, _0805A5CC @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _0805A5D0 @ =0x0000FFFB
	ands r0, r1
	movs r4, #0
	strh r0, [r2]
	ldr r0, _0805A5D4 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r3, #3
	adds r0, r3, #0
	ands r0, r1
	adds r1, r2, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r1, #3
	movs r0, #2
	strb r0, [r1]
	ldrb r1, [r2, #0x1e]
	cmp r1, #1
	beq _0805A5F4
	cmp r1, #1
	bgt _0805A5D8
	cmp r1, #0
	beq _0805A5DE
	b _0805A658
	.align 2, 0
_0805A5CC: .4byte gCurrentSprite
_0805A5D0: .4byte 0x0000FFFB
_0805A5D4: .4byte gIoRegisters
_0805A5D8:
	cmp r1, #3
	beq _0805A624
	b _0805A658
_0805A5DE:
	adds r0, r2, #0
	adds r0, #0x22
	strb r3, [r0]
	adds r0, #5
	movs r1, #0x40
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	b _0805A640
_0805A5F4:
	adds r0, r2, #0
	adds r0, #0x27
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0805A620 @ =0x0000FFFC
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	adds r0, r2, #0
	adds r0, #0x25
	strb r4, [r0]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	b _0805A65A
	.align 2, 0
_0805A620: .4byte 0x0000FFFC
_0805A624:
	adds r1, r2, #0
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x27
	movs r1, #0x40
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0x20
	strb r0, [r1]
_0805A640:
	ldr r1, _0805A654 @ =0x0000FFFC
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	adds r0, r2, #0
	adds r0, #0x25
	strb r4, [r0]
	b _0805A65C
	.align 2, 0
_0805A654: .4byte 0x0000FFFC
_0805A658:
	movs r0, #0
_0805A65A:
	strh r0, [r2]
_0805A65C:
	bl RidleySyncSubSprites
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyPartidle
RidleyPartidle: @ 0x0805A668
	push {lr}
	ldr r2, _0805A69C @ =gCurrentSprite
	ldrh r0, [r2, #0x16]
	ldr r1, [r2, #0x18]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	movs r1, #0xf0
	lsls r1, r1, #8
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #8
	cmp r0, r1
	bne _0805A6A0
	adds r1, r2, #0
	adds r1, #0x35
	movs r0, #0
	strb r0, [r1]
	adds r3, r2, #0
	adds r3, #0x27
	movs r1, #0x40
	strb r1, [r3]
	adds r1, r2, #0
	adds r1, #0x28
	b _0805A6B2
	.align 2, 0
_0805A69C: .4byte gCurrentSprite
_0805A6A0:
	adds r1, r2, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	subs r1, #0xe
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x38
_0805A6B2:
	strb r0, [r1]
	pop {r0}
	bx r0

	thumb_func_start RidleyTailPartInit
RidleyTailPartInit: @ 0x0805A6B8
	push {r4, r5, r6, lr}
	ldr r3, _0805A73C @ =gCurrentSprite
	ldrh r0, [r3]
	ldr r4, _0805A740 @ =0x0000FFFB
	ands r4, r0
	movs r5, #0
	movs r6, #0
	strh r4, [r3]
	ldr r0, _0805A744 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	adds r1, r3, #0
	adds r1, #0x21
	strb r0, [r1]
	adds r1, #3
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #1
	strh r0, [r3, #0x14]
	ldrb r1, [r3, #0x1e]
	adds r0, r1, #4
	subs r2, #0x12
	strb r0, [r2]
	adds r2, #3
	movs r0, #0x18
	strb r0, [r2]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	cmp r1, #7
	bne _0805A754
	ldr r0, _0805A748 @ =gSubSpriteData2
	ldr r1, _0805A74C @ =0x083A9B1C
	str r1, [r0]
	strb r5, [r0, #6]
	strh r6, [r0, #4]
	movs r1, #8
	adds r0, r4, #0
	orrs r0, r1
	strh r0, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3, #0x12]
	adds r0, r3, #0
	adds r0, #0x2b
	strb r5, [r0]
	strh r6, [r3, #6]
	ldr r1, _0805A750 @ =0x0000FFE4
	strh r1, [r3, #0xa]
	movs r0, #0x1c
	b _0805A75A
	.align 2, 0
_0805A73C: .4byte gCurrentSprite
_0805A740: .4byte 0x0000FFFB
_0805A744: .4byte gIoRegisters
_0805A748: .4byte gSubSpriteData2
_0805A74C: .4byte 0x083A9B1C
_0805A750: .4byte 0x0000FFE4
_0805A754:
	ldr r1, _0805A768 @ =0x0000FFEC
	strh r1, [r3, #0xa]
	movs r0, #0x14
_0805A75A:
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A768: .4byte 0x0000FFEC

	thumb_func_start RidleyTailPartHandleRotation
RidleyTailPartHandleRotation: @ 0x0805A76C
	push {r4, lr}
	ldr r1, _0805A790 @ =gCurrentSprite
	ldrh r2, [r1]
	movs r4, #0x80
	lsls r4, r4, #3
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq _0805A79C
	adds r3, r1, #0
	adds r3, #0x2b
	ldrb r0, [r3]
	cmp r0, #0xe0
	bne _0805A798
	ldr r0, _0805A794 @ =0x0000FBFF
	ands r0, r2
	strh r0, [r1]
	b _0805A7B2
	.align 2, 0
_0805A790: .4byte gCurrentSprite
_0805A794: .4byte 0x0000FBFF
_0805A798:
	subs r0, #1
	b _0805A7B0
_0805A79C:
	adds r3, r1, #0
	adds r3, #0x2b
	ldrb r0, [r3]
	cmp r0, #0x20
	bne _0805A7AE
	adds r0, r4, #0
	orrs r0, r2
	strh r0, [r1]
	b _0805A7B2
_0805A7AE:
	adds r0, #1
_0805A7B0:
	strb r0, [r3]
_0805A7B2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RidleyTailPartIdle
RidleyTailPartIdle: @ 0x0805A7B8
	push {r4, lr}
	ldr r0, _0805A818 @ =gCurrentSprite
	adds r0, #0x23
	ldrb r4, [r0]
	bl RidleyTailPartHandleRotation
	ldr r0, _0805A81C @ =gSubSpriteData1
	ldr r1, [r0]
	ldr r0, _0805A820 @ =0x083A9A14
	cmp r1, r0
	beq _0805A7E2
	ldr r2, _0805A824 @ =gSubSpriteData2
	ldr r1, [r2]
	ldr r0, _0805A828 @ =0x083A9B9C
	cmp r1, r0
	bne _0805A7E2
	ldr r0, _0805A82C @ =0x083A9B1C
	str r0, [r2]
	movs r0, #0
	strb r0, [r2, #6]
	strh r0, [r2, #4]
_0805A7E2:
	ldr r0, _0805A830 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x29
	bne _0805A810
	ldr r2, _0805A818 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r3, #0
	movs r0, #0x38
	strb r0, [r1]
	ldr r1, _0805A824 @ =gSubSpriteData2
	ldr r0, _0805A834 @ =0x083A9C1C
	str r0, [r1]
	strb r3, [r1, #6]
	movs r0, #0
	strh r3, [r1, #4]
	adds r2, #0x2b
	strb r0, [r2]
_0805A810:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A818: .4byte gCurrentSprite
_0805A81C: .4byte gSubSpriteData1
_0805A820: .4byte 0x083A9A14
_0805A824: .4byte gSubSpriteData2
_0805A828: .4byte 0x083A9B9C
_0805A82C: .4byte 0x083A9B1C
_0805A830: .4byte gSpriteData
_0805A834: .4byte 0x083A9C1C

	thumb_func_start RidleyTailPartWaitingTOWindUp
RidleyTailPartWaitingTOWindUp: @ 0x0805A838
	push {lr}
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805A856
	ldr r1, _0805A85C @ =gSubSpriteData2
	ldr r0, _0805A860 @ =0x083A9C74
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805A864 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x3a
	strb r1, [r0]
_0805A856:
	pop {r0}
	bx r0
	.align 2, 0
_0805A85C: .4byte gSubSpriteData2
_0805A860: .4byte 0x083A9C74
_0805A864: .4byte gCurrentSprite

	thumb_func_start RidleyTailPartWindingUp1
RidleyTailPartWindingUp1: @ 0x0805A868
	push {r4, lr}
	ldr r4, _0805A8BC @ =gSubSpriteData2
	ldr r0, [r4, #4]
	ldr r1, _0805A8C0 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _0805A8C4 @ =0x00010003
	cmp r0, r1
	bne _0805A87E
	ldr r0, _0805A8C8 @ =0x000001E5
	bl SoundPlay
_0805A87E:
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805A8A6
	ldr r0, _0805A8CC @ =0x083A9CDC
	str r0, [r4]
	movs r0, #0
	strb r0, [r4, #6]
	strh r0, [r4, #4]
	ldr r1, _0805A8D0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x3c
	strb r0, [r2]
	ldr r0, _0805A8D4 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #1
	adds r0, #2
	adds r1, #0x2e
	strb r0, [r1]
_0805A8A6:
	ldr r2, _0805A8D8 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, _0805A8DC @ =0x0000027F
	cmp r1, r0
	bls _0805A8B4
	subs r0, r1, #2
	strh r0, [r2, #8]
_0805A8B4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A8BC: .4byte gSubSpriteData2
_0805A8C0: .4byte 0x00FFFFFF
_0805A8C4: .4byte 0x00010003
_0805A8C8: .4byte 0x000001E5
_0805A8CC: .4byte 0x083A9CDC
_0805A8D0: .4byte gCurrentSprite
_0805A8D4: .4byte gSpriteRandomNumber
_0805A8D8: .4byte gSubSpriteData1
_0805A8DC: .4byte 0x0000027F

	thumb_func_start RidleyTailPartWindingUp2
RidleyTailPartWindingUp2: @ 0x0805A8E0
	push {r4, r5, r6, lr}
	ldr r0, _0805A940 @ =gSubSpriteData2
	ldr r0, [r0, #4]
	ldr r1, _0805A944 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _0805A948 @ =0x00010003
	cmp r0, r1
	bne _0805A8F6
	ldr r0, _0805A94C @ =0x000001E5
	bl SoundPlay
_0805A8F6:
	ldr r5, _0805A950 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r4, [r0]
	movs r6, #0
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	bne _0805A90A
	b _0805A9FC
_0805A90A:
	ldr r1, _0805A954 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r3, r0, r1
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x2a
	strb r0, [r1]
	adds r1, r5, #0
	adds r1, #0x25
	movs r0, #0x19
	strb r0, [r1]
	ldrh r2, [r3]
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _0805A970
	ldr r0, _0805A958 @ =gSubSpriteData1
	ldr r1, _0805A95C @ =gSamusData
	ldrh r0, [r0, #0xa]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0805A964
	ldr r0, _0805A960 @ =0x0000FDFF
	ands r0, r2
	b _0805A998
	.align 2, 0
_0805A940: .4byte gSubSpriteData2
_0805A944: .4byte 0x00FFFFFF
_0805A948: .4byte 0x00010003
_0805A94C: .4byte 0x000001E5
_0805A950: .4byte gCurrentSprite
_0805A954: .4byte gSpriteData
_0805A958: .4byte gSubSpriteData1
_0805A95C: .4byte gSamusData
_0805A960: .4byte 0x0000FDFF
_0805A964:
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	orrs r0, r2
	strh r0, [r3]
	b _0805A99E
_0805A970:
	ldr r0, _0805A984 @ =gSubSpriteData1
	ldr r1, _0805A988 @ =gSamusData
	ldrh r0, [r0, #0xa]
	ldrh r1, [r1, #0x16]
	cmp r0, r1
	bls _0805A990
	ldr r0, _0805A98C @ =0x0000FDFF
	ands r0, r2
	strh r0, [r3]
	b _0805A99E
	.align 2, 0
_0805A984: .4byte gSubSpriteData1
_0805A988: .4byte gSamusData
_0805A98C: .4byte 0x0000FDFF
_0805A990:
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	orrs r0, r2
_0805A998:
	strh r0, [r3]
	cmp r6, #0
	beq _0805A9C0
_0805A99E:
	ldr r1, _0805A9B4 @ =gSubSpriteData2
	ldr r0, _0805A9B8 @ =0x083A9D44
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805A9BC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x44
	strb r1, [r0]
	b _0805A9FC
	.align 2, 0
_0805A9B4: .4byte gSubSpriteData2
_0805A9B8: .4byte 0x083A9D44
_0805A9BC: .4byte gCurrentSprite
_0805A9C0:
	ldr r0, _0805A9E8 @ =gSubSpriteData2
	ldr r1, _0805A9EC @ =0x083A9DF4
	str r1, [r0]
	strb r6, [r0, #6]
	strh r6, [r0, #4]
	ldr r2, _0805A9F0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3e
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805A9F4
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0xe0
	b _0805A9FA
	.align 2, 0
_0805A9E8: .4byte gSubSpriteData2
_0805A9EC: .4byte 0x083A9DF4
_0805A9F0: .4byte gCurrentSprite
_0805A9F4:
	adds r1, r2, #0
	adds r1, #0x2b
	movs r0, #0x20
_0805A9FA:
	strb r0, [r1]
_0805A9FC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start RidleyTailPartStrikingDown1
RidleyTailPartStrikingDown1: @ 0x0805AA04
	push {r4, lr}
	ldr r4, _0805AA38 @ =gSubSpriteData2
	ldr r0, [r4, #4]
	ldr r1, _0805AA3C @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _0805AA40 @ =0x00010003
	cmp r0, r1
	bne _0805AA1A
	ldr r0, _0805AA44 @ =0x000001E7
	bl SoundPlay
_0805AA1A:
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805AA50
	ldr r0, _0805AA48 @ =0x083A9E64
	str r0, [r4]
	movs r0, #0
	strb r0, [r4, #6]
	strh r0, [r4, #4]
	ldr r0, _0805AA4C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x40
	strb r1, [r0]
	b _0805AA78
	.align 2, 0
_0805AA38: .4byte gSubSpriteData2
_0805AA3C: .4byte 0x00FFFFFF
_0805AA40: .4byte 0x00010003
_0805AA44: .4byte 0x000001E7
_0805AA48: .4byte 0x083A9E64
_0805AA4C: .4byte gCurrentSprite
_0805AA50:
	ldrh r0, [r4, #4]
	cmp r0, #7
	bhi _0805AA5E
	movs r0, #0xc
	bl RidleyTailStrikeYMovement
	b _0805AA6E
_0805AA5E:
	ldr r2, _0805AA80 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, _0805AA84 @ =0x0000027F
	cmp r1, r0
	bls _0805AA6E
	adds r0, r1, #0
	subs r0, #8
	strh r0, [r2, #8]
_0805AA6E:
	movs r0, #2
	bl RidleyTailXMovement
	bl RidleyTailStrikingCheckPlayEffects
_0805AA78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AA80: .4byte gSubSpriteData1
_0805AA84: .4byte 0x0000027F

	thumb_func_start RidleyTailPartStrikingDown2
RidleyTailPartStrikingDown2: @ 0x0805AA88
	push {r4, r5, r6, r7, lr}
	ldr r0, _0805AB10 @ =gSubSpriteData2
	ldr r0, [r0, #4]
	ldr r1, _0805AB14 @ =0x00FFFFFF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #9
	cmp r0, r1
	bne _0805AAA0
	ldr r0, _0805AB18 @ =0x000001E7
	bl SoundPlay
_0805AAA0:
	movs r5, #0
	ldr r6, _0805AB1C @ =gCurrentSprite
	adds r0, r6, #0
	adds r0, #0x23
	ldrb r4, [r0]
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805AB5C
	ldr r0, _0805AB20 @ =gSamusData
	ldr r1, _0805AB24 @ =gSubSpriteData1
	ldrh r2, [r0, #0x18]
	adds r7, r0, #0
	adds r3, r1, #0
	ldrh r0, [r3, #8]
	cmp r2, r0
	blo _0805AAD4
	ldr r0, _0805AB28 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x25
	ldrb r0, [r1]
	cmp r0, #0x1b
	bne _0805AADC
_0805AAD4:
	adds r1, r6, #0
	adds r1, #0x2e
	movs r0, #1
	strb r0, [r1]
_0805AADC:
	ldr r1, _0805AB1C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	adds r2, r1, #0
	cmp r0, #0
	beq _0805AB34
	ldr r1, _0805AB28 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805AB2C
	ldrh r0, [r3, #0xa]
	ldrh r7, [r7, #0x16]
	cmp r0, r7
	bls _0805AB3A
	b _0805AB34
	.align 2, 0
_0805AB10: .4byte gSubSpriteData2
_0805AB14: .4byte 0x00FFFFFF
_0805AB18: .4byte 0x000001E7
_0805AB1C: .4byte gCurrentSprite
_0805AB20: .4byte gSamusData
_0805AB24: .4byte gSubSpriteData1
_0805AB28: .4byte gSpriteData
_0805AB2C:
	ldrh r0, [r3, #0xa]
	ldrh r7, [r7, #0x16]
	cmp r0, r7
	bhs _0805AB3A
_0805AB34:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0805AB3A:
	cmp r5, #0
	beq _0805AB5C
	ldr r1, _0805AB54 @ =gSubSpriteData2
	ldr r0, _0805AB58 @ =0x083A9EBC
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x42
	strb r0, [r1]
	b _0805AB8A
	.align 2, 0
_0805AB54: .4byte gSubSpriteData2
_0805AB58: .4byte 0x083A9EBC
_0805AB5C:
	ldr r0, _0805AB6C @ =gSubSpriteData2
	ldrh r0, [r0, #4]
	cmp r0, #4
	bhi _0805AB70
	movs r0, #0xc
	bl RidleyTailStrikeYMovement
	b _0805AB80
	.align 2, 0
_0805AB6C: .4byte gSubSpriteData2
_0805AB70:
	ldr r2, _0805AB90 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, _0805AB94 @ =0x0000027F
	cmp r1, r0
	bls _0805AB80
	adds r0, r1, #0
	subs r0, #8
	strh r0, [r2, #8]
_0805AB80:
	movs r0, #4
	bl RidleyTailXMovement
	bl RidleyTailStrikingCheckPlayEffects
_0805AB8A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805AB90: .4byte gSubSpriteData1
_0805AB94: .4byte 0x0000027F

	thumb_func_start RidleyTailPartStrikingDown3
RidleyTailPartStrikingDown3: @ 0x0805AB98
	push {r4, lr}
	ldr r4, _0805ABD8 @ =gSubSpriteData2
	ldr r0, [r4, #4]
	ldr r1, _0805ABDC @ =0x00FFFFFF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #9
	cmp r0, r1
	bne _0805ABB0
	ldr r0, _0805ABE0 @ =0x000001E7
	bl SoundPlay
_0805ABB0:
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805AC08
	ldr r2, _0805ABE4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	cmp r1, #0
	beq _0805ABEC
	ldr r0, _0805ABE8 @ =0x083A9CDC
	str r0, [r4]
	movs r0, #0
	strb r0, [r4, #6]
	strh r0, [r4, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	b _0805AC30
	.align 2, 0
_0805ABD8: .4byte gSubSpriteData2
_0805ABDC: .4byte 0x00FFFFFF
_0805ABE0: .4byte 0x000001E7
_0805ABE4: .4byte gCurrentSprite
_0805ABE8: .4byte 0x083A9CDC
_0805ABEC:
	ldr r0, _0805AC04 @ =0x083A9F44
	str r0, [r4]
	strb r1, [r4, #6]
	strh r1, [r4, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	b _0805AC30
	.align 2, 0
_0805AC04: .4byte 0x083A9F44
_0805AC08:
	ldrh r0, [r4, #4]
	cmp r0, #4
	bhi _0805AC16
	movs r0, #0xc
	bl RidleyTailStrikeYMovement
	b _0805AC26
_0805AC16:
	ldr r2, _0805AC38 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, _0805AC3C @ =0x0000027F
	cmp r1, r0
	bls _0805AC26
	adds r0, r1, #0
	subs r0, #8
	strh r0, [r2, #8]
_0805AC26:
	movs r0, #2
	bl RidleyTailXMovement
	bl RidleyTailStrikingCheckPlayEffects
_0805AC30:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AC38: .4byte gSubSpriteData1
_0805AC3C: .4byte 0x0000027F

	thumb_func_start RidleyTailPartStrikingForward
RidleyTailPartStrikingForward: @ 0x0805AC40
	push {r4, r5, r6, lr}
	ldr r6, _0805ACBC @ =gSubSpriteData2
	ldr r0, [r6, #4]
	ldr r1, _0805ACC0 @ =0x00FFFFFF
	ands r0, r1
	ldr r1, _0805ACC4 @ =0x00010003
	cmp r0, r1
	bne _0805AC58
	movs r0, #0xf3
	lsls r0, r0, #1
	bl SoundPlay
_0805AC58:
	ldr r5, _0805ACC8 @ =gCurrentSprite
	adds r0, r5, #0
	adds r0, #0x23
	ldrb r4, [r0]
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805ACF8
	ldr r0, _0805ACCC @ =gSamusData
	ldr r1, _0805ACD0 @ =gSubSpriteData1
	ldrh r0, [r0, #0x18]
	ldrh r1, [r1, #8]
	cmp r0, r1
	blo _0805AC86
	ldr r0, _0805ACD4 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x25
	ldrb r0, [r1]
	cmp r0, #0x1b
	bne _0805AC8E
_0805AC86:
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #1
	strb r0, [r1]
_0805AC8E:
	ldr r2, _0805ACC8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	movs r3, #0
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805ACDC
	ldr r0, _0805ACBC @ =gSubSpriteData2
	ldr r1, _0805ACD8 @ =0x083A9F44
	str r1, [r0]
	strb r3, [r0, #6]
	strh r3, [r0, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x46
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	b _0805AD34
	.align 2, 0
_0805ACBC: .4byte gSubSpriteData2
_0805ACC0: .4byte 0x00FFFFFF
_0805ACC4: .4byte 0x00010003
_0805ACC8: .4byte gCurrentSprite
_0805ACCC: .4byte gSamusData
_0805ACD0: .4byte gSubSpriteData1
_0805ACD4: .4byte gSpriteData
_0805ACD8: .4byte 0x083A9F44
_0805ACDC:
	ldr r0, _0805ACF0 @ =gSubSpriteData2
	ldr r1, _0805ACF4 @ =0x083A9CDC
	str r1, [r0]
	strb r3, [r0, #6]
	strh r3, [r0, #4]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x3c
	strb r0, [r1]
	b _0805AD34
	.align 2, 0
_0805ACF0: .4byte gSubSpriteData2
_0805ACF4: .4byte 0x083A9CDC
_0805ACF8:
	ldrh r0, [r6, #4]
	subs r0, #4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #8
	bhi _0805AD28
	ldr r1, _0805AD1C @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805AD24
	ldr r0, _0805AD20 @ =0x083AF4B8
	b _0805AD26
	.align 2, 0
_0805AD1C: .4byte gSpriteData
_0805AD20: .4byte 0x083AF4B8
_0805AD24:
	ldr r0, _0805AD3C @ =0x083AF800
_0805AD26:
	str r0, [r5, #0x18]
_0805AD28:
	movs r0, #4
	bl RidleyTailStrikeYMovement
	movs r0, #1
	bl RidleyTailXMovement
_0805AD34:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805AD3C: .4byte 0x083AF800

	thumb_func_start RidleyTailPartDoneStriking
RidleyTailPartDoneStriking: @ 0x0805AD40
	push {r4, r5, r6, lr}
	ldr r6, _0805ADB0 @ =gCurrentSprite
	adds r0, r6, #0
	adds r0, #0x23
	ldrb r4, [r0]
	bl CheckEndOfSubSpriteData2Animation
	cmp r0, #0
	beq _0805ADCA
	ldr r1, _0805ADB4 @ =gSubSpriteData2
	ldr r0, _0805ADB8 @ =0x083A9B1C
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r5, #0
	strh r0, [r1, #4]
	adds r0, r6, #0
	adds r0, #0x24
	movs r2, #2
	strb r2, [r0]
	ldr r1, _0805ADBC @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r3, r0, r1
	adds r0, r3, #0
	adds r0, #0x24
	strb r2, [r0]
	adds r0, #0xb
	strb r5, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r5, [r0]
	adds r0, #3
	strb r1, [r0]
	ldr r0, _0805ADC0 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	adds r0, #1
	lsls r0, r0, #4
	subs r0, #1
	adds r1, r3, #0
	adds r1, #0x2b
	strb r0, [r1]
	ldrh r1, [r3]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805ADC4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
	b _0805ADC8
	.align 2, 0
_0805ADB0: .4byte gCurrentSprite
_0805ADB4: .4byte gSubSpriteData2
_0805ADB8: .4byte 0x083A9B1C
_0805ADBC: .4byte gSpriteData
_0805ADC0: .4byte gSpriteRandomNumber
_0805ADC4:
	ldr r0, _0805ADD0 @ =0x0000FDFF
	ands r0, r1
_0805ADC8:
	strh r0, [r3]
_0805ADCA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805ADD0: .4byte 0x0000FDFF

	thumb_func_start RidleyFireInit
RidleyFireInit: @ 0x0805ADD4
	push {r4, r5, r6, lr}
	ldr r0, _0805AE68 @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r4, _0805AE6C @ =0x0000FFFB
	ands r4, r0
	movs r5, #0
	movs r3, #0
	movs r0, #0x80
	orrs r4, r0
	orrs r4, r5
	mov r1, ip
	strh r4, [r1]
	ldr r0, _0805AE70 @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x22
	movs r2, #2
	strb r2, [r0]
	adds r0, #5
	movs r1, #0xc
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0805AE74 @ =0x0000FFE0
	mov r6, ip
	strh r1, [r6, #0xa]
	movs r0, #0x20
	strh r0, [r6, #0xc]
	strh r1, [r6, #0xe]
	strh r0, [r6, #0x10]
	ldr r0, _0805AE78 @ =0x083AF7F0
	str r0, [r6, #0x18]
	strb r5, [r6, #0x1c]
	strh r3, [r6, #0x16]
	mov r0, ip
	adds r0, #0x2b
	strb r5, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r6, #0x12]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x30
	strb r5, [r0]
	subs r0, #0xc
	strb r2, [r0]
	subs r1, #9
	movs r0, #4
	strb r0, [r1]
	ldr r1, _0805AE7C @ =gSamusData
	ldrh r0, [r6, #2]
	ldrh r1, [r1, #0x18]
	cmp r0, r1
	bhs _0805AE60
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	orrs r4, r0
	strh r4, [r6]
_0805AE60:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805AE68: .4byte gCurrentSprite
_0805AE6C: .4byte 0x0000FFFB
_0805AE70: .4byte gIoRegisters
_0805AE74: .4byte 0x0000FFE0
_0805AE78: .4byte 0x083AF7F0
_0805AE7C: .4byte gSamusData

	thumb_func_start RidleyFireMoving
RidleyFireMoving: @ 0x0805AE80
	push {r4, lr}
	ldr r3, _0805AEA8 @ =gCurrentSprite
	adds r2, r3, #0
	adds r2, #0x30
	ldrb r0, [r2]
	adds r1, r0, #1
	strb r1, [r2]
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldrh r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	adds r2, r3, #0
	cmp r0, #0
	beq _0805AEAC
	ldrh r0, [r2, #4]
	adds r0, r4, r0
	b _0805AEB0
	.align 2, 0
_0805AEA8: .4byte gCurrentSprite
_0805AEAC:
	ldrh r0, [r2, #4]
	subs r0, r0, r4
_0805AEB0:
	strh r0, [r2, #4]
	ldrh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805AED0
	adds r1, r2, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	subs r0, #0x20
	b _0805AED8
_0805AED0:
	adds r1, r2, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	adds r0, #0x20
_0805AED8:
	strb r0, [r1]
	adds r4, r2, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0805AF06
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	strb r3, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	strb r3, [r4]
	adds r0, #1
	strb r1, [r0]
_0805AF06:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RidleyFireMovingTowardsSamus
RidleyFireMovingTowardsSamus: @ 0x0805AF0C
	push {r4, lr}
	sub sp, #4
	ldr r0, _0805AF60 @ =gCurrentSprite
	ldrb r0, [r0, #0x1e]
	movs r2, #8
	cmp r0, #4
	beq _0805AF2E
	movs r2, #0x28
	cmp r0, #3
	beq _0805AF2E
	movs r2, #0x48
	cmp r0, #2
	beq _0805AF2E
	movs r2, #0x82
	cmp r0, #1
	bne _0805AF2E
	movs r2, #0x68
_0805AF2E:
	ldr r1, _0805AF64 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r1, #0x16]
	movs r2, #2
	str r2, [sp]
	movs r2, #0x20
	movs r3, #0x28
	bl MoveRidleyFireBall
	ldr r2, _0805AF60 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805AF68
	adds r1, r2, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	subs r0, #0x20
	b _0805AF70
	.align 2, 0
_0805AF60: .4byte gCurrentSprite
_0805AF64: .4byte gSamusData
_0805AF68:
	adds r1, r2, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	adds r0, #0x20
_0805AF70:
	strb r0, [r1]
	ldr r4, _0805AF94 @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805AF98 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805AF8C
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
_0805AF8C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AF94: .4byte gCurrentSprite
_0805AF98: .4byte gPreviousCollisionCheck

	thumb_func_start RidleyFireExploding
RidleyFireExploding: @ 0x0805AF9C
	push {lr}
	ldr r1, _0805AFBC @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	ldrh r0, [r1, #2]
	ldrh r1, [r1, #4]
	movs r2, #0x25
	bl ParticleSet
	movs r0, #0xf2
	lsls r0, r0, #1
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_0805AFBC: .4byte gCurrentSprite

	thumb_func_start Ridley
Ridley: @ 0x0805AFC0
	push {lr}
	bl RidleyWaveBeamCollsiion
	bl RidleySamusGrabbed
	bl RidleyUpdateHealthThreshold
	ldr r0, _0805AFE8 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #0x59
	bls _0805AFDC
	b _0805B1B8
_0805AFDC:
	lsls r0, r0, #2
	ldr r1, _0805AFEC @ =_0805AFF0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805AFE8: .4byte gCurrentSprite
_0805AFEC: .4byte _0805AFF0
_0805AFF0: @ jump table
	.4byte _0805B180 @ case 0
	.4byte _0805B184 @ case 1
	.4byte _0805B194 @ case 2
	.4byte _0805B198 @ case 3
	.4byte _0805B19E @ case 4
	.4byte _0805B1B8 @ case 5
	.4byte _0805B1B8 @ case 6
	.4byte _0805B1B8 @ case 7
	.4byte _0805B18A @ case 8
	.4byte _0805B18E @ case 9
	.4byte _0805B1B8 @ case 10
	.4byte _0805B1B8 @ case 11
	.4byte _0805B1B8 @ case 12
	.4byte _0805B1B8 @ case 13
	.4byte _0805B1B8 @ case 14
	.4byte _0805B1B8 @ case 15
	.4byte _0805B1B8 @ case 16
	.4byte _0805B1B8 @ case 17
	.4byte _0805B1B8 @ case 18
	.4byte _0805B1B8 @ case 19
	.4byte _0805B1B8 @ case 20
	.4byte _0805B1B8 @ case 21
	.4byte _0805B1B8 @ case 22
	.4byte _0805B164 @ case 23
	.4byte _0805B1B8 @ case 24
	.4byte _0805B16A @ case 25
	.4byte _0805B1B8 @ case 26
	.4byte _0805B1B8 @ case 27
	.4byte _0805B1B8 @ case 28
	.4byte _0805B1B8 @ case 29
	.4byte _0805B170 @ case 30
	.4byte _0805B174 @ case 31
	.4byte _0805B1B8 @ case 32
	.4byte _0805B1B8 @ case 33
	.4byte _0805B1B8 @ case 34
	.4byte _0805B1B8 @ case 35
	.4byte _0805B1B8 @ case 36
	.4byte _0805B1B8 @ case 37
	.4byte _0805B1B8 @ case 38
	.4byte _0805B1B8 @ case 39
	.4byte _0805B1A4 @ case 40
	.4byte _0805B1AA @ case 41
	.4byte _0805B1B8 @ case 42
	.4byte _0805B1B8 @ case 43
	.4byte _0805B1B8 @ case 44
	.4byte _0805B1B8 @ case 45
	.4byte _0805B1B0 @ case 46
	.4byte _0805B1B4 @ case 47
	.4byte _0805B1B8 @ case 48
	.4byte _0805B1B8 @ case 49
	.4byte _0805B1B8 @ case 50
	.4byte _0805B1B8 @ case 51
	.4byte _0805B1B8 @ case 52
	.4byte _0805B1B8 @ case 53
	.4byte _0805B1B8 @ case 54
	.4byte _0805B17A @ case 55
	.4byte _0805B1B8 @ case 56
	.4byte _0805B1B8 @ case 57
	.4byte _0805B1B8 @ case 58
	.4byte _0805B1B8 @ case 59
	.4byte _0805B1B8 @ case 60
	.4byte _0805B1B8 @ case 61
	.4byte _0805B1B8 @ case 62
	.4byte _0805B1B8 @ case 63
	.4byte _0805B1B8 @ case 64
	.4byte _0805B1B8 @ case 65
	.4byte _0805B1B8 @ case 66
	.4byte _0805B1B8 @ case 67
	.4byte _0805B1B8 @ case 68
	.4byte _0805B1B8 @ case 69
	.4byte _0805B1B8 @ case 70
	.4byte _0805B1B8 @ case 71
	.4byte _0805B1B8 @ case 72
	.4byte _0805B1B8 @ case 73
	.4byte _0805B1B8 @ case 74
	.4byte _0805B1B8 @ case 75
	.4byte _0805B1B8 @ case 76
	.4byte _0805B1B8 @ case 77
	.4byte _0805B1B8 @ case 78
	.4byte _0805B1B8 @ case 79
	.4byte _0805B1B8 @ case 80
	.4byte _0805B1B8 @ case 81
	.4byte _0805B1B8 @ case 82
	.4byte _0805B1B8 @ case 83
	.4byte _0805B1B8 @ case 84
	.4byte _0805B1B8 @ case 85
	.4byte _0805B1B8 @ case 86
	.4byte _0805B1B8 @ case 87
	.4byte _0805B158 @ case 88
	.4byte _0805B15E @ case 89
_0805B158:
	bl RidleyInit
	b _0805B1B8
_0805B15E:
	bl RidleyForming
	b _0805B1B8
_0805B164:
	bl RidleyScreamingAfterSpawn
	b _0805B1B8
_0805B16A:
	bl RidleyRisingAfterSpawn
	b _0805B1B8
_0805B170:
	bl RidleyScreamingInit
_0805B174:
	bl RidleyScreaming
	b _0805B1B8
_0805B17A:
	bl RidleyTurningIntoCoreX
	b _0805B1B8
_0805B180:
	bl RidleyIdleInit
_0805B184:
	bl RidleyIdle
	b _0805B1B8
_0805B18A:
	bl RidleyFlyingBackwardsInit
_0805B18E:
	bl RidleyFlyingBackwards
	b _0805B1B8
_0805B194:
	bl RidleyTurningAroundInit
_0805B198:
	bl RidleyTurningAround
	b _0805B1B8
_0805B19E:
	bl RidleyTurningAroundSecondPart
	b _0805B1B8
_0805B1A4:
	bl RidleyPreparingTailAttack
	b _0805B1B8
_0805B1AA:
	bl RidleyTailAttack
	b _0805B1B8
_0805B1B0:
	bl RidleyShootingFireInit
_0805B1B4:
	bl RidleyShootingFire
_0805B1B8:
	bl UpdateSubSpriteData1Animation
	bl RidleySyncSubSprites
	bl RidleySetBackgroundPriority
	bl RidleyUpdatePalette
	pop {r0}
	bx r0

	thumb_func_start RidleyPart
RidleyPart: @ 0x0805B1CC
	push {r4, r5, r6, lr}
	ldr r0, _0805B1E8 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x23
	ldrb r5, [r1]
	adds r1, #1
	ldrb r1, [r1]
	adds r4, r0, #0
	cmp r1, #0
	bne _0805B1EC
	bl RidleyPartInit
	b _0805B2B6
	.align 2, 0
_0805B1E8: .4byte gCurrentSprite
_0805B1EC:
	ldr r2, _0805B20C @ =gSpriteData
	lsls r3, r5, #3
	subs r0, r3, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	adds r6, r3, #0
	cmp r0, #0
	beq _0805B210
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	b _0805B216
	.align 2, 0
_0805B20C: .4byte gSpriteData
_0805B210:
	ldrh r1, [r4]
	ldr r0, _0805B23C @ =0x0000FFBF
	ands r0, r1
_0805B216:
	strh r0, [r4]
	subs r0, r6, r5
	lsls r0, r0, #3
	adds r2, r0, r2
	ldrh r1, [r2]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805B240
	ldrh r0, [r4]
	movs r1, #0x20
	orrs r1, r0
	strh r1, [r4]
	ldrb r0, [r2, #0x1d]
	cmp r0, #0x49
	bne _0805B248
	movs r0, #0
	strh r0, [r4]
	b _0805B2B6
	.align 2, 0
_0805B23C: .4byte 0x0000FFBF
_0805B240:
	ldrh r1, [r4]
	ldr r0, _0805B280 @ =0x0000FFDF
	ands r0, r1
	strh r0, [r4]
_0805B248:
	bl RidleySyncSubSprites
	ldr r4, _0805B284 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	bne _0805B2B6
	bl RidleyPartidle
	ldr r1, _0805B288 @ =gSpriteData
	subs r0, r6, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x20
	ldrb r3, [r0]
	cmp r3, #0
	beq _0805B28C
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	movs r1, #0xd
	subs r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
	b _0805B292
	.align 2, 0
_0805B280: .4byte 0x0000FFDF
_0805B284: .4byte gCurrentSprite
_0805B288: .4byte gSpriteData
_0805B28C:
	adds r0, r4, #0
	adds r0, #0x20
	strb r3, [r0]
_0805B292:
	ldr r1, _0805B2BC @ =gCurrentSprite
	ldrb r0, [r1, #0x1e]
	cmp r0, #0
	bne _0805B2B6
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0805B2B6
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0805B2B6
	ldr r1, [r1, #0x18]
	ldr r0, _0805B2C0 @ =0x083AF648
	cmp r1, r0
	beq _0805B2B6
	movs r0, #0xf1
	lsls r0, r0, #1
	bl SoundPlay
_0805B2B6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805B2BC: .4byte gCurrentSprite
_0805B2C0: .4byte 0x083AF648

	thumb_func_start RidleyTailPart
RidleyTailPart: @ 0x0805B2C4
	push {r4, r5, r6, lr}
	ldr r3, _0805B2FC @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r5, [r0]
	ldr r2, _0805B300 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r6, r0, r2
	ldrh r1, [r6]
	movs r0, #0x20
	ands r0, r1
	adds r4, r3, #0
	cmp r0, #0
	beq _0805B308
	ldrh r0, [r4]
	ldr r3, _0805B304 @ =0x00008020
	adds r1, r3, #0
	orrs r1, r0
	strh r1, [r4]
	ldrb r0, [r6, #0x1d]
	cmp r0, #0x49
	bne _0805B310
	movs r0, #0
	strh r0, [r4]
	b _0805B54A
	.align 2, 0
_0805B2FC: .4byte gCurrentSprite
_0805B300: .4byte gSpriteData
_0805B304: .4byte 0x00008020
_0805B308:
	ldrh r1, [r4]
	ldr r0, _0805B330 @ =0x00007FDF
	ands r0, r1
	strh r0, [r4]
_0805B310:
	ldrb r0, [r4, #0x1e]
	cmp r0, #7
	beq _0805B354
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805B334
	ldrh r1, [r4]
	movs r0, #0x40
	orrs r0, r1
	b _0805B33A
	.align 2, 0
_0805B330: .4byte 0x00007FDF
_0805B334:
	ldrh r1, [r4]
	ldr r0, _0805B350 @ =0x0000FFBF
	ands r0, r1
_0805B33A:
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805B34A
	bl RidleyTailPartInit
_0805B34A:
	bl RidleyTailSyncSubSprites
	b _0805B54A
	.align 2, 0
_0805B350: .4byte 0x0000FFBF
_0805B354:
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x40
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _0805B384
	ldrh r1, [r4]
	movs r2, #0
	movs r3, #0
	movs r0, #0x40
	orrs r0, r1
	strh r0, [r4]
	ldr r0, _0805B380 @ =0x083AF800
	str r0, [r4, #0x18]
	strb r2, [r4, #0x1c]
	strh r3, [r4, #0x16]
	b _0805B396
	.align 2, 0
_0805B380: .4byte 0x083AF800
_0805B384:
	ldrh r1, [r4]
	ldr r0, _0805B3D0 @ =0x0000FFBF
	ands r0, r1
	movs r1, #0
	strh r0, [r4]
	ldr r0, _0805B3D4 @ =0x083AF4B8
	str r0, [r4, #0x18]
	strb r1, [r4, #0x1c]
	strh r2, [r4, #0x16]
_0805B396:
	ldr r0, _0805B3D8 @ =gSubSpriteData1
	ldr r1, [r0]
	ldr r0, _0805B3DC @ =0x083A9A14
	cmp r1, r0
	bne _0805B3BA
	ldr r1, _0805B3E0 @ =gSubSpriteData2
	ldr r0, [r1]
	ldr r2, _0805B3E4 @ =0x083A9B9C
	cmp r0, r2
	beq _0805B3BA
	str r2, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
_0805B3BA:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x46
	bls _0805B3C6
	b _0805B542
_0805B3C6:
	lsls r0, r0, #2
	ldr r1, _0805B3E8 @ =_0805B3EC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805B3D0: .4byte 0x0000FFBF
_0805B3D4: .4byte 0x083AF4B8
_0805B3D8: .4byte gSubSpriteData1
_0805B3DC: .4byte 0x083A9A14
_0805B3E0: .4byte gSubSpriteData2
_0805B3E4: .4byte 0x083A9B9C
_0805B3E8: .4byte _0805B3EC
_0805B3EC: @ jump table
	.4byte _0805B508 @ case 0
	.4byte _0805B542 @ case 1
	.4byte _0805B50E @ case 2
	.4byte _0805B542 @ case 3
	.4byte _0805B542 @ case 4
	.4byte _0805B542 @ case 5
	.4byte _0805B542 @ case 6
	.4byte _0805B542 @ case 7
	.4byte _0805B542 @ case 8
	.4byte _0805B542 @ case 9
	.4byte _0805B542 @ case 10
	.4byte _0805B542 @ case 11
	.4byte _0805B542 @ case 12
	.4byte _0805B542 @ case 13
	.4byte _0805B542 @ case 14
	.4byte _0805B542 @ case 15
	.4byte _0805B542 @ case 16
	.4byte _0805B542 @ case 17
	.4byte _0805B542 @ case 18
	.4byte _0805B542 @ case 19
	.4byte _0805B542 @ case 20
	.4byte _0805B542 @ case 21
	.4byte _0805B542 @ case 22
	.4byte _0805B542 @ case 23
	.4byte _0805B542 @ case 24
	.4byte _0805B542 @ case 25
	.4byte _0805B542 @ case 26
	.4byte _0805B542 @ case 27
	.4byte _0805B542 @ case 28
	.4byte _0805B542 @ case 29
	.4byte _0805B542 @ case 30
	.4byte _0805B542 @ case 31
	.4byte _0805B542 @ case 32
	.4byte _0805B542 @ case 33
	.4byte _0805B542 @ case 34
	.4byte _0805B542 @ case 35
	.4byte _0805B542 @ case 36
	.4byte _0805B542 @ case 37
	.4byte _0805B542 @ case 38
	.4byte _0805B542 @ case 39
	.4byte _0805B542 @ case 40
	.4byte _0805B542 @ case 41
	.4byte _0805B542 @ case 42
	.4byte _0805B542 @ case 43
	.4byte _0805B542 @ case 44
	.4byte _0805B542 @ case 45
	.4byte _0805B542 @ case 46
	.4byte _0805B542 @ case 47
	.4byte _0805B542 @ case 48
	.4byte _0805B542 @ case 49
	.4byte _0805B542 @ case 50
	.4byte _0805B542 @ case 51
	.4byte _0805B542 @ case 52
	.4byte _0805B542 @ case 53
	.4byte _0805B542 @ case 54
	.4byte _0805B542 @ case 55
	.4byte _0805B514 @ case 56
	.4byte _0805B542 @ case 57
	.4byte _0805B51A @ case 58
	.4byte _0805B542 @ case 59
	.4byte _0805B520 @ case 60
	.4byte _0805B542 @ case 61
	.4byte _0805B526 @ case 62
	.4byte _0805B542 @ case 63
	.4byte _0805B52C @ case 64
	.4byte _0805B542 @ case 65
	.4byte _0805B532 @ case 66
	.4byte _0805B542 @ case 67
	.4byte _0805B538 @ case 68
	.4byte _0805B542 @ case 69
	.4byte _0805B53E @ case 70
_0805B508:
	bl RidleyTailPartInit
	b _0805B542
_0805B50E:
	bl RidleyTailPartIdle
	b _0805B542
_0805B514:
	bl RidleyTailPartWaitingTOWindUp
	b _0805B542
_0805B51A:
	bl RidleyTailPartWindingUp1
	b _0805B542
_0805B520:
	bl RidleyTailPartWindingUp2
	b _0805B542
_0805B526:
	bl RidleyTailPartStrikingDown1
	b _0805B542
_0805B52C:
	bl RidleyTailPartStrikingDown2
	b _0805B542
_0805B532:
	bl RidleyTailPartStrikingDown3
	b _0805B542
_0805B538:
	bl RidleyTailPartStrikingForward
	b _0805B542
_0805B53E:
	bl RidleyTailPartDoneStriking
_0805B542:
	bl UpdateSubSpriteData2Animation
	bl RidleySyncSubSpritesPosition
_0805B54A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start RidleyFire
RidleyFire: @ 0x0805B550
	push {lr}
	ldr r0, _0805B568 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #2
	beq _0805B57C
	cmp r0, #2
	bgt _0805B56C
	cmp r0, #0
	beq _0805B576
	b _0805B58C
	.align 2, 0
_0805B568: .4byte gCurrentSprite
_0805B56C:
	cmp r0, #0x18
	beq _0805B582
	cmp r0, #0x37
	beq _0805B588
	b _0805B58C
_0805B576:
	bl RidleyFireInit
	b _0805B58C
_0805B57C:
	bl RidleyFireMoving
	b _0805B58C
_0805B582:
	bl RidleyFireMovingTowardsSamus
	b _0805B58C
_0805B588:
	bl RidleyFireExploding
_0805B58C:
	pop {r0}
	bx r0

	thumb_func_start RidleyPreSpawnInit
RidleyPreSpawnInit: @ 0x0805B590
	push {r4, r5, lr}
	ldr r0, _0805B5AC @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r5, #8
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	beq _0805B5B4
	ldr r1, _0805B5B0 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0805B5FC
	.align 2, 0
_0805B5AC: .4byte gEquipment
_0805B5B0: .4byte gCurrentSprite
_0805B5B4:
	ldr r3, _0805B604 @ =gCurrentSprite
	ldrh r1, [r3]
	movs r0, #0x40
	movs r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x58
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	strb r5, [r0]
	adds r1, #2
	movs r0, #0x38
	strb r0, [r1]
	ldr r0, _0805B608 @ =0x0000FEE0
	strh r0, [r3, #0xa]
	strh r4, [r3, #0xc]
	adds r0, #0xc0
	strh r0, [r3, #0xe]
	movs r0, #0x60
	strh r0, [r3, #0x10]
	ldr r0, _0805B60C @ =0x083B0A9C
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	subs r1, #5
	movs r0, #1
	strb r0, [r1]
_0805B5FC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805B604: .4byte gCurrentSprite
_0805B608: .4byte 0x0000FEE0
_0805B60C: .4byte 0x083B0A9C

	thumb_func_start RidleyPreSpawnWaitingForSamus
RidleyPreSpawnWaitingForSamus: @ 0x0805B610
	push {lr}
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r1, #0
	bl CheckSamusNearSpriteLeftRight
	cmp r0, #8
	bne _0805B642
	ldr r0, _0805B648 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #2
	strb r1, [r2]
	ldr r1, _0805B64C @ =0x083B0AAC
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0xa0
	strb r1, [r0]
	movs r0, #0xee
	lsls r0, r0, #1
	bl SoundPlay
_0805B642:
	pop {r0}
	bx r0
	.align 2, 0
_0805B648: .4byte gCurrentSprite
_0805B64C: .4byte 0x083B0AAC

	thumb_func_start RidleyPreSpawnOpeningEye
RidleyPreSpawnOpeningEye: @ 0x0805B650
	push {lr}
	ldr r3, _0805B67C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805B676
	adds r0, r3, #0
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	ldr r0, _0805B680 @ =0x083B0AE4
	str r0, [r3, #0x18]
	strb r2, [r3, #0x1c]
	strh r2, [r3, #0x16]
_0805B676:
	pop {r0}
	bx r0
	.align 2, 0
_0805B67C: .4byte gCurrentSprite
_0805B680: .4byte 0x083B0AE4

	thumb_func_start RidleyPreSpawnClosingEye
RidleyPreSpawnClosingEye: @ 0x0805B684
	push {lr}
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805B6A8
	ldr r0, _0805B6AC @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x24
	movs r3, #0
	movs r1, #0x1a
	strb r1, [r2]
	ldr r1, _0805B6B0 @ =0x083B0A9C
	str r1, [r0, #0x18]
	strb r3, [r0, #0x1c]
	strh r3, [r0, #0x16]
	adds r0, #0x2e
	movs r1, #0x3c
	strb r1, [r0]
_0805B6A8:
	pop {r0}
	bx r0
	.align 2, 0
_0805B6AC: .4byte gCurrentSprite
_0805B6B0: .4byte 0x083B0A9C

	thumb_func_start RidleyPreSpawnEyeClosed
RidleyPreSpawnEyeClosed: @ 0x0805B6B4
	push {lr}
	ldr r2, _0805B6E8 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805B6E2
	subs r1, #0xa
	movs r0, #0x1c
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0x2c
	strh r0, [r2, #6]
	movs r0, #0x42
	movs r1, #7
	bl PlayMusic
_0805B6E2:
	pop {r0}
	bx r0
	.align 2, 0
_0805B6E8: .4byte gCurrentSprite

	thumb_func_start RidleyPreSpawnTurningIntoRidley
RidleyPreSpawnTurningIntoRidley: @ 0x0805B6EC
	push {r4, lr}
	ldr r2, _0805B734 @ =gWrittenToMosaic_H
	ldr r1, _0805B738 @ =0x083BDED6
	ldr r4, _0805B73C @ =gCurrentSprite
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x1f
	bhi _0805B744
	ldrh r2, [r4, #6]
	movs r0, #0xcb
	movs r1, #0
	bl SpriteLoadGfx
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0805B752
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x59
	strb r0, [r1]
	movs r0, #0xcb
	strb r0, [r4, #0x1d]
	ldrh r0, [r4]
	ldr r2, _0805B740 @ =0x00008004
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	b _0805B752
	.align 2, 0
_0805B734: .4byte gWrittenToMosaic_H
_0805B738: .4byte 0x083BDED6
_0805B73C: .4byte gCurrentSprite
_0805B740: .4byte 0x00008004
_0805B744:
	cmp r0, #0x20
	bne _0805B752
	movs r0, #0xcb
	movs r1, #0
	movs r2, #8
	bl SpriteLoadPal
_0805B752:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start RidleyPreSpawn
RidleyPreSpawn: @ 0x0805B758
	push {lr}
	ldr r0, _0805B770 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x1c
	bhi _0805B80E
	lsls r0, r0, #2
	ldr r1, _0805B774 @ =_0805B778
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805B770: .4byte gCurrentSprite
_0805B774: .4byte _0805B778
_0805B778: @ jump table
	.4byte _0805B7EC @ case 0
	.4byte _0805B7F2 @ case 1
	.4byte _0805B7F8 @ case 2
	.4byte _0805B80E @ case 3
	.4byte _0805B80E @ case 4
	.4byte _0805B80E @ case 5
	.4byte _0805B80E @ case 6
	.4byte _0805B80E @ case 7
	.4byte _0805B80E @ case 8
	.4byte _0805B80E @ case 9
	.4byte _0805B80E @ case 10
	.4byte _0805B80E @ case 11
	.4byte _0805B80E @ case 12
	.4byte _0805B80E @ case 13
	.4byte _0805B80E @ case 14
	.4byte _0805B80E @ case 15
	.4byte _0805B80E @ case 16
	.4byte _0805B80E @ case 17
	.4byte _0805B80E @ case 18
	.4byte _0805B80E @ case 19
	.4byte _0805B80E @ case 20
	.4byte _0805B80E @ case 21
	.4byte _0805B80E @ case 22
	.4byte _0805B80E @ case 23
	.4byte _0805B7FE @ case 24
	.4byte _0805B80E @ case 25
	.4byte _0805B804 @ case 26
	.4byte _0805B80E @ case 27
	.4byte _0805B80A @ case 28
_0805B7EC:
	bl RidleyPreSpawnInit
	b _0805B80E
_0805B7F2:
	bl RidleyPreSpawnWaitingForSamus
	b _0805B80E
_0805B7F8:
	bl RidleyPreSpawnOpeningEye
	b _0805B80E
_0805B7FE:
	bl RidleyPreSpawnClosingEye
	b _0805B80E
_0805B804:
	bl RidleyPreSpawnEyeClosed
	b _0805B80E
_0805B80A:
	bl RidleyPreSpawnTurningIntoRidley
_0805B80E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaSyncSubSprites
YakuzaSyncSubSprites: @ 0x0805B814
	push {r4, lr}
	ldr r4, _0805B870 @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _0805B874 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _0805B878 @ =0x0879B784
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _0805B846
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_0805B846:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805B870: .4byte gSubSpriteData1
_0805B874: .4byte gCurrentSprite
_0805B878: .4byte 0x0879B784

	thumb_func_start YakuzaUpdatePalette
YakuzaUpdatePalette: @ 0x0805B87C
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _0805B8A0 @ =gCurrentSprite
	ldrh r5, [r0, #0x14]
	ldr r2, _0805B8A4 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r4, _0805B8A8 @ =gBossWork1
	ldrb r1, [r4]
	cmp r1, #0
	beq _0805B8AC
	cmp r1, #1
	beq _0805B8C4
	b _0805B8D2
	.align 2, 0
_0805B8A0: .4byte gCurrentSprite
_0805B8A4: .4byte sPrimarySpriteStats
_0805B8A8: .4byte gBossWork1
_0805B8AC:
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bgt _0805B8D2
	ldr r7, _0805B8C0 @ =0x083B5210
	movs r0, #1
	strb r0, [r4]
	b _0805B8D6
	.align 2, 0
_0805B8C0: .4byte 0x083B5210
_0805B8C4:
	lsrs r0, r0, #2
	cmp r5, r0
	bhi _0805B8D2
	ldr r7, _0805B8EC @ =0x083B5230
	movs r0, #2
	strb r0, [r4]
	movs r6, #1
_0805B8D2:
	cmp r6, #0
	beq _0805B8E4
_0805B8D6:
	ldr r1, _0805B8F0 @ =0x040000D4
	str r7, [r1]
	ldr r0, _0805B8F4 @ =0x05000300
	str r0, [r1, #4]
	ldr r0, _0805B8F8 @ =0x80000010
	str r0, [r1, #8]
	ldr r0, [r1, #8]
_0805B8E4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B8EC: .4byte 0x083B5230
_0805B8F0: .4byte 0x040000D4
_0805B8F4: .4byte 0x05000300
_0805B8F8: .4byte 0x80000010

	thumb_func_start YakuzaUpdateGrabbedSamus
YakuzaUpdateGrabbedSamus: @ 0x0805B8FC
	push {lr}
	ldr r2, _0805B90C @ =gSamusData
	ldrb r0, [r2, #1]
	cmp r0, #0x40
	beq _0805B910
	movs r0, #0
	b _0805B922
	.align 2, 0
_0805B90C: .4byte gSamusData
_0805B910:
	ldr r0, _0805B928 @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	adds r1, #0xc0
	strh r1, [r2, #0x18]
	ldrh r0, [r0, #0xa]
	strh r0, [r2, #0x16]
	bl TakeConstantDamageFromYakuza
	movs r0, #1
_0805B922:
	pop {r1}
	bx r1
	.align 2, 0
_0805B928: .4byte gSubSpriteData1

	thumb_func_start YakuzaCheckCollidingWithRightWall
YakuzaCheckCollidingWithRightWall: @ 0x0805B92C
	push {lr}
	ldr r0, _0805B948 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	lsrs r1, r1, #2
	ldr r0, _0805B94C @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0xd7
	bhi _0805B950
	movs r0, #0
	b _0805B952
	.align 2, 0
_0805B948: .4byte gSubSpriteData1
_0805B94C: .4byte gBg1XPosition
_0805B950:
	movs r0, #1
_0805B952:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start YakuzaCheckCollidingWithLeftWall
YakuzaCheckCollidingWithLeftWall: @ 0x0805B958
	push {lr}
	ldr r0, _0805B974 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	lsrs r1, r1, #2
	ldr r0, _0805B978 @ =gBg1XPosition
	ldrh r0, [r0]
	lsrs r0, r0, #2
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0x18
	bls _0805B97C
	movs r0, #0
	b _0805B97E
	.align 2, 0
_0805B974: .4byte gSubSpriteData1
_0805B978: .4byte gBg1XPosition
_0805B97C:
	movs r0, #1
_0805B97E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start YakuzaCheckCollidingWithFloor
YakuzaCheckCollidingWithFloor: @ 0x0805B984
	push {lr}
	ldr r0, _0805B994 @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	ldr r0, _0805B998 @ =0x0000073E
	cmp r1, r0
	bhi _0805B99C
	movs r0, #0
	b _0805B99E
	.align 2, 0
_0805B994: .4byte gSubSpriteData1
_0805B998: .4byte 0x0000073E
_0805B99C:
	movs r0, #1
_0805B99E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start YakuzaCheckCollidingWithCeiling
YakuzaCheckCollidingWithCeiling: @ 0x0805B9A4
	push {lr}
	ldr r0, _0805B9B8 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x40
	bne _0805B9C4
	ldr r0, _0805B9BC @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	ldr r0, _0805B9C0 @ =0x000003FF
	b _0805B9CA
	.align 2, 0
_0805B9B8: .4byte gSamusData
_0805B9BC: .4byte gSubSpriteData1
_0805B9C0: .4byte 0x000003FF
_0805B9C4:
	ldr r0, _0805B9D4 @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	ldr r0, _0805B9D8 @ =0x000005FF
_0805B9CA:
	cmp r1, r0
	bhi _0805B9DC
	movs r0, #1
	b _0805B9DE
	.align 2, 0
_0805B9D4: .4byte gSubSpriteData1
_0805B9D8: .4byte 0x000005FF
_0805B9DC:
	movs r0, #0
_0805B9DE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start YakuzaXMovement
YakuzaXMovement: @ 0x0805B9E4
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r5, r4, #0
	ldr r0, _0805BA10 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805BA18
	bl YakuzaCheckCollidingWithRightWall
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805BA2C
	ldr r1, _0805BA14 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	adds r0, r4, r0
	b _0805BA2A
	.align 2, 0
_0805BA10: .4byte gCurrentSprite
_0805BA14: .4byte gSubSpriteData1
_0805BA18:
	bl YakuzaCheckCollidingWithLeftWall
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805BA2C
	ldr r1, _0805BA34 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	subs r0, r0, r5
_0805BA2A:
	strh r0, [r1, #0xa]
_0805BA2C:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0805BA34: .4byte gSubSpriteData1

	thumb_func_start YakuzaYMovement
YakuzaYMovement: @ 0x0805BA38
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r6, r5, #0
	ldr r4, _0805BA64 @ =gCurrentSprite
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0805BA7C
	bl YakuzaCheckCollidingWithFloor
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805BA6C
	ldr r1, _0805BA68 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r5, r0
	b _0805BA8E
	.align 2, 0
_0805BA64: .4byte gCurrentSprite
_0805BA68: .4byte gSubSpriteData1
_0805BA6C:
	ldrh r1, [r4]
	ldr r0, _0805BA78 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r4]
	movs r2, #0
	b _0805BA90
	.align 2, 0
_0805BA78: .4byte 0x0000FBFF
_0805BA7C:
	bl YakuzaCheckCollidingWithCeiling
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805BA90
	ldr r1, _0805BA98 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	subs r0, r0, r6
_0805BA8E:
	strh r0, [r1, #8]
_0805BA90:
	adds r0, r2, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0805BA98: .4byte gSubSpriteData1

	thumb_func_start YakuzaGrabbedSamusInit
YakuzaGrabbedSamusInit: @ 0x0805BA9C
	push {lr}
	ldr r1, _0805BAD4 @ =gSubSpriteData1
	ldr r0, _0805BAD8 @ =0x083B0F98
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _0805BADC @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x28
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #0xa
	strb r2, [r0]
	ldrh r1, [r3]
	ldr r0, _0805BAE0 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r3]
	ldr r0, _0805BAE4 @ =0x0000013F
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_0805BAD4: .4byte gSubSpriteData1
_0805BAD8: .4byte 0x083B0F98
_0805BADC: .4byte gCurrentSprite
_0805BAE0: .4byte 0x0000FBFF
_0805BAE4: .4byte 0x0000013F

	thumb_func_start YakuzaGrabbedSamus
YakuzaGrabbedSamus: @ 0x0805BAE8
	push {r4, r5, r6, lr}
	bl YakuzaUpdateGrabbedSamus
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805BB04
	ldr r0, _0805BB00 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2f
	strb r1, [r0]
	b _0805BB54
	.align 2, 0
_0805BB00: .4byte gCurrentSprite
_0805BB04:
	ldr r6, _0805BB28 @ =gCurrentSprite
	adds r5, r6, #0
	adds r5, #0x2f
	ldrb r4, [r5]
	cmp r4, #0
	bne _0805BB34
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BB54
	ldr r0, _0805BB2C @ =gSubSpriteData1
	ldr r1, _0805BB30 @ =0x083B1178
	str r1, [r0]
	strb r4, [r0, #6]
	strh r4, [r0, #4]
	ldrb r0, [r5]
	adds r0, #1
	b _0805BB52
	.align 2, 0
_0805BB28: .4byte gCurrentSprite
_0805BB2C: .4byte gSubSpriteData1
_0805BB30: .4byte 0x083B1178
_0805BB34:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BB54
	adds r1, r6, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2a
	strb r0, [r1]
	ldr r1, _0805BB5C @ =gSubSpriteData1
	ldr r0, _0805BB60 @ =0x083B1188
	str r0, [r1]
	strb r2, [r1, #6]
	movs r0, #0
	strh r2, [r1, #4]
_0805BB52:
	strb r0, [r5]
_0805BB54:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BB5C: .4byte gSubSpriteData1
_0805BB60: .4byte 0x083B1188

	thumb_func_start YakuzaPullingSamus
YakuzaPullingSamus: @ 0x0805BB64
	push {r4, lr}
	bl YakuzaUpdateGrabbedSamus
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805BB80
	ldr r0, _0805BB7C @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2f
	strb r1, [r0]
	b _0805BC00
	.align 2, 0
_0805BB7C: .4byte gCurrentSprite
_0805BB80:
	ldr r4, _0805BBC4 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805BBD0
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	bne _0805BBA0
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	bne _0805BBA0
	movs r0, #0x9b
	lsls r0, r0, #1
	bl SoundPlay
_0805BBA0:
	movs r0, #4
	bl YakuzaYMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805BC00
	ldr r1, _0805BBC8 @ =gSubSpriteData1
	ldr r0, _0805BBCC @ =0x083B11B0
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _0805BBC4 @ =gCurrentSprite
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _0805BC00
	.align 2, 0
_0805BBC4: .4byte gCurrentSprite
_0805BBC8: .4byte gSubSpriteData1
_0805BBCC: .4byte 0x083B11B0
_0805BBD0:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BC00
	adds r1, r4, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x2c
	strb r0, [r1]
	ldr r0, _0805BC08 @ =gSubSpriteData1
	ldr r1, _0805BC0C @ =0x083B11C0
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
_0805BC00:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805BC08: .4byte gSubSpriteData1
_0805BC0C: .4byte 0x083B11C0

	thumb_func_start YakuzaHoldingSamusHigh
YakuzaHoldingSamusHigh: @ 0x0805BC10
	push {lr}
	bl YakuzaUpdateGrabbedSamus
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805BC2C
	ldr r0, _0805BC28 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2f
	strb r1, [r0]
	b _0805BC4C
	.align 2, 0
_0805BC28: .4byte gCurrentSprite
_0805BC2C:
	ldr r2, _0805BC50 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0805BC4C
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x2e
	strb r1, [r0]
	adds r0, #0xd
	strb r3, [r0]
_0805BC4C:
	pop {r0}
	bx r0
	.align 2, 0
_0805BC50: .4byte gCurrentSprite

	thumb_func_start YakuzaSlammingSamus
YakuzaSlammingSamus: @ 0x0805BC54
	push {r4, r5, r6, r7, lr}
	bl YakuzaUpdateGrabbedSamus
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _0805BC8C @ =gCurrentSprite
	adds r5, r0, #0
	adds r5, #0x31
	ldrb r2, [r5]
	ldr r3, _0805BC90 @ =0x083B0B3E
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0805BC94 @ =0x00007FFF
	cmp r1, r0
	bne _0805BC9C
	subs r0, r2, #1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r2, _0805BC98 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldrh r0, [r0]
	adds r1, r1, r0
	strh r1, [r2, #8]
	b _0805BCA8
	.align 2, 0
_0805BC8C: .4byte gCurrentSprite
_0805BC90: .4byte 0x083B0B3E
_0805BC94: .4byte 0x00007FFF
_0805BC98: .4byte gSubSpriteData1
_0805BC9C:
	adds r0, r2, #1
	strb r0, [r5]
	ldr r1, _0805BD18 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, r0, r4
	strh r0, [r1, #8]
_0805BCA8:
	cmp r6, #0
	beq _0805BCC4
	ldr r1, _0805BD18 @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, #0xc0
	ldrh r1, [r1, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805BD1C @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805BCC4
	bl TakeDamageFromYakuzaSlamming
_0805BCC4:
	ldr r5, _0805BD18 @ =gSubSpriteData1
	ldrh r0, [r5, #8]
	adds r0, #0x48
	ldrh r1, [r5, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r4, r0, #0
	ldr r0, _0805BD20 @ =gPreviousVerticalCollisionCheck
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0805BD12
	adds r0, r4, #0
	subs r0, #0x48
	strh r0, [r5, #8]
	ldr r0, _0805BD24 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x2f
	strb r1, [r0]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldrh r1, [r5, #0xa]
	adds r0, r4, #0
	movs r2, #0x3c
	bl ParticleSet
	adds r0, r4, #0
	adds r0, #0x3c
	ldrh r1, [r5, #0xa]
	movs r2, #0x3c
	bl ParticleSet
	movs r0, #0x9d
	lsls r0, r0, #1
	bl SoundPlay
_0805BD12:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805BD18: .4byte gSubSpriteData1
_0805BD1C: .4byte gPreviousCollisionCheck
_0805BD20: .4byte gPreviousVerticalCollisionCheck
_0805BD24: .4byte gCurrentSprite

	thumb_func_start YakuzaReleasingSamusInit
YakuzaReleasingSamusInit: @ 0x0805BD28
	ldr r1, _0805BD40 @ =gSubSpriteData1
	ldr r0, _0805BD44 @ =0x083B0FC0
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805BD48 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x30
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805BD40: .4byte gSubSpriteData1
_0805BD44: .4byte 0x083B0FC0
_0805BD48: .4byte gCurrentSprite

	thumb_func_start YakuzaReleasingSamus
YakuzaReleasingSamus: @ 0x0805BD4C
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BD5E
	ldr r0, _0805BD64 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #9
	strb r1, [r0]
_0805BD5E:
	pop {r0}
	bx r0
	.align 2, 0
_0805BD64: .4byte gCurrentSprite

	thumb_func_start YakuzaAfterReleasingSamusInit
YakuzaAfterReleasingSamusInit: @ 0x0805BD68
	ldr r1, _0805BD80 @ =gSubSpriteData1
	ldr r0, _0805BD84 @ =0x083B0F28
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805BD88 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0xa
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805BD80: .4byte gSubSpriteData1
_0805BD84: .4byte 0x083B0F28
_0805BD88: .4byte gCurrentSprite

	thumb_func_start YakuzaAfterReleasingSamus
YakuzaAfterReleasingSamus: @ 0x0805BD8C
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BDAA
	ldr r0, _0805BDB0 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x25
	movs r1, #0x1c
	strb r1, [r2]
	adds r0, #0x24
	movs r1, #1
	strb r1, [r0]
	bl MakeSpriteFaceSamusDirection
_0805BDAA:
	pop {r0}
	bx r0
	.align 2, 0
_0805BDB0: .4byte gCurrentSprite

	thumb_func_start YakuzaInit
YakuzaInit: @ 0x0805BDB4
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r0, _0805BDD0 @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0
	beq _0805BDD8
	ldr r1, _0805BDD4 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0805BEA0
	.align 2, 0
_0805BDD0: .4byte gEquipment
_0805BDD4: .4byte gCurrentSprite
_0805BDD8:
	ldr r0, _0805BEA8 @ =gBossWork1
	strb r6, [r0]
	ldr r0, _0805BEAC @ =gCurrentSprite
	mov ip, r0
	ldr r1, _0805BEB0 @ =0xFFFFFE00
	adds r0, r1, #0
	mov r2, ip
	ldrh r2, [r2, #2]
	adds r0, r0, r2
	movs r5, #0
	mov r1, ip
	strh r0, [r1, #2]
	ldr r4, _0805BEB4 @ =gSubSpriteData1
	strh r0, [r4, #8]
	ldrh r0, [r1, #4]
	strh r0, [r4, #0xa]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x24
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0805BEB8 @ =0x0000FFC0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x60
	strh r0, [r2, #0xc]
	ldr r0, _0805BEBC @ =0x0000FFB8
	strh r0, [r2, #0xe]
	movs r0, #0x48
	strh r0, [r2, #0x10]
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	movs r3, #1
	mov r0, ip
	strb r3, [r0, #0x1e]
	ldr r2, _0805BEC0 @ =sPrimarySpriteStats
	ldrb r1, [r0, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	mov r1, ip
	strh r0, [r1, #0x14]
	strh r3, [r4, #0xc]
	ldr r0, _0805BEC4 @ =0x083B0F28
	str r0, [r4]
	strb r5, [r4, #6]
	strh r6, [r4, #4]
	adds r1, #0x25
	movs r0, #0x1c
	strb r0, [r1]
	mov r2, ip
	ldrh r0, [r2]
	movs r2, #0x90
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1]
	mov r0, ip
	adds r0, #0x2d
	strb r5, [r0]
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	mov r5, ip
	adds r5, #0x23
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x64
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrb r3, [r5]
	ldrh r0, [r4, #8]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	str r6, [sp, #8]
	movs r0, #0x64
	movs r1, #2
	movs r2, #0
	bl SpriteSpawnSecondary
_0805BEA0:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BEA8: .4byte gBossWork1
_0805BEAC: .4byte gCurrentSprite
_0805BEB0: .4byte 0xFFFFFE00
_0805BEB4: .4byte gSubSpriteData1
_0805BEB8: .4byte 0x0000FFC0
_0805BEBC: .4byte 0x0000FFB8
_0805BEC0: .4byte sPrimarySpriteStats
_0805BEC4: .4byte 0x083B0F28

	thumb_func_start YakuzaWaitingToAppear
YakuzaWaitingToAppear: @ 0x0805BEC8
	push {lr}
	ldr r0, _0805BEE8 @ =gSamusData
	ldrh r1, [r0, #0x18]
	ldr r0, _0805BEEC @ =0x000006FF
	cmp r1, r0
	bls _0805BEE4
	ldr r1, _0805BEF0 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x38
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x3c
	strb r0, [r1]
_0805BEE4:
	pop {r0}
	bx r0
	.align 2, 0
_0805BEE8: .4byte gSamusData
_0805BEEC: .4byte 0x000006FF
_0805BEF0: .4byte gCurrentSprite

	thumb_func_start YakuzaAboutToAppear
YakuzaAboutToAppear: @ 0x0805BEF4
	push {lr}
	ldr r2, _0805BF38 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805BF32
	subs r1, #0xa
	movs r0, #7
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _0805BF3C @ =0x0000DFFF
	ands r0, r1
	strh r0, [r2]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r1, _0805BF40 @ =gBossWork2
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0805BF44 @ =0x0000012F
	bl unk_3b1c
_0805BF32:
	pop {r0}
	bx r0
	.align 2, 0
_0805BF38: .4byte gCurrentSprite
_0805BF3C: .4byte 0x0000DFFF
_0805BF40: .4byte gBossWork2
_0805BF44: .4byte 0x0000012F

	thumb_func_start YakuzaIdleBeforeNewRoundInit
YakuzaIdleBeforeNewRoundInit: @ 0x0805BF48
	ldr r1, _0805BF68 @ =gSubSpriteData1
	ldr r0, _0805BF6C @ =0x083B0F28
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _0805BF70 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #8
	strb r0, [r2]
	adds r1, #0x25
	movs r0, #0x1c
	strb r0, [r1]
	bx lr
	.align 2, 0
_0805BF68: .4byte gSubSpriteData1
_0805BF6C: .4byte 0x083B0F28
_0805BF70: .4byte gCurrentSprite

	thumb_func_start YakuzaIdleBeforeNewRound
YakuzaIdleBeforeNewRound: @ 0x0805BF74
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BFA6
	ldr r1, _0805BF9C @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #0
	beq _0805BFA0
	subs r0, #1
	strb r0, [r2]
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	bl MakeSpriteFaceSamusDirection
	b _0805BFA6
	.align 2, 0
_0805BF9C: .4byte gCurrentSprite
_0805BFA0:
	adds r1, #0x24
	movs r0, #0x31
	strb r0, [r1]
_0805BFA6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaBeginSweepInit
YakuzaBeginSweepInit: @ 0x0805BFAC
	ldr r1, _0805BFC4 @ =gSubSpriteData1
	ldr r0, _0805BFC8 @ =0x083B0F50
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805BFCC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805BFC4: .4byte gSubSpriteData1
_0805BFC8: .4byte 0x083B0F50
_0805BFCC: .4byte gCurrentSprite

	thumb_func_start YakuzaBeginSweep
YakuzaBeginSweep: @ 0x0805BFD0
	push {lr}
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805BFEE
	ldr r1, _0805BFF4 @ =gSubSpriteData1
	ldr r0, _0805BFF8 @ =0x083B0F60
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r0, _0805BFFC @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
_0805BFEE:
	pop {r0}
	bx r0
	.align 2, 0
_0805BFF4: .4byte gSubSpriteData1
_0805BFF8: .4byte 0x083B0F60
_0805BFFC: .4byte gCurrentSprite

	thumb_func_start YakuzaSweeping
YakuzaSweeping: @ 0x0805C000
	push {r4, lr}
	ldr r1, _0805C050 @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0
	bne _0805C018
	ldrb r0, [r1, #0x1c]
	cmp r0, #1
	bne _0805C018
	movs r0, #0x9b
	lsls r0, r0, #1
	bl SoundPlay
_0805C018:
	movs r0, #3
	bl YakuzaYMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805C05C
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805C076
	ldr r2, _0805C050 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	movs r3, #0
	movs r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _0805C054 @ =gSubSpriteData1
	ldr r1, _0805C058 @ =0x083B0F88
	str r1, [r0]
	strb r3, [r0, #6]
	strh r4, [r0, #4]
	adds r2, #0x24
	movs r0, #0x1a
	strb r0, [r2]
	b _0805C076
	.align 2, 0
_0805C050: .4byte gCurrentSprite
_0805C054: .4byte gSubSpriteData1
_0805C058: .4byte 0x083B0F88
_0805C05C:
	movs r0, #8
	bl YakuzaXMovement
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805C076
	ldr r0, _0805C07C @ =gCurrentSprite
	ldrh r1, [r0]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r2, r3, #0
	eors r1, r2
	strh r1, [r0]
_0805C076:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805C07C: .4byte gCurrentSprite

	thumb_func_start YakuzaSweepingEnd
YakuzaSweepingEnd: @ 0x0805C080
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805C092
	ldr r0, _0805C098 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #7
	strb r1, [r0]
_0805C092:
	pop {r0}
	bx r0
	.align 2, 0
_0805C098: .4byte gCurrentSprite

	thumb_func_start YakuzaOpeningMouthInit
YakuzaOpeningMouthInit: @ 0x0805C09C
	push {lr}
	ldr r1, _0805C0E8 @ =gSubSpriteData1
	ldr r0, _0805C0EC @ =0x083B0FE8
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _0805C0F0 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x32
	strb r0, [r1]
	adds r1, #1
	movs r0, #2
	strb r0, [r1]
	movs r0, #0x40
	strh r0, [r3, #0xc]
	ldr r0, _0805C0F4 @ =0x0000FFDC
	strh r0, [r3, #0xe]
	movs r0, #0x24
	strh r0, [r3, #0x10]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xbf
	ands r0, r1
	strb r0, [r2]
	ldr r0, _0805C0F8 @ =0x00000137
	bl SoundPlay
	pop {r0}
	bx r0
	.align 2, 0
_0805C0E8: .4byte gSubSpriteData1
_0805C0EC: .4byte 0x083B0FE8
_0805C0F0: .4byte gCurrentSprite
_0805C0F4: .4byte 0x0000FFDC
_0805C0F8: .4byte 0x00000137

	thumb_func_start YakuzaOpeningMouth
YakuzaOpeningMouth: @ 0x0805C0FC
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r1, _0805C11C @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r4, r1, #0
	cmp r0, #6
	bls _0805C110
	b _0805C468
_0805C110:
	lsls r0, r0, #2
	ldr r1, _0805C120 @ =_0805C124
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805C11C: .4byte gCurrentSprite
_0805C120: .4byte _0805C124
_0805C124: @ jump table
	.4byte _0805C140 @ case 0
	.4byte _0805C178 @ case 1
	.4byte _0805C1E8 @ case 2
	.4byte _0805C270 @ case 3
	.4byte _0805C338 @ case 4
	.4byte _0805C3A8 @ case 5
	.4byte _0805C420 @ case 6
_0805C140:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	bne _0805C14A
	b _0805C468
_0805C14A:
	ldr r1, _0805C16C @ =gSubSpriteData1
	ldr r0, _0805C170 @ =0x083B1040
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _0805C174 @ =gCurrentSprite
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x9c
	lsls r0, r0, #1
	bl SoundPlay
	b _0805C468
	.align 2, 0
_0805C16C: .4byte gSubSpriteData1
_0805C170: .4byte 0x083B1040
_0805C174: .4byte gCurrentSprite
_0805C178:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	bne _0805C182
	b _0805C468
_0805C182:
	ldr r1, _0805C1C8 @ =gSubSpriteData1
	ldr r0, _0805C1CC @ =0x083B1050
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r4, _0805C1D0 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, _0805C1D4 @ =0x083B0B6E
	ldrb r0, [r0]
	subs r0, #8
	lsls r0, r0, #0x18
	ldr r2, _0805C1D8 @ =0x040000D4
	lsrs r0, r0, #0x13
	ldr r1, _0805C1DC @ =0x083B52D0
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _0805C1E0 @ =0x05000320
	str r0, [r2, #4]
	ldr r0, _0805C1E4 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	adds r0, r4, #0
	adds r0, #0x30
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #3
	b _0805C466
	.align 2, 0
_0805C1C8: .4byte gSubSpriteData1
_0805C1CC: .4byte 0x083B1050
_0805C1D0: .4byte gCurrentSprite
_0805C1D4: .4byte 0x083B0B6E
_0805C1D8: .4byte 0x040000D4
_0805C1DC: .4byte 0x083B52D0
_0805C1E0: .4byte 0x05000320
_0805C1E4: .4byte 0x80000010
_0805C1E8:
	adds r6, r4, #0
	adds r6, #0x2e
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _0805C1FC
	b _0805C468
_0805C1FC:
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r0, [r5]
	cmp r0, #0x10
	bhi _0805C218
	adds r0, #1
	strb r0, [r5]
	movs r0, #3
	strb r0, [r6]
	ldr r1, _0805C214 @ =0x083B0B6E
	ldrb r0, [r5]
	b _0805C3D2
	.align 2, 0
_0805C214: .4byte 0x083B0B6E
_0805C218:
	ldr r1, _0805C254 @ =gSubSpriteData1
	ldr r0, _0805C258 @ =0x083B1060
	str r0, [r1]
	strb r2, [r1, #6]
	movs r3, #0
	strh r2, [r1, #4]
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, _0805C25C @ =0x083B0B80
	ldrb r0, [r0]
	subs r0, #8
	lsls r0, r0, #0x18
	ldr r2, _0805C260 @ =0x040000D4
	lsrs r0, r0, #0x13
	ldr r1, _0805C264 @ =0x083B52D0
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _0805C268 @ =0x05000320
	str r0, [r2, #4]
	ldr r0, _0805C26C @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	strb r3, [r5]
	movs r0, #4
	strb r0, [r6]
	b _0805C468
	.align 2, 0
_0805C254: .4byte gSubSpriteData1
_0805C258: .4byte 0x083B1060
_0805C25C: .4byte 0x083B0B80
_0805C260: .4byte 0x040000D4
_0805C264: .4byte 0x083B52D0
_0805C268: .4byte 0x05000320
_0805C26C: .4byte 0x80000010
_0805C270:
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0
	beq _0805C284
	b _0805C468
_0805C284:
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0xa
	bhi _0805C2A0
	adds r0, #1
	strb r0, [r2]
	movs r0, #4
	strb r0, [r1]
	ldr r1, _0805C29C @ =0x083B0B80
	ldrb r0, [r2]
	b _0805C3D2
	.align 2, 0
_0805C29C: .4byte 0x083B0B80
_0805C2A0:
	ldr r0, _0805C320 @ =gSubSpriteData1
	ldr r1, _0805C324 @ =0x083B1078
	str r1, [r0]
	strb r5, [r0, #6]
	strh r5, [r0, #4]
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	adds r6, r4, #0
	adds r6, #0x23
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x94
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7e
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x9c
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7e
	movs r1, #1
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	adds r0, #0x9c
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0x40
	str r0, [sp, #8]
	movs r0, #0x7e
	movs r1, #1
	movs r2, #0
	bl SpriteSpawnSecondary
	ldr r1, _0805C328 @ =gBossWork2
	ldrb r0, [r1]
	cmp r0, #0
	beq _0805C32C
	movs r0, #0
	strb r0, [r1]
	movs r0, #0x3f
	movs r1, #7
	bl PlayMusic
	movs r0, #0x98
	lsls r0, r0, #1
	bl unk_3b1c
	b _0805C468
	.align 2, 0
_0805C320: .4byte gSubSpriteData1
_0805C324: .4byte 0x083B1078
_0805C328: .4byte gBossWork2
_0805C32C:
	ldr r0, _0805C334 @ =0x00000139
	bl SoundPlay
	b _0805C468
	.align 2, 0
_0805C334: .4byte 0x00000139
_0805C338:
	bl CheckEndOfSubSpriteData1Animation
	cmp r0, #0
	bne _0805C342
	b _0805C468
_0805C342:
	ldr r1, _0805C388 @ =gSubSpriteData1
	ldr r0, _0805C38C @ =0x083B1050
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r3, #0
	strh r0, [r1, #4]
	ldr r4, _0805C390 @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, _0805C394 @ =0x083B0B8C
	ldrb r0, [r0]
	subs r0, #8
	lsls r0, r0, #0x18
	ldr r2, _0805C398 @ =0x040000D4
	lsrs r0, r0, #0x13
	ldr r1, _0805C39C @ =0x083B52D0
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _0805C3A0 @ =0x05000320
	str r0, [r2, #4]
	ldr r0, _0805C3A4 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	adds r0, r4, #0
	adds r0, #0x30
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #2
	b _0805C466
	.align 2, 0
_0805C388: .4byte gSubSpriteData1
_0805C38C: .4byte 0x083B1050
_0805C390: .4byte gCurrentSprite
_0805C394: .4byte 0x083B0B8C
_0805C398: .4byte 0x040000D4
_0805C39C: .4byte 0x083B52D0
_0805C3A0: .4byte 0x05000320
_0805C3A4: .4byte 0x80000010
_0805C3A8:
	adds r1, r4, #0
	adds r5, r1, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805C468
	adds r3, r1, #0
	adds r3, #0x30
	ldrb r0, [r3]
	cmp r0, #5
	bhi _0805C404
	adds r0, #1
	strb r0, [r3]
	movs r0, #2
	strb r0, [r5]
	ldr r1, _0805C3F0 @ =0x083B0B8C
	ldrb r0, [r3]
_0805C3D2:
	adds r0, r0, r1
	ldrb r0, [r0]
	subs r0, #8
	lsls r0, r0, #0x18
	ldr r2, _0805C3F4 @ =0x040000D4
	lsrs r0, r0, #0x13
	ldr r1, _0805C3F8 @ =0x083B52D0
	adds r0, r0, r1
	str r0, [r2]
	ldr r0, _0805C3FC @ =0x05000320
	str r0, [r2, #4]
	ldr r0, _0805C400 @ =0x80000010
	str r0, [r2, #8]
	ldr r0, [r2, #8]
	b _0805C468
	.align 2, 0
_0805C3F0: .4byte 0x083B0B8C
_0805C3F4: .4byte 0x040000D4
_0805C3F8: .4byte 0x083B52D0
_0805C3FC: .4byte 0x05000320
_0805C400: .4byte 0x80000010
_0805C404:
	ldr r0, _0805C418 @ =gSubSpriteData1
	ldr r1, _0805C41C @ =0x083B10A0
	str r1, [r0]
	strb r2, [r0, #6]
	strh r2, [r0, #4]
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	b _0805C466
	.align 2, 0
_0805C418: .4byte gSubSpriteData1
_0805C41C: .4byte 0x083B10A0
_0805C420:
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805C468
	ldr r2, _0805C458 @ =sPrimarySpriteStats
	ldr r3, _0805C45C @ =gCurrentSprite
	ldrb r1, [r3, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	lsrs r1, r0, #1
	ldrh r0, [r3, #0x14]
	cmp r0, r1
	bhs _0805C460
	strh r1, [r3, #0x14]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1f
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	b _0805C468
	.align 2, 0
_0805C458: .4byte sPrimarySpriteStats
_0805C45C: .4byte gCurrentSprite
_0805C460:
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1b
_0805C466:
	strb r0, [r1]
_0805C468:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start YakuzaMouthOpenedInit
YakuzaMouthOpenedInit: @ 0x0805C470
	ldr r1, _0805C490 @ =gSubSpriteData1
	ldr r0, _0805C494 @ =0x083B1000
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _0805C498 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1c
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x14
	strb r0, [r1]
	bx lr
	.align 2, 0
_0805C490: .4byte gSubSpriteData1
_0805C494: .4byte 0x083B1000
_0805C498: .4byte gCurrentSprite

	thumb_func_start YakuzaMouthOpened
YakuzaMouthOpened: @ 0x0805C49C
	push {lr}
	ldr r1, _0805C4BC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805C4B6
	adds r1, #0x24
	movs r0, #0x1d
	strb r0, [r1]
_0805C4B6:
	pop {r0}
	bx r0
	.align 2, 0
_0805C4BC: .4byte gCurrentSprite

	thumb_func_start YakuzaClosingMouthInit
YakuzaClosingMouthInit: @ 0x0805C4C0
	ldr r1, _0805C4F0 @ =gSubSpriteData1
	ldr r0, _0805C4F4 @ =0x083B1028
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	strh r0, [r1, #4]
	ldr r1, _0805C4F8 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x1e
	strb r0, [r2]
	movs r0, #0x60
	strh r0, [r1, #0xc]
	ldr r0, _0805C4FC @ =0x0000FFB8
	strh r0, [r1, #0xe]
	movs r0, #0x48
	strh r0, [r1, #0x10]
	adds r1, #0x34
	ldrb r2, [r1]
	movs r0, #0x40
	orrs r0, r2
	strb r0, [r1]
	bx lr
	.align 2, 0
_0805C4F0: .4byte gSubSpriteData1
_0805C4F4: .4byte 0x083B1028
_0805C4F8: .4byte gCurrentSprite
_0805C4FC: .4byte 0x0000FFB8

	thumb_func_start YakuzaClosingMouth
YakuzaClosingMouth: @ 0x0805C500
	push {lr}
	bl CheckNearEndOfSubSpriteData1Animation
	cmp r0, #0
	beq _0805C520
	ldr r1, _0805C524 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #7
	strb r0, [r2]
	ldr r0, _0805C528 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	lsrs r0, r0, #2
	adds r0, #1
	adds r1, #0x2d
	strb r0, [r1]
_0805C520:
	pop {r0}
	bx r0
	.align 2, 0
_0805C524: .4byte gCurrentSprite
_0805C528: .4byte gSpriteRandomNumber

	thumb_func_start YakuzaPhase1DyingInit
YakuzaPhase1DyingInit: @ 0x0805C52C
	push {lr}
	ldr r3, _0805C560 @ =gSubSpriteData1
	ldr r0, _0805C564 @ =0x083B10B0
	str r0, [r3]
	movs r0, #0
	strb r0, [r3, #6]
	strh r0, [r3, #4]
	ldr r1, _0805C568 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x20
	strb r0, [r2]
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
	ldrh r0, [r3, #8]
	ldrh r1, [r3, #0xa]
	movs r2, #0x2f
	bl ParticleSet
	movs r0, #0x99
	lsls r0, r0, #1
	bl unk_3b1c
	pop {r0}
	bx r0
	.align 2, 0
_0805C560: .4byte gSubSpriteData1
_0805C564: .4byte 0x083B10B0
_0805C568: .4byte gCurrentSprite

	thumb_func_start YakuzaPhase1Dying
YakuzaPhase1Dying: @ 0x0805C56C
	push {lr}
	ldr r2, _0805C5D0 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	ldr r0, _0805C5D4 @ =0x0000063E
	cmp r1, r0
	bhi _0805C57C
	adds r0, r1, #4
	strh r0, [r2, #8]
_0805C57C:
	ldr r2, _0805C5D8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0805C5AC
	movs r0, #4
	ands r1, r0
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0805C5A6
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_0805C5A6:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_0805C5AC:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	bne _0805C5CA
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x21
	strb r1, [r0]
	subs r0, #4
	strb r3, [r0]
_0805C5CA:
	pop {r0}
	bx r0
	.align 2, 0
_0805C5D0: .4byte gSubSpriteData1
_0805C5D4: .4byte 0x0000063E
_0805C5D8: .4byte gCurrentSprite

	thumb_func_start YakuzaUpdateHitboxAndImmunity
YakuzaUpdateHitboxAndImmunity: @ 0x0805C5DC
	push {lr}
	ldr r2, _0805C600 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805C608
	ldr r1, _0805C604 @ =0x0000FF80
	strh r1, [r2, #0xa]
	movs r0, #0x80
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	b _0805C61E
	.align 2, 0
_0805C600: .4byte gCurrentSprite
_0805C604: .4byte 0x0000FF80
_0805C608:
	ldr r0, _0805C624 @ =0x0000FF80
	strh r0, [r2, #0xa]
	movs r1, #0x40
	strh r1, [r2, #0xc]
	adds r0, #0x40
	strh r0, [r2, #0xe]
	strh r1, [r2, #0x10]
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0xbf
	ands r0, r1
_0805C61E:
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_0805C624: .4byte 0x0000FF80

	thumb_func_start YakuzaLosingLegsInit
YakuzaLosingLegsInit: @ 0x0805C628
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r2, _0805C684 @ =gSubSpriteData1
	ldr r0, _0805C688 @ =0x083B1128
	str r0, [r2]
	movs r3, #0
	strb r3, [r2, #6]
	movs r5, #0
	strh r3, [r2, #4]
	ldr r4, _0805C68C @ =gCurrentSprite
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x22
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x1e
	strb r0, [r1]
	adds r0, #0xe2
	strh r0, [r4, #0x12]
	adds r0, r4, #0
	adds r0, #0x2b
	strb r5, [r0]
	ldr r0, _0805C690 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	adds r0, #1
	adds r1, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	strh r3, [r2, #0xc]
	ldr r0, _0805C694 @ =gSamusData
	ldrh r0, [r0, #0x16]
	adds r3, r4, #0
	ldrh r2, [r2, #0xa]
	cmp r0, r2
	bhs _0805C69C
	ldrh r1, [r3]
	ldr r0, _0805C698 @ =0x0000FDFF
	ands r0, r1
	b _0805C6A6
	.align 2, 0
_0805C684: .4byte gSubSpriteData1
_0805C688: .4byte 0x083B1128
_0805C68C: .4byte gCurrentSprite
_0805C690: .4byte gSpriteRandomNumber
_0805C694: .4byte gSamusData
_0805C698: .4byte 0x0000FDFF
_0805C69C:
	ldrh r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	orrs r0, r1
_0805C6A6:
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r0, [r0]
	mov sb, r0
	ldrh r6, [r3, #2]
	ldrh r3, [r3, #4]
	mov r8, r3
	adds r7, r6, #0
	subs r7, #0x10
	str r7, [sp]
	mov r4, r8
	subs r4, #0x40
	str r4, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r0, #0x7f
	movs r1, #0
	movs r2, #0
	mov r3, sb
	bl SpriteSpawnSecondary
	movs r0, #0x20
	rsbs r0, r0, #0
	adds r0, r0, r6
	mov sl, r0
	str r0, [sp]
	str r4, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7f
	movs r1, #1
	movs r2, #0
	mov r3, sb
	bl SpriteSpawnSecondary
	subs r6, #0x40
	str r6, [sp]
	str r4, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7f
	movs r1, #2
	movs r2, #0
	mov r3, sb
	bl SpriteSpawnSecondary
	str r7, [sp]
	movs r2, #0x40
	add r8, r2
	mov r0, r8
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7f
	movs r1, #3
	movs r2, #0
	mov r3, sb
	bl SpriteSpawnSecondary
	mov r2, sl
	str r2, [sp]
	mov r0, r8
	str r0, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7f
	movs r1, #4
	movs r2, #0
	mov r3, sb
	bl SpriteSpawnSecondary
	str r6, [sp]
	mov r2, r8
	str r2, [sp, #4]
	str r5, [sp, #8]
	movs r0, #0x7f
	movs r1, #5
	movs r2, #0
	mov r3, sb
	bl SpriteSpawnSecondary
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaLosingLegs
YakuzaLosingLegs: @ 0x0805C754
	push {lr}
	ldr r1, _0805C778 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805C76E
	adds r1, #0x24
	movs r0, #0x24
	strb r0, [r1]
_0805C76E:
	bl YakuzaUpdateHitboxAndImmunity
	pop {r0}
	bx r0
	.align 2, 0
_0805C778: .4byte gCurrentSprite

	thumb_func_start YakuzaPhase2Init
YakuzaPhase2Init: @ 0x0805C77C
	push {lr}
	ldr r3, _0805C7A4 @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r2, #0
	movs r0, #0x24
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	ldr r0, _0805C7A8 @ =gSamusData
	ldr r1, _0805C7AC @ =gSubSpriteData1
	ldrh r0, [r0, #0x16]
	ldrh r1, [r1, #0xa]
	cmp r0, r1
	bhs _0805C7B4
	ldrh r1, [r3]
	ldr r0, _0805C7B0 @ =0x0000FDFF
	ands r0, r1
	b _0805C7BE
	.align 2, 0
_0805C7A4: .4byte gCurrentSprite
_0805C7A8: .4byte gSamusData
_0805C7AC: .4byte gSubSpriteData1
_0805C7B0: .4byte 0x0000FDFF
_0805C7B4:
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	orrs r0, r1
_0805C7BE:
	strh r0, [r3]
	pop {r0}
	bx r0

	thumb_func_start YakuzaPhase2
YakuzaPhase2: @ 0x0805C7C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	movs r0, #0
	mov r8, r0
	ldr r4, _0805C81C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r6, [r0]
	subs r0, #4
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bhi _0805C85E
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r1
	cmp r0, #0
	beq _0805C85E
	movs r7, #0x80
	lsls r7, r7, #2
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0805C832
	ldr r5, _0805C820 @ =gSubSpriteData1
	ldrh r0, [r5, #8]
	ldrh r1, [r5, #0xa]
	adds r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805C824 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0805C82C
	ldrh r1, [r4]
	ldr r0, _0805C828 @ =0x0000FDFF
	ands r0, r1
	strh r0, [r4]
	b _0805C85E
	.align 2, 0
_0805C81C: .4byte gCurrentSprite
_0805C820: .4byte gSubSpriteData1
_0805C824: .4byte gPreviousCollisionCheck
_0805C828: .4byte 0x0000FDFF
_0805C82C:
	ldrh r0, [r5, #0xa]
	adds r0, r0, r6
	b _0805C85C
_0805C832:
	ldr r5, _0805C850 @ =gSubSpriteData1
	ldrh r0, [r5, #8]
	ldrh r1, [r5, #0xa]
	subs r1, #0x40
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805C854 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0x11
	bne _0805C858
	ldrh r1, [r4]
	adds r0, r7, #0
	orrs r0, r1
	strh r0, [r4]
	b _0805C85E
	.align 2, 0
_0805C850: .4byte gSubSpriteData1
_0805C854: .4byte gPreviousCollisionCheck
_0805C858:
	ldrh r0, [r5, #0xa]
	subs r0, r0, r6
_0805C85C:
	strh r0, [r5, #0xa]
_0805C85E:
	ldr r0, _0805C8A4 @ =0x083B0B94
	ldr r1, _0805C8A8 @ =gCurrentSprite
	mov ip, r1
	mov r4, ip
	adds r4, #0x31
	ldrb r3, [r4]
	lsls r1, r3, #0x18
	lsrs r2, r1, #0x18
	lsrs r1, r1, #0x1a
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r6, [r1]
	cmp r2, #0x3e
	bhi _0805C87E
	adds r0, r3, #1
	strb r0, [r4]
_0805C87E:
	ldr r4, _0805C8AC @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, r0, r6
	movs r3, #0
	strh r0, [r4, #8]
	lsls r0, r6, #0x10
	cmp r0, #0
	bgt _0805C890
	b _0805CA6C
_0805C890:
	mov r2, ip
	adds r2, #0x2b
	ldrb r0, [r2]
	adds r1, r0, #0
	cmp r1, #0
	beq _0805C8B0
	adds r0, #0x20
	strb r0, [r2]
	b _0805C8F0
	.align 2, 0
_0805C8A4: .4byte 0x083B0B94
_0805C8A8: .4byte gCurrentSprite
_0805C8AC: .4byte gSubSpriteData1
_0805C8B0:
	mov r0, ip
	ldrh r2, [r0]
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _0805C8F0
	ldr r0, _0805C924 @ =0x083B1128
	str r0, [r4]
	strb r3, [r4, #6]
	strh r1, [r4, #4]
	ldr r0, _0805C928 @ =0x0000FFF7
	ands r0, r2
	mov r2, ip
	strh r0, [r2]
	mov r0, ip
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r2, #2]
	adds r0, #0x94
	str r0, [sp]
	ldrh r0, [r2, #4]
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0x7e
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnSecondary
	movs r0, #0xa0
	lsls r0, r0, #1
	bl SoundPlay
_0805C8F0:
	ldr r4, _0805C92C @ =gSubSpriteData1
	ldrh r0, [r4, #8]
	adds r0, #0x80
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0805C930 @ =gPreviousVerticalCollisionCheck
	ldrb r5, [r0]
	cmp r5, #0
	beq _0805C938
	adds r0, r1, #0
	subs r0, #0x80
	movs r1, #0
	strh r0, [r4, #8]
	ldr r2, _0805C934 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x31
	strb r1, [r0]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	b _0805CA00
	.align 2, 0
_0805C924: .4byte 0x083B1128
_0805C928: .4byte 0x0000FFF7
_0805C92C: .4byte gSubSpriteData1
_0805C930: .4byte gPreviousVerticalCollisionCheck
_0805C934: .4byte gCurrentSprite
_0805C938:
	ldr r0, _0805CA1C @ =gSamusData
	ldrh r0, [r0, #0x18]
	ldrh r3, [r4, #8]
	cmp r0, r3
	bhs _0805C952
	ldr r0, _0805CA20 @ =gCurrentSprite
	adds r0, #0x31
	strb r5, [r0]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0805C952:
	ldrh r0, [r4, #8]
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805CA24 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805C99A
	ldr r0, _0805CA28 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #8
	beq _0805C97E
	ldr r0, _0805CA20 @ =gCurrentSprite
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0805C99A
_0805C97E:
	ldr r0, _0805CA20 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x31
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0805C998
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0805C998:
	strb r5, [r2]
_0805C99A:
	ldr r1, _0805CA2C @ =gSubSpriteData1
	ldrh r0, [r1, #8]
	adds r0, #0xe0
	ldrh r1, [r1, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805CA24 @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805C9D4
	ldr r0, _0805CA28 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	cmp r0, #0xe
	bne _0805C9D4
	ldr r0, _0805CA20 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x31
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0805C9D0
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0805C9D0:
	movs r0, #0
	strb r0, [r2]
_0805C9D4:
	ldr r2, _0805CA20 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x10
	bne _0805CA00
	ldr r0, _0805CA2C @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	ldr r0, _0805CA30 @ =0x0000057E
	cmp r1, r0
	bls _0805CA00
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
_0805CA00:
	mov r3, r8
	cmp r3, #0
	beq _0805CA50
	ldr r0, _0805CA1C @ =gSamusData
	ldr r1, _0805CA2C @ =gSubSpriteData1
	ldrh r0, [r0, #0x16]
	ldrh r1, [r1, #0xa]
	cmp r0, r1
	bhs _0805CA38
	ldrh r1, [r2]
	ldr r0, _0805CA34 @ =0x0000FDFF
	ands r0, r1
	b _0805CA42
	.align 2, 0
_0805CA1C: .4byte gSamusData
_0805CA20: .4byte gCurrentSprite
_0805CA24: .4byte gPreviousCollisionCheck
_0805CA28: .4byte gSpriteRandomNumber
_0805CA2C: .4byte gSubSpriteData1
_0805CA30: .4byte 0x0000057E
_0805CA34: .4byte 0x0000FDFF
_0805CA38:
	ldrh r1, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	orrs r0, r1
_0805CA42:
	strh r0, [r2]
	ldr r0, _0805CA64 @ =gFrameCounter8Bit
	ldrb r0, [r0]
	adds r0, #1
	adds r1, r2, #0
	adds r1, #0x30
	strb r0, [r1]
_0805CA50:
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805CAB8
	ldr r0, _0805CA68 @ =0x0000013B
	bl SoundPlay
	b _0805CAB8
	.align 2, 0
_0805CA64: .4byte gSpriteRandomNumber
_0805CA68: .4byte 0x0000013B
_0805CA6C:
	mov r1, ip
	ldrh r0, [r1]
	ldr r2, _0805CAC8 @ =0x00004008
	adds r1, r2, #0
	orrs r0, r1
	mov r3, ip
	strh r0, [r3]
	mov r1, ip
	adds r1, #0x2b
	ldrb r0, [r1]
	adds r0, #0x20
	strb r0, [r1]
	ldrh r0, [r4, #8]
	subs r0, #0x80
	ldrh r1, [r4, #0xa]
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805CACC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805CA9E
	ldrh r1, [r4, #8]
	ldr r0, _0805CAD0 @ =0x0000057E
	cmp r1, r0
	bhi _0805CAA4
_0805CA9E:
	ldrh r0, [r4, #8]
	subs r0, r0, r6
	strh r0, [r4, #8]
_0805CAA4:
	ldr r0, _0805CAD4 @ =gCurrentSprite
	adds r0, #0x31
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0805CAB8
	ldr r0, _0805CAD8 @ =0x0000013B
	bl SoundPlay
_0805CAB8:
	bl YakuzaUpdateHitboxAndImmunity
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805CAC8: .4byte 0x00004008
_0805CACC: .4byte gPreviousCollisionCheck
_0805CAD0: .4byte 0x0000057E
_0805CAD4: .4byte gCurrentSprite
_0805CAD8: .4byte 0x0000013B

	thumb_func_start YakuzaPhase2DyingInit
YakuzaPhase2DyingInit: @ 0x0805CADC
	push {r4, lr}
	ldr r1, _0805CB24 @ =gSubSpriteData1
	ldr r0, _0805CB28 @ =0x083B1160
	str r0, [r1]
	movs r0, #0
	strb r0, [r1, #6]
	movs r2, #0
	strh r0, [r1, #4]
	ldr r3, _0805CB2C @ =gCurrentSprite
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x48
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x3c
	strb r0, [r1]
	ldrh r1, [r3]
	ldr r0, _0805CB30 @ =0x0000BFFF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x25
	strb r2, [r0]
	adds r0, #7
	strb r2, [r0]
	subs r0, #0xc
	strb r2, [r0]
	movs r0, #1
	strh r0, [r3, #0x14]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CB24: .4byte gSubSpriteData1
_0805CB28: .4byte 0x083B1160
_0805CB2C: .4byte gCurrentSprite
_0805CB30: .4byte 0x0000BFFF

	thumb_func_start YakuzaPhase2Dying
YakuzaPhase2Dying: @ 0x0805CB34
	push {r4, lr}
	ldr r1, _0805CB6C @ =gSubSpriteData1
	ldrh r2, [r1, #8]
	ldr r0, _0805CB70 @ =0x0000063E
	cmp r2, r0
	bhi _0805CB44
	adds r0, r2, #4
	strh r0, [r1, #8]
_0805CB44:
	ldrh r2, [r1, #8]
	ldrh r3, [r1, #0xa]
	ldr r1, _0805CB74 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r1
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	mov r4, ip
	strb r0, [r4]
	ldrb r0, [r4]
	adds r4, r1, #0
	cmp r0, #0x28
	bls _0805CB62
	b _0805CC9C
_0805CB62:
	lsls r0, r0, #2
	ldr r1, _0805CB78 @ =_0805CB7C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805CB6C: .4byte gSubSpriteData1
_0805CB70: .4byte 0x0000063E
_0805CB74: .4byte gCurrentSprite
_0805CB78: .4byte _0805CB7C
_0805CB7C: @ jump table
	.4byte _0805CC94 @ case 0
	.4byte _0805CC9C @ case 1
	.4byte _0805CC9C @ case 2
	.4byte _0805CC9C @ case 3
	.4byte _0805CC9C @ case 4
	.4byte _0805CC86 @ case 5
	.4byte _0805CC9C @ case 6
	.4byte _0805CC9C @ case 7
	.4byte _0805CC9C @ case 8
	.4byte _0805CC9C @ case 9
	.4byte _0805CC76 @ case 10
	.4byte _0805CC9C @ case 11
	.4byte _0805CC9C @ case 12
	.4byte _0805CC9C @ case 13
	.4byte _0805CC9C @ case 14
	.4byte _0805CC66 @ case 15
	.4byte _0805CC9C @ case 16
	.4byte _0805CC9C @ case 17
	.4byte _0805CC9C @ case 18
	.4byte _0805CC9C @ case 19
	.4byte _0805CC56 @ case 20
	.4byte _0805CC9C @ case 21
	.4byte _0805CC9C @ case 22
	.4byte _0805CC9C @ case 23
	.4byte _0805CC9C @ case 24
	.4byte _0805CC4C @ case 25
	.4byte _0805CC9C @ case 26
	.4byte _0805CC9C @ case 27
	.4byte _0805CC9C @ case 28
	.4byte _0805CC9C @ case 29
	.4byte _0805CC42 @ case 30
	.4byte _0805CC9C @ case 31
	.4byte _0805CC9C @ case 32
	.4byte _0805CC9C @ case 33
	.4byte _0805CC9C @ case 34
	.4byte _0805CC38 @ case 35
	.4byte _0805CC9C @ case 36
	.4byte _0805CC9C @ case 37
	.4byte _0805CC9C @ case 38
	.4byte _0805CC9C @ case 39
	.4byte _0805CC20 @ case 40
_0805CC20:
	adds r0, r2, #0
	subs r0, #0x40
	adds r1, r3, #0
	subs r1, #0x10
	movs r2, #0x2f
	bl ParticleSet
	movs r0, #0x9a
	lsls r0, r0, #1
	bl unk_3b1c
	b _0805CC9C
_0805CC38:
	adds r0, r2, #0
	adds r0, #0x20
	adds r1, r3, #0
	subs r1, #0x10
	b _0805CC7E
_0805CC42:
	adds r0, r2, #0
	subs r0, #0x20
	adds r1, r3, #0
	adds r1, #0x1c
	b _0805CC6E
_0805CC4C:
	adds r0, r2, #0
	adds r0, #0x40
	adds r1, r3, #0
	adds r1, #0x20
	b _0805CC7E
_0805CC56:
	adds r0, r2, #0
	subs r0, #0x20
	adds r1, r3, #0
	subs r1, #0x10
	movs r2, #0x26
	bl ParticleSet
	b _0805CC9C
_0805CC66:
	adds r0, r2, #0
	adds r0, #0x40
	adds r1, r3, #0
	subs r1, #0x10
_0805CC6E:
	movs r2, #0x2f
	bl ParticleSet
	b _0805CC9C
_0805CC76:
	adds r0, r2, #0
	subs r0, #0x40
	adds r1, r3, #0
	adds r1, #0x1c
_0805CC7E:
	movs r2, #0x25
	bl ParticleSet
	b _0805CC9C
_0805CC86:
	adds r0, r2, #0
	adds r0, #0x10
	adds r1, r3, #0
	movs r2, #0x3a
	bl ParticleSet
	b _0805CC9C
_0805CC94:
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x49
	strb r0, [r1]
_0805CC9C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaTurningIntoCoreXInit
YakuzaTurningIntoCoreXInit: @ 0x0805CCA4
	ldr r1, _0805CCBC @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r0, #0x4a
	strb r0, [r2]
	ldrh r2, [r1]
	movs r0, #0x20
	orrs r0, r2
	strh r0, [r1]
	movs r0, #0x2c
	strh r0, [r1, #6]
	bx lr
	.align 2, 0
_0805CCBC: .4byte gCurrentSprite

	thumb_func_start YakuzaTurningIntoCoreX
YakuzaTurningIntoCoreX: @ 0x0805CCC0
	push {lr}
	ldr r2, _0805CCEC @ =gWrittenToMosaic_H
	ldr r1, _0805CCF0 @ =0x083BDED6
	ldr r3, _0805CCF4 @ =gCurrentSprite
	ldrh r0, [r3, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r3, #6]
	subs r0, #1
	strh r0, [r3, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x13
	bhi _0805CCF8
	ldrh r2, [r3, #6]
	movs r0, #0x47
	movs r1, #0
	bl SpriteLoadGfx
	b _0805CD06
	.align 2, 0
_0805CCEC: .4byte gWrittenToMosaic_H
_0805CCF0: .4byte 0x083BDED6
_0805CCF4: .4byte gCurrentSprite
_0805CCF8:
	cmp r0, #0x14
	bne _0805CD06
	movs r0, #0x47
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_0805CD06:
	ldr r2, _0805CD20 @ =gCurrentSprite
	ldrh r0, [r2, #6]
	cmp r0, #0
	bne _0805CD1A
	adds r0, r2, #0
	adds r0, #0x24
	movs r1, #0x59
	strb r1, [r0]
	movs r0, #0x47
	strb r0, [r2, #0x1d]
_0805CD1A:
	pop {r0}
	bx r0
	.align 2, 0
_0805CD20: .4byte gCurrentSprite

	thumb_func_start YakuzaPartInit
YakuzaPartInit: @ 0x0805CD24
	push {r4, r5, lr}
	ldr r2, _0805CD4C @ =gCurrentSprite
	ldrh r1, [r2]
	ldr r0, _0805CD50 @ =0x0000FFFB
	ands r0, r1
	movs r5, #0
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	ldrb r4, [r2, #0x1e]
	adds r3, r2, #0
	cmp r4, #0
	beq _0805CD54
	cmp r4, #2
	beq _0805CD9C
	movs r0, #0
	strh r0, [r3]
	b _0805CDD2
	.align 2, 0
_0805CD4C: .4byte gCurrentSprite
_0805CD50: .4byte 0x0000FFFB
_0805CD54:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xb
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0805CD98 @ =0x0000FFFC
	strh r1, [r3, #0xa]
	movs r2, #4
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldrh r0, [r3]
	orrs r0, r2
	movs r2, #0x80
	lsls r2, r2, #8
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	subs r0, #0xa
	strb r5, [r0]
	b _0805CDD2
	.align 2, 0
_0805CD98: .4byte 0x0000FFFC
_0805CD9C:
	adds r1, r3, #0
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x28
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x38
	strb r0, [r1]
	ldr r0, _0805CDE8 @ =0x0000FF80
	strh r0, [r3, #0xa]
	movs r0, #0x10
	strh r0, [r3, #0xc]
	ldr r0, _0805CDEC @ =0x0000FF60
	strh r0, [r3, #0xe]
	movs r0, #0xa0
	strh r0, [r3, #0x10]
	adds r0, r3, #0
	adds r0, #0x25
	strb r4, [r0]
	movs r0, #1
	strh r0, [r3, #0x14]
_0805CDD2:
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r3]
	bl YakuzaSyncSubSprites
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CDE8: .4byte 0x0000FF80
_0805CDEC: .4byte 0x0000FF60

	thumb_func_start YakuzaPartLegsIdle
YakuzaPartLegsIdle: @ 0x0805CDF0
	push {r4, r5, r6, lr}
	ldr r1, _0805CE34 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r4, [r1]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r0, r5, #0
	ands r0, r4
	adds r2, r1, #0
	ldr r6, _0805CE38 @ =gSpriteData
	cmp r0, #0
	beq _0805CE24
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r6
	ldrh r1, [r0]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	bne _0805CE64
	ldr r0, _0805CE3C @ =0x0000DFFF
	ands r0, r4
	strh r0, [r2]
_0805CE24:
	ldr r0, _0805CE40 @ =gSamusData
	ldrb r0, [r0, #1]
	cmp r0, #0x40
	bne _0805CE44
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #0
	b _0805CE4A
	.align 2, 0
_0805CE34: .4byte gCurrentSprite
_0805CE38: .4byte gSpriteData
_0805CE3C: .4byte 0x0000DFFF
_0805CE40: .4byte gSamusData
_0805CE44:
	adds r1, r2, #0
	adds r1, #0x25
	movs r0, #2
_0805CE4A:
	strb r0, [r1]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r6
	movs r1, #0xc
	ldrsh r0, [r0, r1]
	cmp r0, #0x60
	bne _0805CE60
	movs r0, #0x10
	b _0805CE62
_0805CE60:
	movs r0, #0x2c
_0805CE62:
	strh r0, [r2, #0xc]
_0805CE64:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaPartLegsDead
YakuzaPartLegsDead: @ 0x0805CE6C
	push {r4, r5, lr}
	ldr r3, _0805CE90 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	ldr r2, _0805CE94 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r4, r0, r2
	ldrh r1, [r4]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805CE98
	movs r0, #0
	strh r0, [r3]
	b _0805CEC6
	.align 2, 0
_0805CE90: .4byte gCurrentSprite
_0805CE94: .4byte gSpriteData
_0805CE98:
	adds r1, r3, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	movs r5, #0
	adds r2, r0, #0
	orrs r2, r1
	strh r2, [r3]
	ldrh r1, [r4]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805CEC0
	movs r0, #4
	orrs r2, r0
	b _0805CEC4
_0805CEC0:
	ldr r0, _0805CECC @ =0x0000FFFB
	ands r2, r0
_0805CEC4:
	strh r2, [r3]
_0805CEC6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CECC: .4byte 0x0000FFFB

	thumb_func_start YakuzaPartEyeIdle
YakuzaPartEyeIdle: @ 0x0805CED0
	push {r4, r5, r6, r7, lr}
	ldr r4, _0805CF08 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r1, [r0]
	adds r0, #3
	movs r7, #1
	strb r7, [r0]
	ldr r2, _0805CF0C @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r2, r0, r2
	ldrh r1, [r2]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805CF10
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	b _0805CFF4
	.align 2, 0
_0805CF08: .4byte gCurrentSprite
_0805CF0C: .4byte gSpriteData
_0805CF10:
	ldrh r3, [r4]
	movs r5, #0x80
	lsls r5, r5, #6
	adds r0, r5, #0
	ands r0, r3
	cmp r0, #0
	beq _0805CF2C
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	bne _0805CFF8
	ldr r0, _0805CF70 @ =0x0000DFFF
	ands r0, r3
	strh r0, [r4]
_0805CF2C:
	adds r0, r2, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	strb r1, [r0]
	adds r6, r4, #0
	adds r6, #0x2f
	ldrb r5, [r6]
	adds r3, r5, #0
	cmp r3, #0
	bne _0805CFC0
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0x10
	bne _0805CF7C
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #2
	strb r0, [r1]
	adds r0, r5, #1
	strb r0, [r6]
	ldr r0, _0805CF74 @ =0x083B7240
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _0805CF78 @ =0x0000FFFB
	ands r0, r1
	b _0805CFF6
	.align 2, 0
_0805CF70: .4byte 0x0000DFFF
_0805CF74: .4byte 0x083B7240
_0805CF78: .4byte 0x0000FFFB
_0805CF7C:
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #7
	beq _0805CF8A
	cmp r0, #9
	bne _0805CFF8
_0805CF8A:
	ldr r0, _0805CFB4 @ =gFrameCounter8Bit
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #2
	bhi _0805CFF8
	adds r0, r7, #0
	ands r0, r1
	adds r1, r4, #0
	adds r1, #0x2e
	strb r0, [r1]
	adds r0, r5, #1
	strb r0, [r6]
	ldr r0, _0805CFB8 @ =0x083B7240
	str r0, [r4, #0x18]
	strb r3, [r4, #0x1c]
	strh r3, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _0805CFBC @ =0x0000FFFB
	ands r0, r1
	b _0805CFF6
	.align 2, 0
_0805CFB4: .4byte gSpriteRandomNumber
_0805CFB8: .4byte 0x083B7240
_0805CFBC: .4byte 0x0000FFFB
_0805CFC0:
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #0
	beq _0805CFD4
	ldrb r0, [r4, #0x1c]
	adds r0, #2
	strb r0, [r4, #0x1c]
_0805CFD4:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805CFF8
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r1, r0, #0
	cmp r1, #0
	beq _0805CFEE
	subs r0, #1
	strb r0, [r2]
	b _0805CFF8
_0805CFEE:
	strb r1, [r6]
	ldrh r1, [r4]
	movs r0, #4
_0805CFF4:
	orrs r0, r1
_0805CFF6:
	strh r0, [r4]
_0805CFF8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaPartEyesPhase2
YakuzaPartEyesPhase2: @ 0x0805D000
	push {lr}
	ldr r3, _0805D030 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x26
	movs r0, #1
	strb r0, [r2]
	ldr r2, _0805D034 @ =gSpriteData
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805D02A
	movs r0, #0
	strh r0, [r3]
_0805D02A:
	pop {r0}
	bx r0
	.align 2, 0
_0805D030: .4byte gCurrentSprite
_0805D034: .4byte gSpriteData

	thumb_func_start YakuzaProjectileInit
YakuzaProjectileInit: @ 0x0805D038
	push {r4, r5, lr}
	ldr r3, _0805D094 @ =gCurrentSprite
	ldrh r0, [r3]
	ldr r1, _0805D098 @ =0x0000FFFB
	ands r1, r0
	movs r5, #0
	movs r4, #0
	strh r1, [r3]
	adds r0, r3, #0
	adds r0, #0x22
	movs r1, #4
	strb r1, [r0]
	ldr r0, _0805D09C @ =gSubSpriteData1
	ldrh r2, [r0, #0xc]
	cmp r2, #0
	beq _0805D0A8
	adds r0, r3, #0
	adds r0, #0x25
	movs r1, #2
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x27
	movs r0, #0x28
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x28
	strb r5, [r0]
	adds r2, #2
	movs r0, #0x10
	strb r0, [r2]
	ldr r0, _0805D0A0 @ =0x0000FFA0
	strh r0, [r3, #0xa]
	strh r4, [r3, #0xc]
	adds r0, #0x48
	strh r0, [r3, #0xe]
	movs r0, #0x18
	strh r0, [r3, #0x10]
	ldr r0, _0805D0A4 @ =0x083B72C0
	str r0, [r3, #0x18]
	strb r5, [r3, #0x1c]
	strh r4, [r3, #0x16]
	adds r0, r3, #0
	adds r0, #0x24
	strb r1, [r0]
	strh r4, [r3, #0x14]
	b _0805D0EE
	.align 2, 0
_0805D094: .4byte gCurrentSprite
_0805D098: .4byte 0x0000FFFB
_0805D09C: .4byte gSubSpriteData1
_0805D0A0: .4byte 0x0000FFA0
_0805D0A4: .4byte 0x083B72C0
_0805D0A8:
	adds r0, r3, #0
	adds r0, #0x25
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0805D0F4 @ =0x0000FFE0
	strh r0, [r3, #0xa]
	strh r2, [r3, #0xc]
	adds r0, #4
	strh r0, [r3, #0xe]
	movs r0, #0x1c
	strh r0, [r3, #0x10]
	ldr r0, _0805D0F8 @ =0x083B7288
	str r0, [r3, #0x18]
	strb r5, [r3, #0x1c]
	strh r2, [r3, #0x16]
	subs r1, #5
	movs r0, #0x28
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #4
	orrs r0, r1
	strb r0, [r2]
	movs r0, #1
	strh r0, [r3, #0x14]
_0805D0EE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805D0F4: .4byte 0x0000FFE0
_0805D0F8: .4byte 0x083B7288

	thumb_func_start YakuzaProjectileExploding
YakuzaProjectileExploding: @ 0x0805D0FC
	push {r4, lr}
	ldr r4, _0805D11C @ =gCurrentSprite
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	movs r2, #0x2d
	bl ParticleSet
	ldr r0, _0805D120 @ =0x000001BF
	bl SoundPlay
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D11C: .4byte gCurrentSprite
_0805D120: .4byte 0x000001BF

	thumb_func_start YakuzaProjectileSpitFalling
YakuzaProjectileSpitFalling: @ 0x0805D124
	push {lr}
	ldr r0, _0805D13C @ =gCurrentSprite
	ldrh r1, [r0, #2]
	adds r1, #0xc
	strh r1, [r0, #2]
	ldrh r0, [r0, #0x14]
	cmp r0, #0
	bne _0805D138
	bl YakuzaProjectileExploding
_0805D138:
	pop {r0}
	bx r0
	.align 2, 0
_0805D13C: .4byte gCurrentSprite

	thumb_func_start YakuzaProjectileFireFalling
YakuzaProjectileFireFalling: @ 0x0805D140
	push {r4, lr}
	ldr r0, _0805D170 @ =gCurrentSprite
	ldrh r1, [r0, #2]
	adds r1, #0xc
	strh r1, [r0, #2]
	ldrb r1, [r0, #0x1e]
	adds r4, r0, #0
	cmp r1, #0
	beq _0805D192
	ldrh r1, [r4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0805D174
	ldrh r0, [r4, #4]
	adds r0, #0xc
	strh r0, [r4, #4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	adds r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
	b _0805D184
	.align 2, 0
_0805D170: .4byte gCurrentSprite
_0805D174:
	ldrh r0, [r4, #4]
	subs r0, #0xc
	strh r0, [r4, #4]
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	subs r1, #0x24
	bl SpriteUtilCheckCollisionAtPosition
_0805D184:
	ldr r0, _0805D1CC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	ldr r4, _0805D1D0 @ =gCurrentSprite
	cmp r0, #0
	beq _0805D192
	movs r0, #0
	strb r0, [r4, #0x1e]
_0805D192:
	ldrh r0, [r4, #2]
	ldrh r1, [r4, #4]
	bl SpriteUtilCheckVerticalCollisionAtPositionSlopes
	adds r1, r0, #0
	ldr r0, _0805D1D4 @ =gPreviousVerticalCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805D1C4
	movs r2, #0
	strh r1, [r4, #2]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #0xa
	movs r0, #0x78
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	strb r2, [r0]
	movs r0, #0x9e
	lsls r0, r0, #1
	bl SoundPlay
_0805D1C4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D1CC: .4byte gPreviousCollisionCheck
_0805D1D0: .4byte gCurrentSprite
_0805D1D4: .4byte gPreviousVerticalCollisionCheck

	thumb_func_start YakuzaProjectileFireBurning1
YakuzaProjectileFireBurning1: @ 0x0805D1D8
	push {r4, r5, r6, r7, lr}
	ldr r2, _0805D240 @ =gCurrentSprite
	adds r6, r2, #0
	adds r6, #0x30
	ldrb r3, [r6]
	ldr r5, _0805D244 @ =0x083B0B04
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0805D248 @ =0x00007FFF
	cmp r1, r0
	bne _0805D1F8
	ldrh r4, [r5]
	movs r3, #0
_0805D1F8:
	adds r0, r3, #1
	strb r0, [r6]
	ldrh r0, [r2, #4]
	adds r0, r0, r4
	strh r0, [r2, #4]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _0805D258
	movs r0, #0x50
	strb r0, [r3]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _0805D24C @ =0x083B72E0
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r0, _0805D250 @ =0x0000FFC0
	strh r0, [r2, #0xa]
	adds r0, #0x30
	strh r0, [r2, #0xe]
	movs r0, #0x10
	strh r0, [r2, #0x10]
	ldr r0, _0805D254 @ =0x0000013D
	bl SoundPlay
	b _0805D268
	.align 2, 0
_0805D240: .4byte gCurrentSprite
_0805D244: .4byte 0x083B0B04
_0805D248: .4byte 0x00007FFF
_0805D24C: .4byte 0x083B72E0
_0805D250: .4byte 0x0000FFC0
_0805D254: .4byte 0x0000013D
_0805D258:
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne _0805D268
	movs r0, #0x9e
	lsls r0, r0, #1
	bl SoundPlay
_0805D268:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaProjectileFireBurning2
YakuzaProjectileFireBurning2: @ 0x0805D270
	push {r4, r5, r6, r7, lr}
	ldr r2, _0805D2D8 @ =gCurrentSprite
	adds r6, r2, #0
	adds r6, #0x30
	ldrb r3, [r6]
	ldr r5, _0805D2DC @ =0x083B0B04
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0805D2E0 @ =0x00007FFF
	cmp r1, r0
	bne _0805D290
	ldrh r4, [r5]
	movs r3, #0
_0805D290:
	adds r0, r3, #1
	strb r0, [r6]
	ldrh r0, [r2, #4]
	adds r0, r0, r4
	strh r0, [r2, #4]
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r1, r0, #1
	strb r1, [r3]
	lsls r0, r1, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _0805D2EC
	movs r0, #0x3c
	strb r0, [r3]
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	ldr r0, _0805D2E4 @ =0x083B7300
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r0, _0805D2E8 @ =0x0000FFE0
	strh r0, [r2, #0xa]
	adds r0, #0x14
	strh r0, [r2, #0xe]
	movs r0, #0xc
	strh r0, [r2, #0x10]
	movs r0, #0x9f
	lsls r0, r0, #1
	bl SoundPlay
	b _0805D2FA
	.align 2, 0
_0805D2D8: .4byte gCurrentSprite
_0805D2DC: .4byte 0x083B0B04
_0805D2E0: .4byte 0x00007FFF
_0805D2E4: .4byte 0x083B7300
_0805D2E8: .4byte 0x0000FFE0
_0805D2EC:
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne _0805D2FA
	ldr r0, _0805D300 @ =0x0000013D
	bl SoundPlay
_0805D2FA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D300: .4byte 0x0000013D

	thumb_func_start YakuzaProjectileFireBurning3
YakuzaProjectileFireBurning3: @ 0x0805D304
	push {r4, r5, r6, r7, lr}
	ldr r3, _0805D364 @ =gCurrentSprite
	adds r6, r3, #0
	adds r6, #0x30
	ldrb r2, [r6]
	ldr r5, _0805D368 @ =0x083B0B04
	lsls r0, r2, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	ldr r0, _0805D36C @ =0x00007FFF
	cmp r1, r0
	bne _0805D324
	ldrh r4, [r5]
	movs r2, #0
_0805D324:
	adds r0, r2, #1
	strb r0, [r6]
	ldrh r0, [r3, #4]
	adds r0, r0, r4
	strh r0, [r3, #4]
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805D34A
	movs r0, #0x3c
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_0805D34A:
	ldrb r1, [r2]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0805D35C
	movs r0, #0x9f
	lsls r0, r0, #1
	bl SoundPlay
_0805D35C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D364: .4byte gCurrentSprite
_0805D368: .4byte 0x083B0B04
_0805D36C: .4byte 0x00007FFF

	thumb_func_start YakuzaProjectileFireBurning4
YakuzaProjectileFireBurning4: @ 0x0805D370
	push {lr}
	ldr r0, _0805D3B0 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r3, [r1]
	adds r2, r0, #0
	cmp r3, #0x1d
	bhi _0805D396
	adds r1, r2, #0
	adds r1, #0x26
	movs r0, #1
	strb r0, [r1]
	ands r0, r3
	cmp r0, #0
	bne _0805D396
	ldrh r0, [r2]
	movs r1, #4
	eors r0, r1
	strh r0, [r2]
_0805D396:
	adds r1, r2, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0805D3AA
	strh r0, [r2]
_0805D3AA:
	pop {r0}
	bx r0
	.align 2, 0
_0805D3B0: .4byte gCurrentSprite

	thumb_func_start YakuzaFallingLegInit
YakuzaFallingLegInit: @ 0x0805D3B4
	push {r4, r5, lr}
	ldr r0, _0805D424 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _0805D428 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x22
	movs r2, #2
	strb r2, [r0]
	ldr r0, _0805D42C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	ldr r1, _0805D430 @ =0x0000FFFC
	mov r5, ip
	strh r1, [r5, #0xa]
	movs r0, #4
	strh r0, [r5, #0xc]
	strh r1, [r5, #0xe]
	strh r0, [r5, #0x10]
	strb r3, [r5, #0x1c]
	strh r4, [r5, #0x16]
	mov r0, ip
	adds r0, #0x24
	strb r2, [r0]
	adds r0, #0xd
	strb r3, [r0]
	strh r4, [r5, #0x14]
	ldrb r0, [r5, #0x1e]
	mov r3, ip
	cmp r0, #5
	bls _0805D418
	b _0805D56C
_0805D418:
	lsls r0, r0, #2
	ldr r1, _0805D434 @ =_0805D438
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805D424: .4byte gCurrentSprite
_0805D428: .4byte 0x0000FFFB
_0805D42C: .4byte gIoRegisters
_0805D430: .4byte 0x0000FFFC
_0805D434: .4byte _0805D438
_0805D438: @ jump table
	.4byte _0805D450 @ case 0
	.4byte _0805D490 @ case 1
	.4byte _0805D4BC @ case 2
	.4byte _0805D4E8 @ case 3
	.4byte _0805D514 @ case 4
	.4byte _0805D540 @ case 5
_0805D450:
	ldr r0, _0805D488 @ =0x083B7320
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r2, #0
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #7
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	ldr r0, _0805D48C @ =0x00000133
	bl unk_3b1c
	b _0805D570
	.align 2, 0
_0805D488: .4byte 0x083B7320
_0805D48C: .4byte 0x00000133
_0805D490:
	ldr r0, _0805D4B8 @ =0x083B7330
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r2, #8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x30
	movs r0, #6
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	b _0805D570
	.align 2, 0
_0805D4B8: .4byte 0x083B7330
_0805D4BC:
	ldr r0, _0805D4E4 @ =0x083B7340
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #7
	movs r0, #0xa
	strb r0, [r1]
	subs r1, #2
	movs r0, #6
	strb r0, [r1]
	b _0805D570
	.align 2, 0
_0805D4E4: .4byte 0x083B7340
_0805D4E8:
	ldr r0, _0805D510 @ =0x083B7350
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #7
	movs r0, #4
	strb r0, [r1]
	subs r1, #2
	movs r0, #0xa
	strb r0, [r1]
	b _0805D570
	.align 2, 0
_0805D510: .4byte 0x083B7350
_0805D514:
	ldr r0, _0805D53C @ =0x083B7360
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	movs r1, #0x20
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x30
	movs r0, #6
	strb r0, [r1]
	subs r1, #2
	movs r0, #2
	strb r0, [r1]
	b _0805D570
	.align 2, 0
_0805D53C: .4byte 0x083B7360
_0805D540:
	ldr r0, _0805D568 @ =0x083B7370
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	adds r1, #7
	movs r0, #0xa
	strb r0, [r1]
	subs r1, #2
	movs r0, #4
	strb r0, [r1]
	b _0805D570
	.align 2, 0
_0805D568: .4byte 0x083B7370
_0805D56C:
	mov r0, ip
	strh r4, [r0]
_0805D570:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaFallingLegMoving
YakuzaFallingLegMoving: @ 0x0805D578
	push {r4, r5, r6, lr}
	ldr r1, _0805D5A0 @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, r1, #0
	cmp r0, #0
	beq _0805D5A4
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805D5FE
	ldrh r0, [r2, #2]
	ldrh r1, [r2, #4]
	movs r2, #0x25
	bl ParticleSet
	b _0805D5FE
	.align 2, 0
_0805D5A0: .4byte gCurrentSprite
_0805D5A4:
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _0805D5CC @ =sSpritesFallingSpeed_2e499c
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0805D5D0 @ =0x00007FFF
	cmp r1, r0
	bne _0805D5D4
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r2, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0805D5DE
	.align 2, 0
_0805D5CC: .4byte sSpritesFallingSpeed_2e499c
_0805D5D0: .4byte 0x00007FFF
_0805D5D4:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
_0805D5DE:
	strh r0, [r2, #2]
	ldrb r0, [r2, #0x1e]
	cmp r0, #2
	bhi _0805D5F2
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r1, [r0]
	ldrh r0, [r2, #4]
	subs r0, r0, r1
	b _0805D5FC
_0805D5F2:
	adds r1, r2, #0
	adds r1, #0x30
	ldrh r0, [r2, #4]
	ldrb r1, [r1]
	adds r0, r0, r1
_0805D5FC:
	strh r0, [r2, #4]
_0805D5FE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start Yakuza
Yakuza: @ 0x0805D604
	push {r4, lr}
	ldr r1, _0805D648 @ =gCurrentSprite
	ldrh r0, [r1, #0x14]
	adds r4, r1, #0
	cmp r0, #0
	bne _0805D61C
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0
	beq _0805D61C
	movs r0, #0x47
	strb r0, [r1]
_0805D61C:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r0, #0x7f
	ands r0, r1
	cmp r0, #4
	bne _0805D630
	ldr r0, _0805D64C @ =0x00000131
	bl CheckPlayNotAlreadyPlayingSound
_0805D630:
	adds r0, r4, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x4a
	bls _0805D63C
	b _0805D830
_0805D63C:
	lsls r0, r0, #2
	ldr r1, _0805D650 @ =_0805D654
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805D648: .4byte gCurrentSprite
_0805D64C: .4byte 0x00000131
_0805D650: .4byte _0805D654
_0805D654: @ jump table
	.4byte _0805D780 @ case 0
	.4byte _0805D792 @ case 1
	.4byte _0805D796 @ case 2
	.4byte _0805D830 @ case 3
	.4byte _0805D830 @ case 4
	.4byte _0805D830 @ case 5
	.4byte _0805D830 @ case 6
	.4byte _0805D7A8 @ case 7
	.4byte _0805D7AC @ case 8
	.4byte _0805D7D8 @ case 9
	.4byte _0805D7DC @ case 10
	.4byte _0805D830 @ case 11
	.4byte _0805D830 @ case 12
	.4byte _0805D830 @ case 13
	.4byte _0805D830 @ case 14
	.4byte _0805D830 @ case 15
	.4byte _0805D830 @ case 16
	.4byte _0805D830 @ case 17
	.4byte _0805D830 @ case 18
	.4byte _0805D830 @ case 19
	.4byte _0805D830 @ case 20
	.4byte _0805D830 @ case 21
	.4byte _0805D830 @ case 22
	.4byte _0805D830 @ case 23
	.4byte _0805D79C @ case 24
	.4byte _0805D830 @ case 25
	.4byte _0805D7A2 @ case 26
	.4byte _0805D7EC @ case 27
	.4byte _0805D7F0 @ case 28
	.4byte _0805D7F6 @ case 29
	.4byte _0805D7FA @ case 30
	.4byte _0805D800 @ case 31
	.4byte _0805D804 @ case 32
	.4byte _0805D80A @ case 33
	.4byte _0805D80E @ case 34
	.4byte _0805D814 @ case 35
	.4byte _0805D818 @ case 36
	.4byte _0805D830 @ case 37
	.4byte _0805D830 @ case 38
	.4byte _0805D7B2 @ case 39
	.4byte _0805D7B6 @ case 40
	.4byte _0805D830 @ case 41
	.4byte _0805D7BC @ case 42
	.4byte _0805D830 @ case 43
	.4byte _0805D7C2 @ case 44
	.4byte _0805D830 @ case 45
	.4byte _0805D7C8 @ case 46
	.4byte _0805D7CE @ case 47
	.4byte _0805D7D2 @ case 48
	.4byte _0805D7E2 @ case 49
	.4byte _0805D7E6 @ case 50
	.4byte _0805D830 @ case 51
	.4byte _0805D830 @ case 52
	.4byte _0805D830 @ case 53
	.4byte _0805D830 @ case 54
	.4byte _0805D786 @ case 55
	.4byte _0805D78C @ case 56
	.4byte _0805D830 @ case 57
	.4byte _0805D830 @ case 58
	.4byte _0805D830 @ case 59
	.4byte _0805D830 @ case 60
	.4byte _0805D830 @ case 61
	.4byte _0805D830 @ case 62
	.4byte _0805D830 @ case 63
	.4byte _0805D830 @ case 64
	.4byte _0805D830 @ case 65
	.4byte _0805D830 @ case 66
	.4byte _0805D830 @ case 67
	.4byte _0805D830 @ case 68
	.4byte _0805D830 @ case 69
	.4byte _0805D830 @ case 70
	.4byte _0805D81E @ case 71
	.4byte _0805D822 @ case 72
	.4byte _0805D828 @ case 73
	.4byte _0805D82C @ case 74
_0805D780:
	bl YakuzaInit
	b _0805D830
_0805D786:
	bl YakuzaWaitingToAppear
	b _0805D830
_0805D78C:
	bl YakuzaAboutToAppear
	b _0805D830
_0805D792:
	bl YakuzaBeginSweepInit
_0805D796:
	bl YakuzaBeginSweep
	b _0805D830
_0805D79C:
	bl YakuzaSweeping
	b _0805D830
_0805D7A2:
	bl YakuzaSweepingEnd
	b _0805D830
_0805D7A8:
	bl YakuzaIdleBeforeNewRoundInit
_0805D7AC:
	bl YakuzaIdleBeforeNewRound
	b _0805D830
_0805D7B2:
	bl YakuzaGrabbedSamusInit
_0805D7B6:
	bl YakuzaGrabbedSamus
	b _0805D830
_0805D7BC:
	bl YakuzaPullingSamus
	b _0805D830
_0805D7C2:
	bl YakuzaHoldingSamusHigh
	b _0805D830
_0805D7C8:
	bl YakuzaSlammingSamus
	b _0805D830
_0805D7CE:
	bl YakuzaReleasingSamusInit
_0805D7D2:
	bl YakuzaReleasingSamus
	b _0805D830
_0805D7D8:
	bl YakuzaAfterReleasingSamusInit
_0805D7DC:
	bl YakuzaAfterReleasingSamus
	b _0805D830
_0805D7E2:
	bl YakuzaOpeningMouthInit
_0805D7E6:
	bl YakuzaOpeningMouth
	b _0805D830
_0805D7EC:
	bl YakuzaMouthOpenedInit
_0805D7F0:
	bl YakuzaMouthOpened
	b _0805D830
_0805D7F6:
	bl YakuzaClosingMouthInit
_0805D7FA:
	bl YakuzaClosingMouth
	b _0805D830
_0805D800:
	bl YakuzaPhase1DyingInit
_0805D804:
	bl YakuzaPhase1Dying
	b _0805D830
_0805D80A:
	bl YakuzaLosingLegsInit
_0805D80E:
	bl YakuzaLosingLegs
	b _0805D830
_0805D814:
	bl YakuzaPhase2Init
_0805D818:
	bl YakuzaPhase2
	b _0805D830
_0805D81E:
	bl YakuzaPhase2DyingInit
_0805D822:
	bl YakuzaPhase2Dying
	b _0805D830
_0805D828:
	bl YakuzaTurningIntoCoreXInit
_0805D82C:
	bl YakuzaTurningIntoCoreX
_0805D830:
	bl UpdateSubSpriteData1Animation
	bl YakuzaSyncSubSprites
	bl YakuzaUpdatePalette
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaPart
YakuzaPart: @ 0x0805D844
	push {lr}
	ldr r2, _0805D858 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r1, [r0]
	cmp r1, #0
	bne _0805D85C
	bl YakuzaPartInit
	b _0805D894
	.align 2, 0
_0805D858: .4byte gCurrentSprite
_0805D85C:
	ldrb r0, [r2, #0x1e]
	cmp r0, #2
	bne _0805D87E
	ldr r0, _0805D870 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0
	beq _0805D874
	bl YakuzaPartLegsIdle
	b _0805D878
	.align 2, 0
_0805D870: .4byte gSubSpriteData1
_0805D874:
	bl YakuzaPartLegsDead
_0805D878:
	bl YakuzaSyncSubSprites
	b _0805D894
_0805D87E:
	cmp r0, #0
	bne _0805D894
	cmp r1, #2
	bne _0805D88C
	bl YakuzaPartEyeIdle
	b _0805D890
_0805D88C:
	bl YakuzaPartEyesPhase2
_0805D890:
	bl SyncCurrentSpritePositionWithSubSprite1Position
_0805D894:
	pop {r0}
	bx r0

	thumb_func_start YakuzaProjectile
YakuzaProjectile: @ 0x0805D898
	push {lr}
	ldr r0, _0805D8B0 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x37
	bls _0805D8A6
	b _0805D9C6
_0805D8A6:
	lsls r0, r0, #2
	ldr r1, _0805D8B4 @ =_0805D8B8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805D8B0: .4byte gCurrentSprite
_0805D8B4: .4byte _0805D8B8
_0805D8B8: @ jump table
	.4byte _0805D998 @ case 0
	.4byte _0805D9C6 @ case 1
	.4byte _0805D9AA @ case 2
	.4byte _0805D9C6 @ case 3
	.4byte _0805D9C6 @ case 4
	.4byte _0805D9C6 @ case 5
	.4byte _0805D9C6 @ case 6
	.4byte _0805D9C6 @ case 7
	.4byte _0805D9C6 @ case 8
	.4byte _0805D9C6 @ case 9
	.4byte _0805D9C6 @ case 10
	.4byte _0805D9C6 @ case 11
	.4byte _0805D9C6 @ case 12
	.4byte _0805D9C6 @ case 13
	.4byte _0805D9C6 @ case 14
	.4byte _0805D9C6 @ case 15
	.4byte _0805D9C6 @ case 16
	.4byte _0805D9C6 @ case 17
	.4byte _0805D9C6 @ case 18
	.4byte _0805D9C6 @ case 19
	.4byte _0805D9C6 @ case 20
	.4byte _0805D9C6 @ case 21
	.4byte _0805D9C6 @ case 22
	.4byte _0805D9C6 @ case 23
	.4byte _0805D9B0 @ case 24
	.4byte _0805D9C6 @ case 25
	.4byte _0805D9B6 @ case 26
	.4byte _0805D9C6 @ case 27
	.4byte _0805D9BC @ case 28
	.4byte _0805D9C6 @ case 29
	.4byte _0805D9C2 @ case 30
	.4byte _0805D9C6 @ case 31
	.4byte _0805D9C6 @ case 32
	.4byte _0805D9C6 @ case 33
	.4byte _0805D9C6 @ case 34
	.4byte _0805D9C6 @ case 35
	.4byte _0805D9C6 @ case 36
	.4byte _0805D9C6 @ case 37
	.4byte _0805D9C6 @ case 38
	.4byte _0805D9C6 @ case 39
	.4byte _0805D99E @ case 40
	.4byte _0805D9C6 @ case 41
	.4byte _0805D9C6 @ case 42
	.4byte _0805D9C6 @ case 43
	.4byte _0805D9C6 @ case 44
	.4byte _0805D9C6 @ case 45
	.4byte _0805D9C6 @ case 46
	.4byte _0805D9C6 @ case 47
	.4byte _0805D9C6 @ case 48
	.4byte _0805D9C6 @ case 49
	.4byte _0805D9C6 @ case 50
	.4byte _0805D9C6 @ case 51
	.4byte _0805D9C6 @ case 52
	.4byte _0805D9C6 @ case 53
	.4byte _0805D9C6 @ case 54
	.4byte _0805D9A4 @ case 55
_0805D998:
	bl YakuzaProjectileInit
	b _0805D9C6
_0805D99E:
	bl YakuzaProjectileSpitFalling
	b _0805D9C6
_0805D9A4:
	bl YakuzaProjectileExploding
	b _0805D9C6
_0805D9AA:
	bl YakuzaProjectileFireFalling
	b _0805D9C6
_0805D9B0:
	bl YakuzaProjectileFireBurning1
	b _0805D9C6
_0805D9B6:
	bl YakuzaProjectileFireBurning2
	b _0805D9C6
_0805D9BC:
	bl YakuzaProjectileFireBurning3
	b _0805D9C6
_0805D9C2:
	bl YakuzaProjectileFireBurning4
_0805D9C6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start YakuzaFallingLeg
YakuzaFallingLeg: @ 0x0805D9CC
	push {lr}
	ldr r0, _0805D9E8 @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805D9EC
	cmp r0, #2
	beq _0805D9F2
	b _0805D9F6
	.align 2, 0
_0805D9E8: .4byte gCurrentSprite
_0805D9EC:
	bl YakuzaFallingLegInit
	b _0805D9F6
_0805D9F2:
	bl YakuzaFallingLegMoving
_0805D9F6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NightmareMoveToPosition
NightmareMoveToPosition: @ 0x0805D9FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r4, [sp, #0x24]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sl, r0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	adds r7, r5, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	mov r8, r6
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r0, #0
	mov sb, r0
	ldr r2, _0805DA60 @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _0805DAA0
	movs r1, #0x2f
	adds r1, r1, r2
	mov ip, r1
	ldrb r0, [r1]
	cmp r0, #0
	bne _0805DA82
	ldr r3, _0805DA64 @ =gSubSpriteData1
	ldrh r1, [r3, #0xa]
	adds r0, r5, #4
	cmp r1, r0
	ble _0805DA68
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r2, ip
	strb r0, [r2]
	b _0805DB34
	.align 2, 0
_0805DA60: .4byte gCurrentSprite
_0805DA64: .4byte gSubSpriteData1
_0805DA68:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, r6
	bhs _0805DA76
	adds r0, #1
	strb r0, [r1]
_0805DA76:
	ldrb r0, [r1]
	asrs r0, r4
	ldrh r5, [r3, #0xa]
	adds r0, r0, r5
	strh r0, [r3, #0xa]
	b _0805DB34
_0805DA82:
	subs r0, #1
	mov r6, ip
	strb r0, [r6]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805DB3A
	ldr r1, _0805DA9C @ =gSubSpriteData1
	ldrb r0, [r6]
	asrs r0, r4
	ldrh r2, [r1, #0xa]
	adds r0, r0, r2
	strh r0, [r1, #0xa]
	b _0805DB34
	.align 2, 0
_0805DA9C: .4byte gSubSpriteData1
_0805DAA0:
	movs r5, #0x2f
	adds r5, r5, r2
	mov ip, r5
	ldrb r0, [r5]
	adds r5, r0, #0
	cmp r5, #0
	bne _0805DAFA
	ldr r3, _0805DAC4 @ =gSubSpriteData1
	ldrh r1, [r3, #0xa]
	subs r0, r7, #4
	cmp r1, r0
	bge _0805DAC8
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r6, ip
	strb r0, [r6]
	b _0805DB34
	.align 2, 0
_0805DAC4: .4byte gSubSpriteData1
_0805DAC8:
	adds r1, r2, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, r8
	bhs _0805DAD6
	adds r0, #1
	strb r0, [r1]
_0805DAD6:
	ldrb r0, [r1]
	asrs r0, r4
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrh r0, [r3, #0xa]
	subs r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805DAF6
	movs r0, #1
	mov sb, r0
	mov r1, ip
	strb r5, [r1]
	b _0805DB34
_0805DAF6:
	strh r1, [r3, #0xa]
	b _0805DB34
_0805DAFA:
	subs r0, #1
	mov r2, ip
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805DB30
	ldrb r0, [r2]
	asrs r0, r4
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r2, _0805DB28 @ =gSubSpriteData1
	ldrh r0, [r2, #0xa]
	subs r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805DB2C
	movs r5, #1
	mov sb, r5
	mov r6, ip
	strb r3, [r6]
	b _0805DB34
	.align 2, 0
_0805DB28: .4byte gSubSpriteData1
_0805DB2C:
	strh r1, [r2, #0xa]
	b _0805DB34
_0805DB30:
	movs r0, #1
	mov sb, r0
_0805DB34:
	mov r1, sb
	cmp r1, #0
	beq _0805DB54
_0805DB3A:
	ldr r2, _0805DB8C @ =gCurrentSprite
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r3, #0
	eors r0, r1
	strh r0, [r2]
	adds r2, #0x30
	movs r0, #1
	strb r0, [r2]
	ldr r0, _0805DB90 @ =0x000002A6
	bl CheckPlayNotAlreadyPlayingSound
_0805DB54:
	movs r5, #0
	mov sb, r5
	ldr r2, _0805DB8C @ =gCurrentSprite
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _0805DBD4
	movs r6, #0x2e
	adds r6, r6, r2
	mov ip, r6
	ldrb r0, [r6]
	cmp r0, #0
	bne _0805DBB4
	ldr r3, _0805DB94 @ =gSubSpriteData1
	ldrh r1, [r3, #8]
	mov r0, sl
	subs r0, #4
	cmp r1, r0
	ble _0805DB98
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r6]
	b _0805DC6C
	.align 2, 0
_0805DB8C: .4byte gCurrentSprite
_0805DB90: .4byte 0x000002A6
_0805DB94: .4byte gSubSpriteData1
_0805DB98:
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	ldr r5, [sp]
	cmp r0, r5
	bhs _0805DBA8
	adds r0, #1
	strb r0, [r1]
_0805DBA8:
	ldrb r0, [r1]
	asrs r0, r4
	ldrh r6, [r3, #8]
	adds r0, r0, r6
	strh r0, [r3, #8]
	b _0805DC6C
_0805DBB4:
	subs r0, #1
	mov r1, ip
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805DC72
	ldr r1, _0805DBD0 @ =gSubSpriteData1
	mov r3, ip
	ldrb r0, [r3]
	asrs r0, r4
	ldrh r5, [r1, #8]
	adds r0, r0, r5
	strh r0, [r1, #8]
	b _0805DC6C
	.align 2, 0
_0805DBD0: .4byte gSubSpriteData1
_0805DBD4:
	movs r0, #0x2e
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	adds r5, r0, #0
	cmp r5, #0
	bne _0805DC30
	ldr r3, _0805DBFC @ =gSubSpriteData1
	ldrh r1, [r3, #8]
	mov r0, sl
	adds r0, #4
	cmp r1, r0
	bge _0805DC00
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	b _0805DC6C
	.align 2, 0
_0805DBFC: .4byte gSubSpriteData1
_0805DC00:
	adds r1, r2, #0
	adds r1, #0x31
	ldrb r0, [r1]
	ldr r6, [sp]
	cmp r0, r6
	bhs _0805DC10
	adds r0, #1
	strb r0, [r1]
_0805DC10:
	ldrb r0, [r1]
	asrs r0, r4
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrh r0, [r3, #8]
	subs r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805DC64
	movs r0, #1
	mov sb, r0
	mov r1, ip
	strb r5, [r1]
	b _0805DC6C
_0805DC30:
	subs r0, #1
	mov r3, ip
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805DC68
	ldrb r0, [r3]
	asrs r0, r4
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r3, _0805DC60 @ =gSubSpriteData1
	ldrh r0, [r3, #8]
	subs r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0805DC64
	movs r5, #1
	mov sb, r5
	mov r0, ip
	strb r6, [r0]
	b _0805DC6C
	.align 2, 0
_0805DC60: .4byte gSubSpriteData1
_0805DC64:
	strh r1, [r3, #8]
	b _0805DC6C
_0805DC68:
	movs r1, #1
	mov sb, r1
_0805DC6C:
	mov r3, sb
	cmp r3, #0
	beq _0805DC8C
_0805DC72:
	ldrh r0, [r2]
	movs r5, #0x80
	lsls r5, r5, #3
	adds r1, r5, #0
	eors r0, r1
	strh r0, [r2]
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0805DC9C @ =0x000002A6
	bl CheckPlayNotAlreadyPlayingSound
_0805DC8C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805DC9C: .4byte 0x000002A6

	thumb_func_start NightmareSyncSubSprites
NightmareSyncSubSprites: @ 0x0805DCA0
	push {r4, lr}
	ldr r4, _0805DCFC @ =gSubSpriteData1
	ldrh r0, [r4, #4]
	ldr r1, [r4]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r2, _0805DD00 @ =gCurrentSprite
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	ldr r1, _0805DD04 @ =0x0879B7FC
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r2, #0x18]
	ldr r0, [r0]
	cmp r1, r0
	beq _0805DCD2
	str r0, [r2, #0x18]
	movs r0, #0
	strb r0, [r2, #0x1c]
	strh r0, [r2, #0x16]
_0805DCD2:
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	ldrh r1, [r4, #8]
	adds r0, r0, r1
	strh r0, [r2, #2]
	ldrb r1, [r2, #0x1e]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0, #4]
	ldrh r4, [r4, #0xa]
	adds r0, r0, r4
	strh r0, [r2, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DCFC: .4byte gSubSpriteData1
_0805DD00: .4byte gCurrentSprite
_0805DD04: .4byte 0x0879B7FC

	thumb_func_start NightmarePlaySound
NightmarePlaySound: @ 0x0805DD08
	push {lr}
	ldr r0, _0805DD30 @ =gCurrentSprite
	adds r0, #0x25
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805DD2A
	ldr r0, _0805DD34 @ =gSubSpriteData1
	ldr r0, [r0, #4]
	ldr r1, _0805DD38 @ =0x00FFFFFF
	ands r0, r1
	movs r1, #0xc0
	lsls r1, r1, #0xc
	cmp r0, r1
	bne _0805DD2A
	ldr r0, _0805DD3C @ =0x000002A1
	bl SoundPlay
_0805DD2A:
	pop {r0}
	bx r0
	.align 2, 0
_0805DD30: .4byte gCurrentSprite
_0805DD34: .4byte gSubSpriteData1
_0805DD38: .4byte 0x00FFFFFF
_0805DD3C: .4byte 0x000002A1

	thumb_func_start NightmareMakeMissilesFall
NightmareMakeMissilesFall: @ 0x0805DD40
	push {r4, r5, lr}
	movs r5, #0xc
	movs r3, #0
	ldr r4, _0805DD94 @ =gProjectileData
_0805DD48:
	lsls r0, r3, #5
	adds r1, r0, r4
	ldrb r2, [r1]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0805DD82
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _0805DD82
	ldrb r0, [r1, #0xf]
	cmp r0, r5
	bne _0805DD82
	ldrb r2, [r1, #0x13]
	movs r0, #3
	ands r0, r2
	cmp r0, #0
	bne _0805DD72
	adds r0, r2, #1
	strb r0, [r1, #0x13]
_0805DD72:
	ldrb r0, [r1, #0x13]
	movs r2, #0x2a
	cmp r0, #0x29
	bhi _0805DD7C
	adds r2, r0, #0
_0805DD7C:
	ldrh r0, [r1, #8]
	adds r0, r2, r0
	strh r0, [r1, #8]
_0805DD82:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0xf
	bls _0805DD48
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DD94: .4byte gProjectileData

	thumb_func_start NightmareReduceSamusXVelocity
NightmareReduceSamusXVelocity: @ 0x0805DD98
	push {lr}
	ldr r0, _0805DDB4 @ =gEquipment
	ldrh r0, [r0]
	cmp r0, #0
	beq _0805DDC8
	ldr r2, _0805DDB8 @ =gSamusData
	ldrh r3, [r2, #0x1a]
	movs r0, #0x1a
	ldrsh r1, [r2, r0]
	cmp r1, #4
	ble _0805DDBC
	subs r0, r3, #2
	b _0805DDC6
	.align 2, 0
_0805DDB4: .4byte gEquipment
_0805DDB8: .4byte gSamusData
_0805DDBC:
	movs r0, #4
	rsbs r0, r0, #0
	cmp r1, r0
	bge _0805DDC8
	adds r0, r3, #2
_0805DDC6:
	strh r0, [r2, #0x1a]
_0805DDC8:
	pop {r0}
	bx r0

	thumb_func_start NightmareInit
NightmareInit: @ 0x0805DDCC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	ldr r0, _0805DDEC @ =gEquipment
	ldrb r1, [r0, #0xc]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _0805DDF4
	ldr r1, _0805DDF0 @ =gCurrentSprite
	movs r0, #0
	strh r0, [r1]
	b _0805DFA0
	.align 2, 0
_0805DDEC: .4byte gEquipment
_0805DDF0: .4byte gCurrentSprite
_0805DDF4:
	ldr r0, _0805DFAC @ =gCurrentSprite
	mov r8, r0
	movs r2, #0xb0
	lsls r2, r2, #2
	adds r1, r2, #0
	ldrh r5, [r0, #2]
	adds r1, r1, r5
	movs r4, #0
	strh r1, [r0, #2]
	ldrh r0, [r0, #4]
	adds r0, #0x40
	mov r2, r8
	strh r0, [r2, #4]
	ldr r3, _0805DFB0 @ =gSubSpriteData1
	strh r1, [r3, #8]
	strh r0, [r3, #0xa]
	movs r0, #0xa
	strb r0, [r2, #0x1e]
	mov r1, r8
	adds r1, #0x22
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x50
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r2, #0x40
	movs r0, #0x40
	strb r0, [r1]
	movs r0, #0xff
	lsls r0, r0, #8
	mov r5, r8
	strh r0, [r5, #0xa]
	adds r0, #0xe0
	strh r0, [r5, #0xc]
	subs r0, #0x80
	strh r0, [r5, #0xe]
	movs r0, #0xc0
	strh r0, [r5, #0x10]
	ldrh r0, [r5]
	movs r5, #0x80
	lsls r5, r5, #8
	adds r1, r5, #0
	orrs r0, r1
	mov r1, r8
	strh r0, [r1]
	adds r1, #0x34
	ldrb r0, [r1]
	orrs r2, r0
	strb r2, [r1]
	ldr r2, _0805DFB4 @ =sPrimarySpriteStats
	mov r5, r8
	ldrb r1, [r5, #0x1d]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r5, #0x14]
	ldr r0, _0805DFB8 @ =0x083B83BC
	str r0, [r3]
	strb r4, [r3, #6]
	strh r7, [r3, #4]
	mov r0, r8
	adds r0, #0x25
	strb r4, [r0]
	adds r0, #8
	strb r4, [r0]
	mov r1, r8
	adds r1, #0x24
	movs r0, #0x37
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x2e
	movs r1, #0xb4
	strb r1, [r0]
	ldr r0, _0805DFBC @ =gBossWork3
	strb r1, [r0]
	ldrh r5, [r3, #8]
	ldrh r6, [r3, #0xa]
	mov r0, r8
	adds r0, #0x23
	ldrb r0, [r0]
	mov r8, r0
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #0
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #1
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #2
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #3
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	ldr r2, _0805DFC0 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x36
	strb r0, [r1]
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #4
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #5
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #6
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #7
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #8
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #9
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #0xb
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #0xc
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
	str r5, [sp]
	str r6, [sp, #4]
	str r7, [sp, #8]
	movs r0, #0x80
	movs r1, #0xd
	movs r2, #0
	mov r3, r8
	bl SpriteSpawnSecondary
_0805DFA0:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805DFAC: .4byte gCurrentSprite
_0805DFB0: .4byte gSubSpriteData1
_0805DFB4: .4byte sPrimarySpriteStats
_0805DFB8: .4byte 0x083B83BC
_0805DFBC: .4byte gBossWork3
_0805DFC0: .4byte gSpriteData

	thumb_func_start NightmareWaitingToAppear
NightmareWaitingToAppear: @ 0x0805DFC4
	push {r4, lr}
	ldr r1, _0805E000 @ =gCurrentSprite
	adds r4, r1, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805DFFA
	adds r1, #0x24
	movs r0, #0x38
	strb r0, [r1]
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	movs r0, #0x3c
	strb r0, [r4]
	movs r0, #0xa8
	lsls r0, r0, #2
	bl unk_3b1c
_0805DFFA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E000: .4byte gCurrentSprite

	thumb_func_start NightmareAppearing
NightmareAppearing: @ 0x0805E004
	push {r4, r5, lr}
	ldr r5, _0805E050 @ =gCurrentSprite
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805E03C
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartHorizontal
	movs r0, #0x3c
	movs r1, #0x81
	bl ScreenShakeStartVertical
	movs r0, #0x3c
	strb r0, [r4]
	movs r0, #0xa8
	lsls r0, r0, #2
	bl unk_3b1c
_0805E03C:
	ldr r2, _0805E054 @ =gSubSpriteData1
	ldrh r1, [r2, #8]
	movs r0, #0x80
	lsls r0, r0, #3
	cmp r1, r0
	bls _0805E058
	subs r0, r1, #1
	strh r0, [r2, #8]
	b _0805E060
	.align 2, 0
_0805E050: .4byte gCurrentSprite
_0805E054: .4byte gSubSpriteData1
_0805E058:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x39
	strb r0, [r1]
_0805E060:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NightmarePhase1Init
NightmarePhase1Init: @ 0x0805E068
	push {lr}
	ldr r3, _0805E0A4 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x2f
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	ldrh r1, [r3]
	ldr r0, _0805E0A8 @ =0x00007FFB
	ands r0, r1
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x25
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #1
	movs r0, #0x3a
	strb r0, [r1]
	movs r0, #0x41
	movs r1, #7
	bl PlayMusic
	pop {r0}
	bx r0
	.align 2, 0
_0805E0A4: .4byte gCurrentSprite
_0805E0A8: .4byte 0x00007FFB

	thumb_func_start NightmarePhase1
NightmarePhase1: @ 0x0805E0AC
	push {lr}
	sub sp, #4
	ldr r1, _0805E0DC @ =gSamusData
	ldr r2, _0805E0E0 @ =0xFFFFFF00
	adds r0, r2, #0
	ldrh r1, [r1, #0x18]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _0805E0E4 @ =gAbilityRestingXPosition
	ldrh r1, [r1]
	adds r1, #0xc0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r2, #2
	str r2, [sp]
	movs r2, #0x28
	movs r3, #8
	bl NightmareMoveToPosition
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0805E0DC: .4byte gSamusData
_0805E0E0: .4byte 0xFFFFFF00
_0805E0E4: .4byte gAbilityRestingXPosition

	thumb_func_start NightmarePhase2ResettingPosition
NightmarePhase2ResettingPosition: @ 0x0805E0E8
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _0805E120 @ =gAbilityRestingYPosition
	ldrh r0, [r0]
	subs r0, #0x80
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r1, _0805E124 @ =gAbilityRestingXPosition
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ldrh r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r0, _0805E128 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	adds r3, r0, #0
	cmp r1, r5
	bhs _0805E130
	ldr r0, _0805E12C @ =gCurrentSprite
	ldrh r2, [r0]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r1, r7, #0
	orrs r1, r2
	b _0805E138
	.align 2, 0
_0805E120: .4byte gAbilityRestingYPosition
_0805E124: .4byte gAbilityRestingXPosition
_0805E128: .4byte gSubSpriteData1
_0805E12C: .4byte gCurrentSprite
_0805E130:
	ldr r0, _0805E150 @ =gCurrentSprite
	ldrh r2, [r0]
	ldr r1, _0805E154 @ =0x0000FDFF
	ands r1, r2
_0805E138:
	strh r1, [r0]
	adds r2, r0, #0
	ldrh r0, [r3, #8]
	cmp r0, r4
	bhs _0805E158
	ldrh r1, [r2]
	movs r7, #0x80
	lsls r7, r7, #3
	adds r0, r7, #0
	orrs r0, r1
	b _0805E15E
	.align 2, 0
_0805E150: .4byte gCurrentSprite
_0805E154: .4byte 0x0000FDFF
_0805E158:
	ldrh r1, [r2]
	ldr r0, _0805E178 @ =0x0000FBFF
	ands r0, r1
_0805E15E:
	strh r0, [r2]
	ldrh r1, [r3, #8]
	adds r0, r4, #6
	cmp r1, r0
	bge _0805E17C
	subs r0, r4, #6
	cmp r1, r0
	ble _0805E17C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0805E194
	.align 2, 0
_0805E178: .4byte 0x0000FBFF
_0805E17C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0805E18E
	ldrh r0, [r3, #8]
	adds r0, #1
	b _0805E192
_0805E18E:
	ldrh r0, [r3, #8]
	subs r0, #1
_0805E192:
	strh r0, [r3, #8]
_0805E194:
	ldrh r1, [r3, #0xa]
	adds r0, r5, #6
	cmp r1, r0
	bge _0805E1AA
	subs r0, r5, #6
	cmp r1, r0
	ble _0805E1AA
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0805E1C2
_0805E1AA:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805E1BC
	ldrh r0, [r3, #0xa]
	adds r0, #1
	b _0805E1C0
_0805E1BC:
	ldrh r0, [r3, #0xa]
	subs r0, #1
_0805E1C0:
	strh r0, [r3, #0xa]
_0805E1C2:
	cmp r6, #2
	bne _0805E1DA
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	ldrh r1, [r2]
	ldr r0, _0805E1E0 @ =0x0000FDFF
	ands r0, r1
	ldr r1, _0805E1E4 @ =0x0000FBFF
	ands r0, r1
	strh r0, [r2]
_0805E1DA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805E1E0: .4byte 0x0000FDFF
_0805E1E4: .4byte 0x0000FBFF

	thumb_func_start NightmarePhase2MovementInit
NightmarePhase2MovementInit: @ 0x0805E1E8
	ldr r1, _0805E200 @ =gCurrentSprite
	adds r2, r1, #0
	adds r2, #0x24
	movs r3, #0
	movs r0, #2
	strb r0, [r2]
	movs r0, #0
	strh r3, [r1, #6]
	adds r1, #0x31
	strb r0, [r1]
	bx lr
	.align 2, 0
_0805E200: .4byte gCurrentSprite

	thumb_func_start NightmarePhase2Movement
NightmarePhase2Movement: @ 0x0805E204
	push {r4, r5, r6, lr}
	ldr r3, _0805E224 @ =0x083B7380
	ldr r2, _0805E228 @ =gCurrentSprite
	ldrh r4, [r2, #6]
	lsls r1, r4, #0x10
	lsrs r0, r1, #0x15
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r3, [r0]
	movs r0, #0xcf
	lsls r0, r0, #0x11
	cmp r1, r0
	bhi _0805E22C
	adds r0, r4, #1
	strh r0, [r2, #6]
	b _0805E23C
	.align 2, 0
_0805E224: .4byte 0x083B7380
_0805E228: .4byte gCurrentSprite
_0805E22C:
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #2
	adds r1, r4, #0
	eors r0, r1
	movs r1, #0
	strh r0, [r2]
	strh r1, [r2, #6]
_0805E23C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805E254
	ldr r1, _0805E250 @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	adds r0, r3, r0
	b _0805E25A
	.align 2, 0
_0805E250: .4byte gSubSpriteData1
_0805E254:
	ldr r1, _0805E27C @ =gSubSpriteData1
	ldrh r0, [r1, #0xa]
	subs r0, r0, r3
_0805E25A:
	strh r0, [r1, #0xa]
	adds r6, r1, #0
	ldr r0, _0805E280 @ =0x083B739A
	adds r4, r2, #0
	adds r4, #0x31
	ldrb r5, [r4]
	lsls r1, r5, #0x18
	lsrs r2, r1, #0x18
	lsrs r1, r1, #0x1b
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r3, [r1]
	cmp r2, #0xfe
	bhi _0805E284
	adds r0, r5, #1
	b _0805E286
	.align 2, 0
_0805E27C: .4byte gSubSpriteData1
_0805E280: .4byte 0x083B739A
_0805E284:
	movs r0, #0
_0805E286:
	strb r0, [r4]
	ldrh r0, [r6, #8]
	adds r0, r3, r0
	strh r0, [r6, #8]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start NightmareMovingToPhase3Init
NightmareMovingToPhase3Init: @ 0x0805E294
	ldr r0, _0805E2A0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x18
	strb r1, [r0]
	bx lr
	.align 2, 0
_0805E2A0: .4byte gCurrentSprite

	thumb_func_start NightmareMovingToPhase3
NightmareMovingToPhase3: @ 0x0805E2A4
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _0805E2D0 @ =gAbilityRestingYPosition
	ldrh r4, [r0]
	ldr r0, _0805E2D4 @ =gAbilityRestingXPosition
	ldrh r0, [r0]
	adds r0, #0xc0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r0, _0805E2D8 @ =gSubSpriteData1
	ldrh r1, [r0, #0xa]
	adds r3, r0, #0
	cmp r1, r5
	bhs _0805E2E0
	ldr r0, _0805E2DC @ =gCurrentSprite
	ldrh r2, [r0]
	movs r7, #0x80
	lsls r7, r7, #2
	adds r1, r7, #0
	orrs r1, r2
	b _0805E2E8
	.align 2, 0
_0805E2D0: .4byte gAbilityRestingYPosition
_0805E2D4: .4byte gAbilityRestingXPosition
_0805E2D8: .4byte gSubSpriteData1
_0805E2DC: .4byte gCurrentSprite
_0805E2E0:
	ldr r0, _0805E300 @ =gCurrentSprite
	ldrh r2, [r0]
	ldr r1, _0805E304 @ =0x0000FDFF
	ands r1, r2
_0805E2E8:
	strh r1, [r0]
	adds r2, r0, #0
	ldrh r0, [r3, #8]
	cmp r0, r4
	bhs _0805E308
	ldrh r1, [r2]
	movs r7, #0x80
	lsls r7, r7, #3
	adds r0, r7, #0
	orrs r0, r1
	b _0805E30E
	.align 2, 0
_0805E300: .4byte gCurrentSprite
_0805E304: .4byte 0x0000FDFF
_0805E308:
	ldrh r1, [r2]
	ldr r0, _0805E328 @ =0x0000FBFF
	ands r0, r1
_0805E30E:
	strh r0, [r2]
	ldrh r1, [r3, #8]
	adds r0, r4, #6
	cmp r1, r0
	bge _0805E32C
	subs r0, r4, #6
	cmp r1, r0
	ble _0805E32C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0805E344
	.align 2, 0
_0805E328: .4byte 0x0000FBFF
_0805E32C:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0805E33E
	ldrh r0, [r3, #8]
	adds r0, #1
	b _0805E342
_0805E33E:
	ldrh r0, [r3, #8]
	subs r0, #1
_0805E342:
	strh r0, [r3, #8]
_0805E344:
	ldrh r1, [r3, #0xa]
	adds r0, r5, #6
	cmp r1, r0
	bge _0805E35A
	subs r0, r5, #6
	cmp r1, r0
	ble _0805E35A
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0805E372
_0805E35A:
	ldrh r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805E36C
	ldrh r0, [r3, #0xa]
	adds r0, #1
	b _0805E370
_0805E36C:
	ldrh r0, [r3, #0xa]
	subs r0, #1
_0805E370:
	strh r0, [r3, #0xa]
_0805E372:
	cmp r6, #2
	bne _0805E37E
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x19
	strb r0, [r1]
_0805E37E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start NightmareReachedPhase3Position
NightmareReachedPhase3Position: @ 0x0805E384
	bx lr
	.align 2, 0

	thumb_func_start NightmarePhase3SlotMovementInit
NightmarePhase3SlotMovementInit: @ 0x0805E388
	bx lr
	.align 2, 0

	thumb_func_start NightmarePhase3SlowMovement
NightmarePhase3SlowMovement: @ 0x0805E38C
	push {r4, r5, lr}
	movs r5, #0
	ldr r1, _0805E3A8 @ =gSubSpriteData1
	ldrh r2, [r1, #8]
	ldr r0, _0805E3AC @ =gSamusData
	ldrh r0, [r0, #0x18]
	subs r0, #0x80
	adds r4, r1, #0
	cmp r2, r0
	bge _0805E3B0
	adds r0, r2, #1
	strh r0, [r4, #8]
	b _0805E3B2
	.align 2, 0
_0805E3A8: .4byte gSubSpriteData1
_0805E3AC: .4byte gSamusData
_0805E3B0:
	movs r5, #1
_0805E3B2:
	ldrh r0, [r4, #8]
	ldrh r1, [r4, #0xa]
	subs r1, #0xc0
	bl SpriteUtilCheckCollisionAtPosition
	ldr r0, _0805E3CC @ =gPreviousCollisionCheck
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805E3D0
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _0805E3D6
	.align 2, 0
_0805E3CC: .4byte gPreviousCollisionCheck
_0805E3D0:
	ldrh r0, [r4, #0xa]
	subs r0, #1
	strh r0, [r4, #0xa]
_0805E3D6:
	cmp r5, #2
	bne _0805E3E2
	ldr r0, _0805E3E8 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x1b
	strb r1, [r0]
_0805E3E2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E3E8: .4byte gCurrentSprite

	thumb_func_start NightmarePhase3FastMovementInit
NightmarePhase3FastMovementInit: @ 0x0805E3EC
	ldr r3, _0805E414 @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x2f
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	movs r1, #1
	strb r1, [r0]
	subs r0, #2
	strb r2, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r3, #6]
	bx lr
	.align 2, 0
_0805E414: .4byte gCurrentSprite

	thumb_func_start NightmarePhase3FastMovement
NightmarePhase3FastMovement: @ 0x0805E418
	push {lr}
	sub sp, #4
	ldr r0, _0805E430 @ =gCurrentSprite
	ldrh r0, [r0, #6]
	cmp r0, #0xf0
	bls _0805E43C
	ldr r0, _0805E434 @ =gXParasiteTargetYPosition
	ldrh r2, [r0]
	ldr r0, _0805E438 @ =gXParasiteTargetXPosition
	ldrh r1, [r0]
	b _0805E448
	.align 2, 0
_0805E430: .4byte gCurrentSprite
_0805E434: .4byte gXParasiteTargetYPosition
_0805E438: .4byte gXParasiteTargetXPosition
_0805E43C:
	ldr r1, _0805E464 @ =gSamusData
	ldrh r0, [r1, #0x18]
	subs r0, #0x80
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldrh r1, [r1, #0x16]
_0805E448:
	movs r0, #2
	str r0, [sp]
	adds r0, r2, #0
	movs r2, #0x30
	movs r3, #0x30
	bl NightmareMoveToPosition
	ldr r3, _0805E468 @ =gCurrentSprite
	ldrh r0, [r3, #6]
	cmp r0, #0
	beq _0805E46C
	subs r0, #1
	strh r0, [r3, #6]
	b _0805E4B2
	.align 2, 0
_0805E464: .4byte gSamusData
_0805E468: .4byte gCurrentSprite
_0805E46C:
	ldr r2, _0805E4B8 @ =gSubSpriteData1
	ldrh r0, [r2, #0xa]
	lsrs r0, r0, #2
	ldr r1, _0805E4BC @ =gBg1XPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _0805E4C0 @ =0xFF730000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0x4a
	bhi _0805E4B2
	ldrh r0, [r2, #8]
	lsrs r0, r0, #2
	ldr r1, _0805E4C4 @ =gBg1YPosition
	ldrh r1, [r1]
	lsrs r1, r1, #2
	subs r0, r0, r1
	lsls r0, r0, #0x10
	ldr r1, _0805E4C8 @ =0xFFEB0000
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0x4e
	bhi _0805E4B2
	ldr r0, _0805E4CC @ =gSamusData
	ldrh r1, [r0, #0x16]
	ldrh r0, [r2, #0xa]
	subs r0, #0x40
	cmp r1, r0
	bge _0805E4B2
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
_0805E4B2:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0805E4B8: .4byte gSubSpriteData1
_0805E4BC: .4byte gBg1XPosition
_0805E4C0: .4byte 0xFF730000
_0805E4C4: .4byte gBg1YPosition
_0805E4C8: .4byte 0xFFEB0000
_0805E4CC: .4byte gSamusData

	thumb_func_start NightmareDeathFlash
NightmareDeathFlash: @ 0x0805E4D0
	push {lr}
	ldr r2, _0805E510 @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2f
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0805E50A
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0805E504
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_0805E504:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_0805E50A:
	pop {r0}
	bx r0
	.align 2, 0
_0805E510: .4byte gCurrentSprite

	thumb_func_start NightmareMovingToDeathPosition
NightmareMovingToDeathPosition: @ 0x0805E514
	push {r4, r5, r6, r7, lr}
	bl NightmareDeathFlash
	movs r6, #0
	ldr r0, _0805E540 @ =gAbilityRestingYPosition
	ldrh r3, [r0]
	ldr r0, _0805E544 @ =gAbilityRestingXPosition
	ldrh r0, [r0]
	adds r0, #0xc0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _0805E548 @ =gSubSpriteData1
	ldrh r0, [r0, #0xa]
	cmp r0, r4
	bhs _0805E550
	ldr r0, _0805E54C @ =gCurrentSprite
	ldrh r2, [r0]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r1, r5, #0
	orrs r1, r2
	b _0805E558
	.align 2, 0
_0805E540: .4byte gAbilityRestingYPosition
_0805E544: .4byte gAbilityRestingXPosition
_0805E548: .4byte gSubSpriteData1
_0805E54C: .4byte gCurrentSprite
_0805E550:
	ldr r0, _0805E574 @ =gCurrentSprite
	ldrh r2, [r0]
	ldr r1, _0805E578 @ =0x0000FDFF
	ands r1, r2
_0805E558:
	strh r1, [r0]
	adds r5, r0, #0
	ldr r0, _0805E57C @ =gSubSpriteData1
	ldrh r1, [r0, #8]
	adds r2, r0, #0
	cmp r1, r3
	bhs _0805E580
	ldrh r1, [r5]
	movs r7, #0x80
	lsls r7, r7, #3
	adds r0, r7, #0
	orrs r0, r1
	b _0805E586
	.align 2, 0
_0805E574: .4byte gCurrentSprite
_0805E578: .4byte 0x0000FDFF
_0805E57C: .4byte gSubSpriteData1
_0805E580:
	ldrh r1, [r5]
	ldr r0, _0805E5A0 @ =0x0000FBFF
	ands r0, r1
_0805E586:
	strh r0, [r5]
	ldrh r1, [r2, #8]
	adds r0, r3, #6
	cmp r1, r0
	bge _0805E5A4
	subs r0, r3, #6
	cmp r1, r0
	ble _0805E5A4
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0805E5BC
	.align 2, 0
_0805E5A0: .4byte 0x0000FBFF
_0805E5A4:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0805E5B6
	ldrh r0, [r2, #8]
	adds r0, #1
	b _0805E5BA
_0805E5B6:
	ldrh r0, [r2, #8]
	subs r0, #1
_0805E5BA:
	strh r0, [r2, #8]
_0805E5BC:
	ldrh r1, [r2, #0xa]
	adds r0, r4, #6
	cmp r1, r0
	bge _0805E5D2
	subs r0, r4, #6
	cmp r1, r0
	ble _0805E5D2
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	b _0805E5EA
_0805E5D2:
	ldrh r1, [r5]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0805E5E4
	ldrh r0, [r2, #0xa]
	adds r0, #1
	b _0805E5E8
_0805E5E4:
	ldrh r0, [r2, #0xa]
	subs r0, #1
_0805E5E8:
	strh r0, [r2, #0xa]
_0805E5EA:
	cmp r6, #2
	bne _0805E612
	adds r2, r5, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805E612
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x22
	strb r0, [r1]
	movs r0, #0x3c
	strb r0, [r2]
	movs r0, #0xa9
	lsls r0, r0, #2
	bl unk_3b1c
_0805E612:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start NightmareTurningIntoCoreX
NightmareTurningIntoCoreX: @ 0x0805E618
	push {r4, r5, lr}
	ldr r4, _0805E650 @ =gCurrentSprite
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	cmp r0, #0
	beq _0805E654
	bl NightmareDeathFlash
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805E6A2
	ldrh r1, [r4]
	movs r0, #0x20
	movs r2, #0
	orrs r0, r1
	strh r0, [r4]
	adds r0, r4, #0
	adds r0, #0x2c
	strb r2, [r0]
	subs r0, #0xc
	strb r2, [r0]
	movs r0, #0x2c
	strh r0, [r4, #6]
	b _0805E6A2
	.align 2, 0
_0805E650: .4byte gCurrentSprite
_0805E654:
	ldr r2, _0805E68C @ =gWrittenToMosaic_H
	ldr r1, _0805E690 @ =0x083BDED6
	ldrh r0, [r4, #6]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
	ldrh r0, [r4, #6]
	subs r0, #1
	strh r0, [r4, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0805E67A
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x59
	strb r1, [r0]
	movs r0, #0x48
	strb r0, [r4, #0x1d]
_0805E67A:
	ldrh r0, [r4, #6]
	cmp r0, #0x13
	bhi _0805E694
	adds r2, r0, #0
	movs r0, #0x48
	movs r1, #0
	bl SpriteLoadGfx
	b _0805E6A2
	.align 2, 0
_0805E68C: .4byte gWrittenToMosaic_H
_0805E690: .4byte 0x083BDED6
_0805E694:
	cmp r0, #0x14
	bne _0805E6A2
	movs r0, #0x48
	movs r1, #0
	movs r2, #5
	bl SpriteLoadPal
_0805E6A2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start NightmarePartInit
NightmarePartInit: @ 0x0805E6A8
	push {r4, lr}
	ldr r3, _0805E6D8 @ =gCurrentSprite
	ldrh r1, [r3]
	ldr r0, _0805E6DC @ =0x0000FFFB
	ands r0, r1
	movs r2, #0
	strh r0, [r3]
	adds r1, r3, #0
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2d
	strb r2, [r0]
	ldrb r0, [r3, #0x1e]
	mov ip, r3
	cmp r0, #0xd
	bls _0805E6CE
	b _0805EAC8
_0805E6CE:
	lsls r0, r0, #2
	ldr r1, _0805E6E0 @ =_0805E6E4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805E6D8: .4byte gCurrentSprite
_0805E6DC: .4byte 0x0000FFFB
_0805E6E0: .4byte _0805E6E4
_0805E6E4: @ jump table
	.4byte _0805E71C @ case 0
	.4byte _0805E764 @ case 1
	.4byte _0805E7A8 @ case 2
	.4byte _0805E7F4 @ case 3
	.4byte _0805E844 @ case 4
	.4byte _0805E880 @ case 5
	.4byte _0805E8B8 @ case 6
	.4byte _0805E8F0 @ case 7
	.4byte _0805E928 @ case 8
	.4byte _0805E960 @ case 9
	.4byte _0805EAC8 @ case 10
	.4byte _0805E9D8 @ case 11
	.4byte _0805EA14 @ case 12
	.4byte _0805EA70 @ case 13
_0805E71C:
	mov r2, ip
	adds r2, #0x22
	movs r1, #0
	movs r0, #9
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x10
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x28
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x28
	strb r0, [r1]
	ldr r1, _0805E760 @ =0x0000FFFC
	mov r0, ip
	strh r1, [r0, #0xa]
	movs r2, #4
	movs r0, #4
	mov r3, ip
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldrh r0, [r3]
	orrs r0, r2
	movs r2, #0
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	b _0805E838
	.align 2, 0
_0805E760: .4byte 0x0000FFFC
_0805E764:
	mov r1, ip
	adds r1, #0x22
	movs r2, #0
	movs r0, #9
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x30
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r1, _0805E7A4 @ =0x0000FFFC
	mov r0, ip
	strh r1, [r0, #0xa]
	movs r2, #4
	movs r0, #4
	mov r3, ip
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldrh r0, [r3]
	orrs r0, r2
	movs r2, #0
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	b _0805E838
	.align 2, 0
_0805E7A4: .4byte 0x0000FFFC
_0805E7A8:
	mov r1, ip
	adds r1, #0x22
	movs r2, #0
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x38
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	strb r2, [r0]
	adds r1, #2
	movs r0, #0x28
	strb r0, [r1]
	movs r3, #0
	ldr r1, _0805E7EC @ =0x0000FF60
	mov r0, ip
	strh r1, [r0, #0xa]
	ldr r0, _0805E7F0 @ =0x0000FFB0
	mov r4, ip
	strh r0, [r4, #0xc]
	strh r1, [r4, #0xe]
	strh r2, [r4, #0x10]
	ldrh r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	b _0805EACE
	.align 2, 0
_0805E7EC: .4byte 0x0000FF60
_0805E7F0: .4byte 0x0000FFB0
_0805E7F4:
	mov r2, ip
	adds r2, #0x22
	movs r1, #0
	movs r0, #0xb
	strb r0, [r2]
	adds r2, #5
	movs r0, #0x38
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x28
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x30
	strb r0, [r1]
	ldr r1, _0805E840 @ =0x0000FFFC
	mov r3, ip
	strh r1, [r3, #0xa]
	movs r0, #4
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	strh r0, [r3, #0x10]
	ldrh r0, [r3]
	movs r4, #0x80
	lsls r4, r4, #6
	adds r1, r4, #0
	orrs r0, r1
	movs r2, #0
	movs r3, #0x80
	lsls r3, r3, #8
	adds r1, r3, #0
	orrs r0, r1
	mov r4, ip
	strh r0, [r4]
_0805E838:
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	b _0805EACE
	.align 2, 0
_0805E840: .4byte 0x0000FFFC
_0805E844:
	mov r1, ip
	adds r1, #0x22
	movs r0, #4
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x18
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r2, #0
	ldr r0, _0805E87C @ =0x0000FFC0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r1, #0x20
	mov r3, ip
	strh r1, [r3, #0xc]
	adds r0, #0x20
	strh r0, [r3, #0xe]
	strh r1, [r3, #0x10]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	b _0805EAA4
	.align 2, 0
_0805E87C: .4byte 0x0000FFC0
_0805E880:
	mov r1, ip
	adds r1, #0x22
	movs r0, #5
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x1a
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _0805E8B0 @ =0x0000FFA0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #8
	strh r0, [r2, #0xc]
	ldr r0, _0805E8B4 @ =0x0000FFE8
	strh r0, [r2, #0xe]
	movs r0, #0x30
	b _0805EA42
	.align 2, 0
_0805E8B0: .4byte 0x0000FFA0
_0805E8B4: .4byte 0x0000FFE8
_0805E8B8:
	mov r1, ip
	adds r1, #0x22
	movs r0, #6
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _0805E8E8 @ =0x0000FFA0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #8
	strh r0, [r2, #0xc]
	ldr r0, _0805E8EC @ =0x0000FFE8
	strh r0, [r2, #0xe]
	movs r0, #0x40
	b _0805EA42
	.align 2, 0
_0805E8E8: .4byte 0x0000FFA0
_0805E8EC: .4byte 0x0000FFE8
_0805E8F0:
	mov r1, ip
	adds r1, #0x22
	movs r0, #7
	strb r0, [r1]
	adds r1, #5
	movs r0, #0x1a
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _0805E920 @ =0x0000FFA0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x10
	strh r0, [r2, #0xc]
	ldr r0, _0805E924 @ =0x0000FFFC
	strh r0, [r2, #0xe]
	movs r0, #0x40
	b _0805EA42
	.align 2, 0
_0805E920: .4byte 0x0000FFA0
_0805E924: .4byte 0x0000FFFC
_0805E928:
	mov r1, ip
	adds r1, #0x22
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	movs r1, #0
	ldr r0, _0805E958 @ =0x0000FFC0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x30
	strh r0, [r2, #0xc]
	ldr r0, _0805E95C @ =0x0000FFD0
	strh r0, [r2, #0xe]
	movs r0, #0x48
	b _0805EA42
	.align 2, 0
_0805E958: .4byte 0x0000FFC0
_0805E95C: .4byte 0x0000FFD0
_0805E960:
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xb
	strb r0, [r1]
	adds r1, #5
	movs r0, #4
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x28
	strb r0, [r1]
	movs r2, #0
	ldr r1, _0805E9CC @ =0x0000FFFC
	mov r0, ip
	strh r1, [r0, #0xa]
	movs r0, #0x60
	mov r3, ip
	strh r0, [r3, #0xc]
	strh r1, [r3, #0xe]
	movs r0, #0x80
	strh r0, [r3, #0x10]
	mov r1, ip
	adds r1, #0x35
	movs r0, #3
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	ldrh r0, [r3]
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	ldr r1, _0805E9D0 @ =sSecondarySpriteStats
	ldrb r0, [r3, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	strh r1, [r3, #0x14]
	ldr r0, _0805E9D4 @ =gSubSpriteData1
	strh r1, [r0, #0xc]
	mov r0, ip
	adds r0, #0x2e
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x24
	movs r0, #1
	strb r0, [r1]
	b _0805EACE
	.align 2, 0
_0805E9CC: .4byte 0x0000FFFC
_0805E9D0: .4byte sSecondarySpriteStats
_0805E9D4: .4byte gSubSpriteData1
_0805E9D8:
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xd
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r1, #6
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	strb r2, [r0]
	movs r2, #0
	ldr r0, _0805EA10 @ =0x0000FFA0
	mov r1, ip
	strh r0, [r1, #0xa]
	movs r1, #0x20
	mov r3, ip
	strh r1, [r3, #0xc]
	adds r0, #0x50
	strh r0, [r3, #0xe]
	strh r1, [r3, #0x10]
	mov r0, ip
	adds r0, #0x25
	strb r2, [r0]
	b _0805EAA4
	.align 2, 0
_0805EA10: .4byte 0x0000FFA0
_0805EA14:
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xe
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r1, #6
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	strb r2, [r0]
	movs r1, #0
	ldr r0, _0805EA68 @ =0x0000FFA0
	mov r2, ip
	strh r0, [r2, #0xa]
	movs r0, #0x10
	strh r0, [r2, #0xc]
	ldr r0, _0805EA6C @ =0x0000FFF0
	strh r0, [r2, #0xe]
	movs r0, #0x20
_0805EA42:
	strh r0, [r2, #0x10]
	mov r0, ip
	adds r0, #0x25
	strb r1, [r0]
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #8
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #1
	mov r4, ip
	strh r0, [r4, #0x14]
	b _0805EACE
	.align 2, 0
_0805EA68: .4byte 0x0000FFA0
_0805EA6C: .4byte 0x0000FFF0
_0805EA70:
	mov r1, ip
	adds r1, #0x22
	movs r0, #0xf
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r1, #6
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x29
	strb r2, [r0]
	movs r1, #0
	ldr r0, _0805EAC4 @ =0x0000FFC0
	mov r3, ip
	strh r0, [r3, #0xa]
	strh r2, [r3, #0xc]
	adds r0, #0x30
	strh r0, [r3, #0xe]
	movs r0, #0x20
	strh r0, [r3, #0x10]
	mov r0, ip
	adds r0, #0x25
	strb r1, [r0]
_0805EAA4:
	ldrh r0, [r3]
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #1
	strh r0, [r3, #0x14]
	b _0805EACE
	.align 2, 0
_0805EAC4: .4byte 0x0000FFC0
_0805EAC8:
	movs r0, #0
	mov r1, ip
	strh r0, [r1]
_0805EACE:
	bl NightmareSyncSubSprites
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start NightmarePartDying
NightmarePartDying: @ 0x0805EAD8
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _0805EB0C @ =gCurrentSprite
	ldrh r3, [r2]
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	movs r4, #0
	orrs r1, r3
	strh r1, [r2]
	adds r1, r2, #0
	adds r1, #0x25
	strb r4, [r1]
	ldr r3, _0805EB10 @ =gSpriteData
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #0x20
	ldrb r0, [r1]
	adds r2, #0x20
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805EB0C: .4byte gCurrentSprite
_0805EB10: .4byte gSpriteData

	thumb_func_start NightmarePartSpawnBeam
NightmarePartSpawnBeam: @ 0x0805EB14
	push {lr}
	sub sp, #0xc
	ldr r1, _0805EB4C @ =gCurrentSprite
	ldrh r0, [r1, #0x16]
	cmp r0, #0xb
	bne _0805EB44
	ldrb r0, [r1, #0x1c]
	cmp r0, #3
	bne _0805EB44
	ldrb r2, [r1, #0x1f]
	adds r0, r1, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldrh r0, [r1, #2]
	str r0, [sp]
	ldrh r0, [r1, #4]
	subs r0, #0x20
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x81
	movs r1, #0
	bl SpriteSpawnSecondary
_0805EB44:
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
_0805EB4C: .4byte gCurrentSprite

	thumb_func_start NightmarePartRightArmTop
NightmarePartRightArmTop: @ 0x0805EB50
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r4, _0805EB84 @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #2
	beq _0805EB8C
	cmp r0, #0x18
	beq _0805EBC4
	ldr r1, _0805EB88 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805EC0E
	movs r0, #0
	strh r0, [r4]
	b _0805EC0E
	.align 2, 0
_0805EB84: .4byte gCurrentSprite
_0805EB88: .4byte gSpriteData
_0805EB8C:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805EBBC @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _0805EC0E
	ldr r0, _0805EBC0 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0x18
	strb r0, [r1]
	strb r0, [r5]
	b _0805EC0E
	.align 2, 0
_0805EBBC: .4byte gSpriteData
_0805EBC0: .4byte 0x00007FFB
_0805EBC4:
	ldr r1, _0805EC00 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _0805EC04
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #0
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r5]
	b _0805EC0E
	.align 2, 0
_0805EC00: .4byte gSpriteData
_0805EC04:
	cmp r0, #0x20
	bne _0805EC0E
	adds r0, r3, #0
	bl NightmarePartDying
_0805EC0E:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NightmarePartRightArmBottom
NightmarePartRightArmBottom: @ 0x0805EC18
	push {r4, r5, lr}
	sub sp, #0xc
	ldr r4, _0805EC4C @ =gCurrentSprite
	adds r0, r4, #0
	adds r0, #0x23
	ldrb r3, [r0]
	adds r5, r4, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #2
	beq _0805EC54
	cmp r0, #0x18
	beq _0805EC8C
	ldr r1, _0805EC50 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805ECD6
	movs r0, #0
	strh r0, [r4]
	b _0805ECD6
	.align 2, 0
_0805EC4C: .4byte gCurrentSprite
_0805EC50: .4byte gSpriteData
_0805EC54:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805EC84 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	bne _0805ECD6
	ldr r0, _0805EC88 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0x18
	strb r0, [r1]
	strb r0, [r5]
	b _0805ECD6
	.align 2, 0
_0805EC84: .4byte gSpriteData
_0805EC88: .4byte 0x00007FFB
_0805EC8C:
	ldr r1, _0805ECC8 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x22
	bne _0805ECCC
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #4
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r5]
	b _0805ECD6
	.align 2, 0
_0805ECC8: .4byte gSpriteData
_0805ECCC:
	cmp r0, #0x20
	bne _0805ECD6
	adds r0, r3, #0
	bl NightmarePartDying
_0805ECD6:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NightmarePartRightTurret1
NightmarePartRightTurret1: @ 0x0805ECE0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _0805ED04 @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x23
	ldrb r5, [r6]
	adds r7, r0, #0
	adds r7, #0x24
	ldrb r1, [r7]
	adds r4, r0, #0
	cmp r1, #0x18
	beq _0805ED54
	cmp r1, #0x18
	bgt _0805ED08
	cmp r1, #2
	beq _0805ED14
	b _0805EE64
	.align 2, 0
_0805ED04: .4byte gCurrentSprite
_0805ED08:
	cmp r1, #0x1a
	beq _0805EDB0
	cmp r1, #0x1c
	bne _0805ED12
	b _0805EE1C
_0805ED12:
	b _0805EE64
_0805ED14:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805ED4C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0805ED32
	b _0805EE7C
_0805ED32:
	ldr r0, _0805ED50 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x6c
	strb r0, [r1]
	strb r2, [r7]
	b _0805EE7C
	.align 2, 0
_0805ED4C: .4byte gSpriteData
_0805ED50: .4byte 0x00007FFB
_0805ED54:
	ldr r0, _0805ED84 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	beq _0805EDC2
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805ED78
	b _0805EE7C
_0805ED78:
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805ED8C
	ldr r0, _0805ED88 @ =0x083BDBEC
	b _0805ED9A
	.align 2, 0
_0805ED84: .4byte gSpriteData
_0805ED88: .4byte 0x083BDBEC
_0805ED8C:
	cmp r1, #0x1c
	bne _0805ED98
	ldr r0, _0805ED94 @ =0x083BDBEC
	b _0805ED9A
	.align 2, 0
_0805ED94: .4byte 0x083BDBEC
_0805ED98:
	ldr r0, _0805EDAC @ =0x083BD8E4
_0805ED9A:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0805EE7C
	.align 2, 0
_0805EDAC: .4byte 0x083BD8E4
_0805EDB0:
	ldr r0, _0805EDD8 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0805EDE0
_0805EDC2:
	ldr r0, _0805EDDC @ =0x083BD874
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	movs r0, #0x1c
	strb r0, [r7]
	adds r0, r5, #0
	bl NightmarePartDying
	b _0805EE7C
	.align 2, 0
_0805EDD8: .4byte gSpriteData
_0805EDDC: .4byte 0x083BD874
_0805EDE0:
	ldr r1, [r4, #0x18]
	ldr r0, _0805EE10 @ =0x083BD8E4
	cmp r1, r0
	bne _0805EDEC
	bl NightmarePartSpawnBeam
_0805EDEC:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805EE7C
	ldr r0, _0805EE14 @ =0x083BD874
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0805EE18 @ =gBossWork2
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r7]
	b _0805EE7C
	.align 2, 0
_0805EE10: .4byte 0x083BD8E4
_0805EE14: .4byte 0x083BD874
_0805EE18: .4byte gBossWork2
_0805EE1C:
	adds r0, r5, #0
	bl NightmarePartDying
	ldr r0, _0805EE60 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0805EE7C
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #1
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r7]
	b _0805EE7C
	.align 2, 0
_0805EE60: .4byte gSpriteData
_0805EE64:
	ldr r1, _0805EE84 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805EE7C
	movs r0, #0
	strh r0, [r4]
_0805EE7C:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805EE84: .4byte gSpriteData

	thumb_func_start NightmarePartRightTurret2
NightmarePartRightTurret2: @ 0x0805EE88
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _0805EEAC @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x23
	ldrb r5, [r6]
	adds r7, r0, #0
	adds r7, #0x24
	ldrb r1, [r7]
	adds r4, r0, #0
	cmp r1, #0x18
	beq _0805EEFC
	cmp r1, #0x18
	bgt _0805EEB0
	cmp r1, #2
	beq _0805EEBC
	b _0805F00C
	.align 2, 0
_0805EEAC: .4byte gCurrentSprite
_0805EEB0:
	cmp r1, #0x1a
	beq _0805EF58
	cmp r1, #0x1c
	bne _0805EEBA
	b _0805EFC4
_0805EEBA:
	b _0805F00C
_0805EEBC:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805EEF4 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0805EEDA
	b _0805F024
_0805EEDA:
	ldr r0, _0805EEF8 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x68
	strb r0, [r1]
	strb r2, [r7]
	b _0805F024
	.align 2, 0
_0805EEF4: .4byte gSpriteData
_0805EEF8: .4byte 0x00007FFB
_0805EEFC:
	ldr r0, _0805EF2C @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	beq _0805EF6A
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805EF20
	b _0805F024
_0805EF20:
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805EF34
	ldr r0, _0805EF30 @ =0x083BDC64
	b _0805EF42
	.align 2, 0
_0805EF2C: .4byte gSpriteData
_0805EF30: .4byte 0x083BDC64
_0805EF34:
	cmp r1, #0x1c
	bne _0805EF40
	ldr r0, _0805EF3C @ =0x083BDC64
	b _0805EF42
	.align 2, 0
_0805EF3C: .4byte 0x083BDC64
_0805EF40:
	ldr r0, _0805EF54 @ =0x083BD95C
_0805EF42:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0805F024
	.align 2, 0
_0805EF54: .4byte 0x083BD95C
_0805EF58:
	ldr r0, _0805EF80 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0805EF88
_0805EF6A:
	ldr r0, _0805EF84 @ =0x083BD884
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	movs r0, #0x1c
	strb r0, [r7]
	adds r0, r5, #0
	bl NightmarePartDying
	b _0805F024
	.align 2, 0
_0805EF80: .4byte gSpriteData
_0805EF84: .4byte 0x083BD884
_0805EF88:
	ldr r1, [r4, #0x18]
	ldr r0, _0805EFB8 @ =0x083BD95C
	cmp r1, r0
	bne _0805EF94
	bl NightmarePartSpawnBeam
_0805EF94:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805F024
	ldr r0, _0805EFBC @ =0x083BD884
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0805EFC0 @ =gBossWork2
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r7]
	b _0805F024
	.align 2, 0
_0805EFB8: .4byte 0x083BD95C
_0805EFBC: .4byte 0x083BD884
_0805EFC0: .4byte gBossWork2
_0805EFC4:
	adds r0, r5, #0
	bl NightmarePartDying
	ldr r0, _0805F008 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0805F024
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #2
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r7]
	b _0805F024
	.align 2, 0
_0805F008: .4byte gSpriteData
_0805F00C:
	ldr r1, _0805F02C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805F024
	movs r0, #0
	strh r0, [r4]
_0805F024:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F02C: .4byte gSpriteData

	thumb_func_start NightmarePartRightTurret3
NightmarePartRightTurret3: @ 0x0805F030
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _0805F054 @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x23
	ldrb r5, [r6]
	adds r7, r0, #0
	adds r7, #0x24
	ldrb r1, [r7]
	adds r4, r0, #0
	cmp r1, #0x18
	beq _0805F0A4
	cmp r1, #0x18
	bgt _0805F058
	cmp r1, #2
	beq _0805F064
	b _0805F1B0
	.align 2, 0
_0805F054: .4byte gCurrentSprite
_0805F058:
	cmp r1, #0x1a
	beq _0805F0F4
	cmp r1, #0x1c
	bne _0805F062
	b _0805F168
_0805F062:
	b _0805F1B0
_0805F064:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805F09C @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0805F082
	b _0805F1C8
_0805F082:
	ldr r0, _0805F0A0 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x64
	strb r0, [r1]
	strb r2, [r7]
	b _0805F1C8
	.align 2, 0
_0805F09C: .4byte gSpriteData
_0805F0A0: .4byte 0x00007FFB
_0805F0A4:
	ldr r0, _0805F0D4 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	beq _0805F106
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805F0C8
	b _0805F1C8
_0805F0C8:
	ldrb r0, [r1]
	cmp r0, #0x1c
	bne _0805F0DC
	ldr r0, _0805F0D8 @ =0x083BDCDC
	b _0805F0DE
	.align 2, 0
_0805F0D4: .4byte gSpriteData
_0805F0D8: .4byte 0x083BDCDC
_0805F0DC:
	ldr r0, _0805F0F0 @ =0x083BD9D4
_0805F0DE:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0805F1C8
	.align 2, 0
_0805F0F0: .4byte 0x083BD9D4
_0805F0F4:
	ldr r0, _0805F11C @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0805F124
_0805F106:
	ldr r0, _0805F120 @ =0x083BD894
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	movs r0, #0x1c
	strb r0, [r7]
	adds r0, r5, #0
	bl NightmarePartDying
	b _0805F1C8
	.align 2, 0
_0805F11C: .4byte gSpriteData
_0805F120: .4byte 0x083BD894
_0805F124:
	ldr r1, [r4, #0x18]
	ldr r0, _0805F158 @ =0x083BD9D4
	cmp r1, r0
	bne _0805F130
	bl NightmarePartSpawnBeam
_0805F130:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805F1C8
	ldr r0, _0805F15C @ =0x083BD894
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r2, _0805F160 @ =gBossWork2
	ldr r0, _0805F164 @ =gBossWork3
	ldrb r1, [r0]
	strb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r7]
	b _0805F1C8
	.align 2, 0
_0805F158: .4byte 0x083BD9D4
_0805F15C: .4byte 0x083BD894
_0805F160: .4byte gBossWork2
_0805F164: .4byte gBossWork3
_0805F168:
	adds r0, r5, #0
	bl NightmarePartDying
	ldr r0, _0805F1AC @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0805F1C8
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #3
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r7]
	b _0805F1C8
	.align 2, 0
_0805F1AC: .4byte gSpriteData
_0805F1B0:
	ldr r1, _0805F1D0 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805F1C8
	movs r0, #0
	strh r0, [r4]
_0805F1C8:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F1D0: .4byte gSpriteData

	thumb_func_start NightmarePartLeftTurret1
NightmarePartLeftTurret1: @ 0x0805F1D4
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _0805F1F8 @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x23
	ldrb r5, [r6]
	adds r7, r0, #0
	adds r7, #0x24
	ldrb r1, [r7]
	adds r4, r0, #0
	cmp r1, #0x18
	beq _0805F248
	cmp r1, #0x18
	bgt _0805F1FC
	cmp r1, #2
	beq _0805F208
	b _0805F358
	.align 2, 0
_0805F1F8: .4byte gCurrentSprite
_0805F1FC:
	cmp r1, #0x1a
	beq _0805F2A4
	cmp r1, #0x1c
	bne _0805F206
	b _0805F310
_0805F206:
	b _0805F358
_0805F208:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805F240 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0805F226
	b _0805F370
_0805F226:
	ldr r0, _0805F244 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
	strb r2, [r7]
	b _0805F370
	.align 2, 0
_0805F240: .4byte gSpriteData
_0805F244: .4byte 0x00007FFB
_0805F248:
	ldr r0, _0805F278 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	beq _0805F2B6
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805F26C
	b _0805F370
_0805F26C:
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805F280
	ldr r0, _0805F27C @ =0x083BDD54
	b _0805F28E
	.align 2, 0
_0805F278: .4byte gSpriteData
_0805F27C: .4byte 0x083BDD54
_0805F280:
	cmp r1, #0x1c
	bne _0805F28C
	ldr r0, _0805F288 @ =0x083BDD54
	b _0805F28E
	.align 2, 0
_0805F288: .4byte 0x083BDD54
_0805F28C:
	ldr r0, _0805F2A0 @ =0x083BDA4C
_0805F28E:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0805F370
	.align 2, 0
_0805F2A0: .4byte 0x083BDA4C
_0805F2A4:
	ldr r0, _0805F2CC @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0805F2D4
_0805F2B6:
	ldr r0, _0805F2D0 @ =0x083BD8B4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	movs r0, #0x1c
	strb r0, [r7]
	adds r0, r5, #0
	bl NightmarePartDying
	b _0805F370
	.align 2, 0
_0805F2CC: .4byte gSpriteData
_0805F2D0: .4byte 0x083BD8B4
_0805F2D4:
	ldr r1, [r4, #0x18]
	ldr r0, _0805F304 @ =0x083BDA4C
	cmp r1, r0
	bne _0805F2E0
	bl NightmarePartSpawnBeam
_0805F2E0:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805F370
	ldr r0, _0805F308 @ =0x083BD8B4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0805F30C @ =gBossWork2
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r7]
	b _0805F370
	.align 2, 0
_0805F304: .4byte 0x083BDA4C
_0805F308: .4byte 0x083BD8B4
_0805F30C: .4byte gBossWork2
_0805F310:
	adds r0, r5, #0
	bl NightmarePartDying
	ldr r0, _0805F354 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0805F370
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #5
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r7]
	b _0805F370
	.align 2, 0
_0805F354: .4byte gSpriteData
_0805F358:
	ldr r1, _0805F378 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805F370
	movs r0, #0
	strh r0, [r4]
_0805F370:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F378: .4byte gSpriteData

	thumb_func_start NightmarePartLeftTurret2
NightmarePartLeftTurret2: @ 0x0805F37C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _0805F3A0 @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x23
	ldrb r5, [r6]
	adds r7, r0, #0
	adds r7, #0x24
	ldrb r1, [r7]
	adds r4, r0, #0
	cmp r1, #0x18
	beq _0805F3F0
	cmp r1, #0x18
	bgt _0805F3A4
	cmp r1, #2
	beq _0805F3B0
	b _0805F500
	.align 2, 0
_0805F3A0: .4byte gCurrentSprite
_0805F3A4:
	cmp r1, #0x1a
	beq _0805F44C
	cmp r1, #0x1c
	bne _0805F3AE
	b _0805F4B8
_0805F3AE:
	b _0805F500
_0805F3B0:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805F3E8 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0805F3CE
	b _0805F518
_0805F3CE:
	ldr r0, _0805F3EC @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x74
	strb r0, [r1]
	strb r2, [r7]
	b _0805F518
	.align 2, 0
_0805F3E8: .4byte gSpriteData
_0805F3EC: .4byte 0x00007FFB
_0805F3F0:
	ldr r0, _0805F420 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	beq _0805F45E
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805F414
	b _0805F518
_0805F414:
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805F428
	ldr r0, _0805F424 @ =0x083BDDCC
	b _0805F436
	.align 2, 0
_0805F420: .4byte gSpriteData
_0805F424: .4byte 0x083BDDCC
_0805F428:
	cmp r1, #0x1c
	bne _0805F434
	ldr r0, _0805F430 @ =0x083BDDCC
	b _0805F436
	.align 2, 0
_0805F430: .4byte 0x083BDDCC
_0805F434:
	ldr r0, _0805F448 @ =0x083BDAC4
_0805F436:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0805F518
	.align 2, 0
_0805F448: .4byte 0x083BDAC4
_0805F44C:
	ldr r0, _0805F474 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0805F47C
_0805F45E:
	ldr r0, _0805F478 @ =0x083BD8C4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	movs r0, #0x1c
	strb r0, [r7]
	adds r0, r5, #0
	bl NightmarePartDying
	b _0805F518
	.align 2, 0
_0805F474: .4byte gSpriteData
_0805F478: .4byte 0x083BD8C4
_0805F47C:
	ldr r1, [r4, #0x18]
	ldr r0, _0805F4AC @ =0x083BDAC4
	cmp r1, r0
	bne _0805F488
	bl NightmarePartSpawnBeam
_0805F488:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805F518
	ldr r0, _0805F4B0 @ =0x083BD8C4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0805F4B4 @ =gBossWork2
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r7]
	b _0805F518
	.align 2, 0
_0805F4AC: .4byte 0x083BDAC4
_0805F4B0: .4byte 0x083BD8C4
_0805F4B4: .4byte gBossWork2
_0805F4B8:
	adds r0, r5, #0
	bl NightmarePartDying
	ldr r0, _0805F4FC @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0805F518
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #6
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r7]
	b _0805F518
	.align 2, 0
_0805F4FC: .4byte gSpriteData
_0805F500:
	ldr r1, _0805F520 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805F518
	movs r0, #0
	strh r0, [r4]
_0805F518:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F520: .4byte gSpriteData

	thumb_func_start NightmarePartLeftTurret3
NightmarePartLeftTurret3: @ 0x0805F524
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	ldr r0, _0805F548 @ =gCurrentSprite
	adds r6, r0, #0
	adds r6, #0x23
	ldrb r5, [r6]
	adds r7, r0, #0
	adds r7, #0x24
	ldrb r1, [r7]
	adds r4, r0, #0
	cmp r1, #0x18
	beq _0805F598
	cmp r1, #0x18
	bgt _0805F54C
	cmp r1, #2
	beq _0805F558
	b _0805F69C
	.align 2, 0
_0805F548: .4byte gCurrentSprite
_0805F54C:
	cmp r1, #0x1a
	beq _0805F5E8
	cmp r1, #0x1c
	bne _0805F556
	b _0805F654
_0805F556:
	b _0805F69C
_0805F558:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _0805F590 @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0805F576
	b _0805F6B4
_0805F576:
	ldr r0, _0805F594 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r0, r4, #0
	adds r0, #0x25
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x70
	strb r0, [r1]
	strb r2, [r7]
	b _0805F6B4
	.align 2, 0
_0805F590: .4byte gSpriteData
_0805F594: .4byte 0x00007FFB
_0805F598:
	ldr r0, _0805F5C8 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	beq _0805F5FA
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0805F5BC
	b _0805F6B4
_0805F5BC:
	ldrb r0, [r1]
	cmp r0, #0x1c
	bne _0805F5D0
	ldr r0, _0805F5CC @ =0x083BDE44
	b _0805F5D2
	.align 2, 0
_0805F5C8: .4byte gSpriteData
_0805F5CC: .4byte 0x083BDE44
_0805F5D0:
	ldr r0, _0805F5E4 @ =0x083BDB3C
_0805F5D2:
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	b _0805F6B4
	.align 2, 0
_0805F5E4: .4byte 0x083BDB3C
_0805F5E8:
	ldr r0, _0805F610 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0805F618
_0805F5FA:
	ldr r0, _0805F614 @ =0x083BD8D4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	movs r0, #0x1c
	strb r0, [r7]
	adds r0, r5, #0
	bl NightmarePartDying
	b _0805F6B4
	.align 2, 0
_0805F610: .4byte gSpriteData
_0805F614: .4byte 0x083BD8D4
_0805F618:
	ldr r1, [r4, #0x18]
	ldr r0, _0805F648 @ =0x083BDB3C
	cmp r1, r0
	bne _0805F624
	bl NightmarePartSpawnBeam
_0805F624:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	beq _0805F6B4
	ldr r0, _0805F64C @ =0x083BD8D4
	str r0, [r4, #0x18]
	movs r0, #0
	strb r0, [r4, #0x1c]
	strh r0, [r4, #0x16]
	ldr r0, _0805F650 @ =gBossWork2
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r7]
	b _0805F6B4
	.align 2, 0
_0805F648: .4byte 0x083BDB3C
_0805F64C: .4byte 0x083BD8D4
_0805F650: .4byte gBossWork2
_0805F654:
	adds r0, r5, #0
	bl NightmarePartDying
	ldr r0, _0805F698 @ =gSpriteData
	lsls r1, r5, #3
	subs r1, r1, r5
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x22
	bne _0805F6B4
	ldrb r3, [r6]
	ldrh r0, [r4, #2]
	str r0, [sp]
	ldrh r0, [r4, #4]
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	movs r0, #0x49
	movs r1, #7
	movs r2, #0
	bl SpriteSpawnSecondary
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	movs r0, #0x1e
	strb r0, [r7]
	b _0805F6B4
	.align 2, 0
_0805F698: .4byte gSpriteData
_0805F69C:
	ldr r1, _0805F6BC @ =gSpriteData
	lsls r0, r5, #3
	subs r0, r0, r5
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805F6B4
	movs r0, #0
	strh r0, [r4]
_0805F6B4:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F6BC: .4byte gSpriteData

	thumb_func_start NightmarePartEye
NightmarePartEye: @ 0x0805F6C0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r2, _0805F6F8 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r6, [r0]
	adds r0, #0x13
	ldrb r4, [r0]
	ldr r1, _0805F6FC @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r7, [r0, #0x14]
	adds r0, r2, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r1, #0x7f
	ands r1, r0
	cmp r1, #0x10
	bne _0805F704
	ldr r0, _0805F700 @ =0x000002A7
	bl CheckPlayNotAlreadyPlayingSound
	b _0805F70E
	.align 2, 0
_0805F6F8: .4byte gCurrentSprite
_0805F6FC: .4byte gSpriteData
_0805F700: .4byte 0x000002A7
_0805F704:
	cmp r1, #5
	bne _0805F70E
	ldr r0, _0805F72C @ =0x000002AA
	bl CheckPlayNotAlreadyPlayingSound
_0805F70E:
	ldr r1, _0805F730 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #2
	adds r5, r1, #0
	cmp r0, #0x20
	bls _0805F720
	b _0805FAB8
_0805F720:
	lsls r0, r0, #2
	ldr r1, _0805F734 @ =_0805F738
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805F72C: .4byte 0x000002AA
_0805F730: .4byte gCurrentSprite
_0805F734: .4byte _0805F738
_0805F738: @ jump table
	.4byte _0805F7BC @ case 0
	.4byte _0805FAB8 @ case 1
	.4byte _0805FAB8 @ case 2
	.4byte _0805FAB8 @ case 3
	.4byte _0805FAB8 @ case 4
	.4byte _0805FAB8 @ case 5
	.4byte _0805FAB8 @ case 6
	.4byte _0805FAB8 @ case 7
	.4byte _0805FAB8 @ case 8
	.4byte _0805FAB8 @ case 9
	.4byte _0805FAB8 @ case 10
	.4byte _0805FAB8 @ case 11
	.4byte _0805FAB8 @ case 12
	.4byte _0805FAB8 @ case 13
	.4byte _0805FAB8 @ case 14
	.4byte _0805FAB8 @ case 15
	.4byte _0805FAB8 @ case 16
	.4byte _0805FAB8 @ case 17
	.4byte _0805FAB8 @ case 18
	.4byte _0805FAB8 @ case 19
	.4byte _0805FAB8 @ case 20
	.4byte _0805FAB8 @ case 21
	.4byte _0805F81C @ case 22
	.4byte _0805FAB8 @ case 23
	.4byte _0805F860 @ case 24
	.4byte _0805FAB8 @ case 25
	.4byte _0805F8E8 @ case 26
	.4byte _0805FAB8 @ case 27
	.4byte _0805F94C @ case 28
	.4byte _0805FAB8 @ case 29
	.4byte _0805F9D0 @ case 30
	.4byte _0805FAB8 @ case 31
	.4byte _0805FA40 @ case 32
_0805F7BC:
	ldr r0, _0805F808 @ =gSpriteData
	lsls r1, r6, #3
	subs r1, r1, r6
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x1a
	beq _0805F7D0
	b _0805FACC
_0805F7D0:
	ldrh r1, [r5]
	ldr r0, _0805F80C @ =0x0000DFFF
	ands r0, r1
	movs r1, #0
	movs r2, #0
	strh r0, [r5]
	ldr r0, _0805F810 @ =0x083BD5D4
	str r0, [r5, #0x18]
	strb r1, [r5, #0x1c]
	strh r2, [r5, #0x16]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	strh r7, [r5, #0x14]
	ldr r0, _0805F814 @ =gSubSpriteData1
	strh r7, [r0, #0xc]
	ldrh r0, [r5, #2]
	subs r0, #0x80
	ldrh r1, [r5, #4]
	subs r1, #0x50
	movs r2, #0x3a
	bl ParticleSet
	ldr r0, _0805F818 @ =0x000002A9
	bl unk_3b1c
	b _0805FACC
	.align 2, 0
_0805F808: .4byte gSpriteData
_0805F80C: .4byte 0x0000DFFF
_0805F810: .4byte 0x083BD5D4
_0805F814: .4byte gSubSpriteData1
_0805F818: .4byte 0x000002A9
_0805F81C:
	ldr r1, _0805F854 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r6, r0, r1
	adds r0, r5, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x20
	strb r1, [r0]
	ldr r1, _0805F858 @ =gSubSpriteData1
	ldrh r0, [r5, #0x14]
	strh r0, [r1, #0xc]
	ldrh r4, [r1, #0xc]
	lsls r0, r7, #1
	movs r1, #3
	bl __divsi3
	cmp r4, r0
	blt _0805F848
	b _0805FACC
_0805F848:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1a
	strb r0, [r1]
	ldr r0, _0805F85C @ =0x083BD754
	b _0805F920
	.align 2, 0
_0805F854: .4byte gSpriteData
_0805F858: .4byte gSubSpriteData1
_0805F85C: .4byte 0x083BD754
_0805F860:
	ldr r0, _0805F8D4 @ =gSpriteData
	mov sb, r0
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r6, r0, #3
	mov r1, sb
	adds r4, r6, r1
	adds r0, r5, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	movs r2, #0
	mov r8, r2
	strb r1, [r0]
	ldr r1, _0805F8D8 @ =gSubSpriteData1
	ldrh r0, [r5, #0x14]
	movs r7, #0
	strh r0, [r1, #0xc]
	ldrh r0, [r5, #0x16]
	cmp r0, #0
	beq _0805F894
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
_0805F894:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _0805F89E
	b _0805FACC
_0805F89E:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	ldr r0, _0805F8DC @ =0x083BD654
	str r0, [r5, #0x18]
	strb r7, [r5, #0x1c]
	mov r0, r8
	strh r0, [r5, #0x16]
	mov r0, sb
	adds r0, #0x18
	adds r0, r6, r0
	ldr r1, _0805F8E0 @ =0x083BD67C
	str r1, [r0]
	strb r7, [r4, #0x1c]
	mov r1, r8
	strh r1, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _0805F8E4 @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #1
	strb r0, [r1]
	b _0805FACC
	.align 2, 0
_0805F8D4: .4byte gSpriteData
_0805F8D8: .4byte gSubSpriteData1
_0805F8DC: .4byte 0x083BD654
_0805F8E0: .4byte 0x083BD67C
_0805F8E4: .4byte 0x0000FFFB
_0805F8E8:
	ldr r1, _0805F93C @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r6, r0, r1
	adds r0, r5, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x20
	strb r1, [r0]
	ldr r0, _0805F940 @ =gSubSpriteData1
	ldrh r4, [r5, #0x14]
	strh r4, [r0, #0xc]
	adds r0, r7, #0
	movs r1, #3
	bl __udivsi3
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	blo _0805F916
	b _0805FACC
_0805F916:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	ldr r0, _0805F944 @ =0x083BD76C
_0805F920:
	str r0, [r5, #0x18]
	movs r0, #0
	strb r0, [r5, #0x1c]
	movs r0, #0
	strh r0, [r5, #0x16]
	ldrh r0, [r6]
	movs r1, #4
	orrs r0, r1
	strh r0, [r6]
	ldr r0, _0805F948 @ =0x000002AD
	bl SoundPlay
	b _0805FACC
	.align 2, 0
_0805F93C: .4byte gSpriteData
_0805F940: .4byte gSubSpriteData1
_0805F944: .4byte 0x083BD76C
_0805F948: .4byte 0x000002AD
_0805F94C:
	ldr r2, _0805F9BC @ =gSpriteData
	mov sb, r2
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r6, r0, #3
	adds r4, r6, r2
	adds r0, r5, #0
	adds r0, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x20
	movs r2, #0
	mov r8, r2
	strb r1, [r0]
	ldr r1, _0805F9C0 @ =gSubSpriteData1
	ldrh r0, [r5, #0x14]
	movs r7, #0
	strh r0, [r1, #0xc]
	ldrh r0, [r5, #0x16]
	cmp r0, #0
	beq _0805F97E
	adds r1, r5, #0
	adds r1, #0x35
	movs r0, #2
	strb r0, [r1]
_0805F97E:
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _0805F988
	b _0805FACC
_0805F988:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, _0805F9C4 @ =0x083BD6D4
	str r0, [r5, #0x18]
	strb r7, [r5, #0x1c]
	mov r0, r8
	strh r0, [r5, #0x16]
	mov r0, sb
	adds r0, #0x18
	adds r0, r6, r0
	ldr r1, _0805F9C8 @ =0x083BD6FC
	str r1, [r0]
	strb r7, [r4, #0x1c]
	mov r1, r8
	strh r1, [r4, #0x16]
	ldrh r1, [r4]
	ldr r0, _0805F9CC @ =0x0000FFFB
	ands r0, r1
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #2
	strb r0, [r1]
	b _0805FACC
	.align 2, 0
_0805F9BC: .4byte gSpriteData
_0805F9C0: .4byte gSubSpriteData1
_0805F9C4: .4byte 0x083BD6D4
_0805F9C8: .4byte 0x083BD6FC
_0805F9CC: .4byte 0x0000FFFB
_0805F9D0:
	ldr r2, _0805FA38 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r1, r5, #0
	adds r1, #0x20
	ldrb r1, [r1]
	adds r0, #0x20
	strb r1, [r0]
	ldr r1, _0805FA3C @ =gSubSpriteData1
	ldrh r0, [r5, #0x14]
	movs r3, #0
	strh r0, [r1, #0xc]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0805FACC
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x22
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2e
	strb r3, [r0]
	subs r0, #2
	strb r3, [r0]
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r2, r0, r2
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	ldrh r0, [r2]
	movs r4, #0x80
	lsls r4, r4, #8
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x25
	strb r3, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0x50
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	strb r3, [r0]
	b _0805FACC
	.align 2, 0
_0805FA38: .4byte gSpriteData
_0805FA3C: .4byte gSubSpriteData1
_0805FA40:
	adds r2, r5, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	adds r1, r0, #1
	strb r1, [r2]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0805FA76
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0805FA70
	adds r0, r5, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r5, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_0805FA70:
	adds r0, r5, #0
	adds r0, #0x20
	strb r1, [r0]
_0805FA76:
	ldr r2, _0805FAB4 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805FAA0
	adds r1, r5, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x24
	strb r0, [r1]
	ldrh r1, [r5]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r5]
_0805FAA0:
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r1, r5, #0
	adds r1, #0x20
	ldrb r1, [r1]
	adds r0, #0x20
	strb r1, [r0]
	b _0805FACC
	.align 2, 0
_0805FAB4: .4byte gSpriteData
_0805FAB8:
	ldr r0, _0805FAD8 @ =gSpriteData
	lsls r1, r6, #3
	subs r1, r1, r6
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x48
	bne _0805FACC
	movs r0, #0
	strh r0, [r5]
_0805FACC:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805FAD8: .4byte gSpriteData

	thumb_func_start NightmarePartMouth
NightmarePartMouth: @ 0x0805FADC
	push {r4, r5, lr}
	ldr r3, _0805FB0C @ =gCurrentSprite
	adds r0, r3, #0
	adds r0, #0x23
	ldrb r4, [r0]
	adds r5, r3, #0
	adds r5, #0x24
	ldrb r0, [r5]
	cmp r0, #2
	beq _0805FB14
	cmp r0, #0x18
	beq _0805FB54
	ldr r0, _0805FB10 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	ldrb r0, [r1, #0x1d]
	cmp r0, #0x48
	bne _0805FB94
	movs r0, #0
	strh r0, [r3]
	b _0805FB94
	.align 2, 0
_0805FB0C: .4byte gCurrentSprite
_0805FB10: .4byte gSpriteData
_0805FB14:
	ldr r0, _0805FB48 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r4, r1, #0
	adds r4, #0x24
	ldrb r0, [r4]
	cmp r0, #0x1a
	bne _0805FB94
	ldrh r1, [r3]
	ldr r0, _0805FB4C @ =0x0000DFFF
	ands r0, r1
	movs r1, #0
	movs r2, #0
	strh r0, [r3]
	ldr r0, _0805FB50 @ =0x083BD5FC
	str r0, [r3, #0x18]
	strb r1, [r3, #0x1c]
	strh r2, [r3, #0x16]
	movs r0, #0x18
	strb r0, [r5]
	movs r0, #0x1e
	strb r0, [r4]
	b _0805FB94
	.align 2, 0
_0805FB48: .4byte gSpriteData
_0805FB4C: .4byte 0x0000DFFF
_0805FB50: .4byte 0x083BD5FC
_0805FB54:
	ldrh r0, [r3, #0x16]
	cmp r0, #0
	bne _0805FB68
	ldrb r0, [r3, #0x1c]
	cmp r0, #1
	bne _0805FB68
	movs r0, #0xab
	lsls r0, r0, #2
	bl SoundPlay
_0805FB68:
	ldr r1, _0805FB9C @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805FB94
	ldr r2, _0805FBA0 @ =gCurrentSprite
	adds r1, r2, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x24
	strb r0, [r1]
	ldrh r1, [r2]
	movs r0, #0x20
	orrs r0, r1
	strh r0, [r2]
_0805FB94:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805FB9C: .4byte gSpriteData
_0805FBA0: .4byte gCurrentSprite

	thumb_func_start NightmarePartEyeSludge
NightmarePartEyeSludge: @ 0x0805FBA4
	push {r4, r5, r6, lr}
	ldr r2, _0805FBD4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r4, [r0]
	ldr r1, _0805FBD8 @ =sSecondarySpriteStats
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r3, [r0]
	adds r0, r2, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #2
	adds r5, r2, #0
	cmp r0, #0x1c
	bls _0805FBC8
	b _0805FD86
_0805FBC8:
	lsls r0, r0, #2
	ldr r1, _0805FBDC @ =_0805FBE0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805FBD4: .4byte gCurrentSprite
_0805FBD8: .4byte sSecondarySpriteStats
_0805FBDC: .4byte _0805FBE0
_0805FBE0: @ jump table
	.4byte _0805FC54 @ case 0
	.4byte _0805FD86 @ case 1
	.4byte _0805FD86 @ case 2
	.4byte _0805FD86 @ case 3
	.4byte _0805FD86 @ case 4
	.4byte _0805FD86 @ case 5
	.4byte _0805FD86 @ case 6
	.4byte _0805FD86 @ case 7
	.4byte _0805FD86 @ case 8
	.4byte _0805FD86 @ case 9
	.4byte _0805FD86 @ case 10
	.4byte _0805FD86 @ case 11
	.4byte _0805FD86 @ case 12
	.4byte _0805FD86 @ case 13
	.4byte _0805FD86 @ case 14
	.4byte _0805FD86 @ case 15
	.4byte _0805FD86 @ case 16
	.4byte _0805FD86 @ case 17
	.4byte _0805FD86 @ case 18
	.4byte _0805FD86 @ case 19
	.4byte _0805FD86 @ case 20
	.4byte _0805FD86 @ case 21
	.4byte _0805FC90 @ case 22
	.4byte _0805FD86 @ case 23
	.4byte _0805FCC8 @ case 24
	.4byte _0805FD86 @ case 25
	.4byte _0805FD10 @ case 26
	.4byte _0805FD86 @ case 27
	.4byte _0805FD58 @ case 28
_0805FC54:
	ldr r0, _0805FC84 @ =gSubSpriteData1
	ldrh r4, [r0, #0xc]
	lsls r0, r3, #1
	movs r1, #3
	bl __divsi3
	cmp r4, r0
	blt _0805FC66
	b _0805FD9E
_0805FC66:
	ldrh r1, [r5]
	ldr r0, _0805FC88 @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	movs r2, #0
	strh r0, [r5]
	ldr r0, _0805FC8C @ =0x083BD4EC
	str r0, [r5, #0x18]
	strb r1, [r5, #0x1c]
	strh r2, [r5, #0x16]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	b _0805FD00
	.align 2, 0
_0805FC84: .4byte gSubSpriteData1
_0805FC88: .4byte 0x0000FFFB
_0805FC8C: .4byte 0x083BD4EC
_0805FC90:
	ldr r4, _0805FCC0 @ =gSubSpriteData1
	adds r0, r3, #0
	movs r1, #3
	bl __udivsi3
	ldrh r1, [r4, #0xc]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	blo _0805FCA6
	b _0805FD9E
_0805FCA6:
	ldr r0, _0805FCC4 @ =0x083BD51C
	str r0, [r5, #0x18]
	movs r0, #0
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0x78
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #0x1a
	b _0805FD00
	.align 2, 0
_0805FCC0: .4byte gSubSpriteData1
_0805FCC4: .4byte 0x083BD51C
_0805FCC8:
	ldr r0, _0805FCE4 @ =gSubSpriteData1
	ldrh r0, [r0, #0xc]
	cmp r0, #0
	bne _0805FCE8
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0x50
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #0x1c
	b _0805FD00
	.align 2, 0
_0805FCE4: .4byte gSubSpriteData1
_0805FCE8:
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0805FD9E
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	movs r0, #0x78
_0805FD00:
	strb r0, [r1]
	ldr r0, _0805FD0C @ =0x000002AB
	bl SoundPlay
	b _0805FD9E
	.align 2, 0
_0805FD0C: .4byte 0x000002AB
_0805FD10:
	adds r6, r5, #0
	adds r6, #0x2e
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0805FD30
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	movs r0, #0x50
	strb r0, [r6]
	ldr r0, _0805FD50 @ =0x000002AB
	bl SoundPlay
_0805FD30:
	ldr r0, _0805FD54 @ =gSpriteData
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x19
	bne _0805FD9E
	adds r0, r5, #0
	adds r0, #0x24
	movs r1, #0x1e
	strb r1, [r0]
	movs r0, #0x50
	strb r0, [r6]
	b _0805FD9E
	.align 2, 0
_0805FD50: .4byte 0x000002AB
_0805FD54: .4byte gSpriteData
_0805FD58:
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805FD9E
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5]
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x20
	strb r0, [r1]
	b _0805FD9E
_0805FD86:
	ldr r1, _0805FDA4 @ =gSpriteData
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805FD9E
	movs r0, #0
	strh r0, [r5]
_0805FD9E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805FDA4: .4byte gSpriteData

	thumb_func_start NightmarePartChinSludge
NightmarePartChinSludge: @ 0x0805FDA8
	push {r4, r5, r6, lr}
	ldr r2, _0805FDD4 @ =gCurrentSprite
	adds r0, r2, #0
	adds r0, #0x23
	ldrb r3, [r0]
	ldr r1, _0805FDD8 @ =sSecondarySpriteStats
	ldrb r0, [r2, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r6, r2, #0
	adds r6, #0x24
	ldrb r1, [r6]
	adds r5, r2, #0
	cmp r1, #0x18
	beq _0805FE0C
	cmp r1, #0x18
	bgt _0805FDDC
	cmp r1, #2
	beq _0805FDE6
	b _0805FEC0
	.align 2, 0
_0805FDD4: .4byte gCurrentSprite
_0805FDD8: .4byte sSecondarySpriteStats
_0805FDDC:
	cmp r1, #0x1a
	beq _0805FE44
	cmp r1, #0x1c
	beq _0805FE80
	b _0805FEC0
_0805FDE6:
	ldr r4, _0805FE08 @ =gSubSpriteData1
	movs r1, #3
	bl __udivsi3
	ldrh r1, [r4, #0xc]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bhs _0805FED8
	adds r0, r5, #0
	adds r0, #0x2e
	movs r1, #0x78
	strb r1, [r0]
	movs r0, #0x18
	strb r0, [r6]
	b _0805FED8
	.align 2, 0
_0805FE08: .4byte gSubSpriteData1
_0805FE0C:
	adds r3, r5, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _0805FED8
	ldrh r1, [r5]
	ldr r0, _0805FE3C @ =0x0000FFFB
	ands r0, r1
	movs r1, #0
	strh r0, [r5]
	ldr r0, _0805FE40 @ =0x083BD574
	str r0, [r5, #0x18]
	strb r1, [r5, #0x1c]
	strh r2, [r5, #0x16]
	movs r0, #0x1a
	strb r0, [r6]
	movs r0, #0x64
	strb r0, [r3]
	b _0805FED8
	.align 2, 0
_0805FE3C: .4byte 0x0000FFFB
_0805FE40: .4byte 0x083BD574
_0805FE44:
	adds r2, r5, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0805FE5E
	strb r0, [r5, #0x1c]
	strh r0, [r5, #0x16]
	movs r0, #0x64
	strb r0, [r2]
_0805FE5E:
	ldr r0, _0805FE7C @ =gSpriteData
	lsls r1, r3, #3
	subs r1, r1, r3
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x19
	bne _0805FED8
	movs r0, #0x1c
	strb r0, [r6]
	movs r0, #0x50
	strb r0, [r2]
	b _0805FED8
	.align 2, 0
_0805FE7C: .4byte gSpriteData
_0805FE80:
	ldrh r0, [r5]
	movs r1, #4
	eors r0, r1
	strh r0, [r5]
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805FED8
	ldrh r0, [r5]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5]
	movs r0, #0x1e
	strb r0, [r6]
	ldr r1, _0805FEBC @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
	b _0805FED8
	.align 2, 0
_0805FEBC: .4byte gSpriteData
_0805FEC0:
	ldr r1, _0805FEE0 @ =gSpriteData
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0805FED8
	movs r0, #0
	strh r0, [r5]
_0805FED8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805FEE0: .4byte gSpriteData

	thumb_func_start NightmarePartGeneratorUpdateGlowingPalette
NightmarePartGeneratorUpdateGlowingPalette: @ 0x0805FEE4
	push {r4, r5, lr}
	ldr r3, _0805FF24 @ =gCurrentSprite
	movs r0, #0x2e
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	movs r4, #7
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	bne _0805FF14
	ldr r2, _0805FF28 @ =0x083B73DA
	adds r5, r3, #0
	adds r5, #0x2f
	ldrb r1, [r5]
	adds r0, r4, #0
	ands r0, r1
	adds r0, r0, r2
	ldrb r2, [r0]
	adds r0, r3, #0
	adds r0, #0x20
	strb r2, [r0]
	adds r1, #1
	strb r1, [r5]
_0805FF14:
	mov r1, ip
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805FF24: .4byte gCurrentSprite
_0805FF28: .4byte 0x083B73DA

	thumb_func_start NightmarePartGeneratorUpdateDyingPalette
NightmarePartGeneratorUpdateDyingPalette: @ 0x0805FF2C
	push {lr}
	ldr r2, _0805FF6C @ =gCurrentSprite
	adds r3, r2, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r1, r0, #1
	strb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _0805FF66
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0805FF60
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	ldrb r1, [r2, #0x1f]
	adds r0, r0, r1
	movs r1, #0xd
	subs r1, r1, r0
_0805FF60:
	adds r0, r2, #0
	adds r0, #0x20
	strb r1, [r0]
_0805FF66:
	pop {r0}
	bx r0
	.align 2, 0
_0805FF6C: .4byte gCurrentSprite

	thumb_func_start NightmarePartGenerator
NightmarePartGenerator: @ 0x0805FF70
	push {r4, r5, r6, r7, lr}
	ldr r0, _0805FF90 @ =gCurrentSprite
	adds r1, r0, #0
	adds r1, #0x23
	ldrb r6, [r1]
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r1, #0x7f
	ands r1, r0
	cmp r1, #0x10
	bne _0805FF98
	ldr r0, _0805FF94 @ =0x000002A7
	bl CheckPlayNotAlreadyPlayingSound
	b _0805FFA2
	.align 2, 0
_0805FF90: .4byte gCurrentSprite
_0805FF94: .4byte 0x000002A7
_0805FF98:
	cmp r1, #5
	bne _0805FFA2
	ldr r0, _0805FFC0 @ =0x000002AA
	bl CheckPlayNotAlreadyPlayingSound
_0805FFA2:
	ldr r1, _0805FFC4 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	subs r0, #1
	adds r4, r1, #0
	cmp r0, #0x1f
	bls _0805FFB4
	b _08060330
_0805FFB4:
	lsls r0, r0, #2
	ldr r1, _0805FFC8 @ =_0805FFCC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805FFC0: .4byte 0x000002AA
_0805FFC4: .4byte gCurrentSprite
_0805FFC8: .4byte _0805FFCC
_0805FFCC: @ jump table
	.4byte _0806004C @ case 0
	.4byte _08060088 @ case 1
	.4byte _08060330 @ case 2
	.4byte _08060330 @ case 3
	.4byte _08060330 @ case 4
	.4byte _08060330 @ case 5
	.4byte _08060330 @ case 6
	.4byte _08060330 @ case 7
	.4byte _08060330 @ case 8
	.4byte _08060330 @ case 9
	.4byte _08060330 @ case 10
	.4byte _08060330 @ case 11
	.4byte _08060330 @ case 12
	.4byte _08060330 @ case 13
	.4byte _08060330 @ case 14
	.4byte _08060330 @ case 15
	.4byte _08060330 @ case 16
	.4byte _08060330 @ case 17
	.4byte _08060330 @ case 18
	.4byte _08060330 @ case 19
	.4byte _08060330 @ case 20
	.4byte _08060330 @ case 21
	.4byte _08060330 @ case 22
	.4byte _0806010C @ case 23
	.4byte _08060330 @ case 24
	.4byte _08060188 @ case 25
	.4byte _08060330 @ case 26
	.4byte _080601F4 @ case 27
	.4byte _08060330 @ case 28
	.4byte _0806029C @ case 29
	.4byte _08060330 @ case 30
	.4byte _080602C4 @ case 31
_0806004C:
	ldrh r1, [r4]
	movs r0, #4
	adds r2, r1, #0
	eors r2, r0
	strh r2, [r4]
	ldr r1, _08060080 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3a
	beq _0806006A
	b _08060348
_0806006A:
	ldr r0, _08060084 @ =0x00007FFB
	ands r2, r0
	strh r2, [r4]
	adds r1, r4, #0
	adds r1, #0x25
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #1
	movs r0, #2
	strb r0, [r1]
	b _08060348
	.align 2, 0
_08060080: .4byte gSpriteData
_08060084: .4byte 0x00007FFB
_08060088:
	bl NightmarePartGeneratorUpdateGlowingPalette
	ldr r2, _080600EC @ =gSubSpriteData1
	ldr r5, _080600F0 @ =gCurrentSprite
	ldrh r0, [r5, #0x14]
	movs r7, #0
	strh r0, [r2, #0xc]
	ldr r1, _080600F4 @ =sSecondarySpriteStats
	ldrb r0, [r5, #0x1d]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r0, [r0]
	ldrh r4, [r2, #0xc]
	lsls r0, r0, #2
	movs r1, #5
	bl __divsi3
	cmp r4, r0
	blt _080600B0
	b _08060348
_080600B0:
	adds r1, r5, #0
	adds r1, #0x24
	movs r0, #0x18
	strb r0, [r1]
	ldr r0, _080600F8 @ =0x083BD844
	str r0, [r5, #0x18]
	strb r7, [r5, #0x1c]
	movs r0, #0
	strh r0, [r5, #0x16]
	adds r0, r5, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldr r1, _080600FC @ =gSamusPhysics
	movs r0, #0x80
	strb r0, [r1]
	ldr r1, _08060100 @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	movs r1, #0x3b
	strb r1, [r0]
	ldr r1, _08060104 @ =gBossWork3
	movs r0, #0x3c
	strb r0, [r1]
	ldr r0, _08060108 @ =0x000002A5
	bl SoundPlay
	b _08060348
	.align 2, 0
_080600EC: .4byte gSubSpriteData1
_080600F0: .4byte gCurrentSprite
_080600F4: .4byte sSecondarySpriteStats
_080600F8: .4byte 0x083BD844
_080600FC: .4byte gSamusPhysics
_08060100: .4byte gSpriteData
_08060104: .4byte gBossWork3
_08060108: .4byte 0x000002A5
_0806010C:
	bl NightmareMakeMissilesFall
	bl NightmarePartGeneratorUpdateGlowingPalette
	ldr r0, _0806013C @ =gSubSpriteData1
	ldr r4, _08060140 @ =gCurrentSprite
	ldrh r1, [r4, #0x14]
	strh r1, [r0, #0xc]
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _08060126
	b _08060348
_08060126:
	movs r0, #0
	strb r0, [r4, #0x1c]
	movs r0, #0
	strh r0, [r4, #0x16]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0
	bne _08060148
	ldr r0, _08060144 @ =0x083BD824
	b _0806017A
	.align 2, 0
_0806013C: .4byte gSubSpriteData1
_08060140: .4byte gCurrentSprite
_08060144: .4byte 0x083BD824
_08060148:
	cmp r0, #1
	bne _08060154
	ldr r0, _08060150 @ =0x083BD804
	b _0806017A
	.align 2, 0
_08060150: .4byte 0x083BD804
_08060154:
	cmp r0, #2
	bne _08060160
	ldr r0, _0806015C @ =0x083BD7E4
	b _0806017A
	.align 2, 0
_0806015C: .4byte 0x083BD7E4
_08060160:
	cmp r0, #3
	beq _08060178
	adds r0, r4, #0
	adds r0, #0x24
	movs r1, #0x1a
	strb r1, [r0]
	ldr r0, _08060174 @ =0x083BD7A4
	str r0, [r4, #0x18]
	b _08060348
	.align 2, 0
_08060174: .4byte 0x083BD7A4
_08060178:
	ldr r0, _08060180 @ =0x083BD7C4
_0806017A:
	str r0, [r4, #0x18]
	ldr r1, _08060184 @ =gCurrentSprite
	b _0806028E
	.align 2, 0
_08060180: .4byte 0x083BD7C4
_08060184: .4byte gCurrentSprite
_08060188:
	bl NightmareMakeMissilesFall
	bl NightmarePartGeneratorUpdateGlowingPalette
	ldr r1, _080601DC @ =gSubSpriteData1
	ldr r2, _080601E0 @ =gCurrentSprite
	ldrh r0, [r2, #0x14]
	movs r3, #0
	strh r0, [r1, #0xc]
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _080601A4
	b _08060348
_080601A4:
	adds r1, r2, #0
	adds r1, #0x24
	movs r0, #0x1c
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2e
	strb r3, [r0]
	subs r0, #1
	strb r3, [r0]
	ldr r0, _080601E4 @ =0x083BD7C4
	str r0, [r2, #0x18]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	ldr r2, _080601E8 @ =0x080A8CDC
	ldr r0, _080601EC @ =0x080A8D3C
	ldr r1, _080601F0 @ =0x0000152C
	adds r0, r0, r1
	ldrh r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	movs r1, #0x78
	bl ApplyMusicSoundFading
	b _08060348
	.align 2, 0
_080601DC: .4byte gSubSpriteData1
_080601E0: .4byte gCurrentSprite
_080601E4: .4byte 0x083BD7C4
_080601E8: .4byte 0x080A8CDC
_080601EC: .4byte 0x080A8D3C
_080601F0: .4byte 0x0000152C
_080601F4:
	bl NightmareMakeMissilesFall
	bl NightmarePartGeneratorUpdateDyingPalette
	bl SpriteUtilCheckEndOfCurrentSpriteAnimation
	cmp r0, #0
	bne _08060206
	b _08060348
_08060206:
	ldr r1, _08060220 @ =gCurrentSprite
	movs r0, #0
	strb r0, [r1, #0x1c]
	movs r3, #0
	strh r0, [r1, #0x16]
	adds r2, r1, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	adds r4, r1, #0
	cmp r0, #0
	bne _08060228
	ldr r0, _08060224 @ =0x083BD7E4
	b _0806028A
	.align 2, 0
_08060220: .4byte gCurrentSprite
_08060224: .4byte 0x083BD7E4
_08060228:
	cmp r0, #1
	bne _08060234
	ldr r0, _08060230 @ =0x083BD804
	b _0806028A
	.align 2, 0
_08060230: .4byte 0x083BD804
_08060234:
	cmp r0, #2
	bne _08060240
	ldr r0, _0806023C @ =0x083BD824
	b _0806028A
	.align 2, 0
_0806023C: .4byte 0x083BD824
_08060240:
	cmp r0, #3
	beq _08060288
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x1e
	strb r0, [r1]
	ldr r0, _08060278 @ =0x083BD794
	str r0, [r4, #0x18]
	movs r0, #0x3c
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x25
	strb r3, [r0]
	ldr r1, _0806027C @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	adds r0, #0x24
	movs r1, #0x17
	strb r1, [r0]
	ldr r0, _08060280 @ =gSamusPhysics
	strb r3, [r0]
	ldr r1, _08060284 @ =gBossWork3
	movs r0, #0x64
	strb r0, [r1]
	b _08060348
	.align 2, 0
_08060278: .4byte 0x083BD794
_0806027C: .4byte gSpriteData
_08060280: .4byte gSamusPhysics
_08060284: .4byte gBossWork3
_08060288:
	ldr r0, _08060298 @ =0x083BD844
_0806028A:
	str r0, [r4, #0x18]
	adds r1, r4, #0
_0806028E:
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _08060348
	.align 2, 0
_08060298: .4byte 0x083BD844
_0806029C:
	bl NightmarePartGeneratorUpdateDyingPalette
	ldr r0, _080602BC @ =gSpriteData
	lsls r1, r6, #3
	subs r1, r1, r6
	lsls r1, r1, #3
	adds r1, r1, r0
	adds r1, #0x24
	ldrb r0, [r1]
	cmp r0, #0x19
	bne _08060348
	ldr r0, _080602C0 @ =gCurrentSprite
	adds r0, #0x24
	movs r1, #0x20
	strb r1, [r0]
	b _08060348
	.align 2, 0
_080602BC: .4byte gSpriteData
_080602C0: .4byte gCurrentSprite
_080602C4:
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x1d
	bhi _08060306
	ldrh r0, [r4]
	movs r1, #4
	eors r1, r0
	strh r1, [r4]
	ldrb r0, [r2]
	cmp r0, #0
	bne _08060348
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r1, r0
	strh r1, [r4]
	adds r1, r4, #0
	adds r1, #0x24
	movs r0, #0x22
	strb r0, [r1]
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	adds r1, #0x50
	movs r2, #0x30
	bl ParticleSet
	b _08060348
_08060306:
	cmp r0, #0x1e
	bne _0806032A
	ldrh r0, [r4, #2]
	adds r0, #0x40
	ldrh r1, [r4, #4]
	adds r1, #0x40
	movs r2, #0x3a
	bl ParticleSet
	adds r1, r4, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	movs r0, #0xaa
	lsls r0, r0, #2
	bl unk_3b1c
	b _08060348
_0806032A:
	bl NightmarePartGeneratorUpdateDyingPalette
	b _08060348
_08060330:
	ldr r1, _0806035C @ =gSpriteData
	lsls r0, r6, #3
	subs r0, r0, r6
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08060348
	movs r0, #0
	strh r0, [r4]
_08060348:
	ldr r0, _08060360 @ =gSamusPhysics
	ldrb r0, [r0]
	cmp r0, #0x80
	bne _08060354
	bl NightmareReduceSamusXVelocity
_08060354:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806035C: .4byte gSpriteData
_08060360: .4byte gSamusPhysics

	thumb_func_start NightmareBeamInit
NightmareBeamInit: @ 0x08060364
	push {r4, r5, lr}
	ldr r0, _080603DC @ =gCurrentSprite
	mov ip, r0
	ldrh r0, [r0]
	ldr r1, _080603E0 @ =0x0000FFFB
	ands r1, r0
	movs r4, #0
	movs r5, #0
	mov r3, ip
	adds r3, #0x34
	ldrb r2, [r3]
	movs r0, #4
	orrs r0, r2
	strb r0, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	orrs r1, r0
	mov r0, ip
	strh r1, [r0]
	adds r0, #0x27
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r2, ip
	adds r2, #0x29
	movs r0, #0x10
	strb r0, [r2]
	ldr r0, _080603E4 @ =0x0000FFF8
	mov r2, ip
	strh r0, [r2, #0xa]
	strh r1, [r2, #0xc]
	subs r0, #0x18
	strh r0, [r2, #0xe]
	movs r0, #0x20
	strh r0, [r2, #0x10]
	ldr r0, _080603E8 @ =0x083BD59C
	str r0, [r2, #0x18]
	strb r4, [r2, #0x1c]
	strh r5, [r2, #0x16]
	mov r0, ip
	adds r0, #0x24
	movs r1, #2
	strb r1, [r0]
	adds r2, #0x22
	movs r0, #3
	strb r0, [r2]
	adds r2, #3
	movs r0, #0x18
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x35
	strb r1, [r0]
	ldr r0, _080603EC @ =0x000002A2
	bl SoundPlay
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080603DC: .4byte gCurrentSprite
_080603E0: .4byte 0x0000FFFB
_080603E4: .4byte 0x0000FFF8
_080603E8: .4byte 0x083BD59C
_080603EC: .4byte 0x000002A2

	thumb_func_start NightmareBeamMoving
NightmareBeamMoving: @ 0x080603F0
	ldr r1, _080603FC @ =gCurrentSprite
	ldrh r0, [r1, #4]
	subs r0, #0x14
	strh r0, [r1, #4]
	bx lr
	.align 2, 0
_080603FC: .4byte gCurrentSprite

	thumb_func_start NightmareFallingArmInit
NightmareFallingArmInit: @ 0x08060400
	push {r4, lr}
	ldr r0, _08060474 @ =gCurrentSprite
	mov ip, r0
	ldrh r1, [r0]
	ldr r0, _08060478 @ =0x0000FFFB
	ands r0, r1
	movs r3, #0
	movs r4, #0
	mov r1, ip
	strh r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x22
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0806047C @ =gIoRegisters
	ldrb r1, [r0, #0xa]
	movs r0, #3
	ands r0, r1
	mov r1, ip
	adds r1, #0x21
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x25
	strb r3, [r0]
	ldr r1, _08060480 @ =0x0000FFFC
	mov r2, ip
	strh r1, [r2, #0xa]
	movs r0, #4
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strh r0, [r2, #0x10]
	strb r3, [r2, #0x1c]
	strh r4, [r2, #0x16]
	mov r1, ip
	adds r1, #0x24
	movs r0, #2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x31
	strb r3, [r0]
	strh r4, [r2, #0x14]
	ldrb r0, [r2, #0x1e]
	mov r3, ip
	cmp r0, #7
	bls _08060468
	b _080605CC
_08060468:
	lsls r0, r0, #2
	ldr r1, _08060484 @ =_08060488
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08060474: .4byte gCurrentSprite
_08060478: .4byte 0x0000FFFB
_0806047C: .4byte gIoRegisters
_08060480: .4byte 0x0000FFFC
_08060484: .4byte _08060488
_08060488: @ jump table
	.4byte _080604A8 @ case 0
	.4byte _080604D4 @ case 1
	.4byte _080604DC @ case 2
	.4byte _080604FC @ case 3
	.4byte _0806051C @ case 4
	.4byte _08060548 @ case 5
	.4byte _08060574 @ case 6
	.4byte _080605A0 @ case 7
_080604A8:
	ldr r0, _080604D0 @ =0x083BD864
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x18
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x28
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x30
	movs r0, #2
	strb r0, [r1]
	subs r1, #2
	movs r0, #0xa
	strb r0, [r1]
	b _080605D0
	.align 2, 0
_080604D0: .4byte 0x083BD864
_080604D4:
	ldr r0, _080604D8 @ =0x083BD874
	b _0806054A
	.align 2, 0
_080604D8: .4byte 0x083BD874
_080604DC:
	ldr r0, _080604F8 @ =0x083BD884
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #7
	b _08060590
	.align 2, 0
_080604F8: .4byte 0x083BD884
_080604FC:
	ldr r0, _08060518 @ =0x083BD894
	str r0, [r3, #0x18]
	adds r1, r3, #0
	adds r1, #0x27
	movs r0, #0x1c
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #7
	b _080605BC
	.align 2, 0
_08060518: .4byte 0x083BD894
_0806051C:
	ldr r0, _08060544 @ =0x083BD8A4
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x29
	movs r0, #0x18
	strb r0, [r1]
	adds r1, #7
	movs r0, #6
	strb r0, [r1]
	subs r1, #2
	movs r0, #2
	strb r0, [r1]
	b _080605D0
	.align 2, 0
_08060544: .4byte 0x083BD8A4
_08060548:
	ldr r0, _08060570 @ =0x083BD8B4
_0806054A:
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r1, #0x18
	strb r1, [r0]
	adds r0, #1
	movs r2, #8
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x30
	movs r0, #3
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r2, [r0]
	b _080605D0
	.align 2, 0
_08060570: .4byte 0x083BD8B4
_08060574:
	ldr r0, _0806059C @ =0x083BD8C4
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x28
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x29
	strb r2, [r0]
	adds r1, #8
_08060590:
	movs r0, #4
	strb r0, [r1]
	subs r1, #2
	movs r0, #6
	strb r0, [r1]
	b _080605D0
	.align 2, 0
_0806059C: .4byte 0x083BD8C4
_080605A0:
	ldr r0, _080605C8 @ =0x083BD8D4
	str r0, [r3, #0x18]
	adds r0, r3, #0
	adds r0, #0x27
	movs r2, #0x18
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x28
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x29
	strb r2, [r0]
	adds r1, #8
_080605BC:
	movs r0, #5
	strb r0, [r1]
	subs r1, #2
	movs r0, #4
	strb r0, [r1]
	b _080605D0
	.align 2, 0
_080605C8: .4byte 0x083BD8D4
_080605CC:
	mov r0, ip
	strh r4, [r0]
_080605D0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NightmareFallingArmMoving
NightmareFallingArmMoving: @ 0x080605D8
	push {r4, r5, r6, lr}
	ldr r1, _0806060C @ =gCurrentSprite
	adds r3, r1, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, r1, #0
	cmp r0, #0
	beq _0806061E
	subs r0, #1
	strb r0, [r3]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806067A
	ldrb r0, [r2, #0x1e]
	cmp r0, #0
	beq _080605FC
	cmp r0, #5
	bne _08060610
_080605FC:
	ldrh r0, [r2, #2]
	subs r0, #0x50
	ldrh r1, [r2, #4]
	movs r2, #0x3a
	bl ParticleSet
	b _0806067A
	.align 2, 0
_0806060C: .4byte gCurrentSprite
_08060610:
	ldrh r0, [r2, #2]
	subs r0, #0x50
	ldrh r1, [r2, #4]
	movs r2, #0x22
	bl ParticleSet
	b _0806067A
_0806061E:
	movs r0, #0x31
	adds r0, r0, r2
	mov ip, r0
	ldrb r3, [r0]
	ldr r5, _08060648 @ =sSpritesFallingSpeedFast
	lsls r0, r3, #1
	adds r0, r0, r5
	ldrh r4, [r0]
	movs r6, #0
	ldrsh r1, [r0, r6]
	ldr r0, _0806064C @ =0x00007FFF
	cmp r1, r0
	bne _08060650
	subs r1, r3, #1
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r0, [r2, #2]
	ldrh r1, [r1]
	adds r0, r0, r1
	b _0806065A
	.align 2, 0
_08060648: .4byte sSpritesFallingSpeedFast
_0806064C: .4byte 0x00007FFF
_08060650:
	adds r0, r3, #1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r2, #2]
	adds r0, r0, r4
_0806065A:
	strh r0, [r2, #2]
	ldrb r0, [r2, #0x1e]
	cmp r0, #4
	bhi _0806066E
	adds r1, r2, #0
	adds r1, #0x30
	ldrh r0, [r2, #4]
	ldrb r1, [r1]
	adds r0, r0, r1
	b _08060678
_0806066E:
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r1, [r0]
	ldrh r0, [r2, #4]
	subs r0, r0, r1
_08060678:
	strh r0, [r2, #4]
_0806067A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start Nightmare
Nightmare: @ 0x08060680
	push {lr}
	ldr r0, _08060698 @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0x3b
	bls _0806068E
	b _080607EE
_0806068E:
	lsls r0, r0, #2
	ldr r1, _0806069C @ =_080606A0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08060698: .4byte gCurrentSprite
_0806069C: .4byte _080606A0
_080606A0: @ jump table
	.4byte _08060790 @ case 0
	.4byte _080607B2 @ case 1
	.4byte _080607B8 @ case 2
	.4byte _080607EE @ case 3
	.4byte _080607EE @ case 4
	.4byte _080607EE @ case 5
	.4byte _080607EE @ case 6
	.4byte _080607EE @ case 7
	.4byte _080607EE @ case 8
	.4byte _080607EE @ case 9
	.4byte _080607EE @ case 10
	.4byte _080607EE @ case 11
	.4byte _080607EE @ case 12
	.4byte _080607EE @ case 13
	.4byte _080607EE @ case 14
	.4byte _080607EE @ case 15
	.4byte _080607EE @ case 16
	.4byte _080607EE @ case 17
	.4byte _080607EE @ case 18
	.4byte _080607EE @ case 19
	.4byte _080607EE @ case 20
	.4byte _080607EE @ case 21
	.4byte _080607EE @ case 22
	.4byte _080607BE @ case 23
	.4byte _080607C2 @ case 24
	.4byte _080607C8 @ case 25
	.4byte _080607CE @ case 26
	.4byte _080607D4 @ case 27
	.4byte _080607D8 @ case 28
	.4byte _080607EE @ case 29
	.4byte _080607DE @ case 30
	.4byte _080607EE @ case 31
	.4byte _080607E4 @ case 32
	.4byte _080607EE @ case 33
	.4byte _080607EA @ case 34
	.4byte _080607EE @ case 35
	.4byte _080607EE @ case 36
	.4byte _080607EE @ case 37
	.4byte _080607EE @ case 38
	.4byte _080607EE @ case 39
	.4byte _080607EE @ case 40
	.4byte _080607EE @ case 41
	.4byte _080607EE @ case 42
	.4byte _080607EE @ case 43
	.4byte _080607EE @ case 44
	.4byte _080607EE @ case 45
	.4byte _080607EE @ case 46
	.4byte _080607EE @ case 47
	.4byte _080607EE @ case 48
	.4byte _080607EE @ case 49
	.4byte _080607EE @ case 50
	.4byte _080607EE @ case 51
	.4byte _080607EE @ case 52
	.4byte _080607EE @ case 53
	.4byte _080607EE @ case 54
	.4byte _08060796 @ case 55
	.4byte _0806079C @ case 56
	.4byte _080607A2 @ case 57
	.4byte _080607A6 @ case 58
	.4byte _080607AC @ case 59
_08060790:
	bl NightmareInit
	b _080607EE
_08060796:
	bl NightmareWaitingToAppear
	b _080607EE
_0806079C:
	bl NightmareAppearing
	b _080607EE
_080607A2:
	bl NightmarePhase1Init
_080607A6:
	bl NightmarePhase1
	b _080607EE
_080607AC:
	bl NightmarePhase2ResettingPosition
	b _080607EE
_080607B2:
	bl NightmarePhase2MovementInit
	b _080607EE
_080607B8:
	bl NightmarePhase2Movement
	b _080607EE
_080607BE:
	bl NightmareMovingToPhase3Init
_080607C2:
	bl NightmareMovingToPhase3
	b _080607EE
_080607C8:
	bl NightmareReachedPhase3Position
	b _080607EE
_080607CE:
	bl NightmarePhase3SlotMovementInit
	b _080607EE
_080607D4:
	bl NightmarePhase3FastMovementInit
_080607D8:
	bl NightmarePhase3FastMovement
	b _080607EE
_080607DE:
	bl NightmarePhase3SlowMovement
	b _080607EE
_080607E4:
	bl NightmareMovingToDeathPosition
	b _080607EE
_080607EA:
	bl NightmareTurningIntoCoreX
_080607EE:
	bl NightmarePlaySound
	bl UpdateSubSpriteData1Animation
	bl NightmareSyncSubSprites
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NigthmarePart
NigthmarePart: @ 0x08060800
	push {lr}
	ldr r1, _08060814 @ =gCurrentSprite
	adds r0, r1, #0
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	bne _08060818
	bl NightmarePartInit
	b _080608E4
	.align 2, 0
_08060814: .4byte gCurrentSprite
_08060818:
	ldrb r0, [r1, #0x1e]
	cmp r0, #0xd
	bhi _080608E4
	lsls r0, r0, #2
	ldr r1, _08060828 @ =_0806082C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08060828: .4byte _0806082C
_0806082C: @ jump table
	.4byte _08060878 @ case 0
	.4byte _0806086E @ case 1
	.4byte _08060882 @ case 2
	.4byte _0806088C @ case 3
	.4byte _080608D2 @ case 4
	.4byte _08060896 @ case 5
	.4byte _080608A0 @ case 6
	.4byte _080608AA @ case 7
	.4byte _080608DC @ case 8
	.4byte _08060864 @ case 9
	.4byte _080608E4 @ case 10
	.4byte _080608B4 @ case 11
	.4byte _080608BE @ case 12
	.4byte _080608C8 @ case 13
_08060864:
	bl NightmarePartGenerator
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_0806086E:
	bl NightmarePartEyeSludge
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_08060878:
	bl NightmarePartChinSludge
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_08060882:
	bl NightmarePartEye
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_0806088C:
	bl NightmarePartMouth
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_08060896:
	bl NightmarePartRightTurret1
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_080608A0:
	bl NightmarePartRightTurret2
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_080608AA:
	bl NightmarePartRightTurret3
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_080608B4:
	bl NightmarePartLeftTurret1
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_080608BE:
	bl NightmarePartLeftTurret2
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_080608C8:
	bl NightmarePartLeftTurret3
	bl SyncCurrentSpritePositionWithSubSprite1Position
	b _080608E4
_080608D2:
	bl NightmarePartRightArmTop
	bl NightmareSyncSubSprites
	b _080608E4
_080608DC:
	bl NightmarePartRightArmBottom
	bl NightmareSyncSubSprites
_080608E4:
	pop {r0}
	bx r0

	thumb_func_start NightmareBeam
NightmareBeam: @ 0x080608E8
	push {lr}
	ldr r0, _080608FC @ =gCurrentSprite
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08060900
	cmp r0, #2
	beq _08060906
	b _0806090A
	.align 2, 0
_080608FC: .4byte gCurrentSprite
_08060900:
	bl NightmareBeamInit
	b _0806090A
_08060906:
	bl NightmareBeamMoving
_0806090A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start NightmareFallingArm
NightmareFallingArm: @ 0x08060910
	push {lr}
	ldr r0, _0806092C @ =gCurrentSprite
	adds r2, r0, #0
	adds r2, #0x26
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x24
	ldrb r0, [r0]
	cmp r0, #0
	beq _08060930
	cmp r0, #2
	beq _08060936
	b _0806093A
	.align 2, 0
_0806092C: .4byte gCurrentSprite
_08060930:
	bl NightmareFallingArmInit
	b _0806093A
_08060936:
	bl NightmareFallingArmMoving
_0806093A:
	pop {r0}
	bx r0
	.align 2, 0
